
light_data_deployer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c70c  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b10  0800c8d0  0800c8d0  0000d8d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d3e0  0800d3e0  000175f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d3e0  0800d3e0  0000e3e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d3e8  0800d3e8  000175f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d3e8  0800d3e8  0000e3e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d3ec  0800d3ec  0000e3ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800d3f0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .neai         00008410  200001e8  0800d5d8  0000f1e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000181c  200085f8  080159e8  000175f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20009e14  080159e8  00017e14  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000175f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000141db  00000000  00000000  00017628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029d4  00000000  00000000  0002b803  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a0  00000000  00000000  0002e1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ceb  00000000  00000000  0002f278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bffd  00000000  00000000  0002ff63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000158f5  00000000  00000000  0005bf60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001071b3  00000000  00000000  00071855  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000087  00000000  00000000  00178a08  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005e58  00000000  00000000  00178a90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  0017e8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200085f8 	.word	0x200085f8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800c8b4 	.word	0x0800c8b4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200085fc 	.word	0x200085fc
 80001fc:	0800c8b4 	.word	0x0800c8b4

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <transmit_char>:
/**
 * Transmission and reception macros
 */

#ifndef USE_ITM
	static void transmit_char(char ch){
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Transmit(&UART_HANDLE, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800103e:	1df9      	adds	r1, r7, #7
 8001040:	f04f 33ff 	mov.w	r3, #4294967295
 8001044:	2201      	movs	r2, #1
 8001046:	4803      	ldr	r0, [pc, #12]	@ (8001054 <transmit_char+0x20>)
 8001048:	f005 f90e 	bl	8006268 <HAL_UART_Transmit>
	}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	200086d0 	.word	0x200086d0

08001058 <receive_char>:
	static char receive_char(){
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
		char ch;
		HAL_UART_Receive(&UART_HANDLE, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800105e:	1df9      	adds	r1, r7, #7
 8001060:	f04f 33ff 	mov.w	r3, #4294967295
 8001064:	2201      	movs	r2, #1
 8001066:	4804      	ldr	r0, [pc, #16]	@ (8001078 <receive_char+0x20>)
 8001068:	f005 f98c 	bl	8006384 <HAL_UART_Receive>
		return ch;
 800106c:	79fb      	ldrb	r3, [r7, #7]
	}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	200086d0 	.word	0x200086d0

0800107c <__io_putchar>:
/**
 * @brief PUTCHAR_PROTOTYPE function, called from printf
 * @param ch 	: Char to be written to console
 * @return
 */
PUTCHAR_PROTOTYPE{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]

	transmit_char((char) ch);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	b2db      	uxtb	r3, r3
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ffd3 	bl	8001034 <transmit_char>

	return 0;
 800108e:	2300      	movs	r3, #0
}
 8001090:	4618      	mov	r0, r3
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <__io_getchar>:
/**
 * @brief GETCHAR_PROTOTYPE function, called from scanf
 * @return read out character
 */
GETCHAR_PROTOTYPE{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
	char ch;

	ch = receive_char();
 800109e:	f7ff ffdb 	bl	8001058 <receive_char>
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
	transmit_char(ch);
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ffc3 	bl	8001034 <transmit_char>

	return (int)ch;
 80010ae:	79fb      	ldrb	r3, [r7, #7]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <BH1750_Init>:
// Error Status
HAL_StatusTypeDef Transmit_Err, Receive_Err;


// BH1750 initialization
void BH1750_Init(I2C_HandleTypeDef *hi2c) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af02      	add	r7, sp, #8
 80010be:	6078      	str	r0, [r7, #4]
    uint8_t cmd[] = {0x10}; // Power on
 80010c0:	2310      	movs	r3, #16
 80010c2:	733b      	strb	r3, [r7, #12]
    Transmit_Err = HAL_I2C_Master_Transmit(hi2c, BH1750_ADDR << 1, cmd, sizeof(cmd), HAL_MAX_DELAY);
 80010c4:	f107 020c 	add.w	r2, r7, #12
 80010c8:	f04f 33ff 	mov.w	r3, #4294967295
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	2301      	movs	r3, #1
 80010d0:	2146      	movs	r1, #70	@ 0x46
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f001 ff4c 	bl	8002f70 <HAL_I2C_Master_Transmit>
 80010d8:	4603      	mov	r3, r0
 80010da:	461a      	mov	r2, r3
 80010dc:	4b09      	ldr	r3, [pc, #36]	@ (8001104 <BH1750_Init+0x4c>)
 80010de:	701a      	strb	r2, [r3, #0]
    if(Transmit_Err != HAL_ERROR){
 80010e0:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <BH1750_Init+0x4c>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d008      	beq.n	80010fa <BH1750_Init+0x42>
    	  printf("\r\n");
 80010e8:	4807      	ldr	r0, [pc, #28]	@ (8001108 <BH1750_Init+0x50>)
 80010ea:	f007 fbb3 	bl	8008854 <puts>
    	  printf("BH1750 has been initialized");
 80010ee:	4807      	ldr	r0, [pc, #28]	@ (800110c <BH1750_Init+0x54>)
 80010f0:	f007 fb48 	bl	8008784 <iprintf>
    	  printf("\r\n");
 80010f4:	4804      	ldr	r0, [pc, #16]	@ (8001108 <BH1750_Init+0x50>)
 80010f6:	f007 fbad 	bl	8008854 <puts>
    }
}
 80010fa:	bf00      	nop
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20008614 	.word	0x20008614
 8001108:	0800c8d0 	.word	0x0800c8d0
 800110c:	0800c8d4 	.word	0x0800c8d4

08001110 <BH1750_ReadLux>:

// Reading Light Intensity from BH1750 sensor
float BH1750_ReadLux(I2C_HandleTypeDef *hi2c) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af02      	add	r7, sp, #8
 8001116:	6078      	str	r0, [r7, #4]
    uint8_t data[2];
    HAL_I2C_Master_Receive(hi2c, BH1750_ADDR << 1, data, sizeof(data), HAL_MAX_DELAY);
 8001118:	f107 020c 	add.w	r2, r7, #12
 800111c:	f04f 33ff 	mov.w	r3, #4294967295
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2302      	movs	r3, #2
 8001124:	2146      	movs	r1, #70	@ 0x46
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f002 f83a 	bl	80031a0 <HAL_I2C_Master_Receive>

    uint16_t lux = (data[0] << 8) | data[1];
 800112c:	7b3b      	ldrb	r3, [r7, #12]
 800112e:	021b      	lsls	r3, r3, #8
 8001130:	b21a      	sxth	r2, r3
 8001132:	7b7b      	ldrb	r3, [r7, #13]
 8001134:	b21b      	sxth	r3, r3
 8001136:	4313      	orrs	r3, r2
 8001138:	b21b      	sxth	r3, r3
 800113a:	81fb      	strh	r3, [r7, #14]
    return (float)lux / 1.2;
 800113c:	89fb      	ldrh	r3, [r7, #14]
 800113e:	ee07 3a90 	vmov	s15, r3
 8001142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001146:	ee17 0a90 	vmov	r0, s15
 800114a:	f7ff fa25 	bl	8000598 <__aeabi_f2d>
 800114e:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8001152:	4b08      	ldr	r3, [pc, #32]	@ (8001174 <BH1750_ReadLux+0x64>)
 8001154:	f7ff fba2 	bl	800089c <__aeabi_ddiv>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	4610      	mov	r0, r2
 800115e:	4619      	mov	r1, r3
 8001160:	f7ff fd6a 	bl	8000c38 <__aeabi_d2f>
 8001164:	4603      	mov	r3, r0
 8001166:	ee07 3a90 	vmov	s15, r3
}
 800116a:	eeb0 0a67 	vmov.f32	s0, s15
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	3ff33333 	.word	0x3ff33333

08001178 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800117c:	f001 fad7 	bl	800272e <HAL_Init>

  /* USER CODE BEGIN Init */
  neai_anomalydetection_init();
 8001180:	f006 fb98 	bl	80078b4 <neai_anomalydetection_init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001184:	f000 f820 	bl	80011c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001188:	f000 f93a 	bl	8001400 <MX_GPIO_Init>
  MX_I2C1_Init();
 800118c:	f000 f86e 	bl	800126c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001190:	f000 f8ea 	bl	8001368 <MX_USART1_UART_Init>
  MX_SPI3_Init();
 8001194:	f000 f8aa 	bl	80012ec <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  wifi_init();
 8001198:	f000 f994 	bl	80014c4 <wifi_init>
  mqtt_init();
 800119c:	f000 fa4a 	bl	8001634 <mqtt_init>
  BH1750_Init(&hi2c1);
 80011a0:	4808      	ldr	r0, [pc, #32]	@ (80011c4 <main+0x4c>)
 80011a2:	f7ff ff89 	bl	80010b8 <BH1750_Init>
  HAL_Delay (1000);  // wait for 1 sec
 80011a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011aa:	f001 fb35 	bl	8002818 <HAL_Delay>

  Train();
 80011ae:	f000 fb8f 	bl	80018d0 <Train>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Inference();
 80011b2:	f000 fc09 	bl	80019c8 <Inference>
      HAL_Delay(1000); // Delay for readability of data
 80011b6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011ba:	f001 fb2d 	bl	8002818 <HAL_Delay>
	  Inference();
 80011be:	bf00      	nop
 80011c0:	e7f7      	b.n	80011b2 <main+0x3a>
 80011c2:	bf00      	nop
 80011c4:	20008618 	.word	0x20008618

080011c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b096      	sub	sp, #88	@ 0x58
 80011cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ce:	f107 0314 	add.w	r3, r7, #20
 80011d2:	2244      	movs	r2, #68	@ 0x44
 80011d4:	2100      	movs	r1, #0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f007 fc70 	bl	8008abc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011dc:	463b      	mov	r3, r7
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	60da      	str	r2, [r3, #12]
 80011e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80011ea:	2000      	movs	r0, #0
 80011ec:	f002 fc2c 	bl	8003a48 <HAL_PWREx_ControlVoltageScaling>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <SystemClock_Config+0x32>
  {
    Error_Handler();
 80011f6:	f000 fc09 	bl	8001a0c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80011fa:	2310      	movs	r3, #16
 80011fc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011fe:	2301      	movs	r3, #1
 8001200:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001206:	2360      	movs	r3, #96	@ 0x60
 8001208:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800120a:	2302      	movs	r3, #2
 800120c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800120e:	2301      	movs	r3, #1
 8001210:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001212:	2301      	movs	r3, #1
 8001214:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001216:	233c      	movs	r3, #60	@ 0x3c
 8001218:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800121a:	2302      	movs	r3, #2
 800121c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800121e:	2302      	movs	r3, #2
 8001220:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001222:	2302      	movs	r3, #2
 8001224:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4618      	mov	r0, r3
 800122c:	f002 fcb0 	bl	8003b90 <HAL_RCC_OscConfig>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001236:	f000 fbe9 	bl	8001a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800123a:	230f      	movs	r3, #15
 800123c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800123e:	2303      	movs	r3, #3
 8001240:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001242:	2300      	movs	r3, #0
 8001244:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800124e:	463b      	mov	r3, r7
 8001250:	2105      	movs	r1, #5
 8001252:	4618      	mov	r0, r3
 8001254:	f003 f8b6 	bl	80043c4 <HAL_RCC_ClockConfig>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800125e:	f000 fbd5 	bl	8001a0c <Error_Handler>
  }
}
 8001262:	bf00      	nop
 8001264:	3758      	adds	r7, #88	@ 0x58
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001270:	4b1b      	ldr	r3, [pc, #108]	@ (80012e0 <MX_I2C1_Init+0x74>)
 8001272:	4a1c      	ldr	r2, [pc, #112]	@ (80012e4 <MX_I2C1_Init+0x78>)
 8001274:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A175AB;
 8001276:	4b1a      	ldr	r3, [pc, #104]	@ (80012e0 <MX_I2C1_Init+0x74>)
 8001278:	4a1b      	ldr	r2, [pc, #108]	@ (80012e8 <MX_I2C1_Init+0x7c>)
 800127a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800127c:	4b18      	ldr	r3, [pc, #96]	@ (80012e0 <MX_I2C1_Init+0x74>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001282:	4b17      	ldr	r3, [pc, #92]	@ (80012e0 <MX_I2C1_Init+0x74>)
 8001284:	2201      	movs	r2, #1
 8001286:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001288:	4b15      	ldr	r3, [pc, #84]	@ (80012e0 <MX_I2C1_Init+0x74>)
 800128a:	2200      	movs	r2, #0
 800128c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800128e:	4b14      	ldr	r3, [pc, #80]	@ (80012e0 <MX_I2C1_Init+0x74>)
 8001290:	2200      	movs	r2, #0
 8001292:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001294:	4b12      	ldr	r3, [pc, #72]	@ (80012e0 <MX_I2C1_Init+0x74>)
 8001296:	2200      	movs	r2, #0
 8001298:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800129a:	4b11      	ldr	r3, [pc, #68]	@ (80012e0 <MX_I2C1_Init+0x74>)
 800129c:	2200      	movs	r2, #0
 800129e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012a0:	4b0f      	ldr	r3, [pc, #60]	@ (80012e0 <MX_I2C1_Init+0x74>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012a6:	480e      	ldr	r0, [pc, #56]	@ (80012e0 <MX_I2C1_Init+0x74>)
 80012a8:	f001 fdc6 	bl	8002e38 <HAL_I2C_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012b2:	f000 fbab 	bl	8001a0c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012b6:	2100      	movs	r1, #0
 80012b8:	4809      	ldr	r0, [pc, #36]	@ (80012e0 <MX_I2C1_Init+0x74>)
 80012ba:	f002 fb0d 	bl	80038d8 <HAL_I2CEx_ConfigAnalogFilter>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012c4:	f000 fba2 	bl	8001a0c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012c8:	2100      	movs	r1, #0
 80012ca:	4805      	ldr	r0, [pc, #20]	@ (80012e0 <MX_I2C1_Init+0x74>)
 80012cc:	f002 fb4f 	bl	800396e <HAL_I2CEx_ConfigDigitalFilter>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012d6:	f000 fb99 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20008618 	.word	0x20008618
 80012e4:	40005400 	.word	0x40005400
 80012e8:	30a175ab 	.word	0x30a175ab

080012ec <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80012f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001360 <MX_SPI3_Init+0x74>)
 80012f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001364 <MX_SPI3_Init+0x78>)
 80012f4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80012f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001360 <MX_SPI3_Init+0x74>)
 80012f8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012fc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80012fe:	4b18      	ldr	r3, [pc, #96]	@ (8001360 <MX_SPI3_Init+0x74>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001304:	4b16      	ldr	r3, [pc, #88]	@ (8001360 <MX_SPI3_Init+0x74>)
 8001306:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 800130a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800130c:	4b14      	ldr	r3, [pc, #80]	@ (8001360 <MX_SPI3_Init+0x74>)
 800130e:	2200      	movs	r2, #0
 8001310:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001312:	4b13      	ldr	r3, [pc, #76]	@ (8001360 <MX_SPI3_Init+0x74>)
 8001314:	2200      	movs	r2, #0
 8001316:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001318:	4b11      	ldr	r3, [pc, #68]	@ (8001360 <MX_SPI3_Init+0x74>)
 800131a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800131e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001320:	4b0f      	ldr	r3, [pc, #60]	@ (8001360 <MX_SPI3_Init+0x74>)
 8001322:	2218      	movs	r2, #24
 8001324:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001326:	4b0e      	ldr	r3, [pc, #56]	@ (8001360 <MX_SPI3_Init+0x74>)
 8001328:	2200      	movs	r2, #0
 800132a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800132c:	4b0c      	ldr	r3, [pc, #48]	@ (8001360 <MX_SPI3_Init+0x74>)
 800132e:	2200      	movs	r2, #0
 8001330:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001332:	4b0b      	ldr	r3, [pc, #44]	@ (8001360 <MX_SPI3_Init+0x74>)
 8001334:	2200      	movs	r2, #0
 8001336:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001338:	4b09      	ldr	r3, [pc, #36]	@ (8001360 <MX_SPI3_Init+0x74>)
 800133a:	2207      	movs	r2, #7
 800133c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800133e:	4b08      	ldr	r3, [pc, #32]	@ (8001360 <MX_SPI3_Init+0x74>)
 8001340:	2200      	movs	r2, #0
 8001342:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001344:	4b06      	ldr	r3, [pc, #24]	@ (8001360 <MX_SPI3_Init+0x74>)
 8001346:	2208      	movs	r2, #8
 8001348:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800134a:	4805      	ldr	r0, [pc, #20]	@ (8001360 <MX_SPI3_Init+0x74>)
 800134c:	f004 f810 	bl	8005370 <HAL_SPI_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001356:	f000 fb59 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	2000866c 	.word	0x2000866c
 8001364:	40003c00 	.word	0x40003c00

08001368 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800136c:	4b22      	ldr	r3, [pc, #136]	@ (80013f8 <MX_USART1_UART_Init+0x90>)
 800136e:	4a23      	ldr	r2, [pc, #140]	@ (80013fc <MX_USART1_UART_Init+0x94>)
 8001370:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001372:	4b21      	ldr	r3, [pc, #132]	@ (80013f8 <MX_USART1_UART_Init+0x90>)
 8001374:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001378:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800137a:	4b1f      	ldr	r3, [pc, #124]	@ (80013f8 <MX_USART1_UART_Init+0x90>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001380:	4b1d      	ldr	r3, [pc, #116]	@ (80013f8 <MX_USART1_UART_Init+0x90>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001386:	4b1c      	ldr	r3, [pc, #112]	@ (80013f8 <MX_USART1_UART_Init+0x90>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800138c:	4b1a      	ldr	r3, [pc, #104]	@ (80013f8 <MX_USART1_UART_Init+0x90>)
 800138e:	220c      	movs	r2, #12
 8001390:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001392:	4b19      	ldr	r3, [pc, #100]	@ (80013f8 <MX_USART1_UART_Init+0x90>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001398:	4b17      	ldr	r3, [pc, #92]	@ (80013f8 <MX_USART1_UART_Init+0x90>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800139e:	4b16      	ldr	r3, [pc, #88]	@ (80013f8 <MX_USART1_UART_Init+0x90>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013a4:	4b14      	ldr	r3, [pc, #80]	@ (80013f8 <MX_USART1_UART_Init+0x90>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013aa:	4b13      	ldr	r3, [pc, #76]	@ (80013f8 <MX_USART1_UART_Init+0x90>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013b0:	4811      	ldr	r0, [pc, #68]	@ (80013f8 <MX_USART1_UART_Init+0x90>)
 80013b2:	f004 ff09 	bl	80061c8 <HAL_UART_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80013bc:	f000 fb26 	bl	8001a0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013c0:	2100      	movs	r1, #0
 80013c2:	480d      	ldr	r0, [pc, #52]	@ (80013f8 <MX_USART1_UART_Init+0x90>)
 80013c4:	f005 fdfc 	bl	8006fc0 <HAL_UARTEx_SetTxFifoThreshold>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80013ce:	f000 fb1d 	bl	8001a0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013d2:	2100      	movs	r1, #0
 80013d4:	4808      	ldr	r0, [pc, #32]	@ (80013f8 <MX_USART1_UART_Init+0x90>)
 80013d6:	f005 fe31 	bl	800703c <HAL_UARTEx_SetRxFifoThreshold>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80013e0:	f000 fb14 	bl	8001a0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80013e4:	4804      	ldr	r0, [pc, #16]	@ (80013f8 <MX_USART1_UART_Init+0x90>)
 80013e6:	f005 fdb2 	bl	8006f4e <HAL_UARTEx_DisableFifoMode>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80013f0:	f000 fb0c 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	200086d0 	.word	0x200086d0
 80013fc:	40013800 	.word	0x40013800

08001400 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001406:	f107 030c 	add.w	r3, r7, #12
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]
 8001414:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001416:	4b29      	ldr	r3, [pc, #164]	@ (80014bc <MX_GPIO_Init+0xbc>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141a:	4a28      	ldr	r2, [pc, #160]	@ (80014bc <MX_GPIO_Init+0xbc>)
 800141c:	f043 0310 	orr.w	r3, r3, #16
 8001420:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001422:	4b26      	ldr	r3, [pc, #152]	@ (80014bc <MX_GPIO_Init+0xbc>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001426:	f003 0310 	and.w	r3, r3, #16
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800142e:	4b23      	ldr	r3, [pc, #140]	@ (80014bc <MX_GPIO_Init+0xbc>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001432:	4a22      	ldr	r2, [pc, #136]	@ (80014bc <MX_GPIO_Init+0xbc>)
 8001434:	f043 0304 	orr.w	r3, r3, #4
 8001438:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800143a:	4b20      	ldr	r3, [pc, #128]	@ (80014bc <MX_GPIO_Init+0xbc>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143e:	f003 0304 	and.w	r3, r3, #4
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001446:	4b1d      	ldr	r3, [pc, #116]	@ (80014bc <MX_GPIO_Init+0xbc>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144a:	4a1c      	ldr	r2, [pc, #112]	@ (80014bc <MX_GPIO_Init+0xbc>)
 800144c:	f043 0302 	orr.w	r3, r3, #2
 8001450:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001452:	4b1a      	ldr	r3, [pc, #104]	@ (80014bc <MX_GPIO_Init+0xbc>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, WIFI_RESET_Pin|WIFI_NSS_Pin, GPIO_PIN_RESET);
 800145e:	2200      	movs	r2, #0
 8001460:	f240 1101 	movw	r1, #257	@ 0x101
 8001464:	4816      	ldr	r0, [pc, #88]	@ (80014c0 <MX_GPIO_Init+0xc0>)
 8001466:	f001 fcb7 	bl	8002dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WIFI_RESET_Pin WIFI_NSS_Pin */
  GPIO_InitStruct.Pin = WIFI_RESET_Pin|WIFI_NSS_Pin;
 800146a:	f240 1301 	movw	r3, #257	@ 0x101
 800146e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001470:	2301      	movs	r3, #1
 8001472:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	2300      	movs	r3, #0
 800147a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800147c:	f107 030c 	add.w	r3, r7, #12
 8001480:	4619      	mov	r1, r3
 8001482:	480f      	ldr	r0, [pc, #60]	@ (80014c0 <MX_GPIO_Init+0xc0>)
 8001484:	f001 fafe 	bl	8002a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_CMD_DATA_READY_Pin */
  GPIO_InitStruct.Pin = WIFI_CMD_DATA_READY_Pin;
 8001488:	2302      	movs	r3, #2
 800148a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800148c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001490:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(WIFI_CMD_DATA_READY_GPIO_Port, &GPIO_InitStruct);
 8001496:	f107 030c 	add.w	r3, r7, #12
 800149a:	4619      	mov	r1, r3
 800149c:	4808      	ldr	r0, [pc, #32]	@ (80014c0 <MX_GPIO_Init+0xc0>)
 800149e:	f001 faf1 	bl	8002a84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2100      	movs	r1, #0
 80014a6:	2007      	movs	r0, #7
 80014a8:	f001 fab5 	bl	8002a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80014ac:	2007      	movs	r0, #7
 80014ae:	f001 face 	bl	8002a4e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014b2:	bf00      	nop
 80014b4:	3720      	adds	r7, #32
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40021000 	.word	0x40021000
 80014c0:	48001000 	.word	0x48001000

080014c4 <wifi_init>:

/* USER CODE BEGIN 4 */
void wifi_init(void) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
    hwifi.handle = &hspi3;
 80014c8:	4b40      	ldr	r3, [pc, #256]	@ (80015cc <wifi_init+0x108>)
 80014ca:	4a41      	ldr	r2, [pc, #260]	@ (80015d0 <wifi_init+0x10c>)
 80014cc:	601a      	str	r2, [r3, #0]
    hwifi.ssid = ssid;
 80014ce:	4b3f      	ldr	r3, [pc, #252]	@ (80015cc <wifi_init+0x108>)
 80014d0:	4a40      	ldr	r2, [pc, #256]	@ (80015d4 <wifi_init+0x110>)
 80014d2:	605a      	str	r2, [r3, #4]
    hwifi.passphrase = passphrase;
 80014d4:	4b3d      	ldr	r3, [pc, #244]	@ (80015cc <wifi_init+0x108>)
 80014d6:	4a40      	ldr	r2, [pc, #256]	@ (80015d8 <wifi_init+0x114>)
 80014d8:	609a      	str	r2, [r3, #8]
    hwifi.securityType = WPA_MIXED;
 80014da:	4b3c      	ldr	r3, [pc, #240]	@ (80015cc <wifi_init+0x108>)
 80014dc:	2203      	movs	r2, #3
 80014de:	731a      	strb	r2, [r3, #12]
    hwifi.DHCP = SET;
 80014e0:	4b3a      	ldr	r3, [pc, #232]	@ (80015cc <wifi_init+0x108>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	735a      	strb	r2, [r3, #13]
    hwifi.ipStatus = IP_V4;
 80014e6:	4b39      	ldr	r3, [pc, #228]	@ (80015cc <wifi_init+0x108>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	739a      	strb	r2, [r3, #14]
    hwifi.transportProtocol = WIFI_TCP_PROTOCOL;
 80014ec:	4b37      	ldr	r3, [pc, #220]	@ (80015cc <wifi_init+0x108>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	73da      	strb	r2, [r3, #15]
    hwifi.port = 8080;
 80014f2:	4b36      	ldr	r3, [pc, #216]	@ (80015cc <wifi_init+0x108>)
 80014f4:	f641 7290 	movw	r2, #8080	@ 0x1f90
 80014f8:	821a      	strh	r2, [r3, #16]

    HAL_UART_Transmit(&huart1, (uint8_t *)"Initializing WiFi...\r\n", strlen("Initializing WiFi...\r\n"), HAL_MAX_DELAY);
 80014fa:	f04f 33ff 	mov.w	r3, #4294967295
 80014fe:	2216      	movs	r2, #22
 8001500:	4936      	ldr	r1, [pc, #216]	@ (80015dc <wifi_init+0x118>)
 8001502:	4837      	ldr	r0, [pc, #220]	@ (80015e0 <wifi_init+0x11c>)
 8001504:	f004 feb0 	bl	8006268 <HAL_UART_Transmit>

    // Reset WiFi module and check for CMD/Data ready
    WIFI_RESET_MODULE();
 8001508:	2200      	movs	r2, #0
 800150a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800150e:	4835      	ldr	r0, [pc, #212]	@ (80015e4 <wifi_init+0x120>)
 8001510:	f001 fc62 	bl	8002dd8 <HAL_GPIO_WritePin>
 8001514:	200a      	movs	r0, #10
 8001516:	f001 f97f 	bl	8002818 <HAL_Delay>
 800151a:	2201      	movs	r2, #1
 800151c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001520:	4830      	ldr	r0, [pc, #192]	@ (80015e4 <wifi_init+0x120>)
 8001522:	f001 fc59 	bl	8002dd8 <HAL_GPIO_WritePin>
 8001526:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800152a:	f001 f975 	bl	8002818 <HAL_Delay>
    HAL_Delay(100);  // Short delay to allow module to reset
 800152e:	2064      	movs	r0, #100	@ 0x64
 8001530:	f001 f972 	bl	8002818 <HAL_Delay>
    HAL_UART_Transmit(&huart1, (uint8_t *)"WiFi module reset.\r\n", strlen("WiFi module reset.\r\n"), HAL_MAX_DELAY);
 8001534:	f04f 33ff 	mov.w	r3, #4294967295
 8001538:	2214      	movs	r2, #20
 800153a:	492b      	ldr	r1, [pc, #172]	@ (80015e8 <wifi_init+0x124>)
 800153c:	4828      	ldr	r0, [pc, #160]	@ (80015e0 <wifi_init+0x11c>)
 800153e:	f004 fe93 	bl	8006268 <HAL_UART_Transmit>

    if (!WIFI_IS_CMDDATA_READY()) {
 8001542:	2102      	movs	r1, #2
 8001544:	4827      	ldr	r0, [pc, #156]	@ (80015e4 <wifi_init+0x120>)
 8001546:	f001 fc2f 	bl	8002da8 <HAL_GPIO_ReadPin>
 800154a:	4603      	mov	r3, r0
 800154c:	2b01      	cmp	r3, #1
 800154e:	d007      	beq.n	8001560 <wifi_init+0x9c>
        HAL_UART_Transmit(&huart1, (uint8_t *)"CMD/Data not ready.\r\n", strlen("CMD/Data not ready.\r\n"), HAL_MAX_DELAY);
 8001550:	f04f 33ff 	mov.w	r3, #4294967295
 8001554:	2215      	movs	r2, #21
 8001556:	4925      	ldr	r1, [pc, #148]	@ (80015ec <wifi_init+0x128>)
 8001558:	4821      	ldr	r0, [pc, #132]	@ (80015e0 <wifi_init+0x11c>)
 800155a:	f004 fe85 	bl	8006268 <HAL_UART_Transmit>
        return;  // Early exit if CMD/Data not ready
 800155e:	e034      	b.n	80015ca <wifi_init+0x106>
    } else {
        HAL_UART_Transmit(&huart1, (uint8_t *)"CMD/Data is ready, proceeding with initialization.\r\n", strlen("CMD/Data is ready, proceeding with initialization.\r\n"), HAL_MAX_DELAY);
 8001560:	f04f 33ff 	mov.w	r3, #4294967295
 8001564:	2234      	movs	r2, #52	@ 0x34
 8001566:	4922      	ldr	r1, [pc, #136]	@ (80015f0 <wifi_init+0x12c>)
 8001568:	481d      	ldr	r0, [pc, #116]	@ (80015e0 <wifi_init+0x11c>)
 800156a:	f004 fe7d 	bl	8006268 <HAL_UART_Transmit>
    }

    if (WIFI_Init(&hwifi) != WIFI_OK) {
 800156e:	4817      	ldr	r0, [pc, #92]	@ (80015cc <wifi_init+0x108>)
 8001570:	f000 fd18 	bl	8001fa4 <WIFI_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d009      	beq.n	800158e <wifi_init+0xca>
        HAL_UART_Transmit(&huart1, (uint8_t *)"WiFi init failed.\r\n", strlen("WiFi init failed.\r\n"), HAL_MAX_DELAY);
 800157a:	f04f 33ff 	mov.w	r3, #4294967295
 800157e:	2213      	movs	r2, #19
 8001580:	491c      	ldr	r1, [pc, #112]	@ (80015f4 <wifi_init+0x130>)
 8001582:	4817      	ldr	r0, [pc, #92]	@ (80015e0 <wifi_init+0x11c>)
 8001584:	f004 fe70 	bl	8006268 <HAL_UART_Transmit>
        Error_Handler();
 8001588:	f000 fa40 	bl	8001a0c <Error_Handler>
 800158c:	e006      	b.n	800159c <wifi_init+0xd8>
    } else {
        HAL_UART_Transmit(&huart1, (uint8_t *)"WiFi Initialized successfully.\r\n", strlen("WiFi Initialized successfully.\r\n"), HAL_MAX_DELAY);
 800158e:	f04f 33ff 	mov.w	r3, #4294967295
 8001592:	2220      	movs	r2, #32
 8001594:	4918      	ldr	r1, [pc, #96]	@ (80015f8 <wifi_init+0x134>)
 8001596:	4812      	ldr	r0, [pc, #72]	@ (80015e0 <wifi_init+0x11c>)
 8001598:	f004 fe66 	bl	8006268 <HAL_UART_Transmit>
    }

    if (WIFI_JoinNetwork(&hwifi) != WIFI_OK) {
 800159c:	480b      	ldr	r0, [pc, #44]	@ (80015cc <wifi_init+0x108>)
 800159e:	f000 fdc9 	bl	8002134 <WIFI_JoinNetwork>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d009      	beq.n	80015bc <wifi_init+0xf8>
        HAL_UART_Transmit(&huart1, (uint8_t *)"Failed to join network.\r\n", strlen("Failed to join network.\r\n"), HAL_MAX_DELAY);
 80015a8:	f04f 33ff 	mov.w	r3, #4294967295
 80015ac:	2219      	movs	r2, #25
 80015ae:	4913      	ldr	r1, [pc, #76]	@ (80015fc <wifi_init+0x138>)
 80015b0:	480b      	ldr	r0, [pc, #44]	@ (80015e0 <wifi_init+0x11c>)
 80015b2:	f004 fe59 	bl	8006268 <HAL_UART_Transmit>
        Error_Handler();
 80015b6:	f000 fa29 	bl	8001a0c <Error_Handler>
 80015ba:	e006      	b.n	80015ca <wifi_init+0x106>
    } else {
        HAL_UART_Transmit(&huart1, (uint8_t *)"Connected to WiFi network successfully.\r\n", strlen("Connected to WiFi network successfully.\r\n"), HAL_MAX_DELAY);
 80015bc:	f04f 33ff 	mov.w	r3, #4294967295
 80015c0:	2229      	movs	r2, #41	@ 0x29
 80015c2:	490f      	ldr	r1, [pc, #60]	@ (8001600 <wifi_init+0x13c>)
 80015c4:	4806      	ldr	r0, [pc, #24]	@ (80015e0 <wifi_init+0x11c>)
 80015c6:	f004 fe4f 	bl	8006268 <HAL_UART_Transmit>
    }
}
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20008764 	.word	0x20008764
 80015d0:	2000866c 	.word	0x2000866c
 80015d4:	20000000 	.word	0x20000000
 80015d8:	20000004 	.word	0x20000004
 80015dc:	0800c8f0 	.word	0x0800c8f0
 80015e0:	200086d0 	.word	0x200086d0
 80015e4:	48001000 	.word	0x48001000
 80015e8:	0800c908 	.word	0x0800c908
 80015ec:	0800c920 	.word	0x0800c920
 80015f0:	0800c938 	.word	0x0800c938
 80015f4:	0800c970 	.word	0x0800c970
 80015f8:	0800c984 	.word	0x0800c984
 80015fc:	0800c9a8 	.word	0x0800c9a8
 8001600:	0800c9c4 	.word	0x0800c9c4

08001604 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == WIFI_CMD_DATA_READY_Pin) {
 800160e:	88fb      	ldrh	r3, [r7, #6]
 8001610:	2b02      	cmp	r3, #2
 8001612:	d107      	bne.n	8001624 <HAL_GPIO_EXTI_Callback+0x20>
        cmdDataReady = HAL_GPIO_ReadPin(WIFI_CMD_DATA_READY_GPIO_Port, WIFI_CMD_DATA_READY_Pin);
 8001614:	2102      	movs	r1, #2
 8001616:	4805      	ldr	r0, [pc, #20]	@ (800162c <HAL_GPIO_EXTI_Callback+0x28>)
 8001618:	f001 fbc6 	bl	8002da8 <HAL_GPIO_ReadPin>
 800161c:	4603      	mov	r3, r0
 800161e:	461a      	mov	r2, r3
 8001620:	4b03      	ldr	r3, [pc, #12]	@ (8001630 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001622:	701a      	strb	r2, [r3, #0]
    }
}
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	48001000 	.word	0x48001000
 8001630:	200088b8 	.word	0x200088b8

08001634 <mqtt_init>:

static void mqtt_init(void) {
 8001634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001636:	af00      	add	r7, sp, #0
    // Initialize MQTT client settings for anomaly
    strcpy(hwifi.mqtt.publishTopic, "Sahilarious27/feeds/light-anamoly");
 8001638:	4a34      	ldr	r2, [pc, #208]	@ (800170c <mqtt_init+0xd8>)
 800163a:	4b35      	ldr	r3, [pc, #212]	@ (8001710 <mqtt_init+0xdc>)
 800163c:	4614      	mov	r4, r2
 800163e:	461d      	mov	r5, r3
 8001640:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001644:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001648:	682b      	ldr	r3, [r5, #0]
 800164a:	8023      	strh	r3, [r4, #0]
    hwifi.mqtt.securityMode = WIFI_MQTT_SECURITY_USER_PW;
 800164c:	4b31      	ldr	r3, [pc, #196]	@ (8001714 <mqtt_init+0xe0>)
 800164e:	2201      	movs	r2, #1
 8001650:	f883 20f8 	strb.w	r2, [r3, #248]	@ 0xf8
    strcpy(hwifi.mqtt.userName, "Sahilarious27");
 8001654:	4a30      	ldr	r2, [pc, #192]	@ (8001718 <mqtt_init+0xe4>)
 8001656:	4b31      	ldr	r3, [pc, #196]	@ (800171c <mqtt_init+0xe8>)
 8001658:	4614      	mov	r4, r2
 800165a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800165c:	6020      	str	r0, [r4, #0]
 800165e:	6061      	str	r1, [r4, #4]
 8001660:	60a2      	str	r2, [r4, #8]
 8001662:	881b      	ldrh	r3, [r3, #0]
 8001664:	81a3      	strh	r3, [r4, #12]
    strcpy(hwifi.mqtt.password, "aio_mWVv02y0YQDZcSfsU0SdUKdCKF7F");
 8001666:	4b2e      	ldr	r3, [pc, #184]	@ (8001720 <mqtt_init+0xec>)
 8001668:	4a2e      	ldr	r2, [pc, #184]	@ (8001724 <mqtt_init+0xf0>)
 800166a:	4614      	mov	r4, r2
 800166c:	469c      	mov	ip, r3
 800166e:	f104 0e20 	add.w	lr, r4, #32
 8001672:	4665      	mov	r5, ip
 8001674:	4626      	mov	r6, r4
 8001676:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001678:	6028      	str	r0, [r5, #0]
 800167a:	6069      	str	r1, [r5, #4]
 800167c:	60aa      	str	r2, [r5, #8]
 800167e:	60eb      	str	r3, [r5, #12]
 8001680:	3410      	adds	r4, #16
 8001682:	f10c 0c10 	add.w	ip, ip, #16
 8001686:	4574      	cmp	r4, lr
 8001688:	d1f3      	bne.n	8001672 <mqtt_init+0x3e>
 800168a:	4663      	mov	r3, ip
 800168c:	4622      	mov	r2, r4
 800168e:	7812      	ldrb	r2, [r2, #0]
 8001690:	701a      	strb	r2, [r3, #0]
    hwifi.mqtt.keepAlive = 60;
 8001692:	4b20      	ldr	r3, [pc, #128]	@ (8001714 <mqtt_init+0xe0>)
 8001694:	223c      	movs	r2, #60	@ 0x3c
 8001696:	f8a3 2152 	strh.w	r2, [r3, #338]	@ 0x152
    hwifi.port = 1883;
 800169a:	4b1e      	ldr	r3, [pc, #120]	@ (8001714 <mqtt_init+0xe0>)
 800169c:	f240 725b 	movw	r2, #1883	@ 0x75b
 80016a0:	821a      	strh	r2, [r3, #16]
    strcpy(hwifi.remoteIpAddress, "io.adafruit.com");
 80016a2:	4a21      	ldr	r2, [pc, #132]	@ (8001728 <mqtt_init+0xf4>)
 80016a4:	4b21      	ldr	r3, [pc, #132]	@ (800172c <mqtt_init+0xf8>)
 80016a6:	4614      	mov	r4, r2
 80016a8:	461d      	mov	r5, r3
 80016aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ac:	6020      	str	r0, [r4, #0]
 80016ae:	6061      	str	r1, [r4, #4]
 80016b0:	60a2      	str	r2, [r4, #8]
 80016b2:	60e3      	str	r3, [r4, #12]

    if (WIFI_MQTTClientInit(&hwifi) != WIFI_OK) {
 80016b4:	4817      	ldr	r0, [pc, #92]	@ (8001714 <mqtt_init+0xe0>)
 80016b6:	f000 fe4b 	bl	8002350 <WIFI_MQTTClientInit>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d004      	beq.n	80016ca <mqtt_init+0x96>
        printf("MQTT client initialization failed.\n");
 80016c0:	481b      	ldr	r0, [pc, #108]	@ (8001730 <mqtt_init+0xfc>)
 80016c2:	f007 f8c7 	bl	8008854 <puts>
        Error_Handler();
 80016c6:	f000 f9a1 	bl	8001a0c <Error_Handler>
    }
    printf("MQTT client initialized successfully.\r\n");
 80016ca:	481a      	ldr	r0, [pc, #104]	@ (8001734 <mqtt_init+0x100>)
 80016cc:	f007 f8c2 	bl	8008854 <puts>

    // Initialize MQTT client settings for similarity score
    strcpy(hwifi.mqtt.publishTopic, "Sahilarious27/feeds/light-similarity");
 80016d0:	4a0e      	ldr	r2, [pc, #56]	@ (800170c <mqtt_init+0xd8>)
 80016d2:	4b19      	ldr	r3, [pc, #100]	@ (8001738 <mqtt_init+0x104>)
 80016d4:	4614      	mov	r4, r2
 80016d6:	461d      	mov	r5, r3
 80016d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016e0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80016e4:	6020      	str	r0, [r4, #0]
 80016e6:	3404      	adds	r4, #4
 80016e8:	7021      	strb	r1, [r4, #0]
    if (WIFI_MQTTClientInit(&hwifi) != WIFI_OK) {
 80016ea:	480a      	ldr	r0, [pc, #40]	@ (8001714 <mqtt_init+0xe0>)
 80016ec:	f000 fe30 	bl	8002350 <WIFI_MQTTClientInit>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d004      	beq.n	8001700 <mqtt_init+0xcc>
        printf("MQTT client initialization for similarity failed.\n");
 80016f6:	4811      	ldr	r0, [pc, #68]	@ (800173c <mqtt_init+0x108>)
 80016f8:	f007 f8ac 	bl	8008854 <puts>
        Error_Handler();
 80016fc:	f000 f986 	bl	8001a0c <Error_Handler>
    }
    printf("MQTT client for similarity initialized successfully.\r\n");
 8001700:	480f      	ldr	r0, [pc, #60]	@ (8001740 <mqtt_init+0x10c>)
 8001702:	f007 f8a7 	bl	8008854 <puts>
}
 8001706:	bf00      	nop
 8001708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800170a:	bf00      	nop
 800170c:	200087dc 	.word	0x200087dc
 8001710:	0800c9f0 	.word	0x0800c9f0
 8001714:	20008764 	.word	0x20008764
 8001718:	2000885d 	.word	0x2000885d
 800171c:	0800ca14 	.word	0x0800ca14
 8001720:	2000887d 	.word	0x2000887d
 8001724:	0800ca24 	.word	0x0800ca24
 8001728:	20008789 	.word	0x20008789
 800172c:	0800ca48 	.word	0x0800ca48
 8001730:	0800ca58 	.word	0x0800ca58
 8001734:	0800ca7c 	.word	0x0800ca7c
 8001738:	0800caa4 	.word	0x0800caa4
 800173c:	0800cacc 	.word	0x0800cacc
 8001740:	0800cb00 	.word	0x0800cb00

08001744 <mqtt_publish_similarity>:

static void mqtt_publish_similarity(void) {
 8001744:	b5b0      	push	{r4, r5, r7, lr}
 8001746:	b0c0      	sub	sp, #256	@ 0x100
 8001748:	af00      	add	r7, sp, #0
    printf("Entering MQTT publish similarity function.\r\n");
 800174a:	4821      	ldr	r0, [pc, #132]	@ (80017d0 <mqtt_publish_similarity+0x8c>)
 800174c:	f007 f882 	bl	8008854 <puts>

    // Format the similarity score into a message string
    char message[256];
    snprintf(message, sizeof(message), "%d", similarity);
 8001750:	4b20      	ldr	r3, [pc, #128]	@ (80017d4 <mqtt_publish_similarity+0x90>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	4638      	mov	r0, r7
 8001756:	4a20      	ldr	r2, [pc, #128]	@ (80017d8 <mqtt_publish_similarity+0x94>)
 8001758:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800175c:	f007 f882 	bl	8008864 <sniprintf>

    // Set topic to similarity feed
    strcpy(hwifi.mqtt.publishTopic, "Sahilarious27/feeds/light-similarity");
 8001760:	4a1e      	ldr	r2, [pc, #120]	@ (80017dc <mqtt_publish_similarity+0x98>)
 8001762:	4b1f      	ldr	r3, [pc, #124]	@ (80017e0 <mqtt_publish_similarity+0x9c>)
 8001764:	4614      	mov	r4, r2
 8001766:	461d      	mov	r5, r3
 8001768:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800176a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800176c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800176e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001770:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001774:	6020      	str	r0, [r4, #0]
 8001776:	3404      	adds	r4, #4
 8001778:	7021      	strb	r1, [r4, #0]
    printf("Set topic to: %s\r\n", hwifi.mqtt.publishTopic);
 800177a:	4918      	ldr	r1, [pc, #96]	@ (80017dc <mqtt_publish_similarity+0x98>)
 800177c:	4819      	ldr	r0, [pc, #100]	@ (80017e4 <mqtt_publish_similarity+0xa0>)
 800177e:	f007 f801 	bl	8008784 <iprintf>

    // Reinitialize MQTT client with the new topic
    if (WIFI_MQTTClientInit(&hwifi) != WIFI_OK) {
 8001782:	4819      	ldr	r0, [pc, #100]	@ (80017e8 <mqtt_publish_similarity+0xa4>)
 8001784:	f000 fde4 	bl	8002350 <WIFI_MQTTClientInit>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d004      	beq.n	8001798 <mqtt_publish_similarity+0x54>
        printf("MQTT client reinitialization failed for Similarity.\n");
 800178e:	4817      	ldr	r0, [pc, #92]	@ (80017ec <mqtt_publish_similarity+0xa8>)
 8001790:	f007 f860 	bl	8008854 <puts>
        Error_Handler();
 8001794:	f000 f93a 	bl	8001a0c <Error_Handler>
    }

    // Publish the message
    if (WIFI_MQTTPublish(&hwifi, message, strlen(message)) != WIFI_OK) {
 8001798:	463b      	mov	r3, r7
 800179a:	4618      	mov	r0, r3
 800179c:	f7fe fd90 	bl	80002c0 <strlen>
 80017a0:	4603      	mov	r3, r0
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	463b      	mov	r3, r7
 80017a6:	4619      	mov	r1, r3
 80017a8:	480f      	ldr	r0, [pc, #60]	@ (80017e8 <mqtt_publish_similarity+0xa4>)
 80017aa:	f000 fee9 	bl	8002580 <WIFI_MQTTPublish>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d004      	beq.n	80017be <mqtt_publish_similarity+0x7a>
        printf("MQTT publish failed for similarity.\n");
 80017b4:	480e      	ldr	r0, [pc, #56]	@ (80017f0 <mqtt_publish_similarity+0xac>)
 80017b6:	f007 f84d 	bl	8008854 <puts>
        Error_Handler();
 80017ba:	f000 f927 	bl	8001a0c <Error_Handler>
    }
    printf("Similarity message published successfully. Published to topic: %s\r\n", hwifi.mqtt.publishTopic);
 80017be:	4907      	ldr	r1, [pc, #28]	@ (80017dc <mqtt_publish_similarity+0x98>)
 80017c0:	480c      	ldr	r0, [pc, #48]	@ (80017f4 <mqtt_publish_similarity+0xb0>)
 80017c2:	f006 ffdf 	bl	8008784 <iprintf>
}
 80017c6:	bf00      	nop
 80017c8:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bdb0      	pop	{r4, r5, r7, pc}
 80017d0:	0800cb38 	.word	0x0800cb38
 80017d4:	200090bc 	.word	0x200090bc
 80017d8:	0800cb64 	.word	0x0800cb64
 80017dc:	200087dc 	.word	0x200087dc
 80017e0:	0800caa4 	.word	0x0800caa4
 80017e4:	0800cb68 	.word	0x0800cb68
 80017e8:	20008764 	.word	0x20008764
 80017ec:	0800cb7c 	.word	0x0800cb7c
 80017f0:	0800cbb0 	.word	0x0800cbb0
 80017f4:	0800cbd4 	.word	0x0800cbd4

080017f8 <mqtt_publish_anomaly>:


static void mqtt_publish_anomaly(const char* message) {
 80017f8:	b5b0      	push	{r4, r5, r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
    printf("Entering MQTT publish anomaly function.\r\n");
 8001800:	481a      	ldr	r0, [pc, #104]	@ (800186c <mqtt_publish_anomaly+0x74>)
 8001802:	f007 f827 	bl	8008854 <puts>

    // Set topic to anomaly feed
    strcpy(hwifi.mqtt.publishTopic, "Sahilarious27/feeds/light-anamoly");
 8001806:	4a1a      	ldr	r2, [pc, #104]	@ (8001870 <mqtt_publish_anomaly+0x78>)
 8001808:	4b1a      	ldr	r3, [pc, #104]	@ (8001874 <mqtt_publish_anomaly+0x7c>)
 800180a:	4614      	mov	r4, r2
 800180c:	461d      	mov	r5, r3
 800180e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001810:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001812:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001814:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001816:	682b      	ldr	r3, [r5, #0]
 8001818:	8023      	strh	r3, [r4, #0]
    printf("Set topic to: %s\r\n", hwifi.mqtt.publishTopic);
 800181a:	4915      	ldr	r1, [pc, #84]	@ (8001870 <mqtt_publish_anomaly+0x78>)
 800181c:	4816      	ldr	r0, [pc, #88]	@ (8001878 <mqtt_publish_anomaly+0x80>)
 800181e:	f006 ffb1 	bl	8008784 <iprintf>

    // Reinitialize MQTT client with the new topic
    if (WIFI_MQTTClientInit(&hwifi) != WIFI_OK) {
 8001822:	4816      	ldr	r0, [pc, #88]	@ (800187c <mqtt_publish_anomaly+0x84>)
 8001824:	f000 fd94 	bl	8002350 <WIFI_MQTTClientInit>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d004      	beq.n	8001838 <mqtt_publish_anomaly+0x40>
        printf("MQTT client reinitialization failed for humidity.\n");
 800182e:	4814      	ldr	r0, [pc, #80]	@ (8001880 <mqtt_publish_anomaly+0x88>)
 8001830:	f007 f810 	bl	8008854 <puts>
        Error_Handler();
 8001834:	f000 f8ea 	bl	8001a0c <Error_Handler>
    }


    // Publish the message
    if (WIFI_MQTTPublish(&hwifi, message, strlen(message)) != WIFI_OK) {
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7fe fd41 	bl	80002c0 <strlen>
 800183e:	4603      	mov	r3, r0
 8001840:	b29b      	uxth	r3, r3
 8001842:	461a      	mov	r2, r3
 8001844:	6879      	ldr	r1, [r7, #4]
 8001846:	480d      	ldr	r0, [pc, #52]	@ (800187c <mqtt_publish_anomaly+0x84>)
 8001848:	f000 fe9a 	bl	8002580 <WIFI_MQTTPublish>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d004      	beq.n	800185c <mqtt_publish_anomaly+0x64>
        printf("MQTT publish failed for anomaly.\n");
 8001852:	480c      	ldr	r0, [pc, #48]	@ (8001884 <mqtt_publish_anomaly+0x8c>)
 8001854:	f006 fffe 	bl	8008854 <puts>
        Error_Handler();
 8001858:	f000 f8d8 	bl	8001a0c <Error_Handler>
    }
    printf("Anomaly message published successfully. Published to topic: %s\r\n", hwifi.mqtt.publishTopic);
 800185c:	4904      	ldr	r1, [pc, #16]	@ (8001870 <mqtt_publish_anomaly+0x78>)
 800185e:	480a      	ldr	r0, [pc, #40]	@ (8001888 <mqtt_publish_anomaly+0x90>)
 8001860:	f006 ff90 	bl	8008784 <iprintf>
}
 8001864:	bf00      	nop
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bdb0      	pop	{r4, r5, r7, pc}
 800186c:	0800cc18 	.word	0x0800cc18
 8001870:	200087dc 	.word	0x200087dc
 8001874:	0800c9f0 	.word	0x0800c9f0
 8001878:	0800cb68 	.word	0x0800cb68
 800187c:	20008764 	.word	0x20008764
 8001880:	0800cc44 	.word	0x0800cc44
 8001884:	0800cc78 	.word	0x0800cc78
 8001888:	0800cc9c 	.word	0x0800cc9c

0800188c <fill_light_buffer>:


void fill_light_buffer() {
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
    for (int i = 0; i < DATA_INPUT_USER; i++) {
 8001892:	2300      	movs	r3, #0
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	e00d      	b.n	80018b4 <fill_light_buffer+0x28>
      light_buffer[AXIS_NUMBER * i] = BH1750_ReadLux(&hi2c1);
 8001898:	480b      	ldr	r0, [pc, #44]	@ (80018c8 <fill_light_buffer+0x3c>)
 800189a:	f7ff fc39 	bl	8001110 <BH1750_ReadLux>
 800189e:	eef0 7a40 	vmov.f32	s15, s0
 80018a2:	4a0a      	ldr	r2, [pc, #40]	@ (80018cc <fill_light_buffer+0x40>)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < DATA_INPUT_USER; i++) {
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	3301      	adds	r3, #1
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80018ba:	dbed      	blt.n	8001898 <fill_light_buffer+0xc>
  }
}
 80018bc:	bf00      	nop
 80018be:	bf00      	nop
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20008618 	.word	0x20008618
 80018cc:	200088bc 	.word	0x200088bc

080018d0 <Train>:

void Train(void)

{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
   for (int i = 0; i < NUMBER_LEARN; i++) {
 80018d6:	2300      	movs	r3, #0
 80018d8:	607b      	str	r3, [r7, #4]
 80018da:	e014      	b.n	8001906 <Train+0x36>
   fill_light_buffer();
 80018dc:	f7ff ffd6 	bl	800188c <fill_light_buffer>
   neai_anomalydetection_learn(light_buffer);
 80018e0:	480e      	ldr	r0, [pc, #56]	@ (800191c <Train+0x4c>)
 80018e2:	f005 fc43 	bl	800716c <neai_anomalydetection_learn>
   printf("Training Cycle No: ");
 80018e6:	480e      	ldr	r0, [pc, #56]	@ (8001920 <Train+0x50>)
 80018e8:	f006 ff4c 	bl	8008784 <iprintf>
   printf("%d",i);
 80018ec:	6879      	ldr	r1, [r7, #4]
 80018ee:	480d      	ldr	r0, [pc, #52]	@ (8001924 <Train+0x54>)
 80018f0:	f006 ff48 	bl	8008784 <iprintf>
   printf("\r\n");
 80018f4:	480c      	ldr	r0, [pc, #48]	@ (8001928 <Train+0x58>)
 80018f6:	f006 ffad 	bl	8008854 <puts>
   HAL_Delay(200);
 80018fa:	20c8      	movs	r0, #200	@ 0xc8
 80018fc:	f000 ff8c 	bl	8002818 <HAL_Delay>
   for (int i = 0; i < NUMBER_LEARN; i++) {
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3301      	adds	r3, #1
 8001904:	607b      	str	r3, [r7, #4]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b27      	cmp	r3, #39	@ 0x27
 800190a:	dde7      	ble.n	80018dc <Train+0xc>
  }
   printf("Training Done");
 800190c:	4807      	ldr	r0, [pc, #28]	@ (800192c <Train+0x5c>)
 800190e:	f006 ff39 	bl	8008784 <iprintf>

}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	200088bc 	.word	0x200088bc
 8001920:	0800cce0 	.word	0x0800cce0
 8001924:	0800cb64 	.word	0x0800cb64
 8001928:	0800c8d0 	.word	0x0800c8d0
 800192c:	0800ccf4 	.word	0x0800ccf4

08001930 <ThresholdCheck>:

void ThresholdCheck(void) {
 8001930:	b580      	push	{r7, lr}
 8001932:	b0c0      	sub	sp, #256	@ 0x100
 8001934:	af00      	add	r7, sp, #0
    char message[256];

    if (similarity < 80) {
 8001936:	4b1e      	ldr	r3, [pc, #120]	@ (80019b0 <ThresholdCheck+0x80>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b4f      	cmp	r3, #79	@ 0x4f
 800193c:	d818      	bhi.n	8001970 <ThresholdCheck+0x40>
        sprintf(message, "Anomaly Detected\r\n");
 800193e:	463b      	mov	r3, r7
 8001940:	491c      	ldr	r1, [pc, #112]	@ (80019b4 <ThresholdCheck+0x84>)
 8001942:	4618      	mov	r0, r3
 8001944:	f006 ffc2 	bl	80088cc <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8001948:	463b      	mov	r3, r7
 800194a:	4618      	mov	r0, r3
 800194c:	f7fe fcb8 	bl	80002c0 <strlen>
 8001950:	4603      	mov	r3, r0
 8001952:	b29a      	uxth	r2, r3
 8001954:	4639      	mov	r1, r7
 8001956:	f04f 33ff 	mov.w	r3, #4294967295
 800195a:	4817      	ldr	r0, [pc, #92]	@ (80019b8 <ThresholdCheck+0x88>)
 800195c:	f004 fc84 	bl	8006268 <HAL_UART_Transmit>
        printf("Publishing anomaly message to MQTT\n");
 8001960:	4816      	ldr	r0, [pc, #88]	@ (80019bc <ThresholdCheck+0x8c>)
 8001962:	f006 ff77 	bl	8008854 <puts>
        mqtt_publish_anomaly(message); // Publish anomaly message
 8001966:	463b      	mov	r3, r7
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff ff45 	bl	80017f8 <mqtt_publish_anomaly>
 800196e:	e017      	b.n	80019a0 <ThresholdCheck+0x70>
    } else {
        sprintf(message, "Normal\r\n");
 8001970:	463b      	mov	r3, r7
 8001972:	4913      	ldr	r1, [pc, #76]	@ (80019c0 <ThresholdCheck+0x90>)
 8001974:	4618      	mov	r0, r3
 8001976:	f006 ffa9 	bl	80088cc <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 800197a:	463b      	mov	r3, r7
 800197c:	4618      	mov	r0, r3
 800197e:	f7fe fc9f 	bl	80002c0 <strlen>
 8001982:	4603      	mov	r3, r0
 8001984:	b29a      	uxth	r2, r3
 8001986:	4639      	mov	r1, r7
 8001988:	f04f 33ff 	mov.w	r3, #4294967295
 800198c:	480a      	ldr	r0, [pc, #40]	@ (80019b8 <ThresholdCheck+0x88>)
 800198e:	f004 fc6b 	bl	8006268 <HAL_UART_Transmit>
        printf("Publishing normal message to MQTT\n");
 8001992:	480c      	ldr	r0, [pc, #48]	@ (80019c4 <ThresholdCheck+0x94>)
 8001994:	f006 ff5e 	bl	8008854 <puts>
        mqtt_publish_anomaly(message); // Publish normal message
 8001998:	463b      	mov	r3, r7
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff ff2c 	bl	80017f8 <mqtt_publish_anomaly>
    }

    // Publish the similarity score
    mqtt_publish_similarity();
 80019a0:	f7ff fed0 	bl	8001744 <mqtt_publish_similarity>
}
 80019a4:	bf00      	nop
 80019a6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	200090bc 	.word	0x200090bc
 80019b4:	0800cd04 	.word	0x0800cd04
 80019b8:	200086d0 	.word	0x200086d0
 80019bc:	0800cd18 	.word	0x0800cd18
 80019c0:	0800cd3c 	.word	0x0800cd3c
 80019c4:	0800cd48 	.word	0x0800cd48

080019c8 <Inference>:


void Inference(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  fill_light_buffer();
 80019cc:	f7ff ff5e 	bl	800188c <fill_light_buffer>
  neai_anomalydetection_detect(light_buffer, &similarity);
 80019d0:	4909      	ldr	r1, [pc, #36]	@ (80019f8 <Inference+0x30>)
 80019d2:	480a      	ldr	r0, [pc, #40]	@ (80019fc <Inference+0x34>)
 80019d4:	f005 fd9c 	bl	8007510 <neai_anomalydetection_detect>
  printf("Similarity Score is: ");
 80019d8:	4809      	ldr	r0, [pc, #36]	@ (8001a00 <Inference+0x38>)
 80019da:	f006 fed3 	bl	8008784 <iprintf>
  printf("%d",similarity);
 80019de:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <Inference+0x30>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	4619      	mov	r1, r3
 80019e4:	4807      	ldr	r0, [pc, #28]	@ (8001a04 <Inference+0x3c>)
 80019e6:	f006 fecd 	bl	8008784 <iprintf>
  printf("\r\n");
 80019ea:	4807      	ldr	r0, [pc, #28]	@ (8001a08 <Inference+0x40>)
 80019ec:	f006 ff32 	bl	8008854 <puts>
  ThresholdCheck();
 80019f0:	f7ff ff9e 	bl	8001930 <ThresholdCheck>
}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	200090bc 	.word	0x200090bc
 80019fc:	200088bc 	.word	0x200088bc
 8001a00:	0800cd6c 	.word	0x0800cd6c
 8001a04:	0800cb64 	.word	0x0800cb64
 8001a08:	0800c8d0 	.word	0x0800c8d0

08001a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a10:	b672      	cpsid	i
}
 8001a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a14:	bf00      	nop
 8001a16:	e7fd      	b.n	8001a14 <Error_Handler+0x8>

08001a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a5c <HAL_MspInit+0x44>)
 8001a20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a22:	4a0e      	ldr	r2, [pc, #56]	@ (8001a5c <HAL_MspInit+0x44>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a5c <HAL_MspInit+0x44>)
 8001a2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	607b      	str	r3, [r7, #4]
 8001a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a36:	4b09      	ldr	r3, [pc, #36]	@ (8001a5c <HAL_MspInit+0x44>)
 8001a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a3a:	4a08      	ldr	r2, [pc, #32]	@ (8001a5c <HAL_MspInit+0x44>)
 8001a3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a40:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a42:	4b06      	ldr	r3, [pc, #24]	@ (8001a5c <HAL_MspInit+0x44>)
 8001a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a4a:	603b      	str	r3, [r7, #0]
 8001a4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	40021000 	.word	0x40021000

08001a60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b0ae      	sub	sp, #184	@ 0xb8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a68:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a78:	f107 0310 	add.w	r3, r7, #16
 8001a7c:	2294      	movs	r2, #148	@ 0x94
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4618      	mov	r0, r3
 8001a82:	f007 f81b 	bl	8008abc <memset>
  if(hi2c->Instance==I2C1)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a21      	ldr	r2, [pc, #132]	@ (8001b10 <HAL_I2C_MspInit+0xb0>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d13b      	bne.n	8001b08 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a90:	2340      	movs	r3, #64	@ 0x40
 8001a92:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a94:	2300      	movs	r3, #0
 8001a96:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a98:	f107 0310 	add.w	r3, r7, #16
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f002 ff4f 	bl	8004940 <HAL_RCCEx_PeriphCLKConfig>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001aa8:	f7ff ffb0 	bl	8001a0c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aac:	4b19      	ldr	r3, [pc, #100]	@ (8001b14 <HAL_I2C_MspInit+0xb4>)
 8001aae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab0:	4a18      	ldr	r2, [pc, #96]	@ (8001b14 <HAL_I2C_MspInit+0xb4>)
 8001ab2:	f043 0302 	orr.w	r3, r3, #2
 8001ab6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ab8:	4b16      	ldr	r3, [pc, #88]	@ (8001b14 <HAL_I2C_MspInit+0xb4>)
 8001aba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ac4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ac8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001acc:	2312      	movs	r3, #18
 8001ace:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ade:	2304      	movs	r3, #4
 8001ae0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001ae8:	4619      	mov	r1, r3
 8001aea:	480b      	ldr	r0, [pc, #44]	@ (8001b18 <HAL_I2C_MspInit+0xb8>)
 8001aec:	f000 ffca 	bl	8002a84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001af0:	4b08      	ldr	r3, [pc, #32]	@ (8001b14 <HAL_I2C_MspInit+0xb4>)
 8001af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001af4:	4a07      	ldr	r2, [pc, #28]	@ (8001b14 <HAL_I2C_MspInit+0xb4>)
 8001af6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001afa:	6593      	str	r3, [r2, #88]	@ 0x58
 8001afc:	4b05      	ldr	r3, [pc, #20]	@ (8001b14 <HAL_I2C_MspInit+0xb4>)
 8001afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b04:	60bb      	str	r3, [r7, #8]
 8001b06:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001b08:	bf00      	nop
 8001b0a:	37b8      	adds	r7, #184	@ 0xb8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40005400 	.word	0x40005400
 8001b14:	40021000 	.word	0x40021000
 8001b18:	48000400 	.word	0x48000400

08001b1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08a      	sub	sp, #40	@ 0x28
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a17      	ldr	r2, [pc, #92]	@ (8001b98 <HAL_SPI_MspInit+0x7c>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d128      	bne.n	8001b90 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b3e:	4b17      	ldr	r3, [pc, #92]	@ (8001b9c <HAL_SPI_MspInit+0x80>)
 8001b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b42:	4a16      	ldr	r2, [pc, #88]	@ (8001b9c <HAL_SPI_MspInit+0x80>)
 8001b44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b48:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b4a:	4b14      	ldr	r3, [pc, #80]	@ (8001b9c <HAL_SPI_MspInit+0x80>)
 8001b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b52:	613b      	str	r3, [r7, #16]
 8001b54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b56:	4b11      	ldr	r3, [pc, #68]	@ (8001b9c <HAL_SPI_MspInit+0x80>)
 8001b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b5a:	4a10      	ldr	r2, [pc, #64]	@ (8001b9c <HAL_SPI_MspInit+0x80>)
 8001b5c:	f043 0304 	orr.w	r3, r3, #4
 8001b60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b62:	4b0e      	ldr	r3, [pc, #56]	@ (8001b9c <HAL_SPI_MspInit+0x80>)
 8001b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b66:	f003 0304 	and.w	r3, r3, #4
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001b6e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b74:	2302      	movs	r3, #2
 8001b76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b80:	2306      	movs	r3, #6
 8001b82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b84:	f107 0314 	add.w	r3, r7, #20
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4805      	ldr	r0, [pc, #20]	@ (8001ba0 <HAL_SPI_MspInit+0x84>)
 8001b8c:	f000 ff7a 	bl	8002a84 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001b90:	bf00      	nop
 8001b92:	3728      	adds	r7, #40	@ 0x28
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40003c00 	.word	0x40003c00
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	48000800 	.word	0x48000800

08001ba4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b0ae      	sub	sp, #184	@ 0xb8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bac:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bbc:	f107 0310 	add.w	r3, r7, #16
 8001bc0:	2294      	movs	r2, #148	@ 0x94
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f006 ff79 	bl	8008abc <memset>
  if(huart->Instance==USART1)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a21      	ldr	r2, [pc, #132]	@ (8001c54 <HAL_UART_MspInit+0xb0>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d13a      	bne.n	8001c4a <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bdc:	f107 0310 	add.w	r3, r7, #16
 8001be0:	4618      	mov	r0, r3
 8001be2:	f002 fead 	bl	8004940 <HAL_RCCEx_PeriphCLKConfig>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001bec:	f7ff ff0e 	bl	8001a0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bf0:	4b19      	ldr	r3, [pc, #100]	@ (8001c58 <HAL_UART_MspInit+0xb4>)
 8001bf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bf4:	4a18      	ldr	r2, [pc, #96]	@ (8001c58 <HAL_UART_MspInit+0xb4>)
 8001bf6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bfa:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bfc:	4b16      	ldr	r3, [pc, #88]	@ (8001c58 <HAL_UART_MspInit+0xb4>)
 8001bfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c08:	4b13      	ldr	r3, [pc, #76]	@ (8001c58 <HAL_UART_MspInit+0xb4>)
 8001c0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c0c:	4a12      	ldr	r2, [pc, #72]	@ (8001c58 <HAL_UART_MspInit+0xb4>)
 8001c0e:	f043 0302 	orr.w	r3, r3, #2
 8001c12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c14:	4b10      	ldr	r3, [pc, #64]	@ (8001c58 <HAL_UART_MspInit+0xb4>)
 8001c16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c20:	23c0      	movs	r3, #192	@ 0xc0
 8001c22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c26:	2302      	movs	r3, #2
 8001c28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c32:	2303      	movs	r3, #3
 8001c34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c38:	2307      	movs	r3, #7
 8001c3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001c42:	4619      	mov	r1, r3
 8001c44:	4805      	ldr	r0, [pc, #20]	@ (8001c5c <HAL_UART_MspInit+0xb8>)
 8001c46:	f000 ff1d 	bl	8002a84 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001c4a:	bf00      	nop
 8001c4c:	37b8      	adds	r7, #184	@ 0xb8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40013800 	.word	0x40013800
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	48000400 	.word	0x48000400

08001c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c64:	bf00      	nop
 8001c66:	e7fd      	b.n	8001c64 <NMI_Handler+0x4>

08001c68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c6c:	bf00      	nop
 8001c6e:	e7fd      	b.n	8001c6c <HardFault_Handler+0x4>

08001c70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c74:	bf00      	nop
 8001c76:	e7fd      	b.n	8001c74 <MemManage_Handler+0x4>

08001c78 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c7c:	bf00      	nop
 8001c7e:	e7fd      	b.n	8001c7c <BusFault_Handler+0x4>

08001c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c84:	bf00      	nop
 8001c86:	e7fd      	b.n	8001c84 <UsageFault_Handler+0x4>

08001c88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cb6:	f000 fd8f 	bl	80027d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WIFI_CMD_DATA_READY_Pin);
 8001cc2:	2002      	movs	r0, #2
 8001cc4:	f001 f8a0 	bl	8002e08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001cc8:	bf00      	nop
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  return 1;
 8001cd0:	2301      	movs	r3, #1
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <_kill>:

int _kill(int pid, int sig)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ce6:	f006 ff6d 	bl	8008bc4 <__errno>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2216      	movs	r2, #22
 8001cee:	601a      	str	r2, [r3, #0]
  return -1;
 8001cf0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <_exit>:

void _exit (int status)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d04:	f04f 31ff 	mov.w	r1, #4294967295
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f7ff ffe7 	bl	8001cdc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d0e:	bf00      	nop
 8001d10:	e7fd      	b.n	8001d0e <_exit+0x12>

08001d12 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b086      	sub	sp, #24
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	60f8      	str	r0, [r7, #12]
 8001d1a:	60b9      	str	r1, [r7, #8]
 8001d1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d1e:	2300      	movs	r3, #0
 8001d20:	617b      	str	r3, [r7, #20]
 8001d22:	e00a      	b.n	8001d3a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d24:	f7ff f9b8 	bl	8001098 <__io_getchar>
 8001d28:	4601      	mov	r1, r0
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	1c5a      	adds	r2, r3, #1
 8001d2e:	60ba      	str	r2, [r7, #8]
 8001d30:	b2ca      	uxtb	r2, r1
 8001d32:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	3301      	adds	r3, #1
 8001d38:	617b      	str	r3, [r7, #20]
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	dbf0      	blt.n	8001d24 <_read+0x12>
  }

  return len;
 8001d42:	687b      	ldr	r3, [r7, #4]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]
 8001d5c:	e009      	b.n	8001d72 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	1c5a      	adds	r2, r3, #1
 8001d62:	60ba      	str	r2, [r7, #8]
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff f988 	bl	800107c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	617b      	str	r3, [r7, #20]
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	dbf1      	blt.n	8001d5e <_write+0x12>
  }
  return len;
 8001d7a:	687b      	ldr	r3, [r7, #4]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <_close>:

int _close(int file)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001dac:	605a      	str	r2, [r3, #4]
  return 0;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <_isatty>:

int _isatty(int file)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001dc4:	2301      	movs	r3, #1
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b085      	sub	sp, #20
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	60f8      	str	r0, [r7, #12]
 8001dda:	60b9      	str	r1, [r7, #8]
 8001ddc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001df4:	4a14      	ldr	r2, [pc, #80]	@ (8001e48 <_sbrk+0x5c>)
 8001df6:	4b15      	ldr	r3, [pc, #84]	@ (8001e4c <_sbrk+0x60>)
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e00:	4b13      	ldr	r3, [pc, #76]	@ (8001e50 <_sbrk+0x64>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d102      	bne.n	8001e0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e08:	4b11      	ldr	r3, [pc, #68]	@ (8001e50 <_sbrk+0x64>)
 8001e0a:	4a12      	ldr	r2, [pc, #72]	@ (8001e54 <_sbrk+0x68>)
 8001e0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e0e:	4b10      	ldr	r3, [pc, #64]	@ (8001e50 <_sbrk+0x64>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4413      	add	r3, r2
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d207      	bcs.n	8001e2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e1c:	f006 fed2 	bl	8008bc4 <__errno>
 8001e20:	4603      	mov	r3, r0
 8001e22:	220c      	movs	r2, #12
 8001e24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e26:	f04f 33ff 	mov.w	r3, #4294967295
 8001e2a:	e009      	b.n	8001e40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e2c:	4b08      	ldr	r3, [pc, #32]	@ (8001e50 <_sbrk+0x64>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e32:	4b07      	ldr	r3, [pc, #28]	@ (8001e50 <_sbrk+0x64>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4413      	add	r3, r2
 8001e3a:	4a05      	ldr	r2, [pc, #20]	@ (8001e50 <_sbrk+0x64>)
 8001e3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	200a0000 	.word	0x200a0000
 8001e4c:	00000400 	.word	0x00000400
 8001e50:	200090c0 	.word	0x200090c0
 8001e54:	20009e18 	.word	0x20009e18

08001e58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e5c:	4b06      	ldr	r3, [pc, #24]	@ (8001e78 <SystemInit+0x20>)
 8001e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e62:	4a05      	ldr	r2, [pc, #20]	@ (8001e78 <SystemInit+0x20>)
 8001e64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <WIFI_SPI_Receive>:
  * @param  buffer: A char buffer, where the received data will be saved in.
  * @param  size: Buffer size
  * @retval WIFI_StatusTypeDef
  */

WIFI_StatusTypeDef WIFI_SPI_Receive(WIFI_HandleTypeDef* hwifi, char* buffer, uint16_t size){
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	4613      	mov	r3, r2
 8001e88:	80fb      	strh	r3, [r7, #6]

	uint16_t cnt = 0;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	82fb      	strh	r3, [r7, #22]
	memset(buffer, '\0', size); // Erase buffer
 8001e8e:	88fb      	ldrh	r3, [r7, #6]
 8001e90:	461a      	mov	r2, r3
 8001e92:	2100      	movs	r1, #0
 8001e94:	68b8      	ldr	r0, [r7, #8]
 8001e96:	f006 fe11 	bl	8008abc <memset>

	while (WIFI_IS_CMDDATA_READY())
 8001e9a:	e015      	b.n	8001ec8 <WIFI_SPI_Receive+0x4c>
	{
		// Fill buffer as long there is still space
		if ( (cnt > (size - 2)) || (HAL_SPI_Receive(hwifi->handle , (uint8_t*) buffer + cnt, 1, WIFI_TIMEOUT) != HAL_OK) )
 8001e9c:	88fb      	ldrh	r3, [r7, #6]
 8001e9e:	1e5a      	subs	r2, r3, #1
 8001ea0:	8afb      	ldrh	r3, [r7, #22]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	dd0b      	ble.n	8001ebe <WIFI_SPI_Receive+0x42>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6818      	ldr	r0, [r3, #0]
 8001eaa:	8afb      	ldrh	r3, [r7, #22]
 8001eac:	68ba      	ldr	r2, [r7, #8]
 8001eae:	18d1      	adds	r1, r2, r3
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f003 fc75 	bl	80057a2 <HAL_SPI_Receive>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <WIFI_SPI_Receive+0x46>
		  {
			Error_Handler();
 8001ebe:	f7ff fda5 	bl	8001a0c <Error_Handler>
		  }
		cnt+=2;
 8001ec2:	8afb      	ldrh	r3, [r7, #22]
 8001ec4:	3302      	adds	r3, #2
 8001ec6:	82fb      	strh	r3, [r7, #22]
	while (WIFI_IS_CMDDATA_READY())
 8001ec8:	2102      	movs	r1, #2
 8001eca:	4808      	ldr	r0, [pc, #32]	@ (8001eec <WIFI_SPI_Receive+0x70>)
 8001ecc:	f000 ff6c 	bl	8002da8 <HAL_GPIO_ReadPin>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d0e2      	beq.n	8001e9c <WIFI_SPI_Receive+0x20>
	}

	// Trim padding chars from data
	trimstr(buffer, size, (char) WIFI_RX_PADDING);
 8001ed6:	88fb      	ldrh	r3, [r7, #6]
 8001ed8:	2215      	movs	r2, #21
 8001eda:	4619      	mov	r1, r3
 8001edc:	68b8      	ldr	r0, [r7, #8]
 8001ede:	f000 fb9f 	bl	8002620 <trimstr>

	return WIFI_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3718      	adds	r7, #24
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	48001000 	.word	0x48001000

08001ef0 <WIFI_SPI_Transmit>:
  * @param  buffer: A char buffer, where the data to be sent is saved in.
  * @param  size: Buffer size (including \0, so it is compatible with sizeof())
  * @retval WIFI_StatusTypeDef
  */

WIFI_StatusTypeDef WIFI_SPI_Transmit(WIFI_HandleTypeDef* hwifi, char* buffer, uint16_t size){
 8001ef0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ef4:	b087      	sub	sp, #28
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	60f8      	str	r0, [r7, #12]
 8001efa:	60b9      	str	r1, [r7, #8]
 8001efc:	4613      	mov	r3, r2
 8001efe:	80fb      	strh	r3, [r7, #6]
 8001f00:	466b      	mov	r3, sp
 8001f02:	461e      	mov	r6, r3

	char bTx[(size/2)*2 + 1]; // Make a buffer that has an even amount of bytes (even is meant for the chars excluding \0)
 8001f04:	88fb      	ldrh	r3, [r7, #6]
 8001f06:	085b      	lsrs	r3, r3, #1
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	1c59      	adds	r1, r3, #1
 8001f0e:	1e4b      	subs	r3, r1, #1
 8001f10:	617b      	str	r3, [r7, #20]
 8001f12:	460a      	mov	r2, r1
 8001f14:	2300      	movs	r3, #0
 8001f16:	4690      	mov	r8, r2
 8001f18:	4699      	mov	r9, r3
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	f04f 0300 	mov.w	r3, #0
 8001f22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f2e:	460a      	mov	r2, r1
 8001f30:	2300      	movs	r3, #0
 8001f32:	4614      	mov	r4, r2
 8001f34:	461d      	mov	r5, r3
 8001f36:	f04f 0200 	mov.w	r2, #0
 8001f3a:	f04f 0300 	mov.w	r3, #0
 8001f3e:	00eb      	lsls	r3, r5, #3
 8001f40:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f44:	00e2      	lsls	r2, r4, #3
 8001f46:	460b      	mov	r3, r1
 8001f48:	3307      	adds	r3, #7
 8001f4a:	08db      	lsrs	r3, r3, #3
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	ebad 0d03 	sub.w	sp, sp, r3
 8001f52:	466b      	mov	r3, sp
 8001f54:	3300      	adds	r3, #0
 8001f56:	613b      	str	r3, [r7, #16]
	snprintf( bTx, size, buffer ); // Copy buffer in bTx
 8001f58:	88fb      	ldrh	r3, [r7, #6]
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	6938      	ldr	r0, [r7, #16]
 8001f60:	f006 fc80 	bl	8008864 <sniprintf>

	if ( !(size % 2) ) strcat(bTx, (char) WIFI_TX_PADDING); // If buffer had an odd amount of bytes, append a filler char to bTx
 8001f64:	88fb      	ldrh	r3, [r7, #6]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d103      	bne.n	8001f78 <WIFI_SPI_Transmit+0x88>
 8001f70:	210a      	movs	r1, #10
 8001f72:	6938      	ldr	r0, [r7, #16]
 8001f74:	f006 fdaa 	bl	8008acc <strcat>

	if (HAL_SPI_Transmit(hwifi->handle, (uint8_t*)bTx, size/2, WIFI_TIMEOUT) != HAL_OK) // size must be halved since 16bits are sent via SPI
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6818      	ldr	r0, [r3, #0]
 8001f7c:	88fb      	ldrh	r3, [r7, #6]
 8001f7e:	085b      	lsrs	r3, r3, #1
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	2303      	movs	r3, #3
 8001f84:	6939      	ldr	r1, [r7, #16]
 8001f86:	f003 fa96 	bl	80054b6 <HAL_SPI_Transmit>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <WIFI_SPI_Transmit+0xa4>
	  {
		Error_Handler();
 8001f90:	f7ff fd3c 	bl	8001a0c <Error_Handler>
	  }

	return WIFI_OK;
 8001f94:	2300      	movs	r3, #0
 8001f96:	46b5      	mov	sp, r6
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	371c      	adds	r7, #28
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08001fa4 <WIFI_Init>:
  * @brief  Resets and initialises the Wifi module.
  * @param  hwifi: Wifi handle, which decides which Wifi instance is used.
  * @retval WIFI_StatusTypeDef
  */

WIFI_StatusTypeDef WIFI_Init(WIFI_HandleTypeDef* hwifi){
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af02      	add	r7, sp, #8
 8001faa:	6078      	str	r0, [r7, #4]

	int msgLength = 0;
 8001fac:	2300      	movs	r3, #0
 8001fae:	60fb      	str	r3, [r7, #12]

	WIFI_RESET_MODULE();
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001fb6:	482a      	ldr	r0, [pc, #168]	@ (8002060 <WIFI_Init+0xbc>)
 8001fb8:	f000 ff0e 	bl	8002dd8 <HAL_GPIO_WritePin>
 8001fbc:	200a      	movs	r0, #10
 8001fbe:	f000 fc2b 	bl	8002818 <HAL_Delay>
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001fc8:	4825      	ldr	r0, [pc, #148]	@ (8002060 <WIFI_Init+0xbc>)
 8001fca:	f000 ff05 	bl	8002dd8 <HAL_GPIO_WritePin>
 8001fce:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001fd2:	f000 fc21 	bl	8002818 <HAL_Delay>
	WIFI_ENABLE_NSS();
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2101      	movs	r1, #1
 8001fda:	4821      	ldr	r0, [pc, #132]	@ (8002060 <WIFI_Init+0xbc>)
 8001fdc:	f000 fefc 	bl	8002dd8 <HAL_GPIO_WritePin>
 8001fe0:	200a      	movs	r0, #10
 8001fe2:	f000 fc19 	bl	8002818 <HAL_Delay>

	while(!WIFI_IS_CMDDATA_READY());
 8001fe6:	bf00      	nop
 8001fe8:	2102      	movs	r1, #2
 8001fea:	481d      	ldr	r0, [pc, #116]	@ (8002060 <WIFI_Init+0xbc>)
 8001fec:	f000 fedc 	bl	8002da8 <HAL_GPIO_ReadPin>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d1f8      	bne.n	8001fe8 <WIFI_Init+0x44>

	if(WIFI_SPI_Receive(hwifi, wifiRxBuffer, WIFI_RX_BUFFER_SIZE) != WIFI_OK) Error_Handler();
 8001ff6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ffa:	491a      	ldr	r1, [pc, #104]	@ (8002064 <WIFI_Init+0xc0>)
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff ff3d 	bl	8001e7c <WIFI_SPI_Receive>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <WIFI_Init+0x68>
 8002008:	f7ff fd00 	bl	8001a0c <Error_Handler>

	if( strcmp(wifiRxBuffer, WIFI_MSG_POWERUP) ) Error_Handler();
 800200c:	4916      	ldr	r1, [pc, #88]	@ (8002068 <WIFI_Init+0xc4>)
 800200e:	4815      	ldr	r0, [pc, #84]	@ (8002064 <WIFI_Init+0xc0>)
 8002010:	f7fe f8f6 	bl	8000200 <strcmp>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <WIFI_Init+0x7a>
 800201a:	f7ff fcf7 	bl	8001a0c <Error_Handler>

	WIFI_DISABLE_NSS();
 800201e:	2201      	movs	r2, #1
 8002020:	2101      	movs	r1, #1
 8002022:	480f      	ldr	r0, [pc, #60]	@ (8002060 <WIFI_Init+0xbc>)
 8002024:	f000 fed8 	bl	8002dd8 <HAL_GPIO_WritePin>
 8002028:	200a      	movs	r0, #10
 800202a:	f000 fbf5 	bl	8002818 <HAL_Delay>


	msgLength = sprintf(wifiTxBuffer, "Z3=0\r");
 800202e:	490f      	ldr	r1, [pc, #60]	@ (800206c <WIFI_Init+0xc8>)
 8002030:	480f      	ldr	r0, [pc, #60]	@ (8002070 <WIFI_Init+0xcc>)
 8002032:	f006 fc4b 	bl	80088cc <siprintf>
 8002036:	60f8      	str	r0, [r7, #12]
	WIFI_SendATCommand(hwifi, wifiTxBuffer, WIFI_TX_BUFFER_SIZE, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 8002038:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	4b09      	ldr	r3, [pc, #36]	@ (8002064 <WIFI_Init+0xc0>)
 8002040:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002044:	490a      	ldr	r1, [pc, #40]	@ (8002070 <WIFI_Init+0xcc>)
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f816 	bl	8002078 <WIFI_SendATCommand>


	printf("Answer reset:\n %s", wifiRxBuffer);
 800204c:	4905      	ldr	r1, [pc, #20]	@ (8002064 <WIFI_Init+0xc0>)
 800204e:	4809      	ldr	r0, [pc, #36]	@ (8002074 <WIFI_Init+0xd0>)
 8002050:	f006 fb98 	bl	8008784 <iprintf>


	return WIFI_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	48001000 	.word	0x48001000
 8002064:	200094c4 	.word	0x200094c4
 8002068:	0800cd84 	.word	0x0800cd84
 800206c:	0800cd8c 	.word	0x0800cd8c
 8002070:	200090c4 	.word	0x200090c4
 8002074:	0800cd94 	.word	0x0800cd94

08002078 <WIFI_SendATCommand>:
  * @param  bRx: Response buffer
  * @param  sizeCmd: Response buffer size
  * @retval WIFI_StatusTypeDef
  */

WIFI_StatusTypeDef WIFI_SendATCommand(WIFI_HandleTypeDef* hwifi, char* bCmd, uint16_t sizeCmd, char* bRx, uint16_t sizeRx){
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	603b      	str	r3, [r7, #0]
 8002084:	4613      	mov	r3, r2
 8002086:	80fb      	strh	r3, [r7, #6]

	while(!WIFI_IS_CMDDATA_READY());
 8002088:	bf00      	nop
 800208a:	2102      	movs	r1, #2
 800208c:	4828      	ldr	r0, [pc, #160]	@ (8002130 <WIFI_SendATCommand+0xb8>)
 800208e:	f000 fe8b 	bl	8002da8 <HAL_GPIO_ReadPin>
 8002092:	4603      	mov	r3, r0
 8002094:	2b01      	cmp	r3, #1
 8002096:	d1f8      	bne.n	800208a <WIFI_SendATCommand+0x12>

	WIFI_ENABLE_NSS();
 8002098:	2200      	movs	r2, #0
 800209a:	2101      	movs	r1, #1
 800209c:	4824      	ldr	r0, [pc, #144]	@ (8002130 <WIFI_SendATCommand+0xb8>)
 800209e:	f000 fe9b 	bl	8002dd8 <HAL_GPIO_WritePin>
 80020a2:	200a      	movs	r0, #10
 80020a4:	f000 fbb8 	bl	8002818 <HAL_Delay>

	if(WIFI_SPI_Transmit(hwifi, bCmd, sizeCmd) != WIFI_OK) Error_Handler();
 80020a8:	88fb      	ldrh	r3, [r7, #6]
 80020aa:	461a      	mov	r2, r3
 80020ac:	68b9      	ldr	r1, [r7, #8]
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	f7ff ff1e 	bl	8001ef0 <WIFI_SPI_Transmit>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <WIFI_SendATCommand+0x46>
 80020ba:	f7ff fca7 	bl	8001a0c <Error_Handler>

	WIFI_DISABLE_NSS();
 80020be:	2201      	movs	r2, #1
 80020c0:	2101      	movs	r1, #1
 80020c2:	481b      	ldr	r0, [pc, #108]	@ (8002130 <WIFI_SendATCommand+0xb8>)
 80020c4:	f000 fe88 	bl	8002dd8 <HAL_GPIO_WritePin>
 80020c8:	200a      	movs	r0, #10
 80020ca:	f000 fba5 	bl	8002818 <HAL_Delay>

	while(!WIFI_IS_CMDDATA_READY());
 80020ce:	bf00      	nop
 80020d0:	2102      	movs	r1, #2
 80020d2:	4817      	ldr	r0, [pc, #92]	@ (8002130 <WIFI_SendATCommand+0xb8>)
 80020d4:	f000 fe68 	bl	8002da8 <HAL_GPIO_ReadPin>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d1f8      	bne.n	80020d0 <WIFI_SendATCommand+0x58>

	WIFI_ENABLE_NSS();
 80020de:	2200      	movs	r2, #0
 80020e0:	2101      	movs	r1, #1
 80020e2:	4813      	ldr	r0, [pc, #76]	@ (8002130 <WIFI_SendATCommand+0xb8>)
 80020e4:	f000 fe78 	bl	8002dd8 <HAL_GPIO_WritePin>
 80020e8:	200a      	movs	r0, #10
 80020ea:	f000 fb95 	bl	8002818 <HAL_Delay>

	if(WIFI_SPI_Receive(hwifi, bRx, sizeRx) != WIFI_OK) Error_Handler();
 80020ee:	8b3b      	ldrh	r3, [r7, #24]
 80020f0:	461a      	mov	r2, r3
 80020f2:	6839      	ldr	r1, [r7, #0]
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f7ff fec1 	bl	8001e7c <WIFI_SPI_Receive>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <WIFI_SendATCommand+0x8c>
 8002100:	f7ff fc84 	bl	8001a0c <Error_Handler>

	if(WIFI_IS_CMDDATA_READY()) Error_Handler(); // If CMDDATA_READY is still high, then the buffer is too small for the data
 8002104:	2102      	movs	r1, #2
 8002106:	480a      	ldr	r0, [pc, #40]	@ (8002130 <WIFI_SendATCommand+0xb8>)
 8002108:	f000 fe4e 	bl	8002da8 <HAL_GPIO_ReadPin>
 800210c:	4603      	mov	r3, r0
 800210e:	2b01      	cmp	r3, #1
 8002110:	d101      	bne.n	8002116 <WIFI_SendATCommand+0x9e>
 8002112:	f7ff fc7b 	bl	8001a0c <Error_Handler>

	WIFI_DISABLE_NSS();
 8002116:	2201      	movs	r2, #1
 8002118:	2101      	movs	r1, #1
 800211a:	4805      	ldr	r0, [pc, #20]	@ (8002130 <WIFI_SendATCommand+0xb8>)
 800211c:	f000 fe5c 	bl	8002dd8 <HAL_GPIO_WritePin>
 8002120:	200a      	movs	r0, #10
 8002122:	f000 fb79 	bl	8002818 <HAL_Delay>

	return WIFI_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	48001000 	.word	0x48001000

08002134 <WIFI_JoinNetwork>:
  * 		the Wifi handle.
  * @param  hwifi: Wifi handle, which decides which Wifi instance is used.
  * @retval WIFI_StatusTypeDef
  */

WIFI_StatusTypeDef WIFI_JoinNetwork(WIFI_HandleTypeDef* hwifi){
 8002134:	b580      	push	{r7, lr}
 8002136:	b088      	sub	sp, #32
 8002138:	af02      	add	r7, sp, #8
 800213a:	6078      	str	r0, [r7, #4]

	int msgLength = 0;
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]

	// Set SSID
	msgLength = sprintf(wifiTxBuffer, "C1=%s\r", hwifi->ssid);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	461a      	mov	r2, r3
 8002146:	4975      	ldr	r1, [pc, #468]	@ (800231c <WIFI_JoinNetwork+0x1e8>)
 8002148:	4875      	ldr	r0, [pc, #468]	@ (8002320 <WIFI_JoinNetwork+0x1ec>)
 800214a:	f006 fbbf 	bl	80088cc <siprintf>
 800214e:	6178      	str	r0, [r7, #20]
	WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	b29b      	uxth	r3, r3
 8002154:	3301      	adds	r3, #1
 8002156:	b29a      	uxth	r2, r3
 8002158:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	4b71      	ldr	r3, [pc, #452]	@ (8002324 <WIFI_JoinNetwork+0x1f0>)
 8002160:	496f      	ldr	r1, [pc, #444]	@ (8002320 <WIFI_JoinNetwork+0x1ec>)
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7ff ff88 	bl	8002078 <WIFI_SendATCommand>

	// Set passphrase
	msgLength = sprintf(wifiTxBuffer, "C2=%s\r", hwifi->passphrase);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	461a      	mov	r2, r3
 800216e:	496e      	ldr	r1, [pc, #440]	@ (8002328 <WIFI_JoinNetwork+0x1f4>)
 8002170:	486b      	ldr	r0, [pc, #428]	@ (8002320 <WIFI_JoinNetwork+0x1ec>)
 8002172:	f006 fbab 	bl	80088cc <siprintf>
 8002176:	6178      	str	r0, [r7, #20]
	WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	b29b      	uxth	r3, r3
 800217c:	3301      	adds	r3, #1
 800217e:	b29a      	uxth	r2, r3
 8002180:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	4b67      	ldr	r3, [pc, #412]	@ (8002324 <WIFI_JoinNetwork+0x1f0>)
 8002188:	4965      	ldr	r1, [pc, #404]	@ (8002320 <WIFI_JoinNetwork+0x1ec>)
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7ff ff74 	bl	8002078 <WIFI_SendATCommand>

	// Set security type
	msgLength = sprintf(wifiTxBuffer, "C3=%d\r", hwifi->securityType);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	7b1b      	ldrb	r3, [r3, #12]
 8002194:	461a      	mov	r2, r3
 8002196:	4965      	ldr	r1, [pc, #404]	@ (800232c <WIFI_JoinNetwork+0x1f8>)
 8002198:	4861      	ldr	r0, [pc, #388]	@ (8002320 <WIFI_JoinNetwork+0x1ec>)
 800219a:	f006 fb97 	bl	80088cc <siprintf>
 800219e:	6178      	str	r0, [r7, #20]
	WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	3301      	adds	r3, #1
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	4b5d      	ldr	r3, [pc, #372]	@ (8002324 <WIFI_JoinNetwork+0x1f0>)
 80021b0:	495b      	ldr	r1, [pc, #364]	@ (8002320 <WIFI_JoinNetwork+0x1ec>)
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff ff60 	bl	8002078 <WIFI_SendATCommand>

	// Set if IP is requested via DHCP
	msgLength = sprintf(wifiTxBuffer, "C4=%d\r", hwifi->DHCP);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	7b5b      	ldrb	r3, [r3, #13]
 80021bc:	461a      	mov	r2, r3
 80021be:	495c      	ldr	r1, [pc, #368]	@ (8002330 <WIFI_JoinNetwork+0x1fc>)
 80021c0:	4857      	ldr	r0, [pc, #348]	@ (8002320 <WIFI_JoinNetwork+0x1ec>)
 80021c2:	f006 fb83 	bl	80088cc <siprintf>
 80021c6:	6178      	str	r0, [r7, #20]
	WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	3301      	adds	r3, #1
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	4b53      	ldr	r3, [pc, #332]	@ (8002324 <WIFI_JoinNetwork+0x1f0>)
 80021d8:	4951      	ldr	r1, [pc, #324]	@ (8002320 <WIFI_JoinNetwork+0x1ec>)
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff ff4c 	bl	8002078 <WIFI_SendATCommand>

	// If DHCP is not used, set the additionally needed configurations
	if(hwifi->DHCP != SET){
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	7b5b      	ldrb	r3, [r3, #13]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d04f      	beq.n	8002288 <WIFI_JoinNetwork+0x154>

		// Set module's IP address
		msgLength = sprintf(wifiTxBuffer, "C6=%s\r", hwifi->ipAddress);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3314      	adds	r3, #20
 80021ec:	461a      	mov	r2, r3
 80021ee:	4951      	ldr	r1, [pc, #324]	@ (8002334 <WIFI_JoinNetwork+0x200>)
 80021f0:	484b      	ldr	r0, [pc, #300]	@ (8002320 <WIFI_JoinNetwork+0x1ec>)
 80021f2:	f006 fb6b 	bl	80088cc <siprintf>
 80021f6:	6178      	str	r0, [r7, #20]
		WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	3301      	adds	r3, #1
 80021fe:	b29a      	uxth	r2, r3
 8002200:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	4b47      	ldr	r3, [pc, #284]	@ (8002324 <WIFI_JoinNetwork+0x1f0>)
 8002208:	4945      	ldr	r1, [pc, #276]	@ (8002320 <WIFI_JoinNetwork+0x1ec>)
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7ff ff34 	bl	8002078 <WIFI_SendATCommand>

		// Set module's network mask
		msgLength = sprintf(wifiTxBuffer, "C7=%s\r", hwifi->networkMask);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3345      	adds	r3, #69	@ 0x45
 8002214:	461a      	mov	r2, r3
 8002216:	4948      	ldr	r1, [pc, #288]	@ (8002338 <WIFI_JoinNetwork+0x204>)
 8002218:	4841      	ldr	r0, [pc, #260]	@ (8002320 <WIFI_JoinNetwork+0x1ec>)
 800221a:	f006 fb57 	bl	80088cc <siprintf>
 800221e:	6178      	str	r0, [r7, #20]
		WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	b29b      	uxth	r3, r3
 8002224:	3301      	adds	r3, #1
 8002226:	b29a      	uxth	r2, r3
 8002228:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	4b3d      	ldr	r3, [pc, #244]	@ (8002324 <WIFI_JoinNetwork+0x1f0>)
 8002230:	493b      	ldr	r1, [pc, #236]	@ (8002320 <WIFI_JoinNetwork+0x1ec>)
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7ff ff20 	bl	8002078 <WIFI_SendATCommand>

		// Set module's default gateway
		msgLength = sprintf(wifiTxBuffer, "C8=%s\r", hwifi->defaultGateway);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3356      	adds	r3, #86	@ 0x56
 800223c:	461a      	mov	r2, r3
 800223e:	493f      	ldr	r1, [pc, #252]	@ (800233c <WIFI_JoinNetwork+0x208>)
 8002240:	4837      	ldr	r0, [pc, #220]	@ (8002320 <WIFI_JoinNetwork+0x1ec>)
 8002242:	f006 fb43 	bl	80088cc <siprintf>
 8002246:	6178      	str	r0, [r7, #20]
		WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	b29b      	uxth	r3, r3
 800224c:	3301      	adds	r3, #1
 800224e:	b29a      	uxth	r2, r3
 8002250:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002254:	9300      	str	r3, [sp, #0]
 8002256:	4b33      	ldr	r3, [pc, #204]	@ (8002324 <WIFI_JoinNetwork+0x1f0>)
 8002258:	4931      	ldr	r1, [pc, #196]	@ (8002320 <WIFI_JoinNetwork+0x1ec>)
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff ff0c 	bl	8002078 <WIFI_SendATCommand>

		// Set module's primary DNS server
		msgLength = sprintf(wifiTxBuffer, "C9=%s\r", hwifi->primaryDNSServer);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3367      	adds	r3, #103	@ 0x67
 8002264:	461a      	mov	r2, r3
 8002266:	4936      	ldr	r1, [pc, #216]	@ (8002340 <WIFI_JoinNetwork+0x20c>)
 8002268:	482d      	ldr	r0, [pc, #180]	@ (8002320 <WIFI_JoinNetwork+0x1ec>)
 800226a:	f006 fb2f 	bl	80088cc <siprintf>
 800226e:	6178      	str	r0, [r7, #20]
		WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	b29b      	uxth	r3, r3
 8002274:	3301      	adds	r3, #1
 8002276:	b29a      	uxth	r2, r3
 8002278:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800227c:	9300      	str	r3, [sp, #0]
 800227e:	4b29      	ldr	r3, [pc, #164]	@ (8002324 <WIFI_JoinNetwork+0x1f0>)
 8002280:	4927      	ldr	r1, [pc, #156]	@ (8002320 <WIFI_JoinNetwork+0x1ec>)
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff fef8 	bl	8002078 <WIFI_SendATCommand>

	}

	// Join the network
	msgLength = sprintf(wifiTxBuffer, "C0\r");
 8002288:	492e      	ldr	r1, [pc, #184]	@ (8002344 <WIFI_JoinNetwork+0x210>)
 800228a:	4825      	ldr	r0, [pc, #148]	@ (8002320 <WIFI_JoinNetwork+0x1ec>)
 800228c:	f006 fb1e 	bl	80088cc <siprintf>
 8002290:	6178      	str	r0, [r7, #20]
	WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	b29b      	uxth	r3, r3
 8002296:	3301      	adds	r3, #1
 8002298:	b29a      	uxth	r2, r3
 800229a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800229e:	9300      	str	r3, [sp, #0]
 80022a0:	4b20      	ldr	r3, [pc, #128]	@ (8002324 <WIFI_JoinNetwork+0x1f0>)
 80022a2:	491f      	ldr	r1, [pc, #124]	@ (8002320 <WIFI_JoinNetwork+0x1ec>)
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f7ff fee7 	bl	8002078 <WIFI_SendATCommand>

	// If there was an error, call the error handler
	if(strstr(wifiRxBuffer, "ERROR") != NULL) Error_Handler();
 80022aa:	4927      	ldr	r1, [pc, #156]	@ (8002348 <WIFI_JoinNetwork+0x214>)
 80022ac:	481d      	ldr	r0, [pc, #116]	@ (8002324 <WIFI_JoinNetwork+0x1f0>)
 80022ae:	f006 fc29 	bl	8008b04 <strstr>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <WIFI_JoinNetwork+0x188>
 80022b8:	f7ff fba8 	bl	8001a0c <Error_Handler>

	// If the module's IP address was assigned by DHCP, then parse it
	// from the response and save it in the Wifi handle.
	if(hwifi->DHCP == SET){
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	7b5b      	ldrb	r3, [r3, #13]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d11f      	bne.n	8002304 <WIFI_JoinNetwork+0x1d0>
		// The IP address is between the first and second comma
		char* startPos = strstr(wifiRxBuffer, ",");
 80022c4:	212c      	movs	r1, #44	@ 0x2c
 80022c6:	4817      	ldr	r0, [pc, #92]	@ (8002324 <WIFI_JoinNetwork+0x1f0>)
 80022c8:	f006 fc0f 	bl	8008aea <strchr>
 80022cc:	6138      	str	r0, [r7, #16]
		char* endPos = strstr(startPos+1, ",");
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	3301      	adds	r3, #1
 80022d2:	212c      	movs	r1, #44	@ 0x2c
 80022d4:	4618      	mov	r0, r3
 80022d6:	f006 fc08 	bl	8008aea <strchr>
 80022da:	60f8      	str	r0, [r7, #12]

		// Check whether the commas have been found
		if(startPos == NULL || endPos == NULL) Error_Handler();
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d002      	beq.n	80022e8 <WIFI_JoinNetwork+0x1b4>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <WIFI_JoinNetwork+0x1b8>
 80022e8:	f7ff fb90 	bl	8001a0c <Error_Handler>

		// Copy the IP address from the response buffer into the Wifi handle
		// For n set IP_length+1, because the ending char \0 must be considered
		snprintf(hwifi->ipAddress, endPos - startPos, startPos+1);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f103 0014 	add.w	r0, r3, #20
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	4619      	mov	r1, r3
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	3301      	adds	r3, #1
 80022fe:	461a      	mov	r2, r3
 8002300:	f006 fab0 	bl	8008864 <sniprintf>
	}

    // Print the IP address
    printf("Connected to network with IP address: %s\r\n", hwifi->ipAddress);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3314      	adds	r3, #20
 8002308:	4619      	mov	r1, r3
 800230a:	4810      	ldr	r0, [pc, #64]	@ (800234c <WIFI_JoinNetwork+0x218>)
 800230c:	f006 fa3a 	bl	8008784 <iprintf>

	return WIFI_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3718      	adds	r7, #24
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	0800ce5c 	.word	0x0800ce5c
 8002320:	200090c4 	.word	0x200090c4
 8002324:	200094c4 	.word	0x200094c4
 8002328:	0800ce64 	.word	0x0800ce64
 800232c:	0800ce6c 	.word	0x0800ce6c
 8002330:	0800ce74 	.word	0x0800ce74
 8002334:	0800ce7c 	.word	0x0800ce7c
 8002338:	0800ce84 	.word	0x0800ce84
 800233c:	0800ce8c 	.word	0x0800ce8c
 8002340:	0800ce94 	.word	0x0800ce94
 8002344:	0800ce9c 	.word	0x0800ce9c
 8002348:	0800ce3c 	.word	0x0800ce3c
 800234c:	0800cea0 	.word	0x0800cea0

08002350 <WIFI_MQTTClientInit>:
  * @brief  Initialises the module for using the MQTT Protocol
  * @param  hwifi: Wifi handle, which decides which Wifi instance is used.
  * @retval WIFI_StatusTypeDef
  */

WIFI_StatusTypeDef WIFI_MQTTClientInit(WIFI_HandleTypeDef* hwifi){
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af02      	add	r7, sp, #8
 8002356:	6078      	str	r0, [r7, #4]

	int msgLength = 0;
 8002358:	2300      	movs	r3, #0
 800235a:	60fb      	str	r3, [r7, #12]

	// Set publish topic
	msgLength = sprintf(wifiTxBuffer, "PM=0,%s\r", hwifi->mqtt.publishTopic);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3378      	adds	r3, #120	@ 0x78
 8002360:	461a      	mov	r2, r3
 8002362:	4979      	ldr	r1, [pc, #484]	@ (8002548 <WIFI_MQTTClientInit+0x1f8>)
 8002364:	4879      	ldr	r0, [pc, #484]	@ (800254c <WIFI_MQTTClientInit+0x1fc>)
 8002366:	f006 fab1 	bl	80088cc <siprintf>
 800236a:	60f8      	str	r0, [r7, #12]
	WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	b29b      	uxth	r3, r3
 8002370:	3301      	adds	r3, #1
 8002372:	b29a      	uxth	r2, r3
 8002374:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	4b75      	ldr	r3, [pc, #468]	@ (8002550 <WIFI_MQTTClientInit+0x200>)
 800237c:	4973      	ldr	r1, [pc, #460]	@ (800254c <WIFI_MQTTClientInit+0x1fc>)
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7ff fe7a 	bl	8002078 <WIFI_SendATCommand>

	// Set subscribe topic
	msgLength = sprintf(wifiTxBuffer, "PM=1,%s\r", hwifi->mqtt.subscribeTopic);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	33b8      	adds	r3, #184	@ 0xb8
 8002388:	461a      	mov	r2, r3
 800238a:	4972      	ldr	r1, [pc, #456]	@ (8002554 <WIFI_MQTTClientInit+0x204>)
 800238c:	486f      	ldr	r0, [pc, #444]	@ (800254c <WIFI_MQTTClientInit+0x1fc>)
 800238e:	f006 fa9d 	bl	80088cc <siprintf>
 8002392:	60f8      	str	r0, [r7, #12]
	WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	b29b      	uxth	r3, r3
 8002398:	3301      	adds	r3, #1
 800239a:	b29a      	uxth	r2, r3
 800239c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	4b6b      	ldr	r3, [pc, #428]	@ (8002550 <WIFI_MQTTClientInit+0x200>)
 80023a4:	4969      	ldr	r1, [pc, #420]	@ (800254c <WIFI_MQTTClientInit+0x1fc>)
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7ff fe66 	bl	8002078 <WIFI_SendATCommand>

	// Set security mode
	msgLength = sprintf(wifiTxBuffer, "PM=2,%d\r", hwifi->mqtt.securityMode);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 30f8 	ldrb.w	r3, [r3, #248]	@ 0xf8
 80023b2:	461a      	mov	r2, r3
 80023b4:	4968      	ldr	r1, [pc, #416]	@ (8002558 <WIFI_MQTTClientInit+0x208>)
 80023b6:	4865      	ldr	r0, [pc, #404]	@ (800254c <WIFI_MQTTClientInit+0x1fc>)
 80023b8:	f006 fa88 	bl	80088cc <siprintf>
 80023bc:	60f8      	str	r0, [r7, #12]
	WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	3301      	adds	r3, #1
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	4b60      	ldr	r3, [pc, #384]	@ (8002550 <WIFI_MQTTClientInit+0x200>)
 80023ce:	495f      	ldr	r1, [pc, #380]	@ (800254c <WIFI_MQTTClientInit+0x1fc>)
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f7ff fe51 	bl	8002078 <WIFI_SendATCommand>

	if(hwifi->mqtt.securityMode == WIFI_MQTT_SECURITY_USER_PW){
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 30f8 	ldrb.w	r3, [r3, #248]	@ 0xf8
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d128      	bne.n	8002432 <WIFI_MQTTClientInit+0xe2>

		// Set user name
		msgLength = sprintf(wifiTxBuffer, "PM=3,%s\r", hwifi->mqtt.userName);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	33f9      	adds	r3, #249	@ 0xf9
 80023e4:	461a      	mov	r2, r3
 80023e6:	495d      	ldr	r1, [pc, #372]	@ (800255c <WIFI_MQTTClientInit+0x20c>)
 80023e8:	4858      	ldr	r0, [pc, #352]	@ (800254c <WIFI_MQTTClientInit+0x1fc>)
 80023ea:	f006 fa6f 	bl	80088cc <siprintf>
 80023ee:	60f8      	str	r0, [r7, #12]
		WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	3301      	adds	r3, #1
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	4b54      	ldr	r3, [pc, #336]	@ (8002550 <WIFI_MQTTClientInit+0x200>)
 8002400:	4952      	ldr	r1, [pc, #328]	@ (800254c <WIFI_MQTTClientInit+0x1fc>)
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7ff fe38 	bl	8002078 <WIFI_SendATCommand>

		// Set password
		msgLength = sprintf(wifiTxBuffer, "PM=4,%s\r", hwifi->mqtt.password);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f203 1319 	addw	r3, r3, #281	@ 0x119
 800240e:	461a      	mov	r2, r3
 8002410:	4953      	ldr	r1, [pc, #332]	@ (8002560 <WIFI_MQTTClientInit+0x210>)
 8002412:	484e      	ldr	r0, [pc, #312]	@ (800254c <WIFI_MQTTClientInit+0x1fc>)
 8002414:	f006 fa5a 	bl	80088cc <siprintf>
 8002418:	60f8      	str	r0, [r7, #12]
		WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	b29b      	uxth	r3, r3
 800241e:	3301      	adds	r3, #1
 8002420:	b29a      	uxth	r2, r3
 8002422:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	4b49      	ldr	r3, [pc, #292]	@ (8002550 <WIFI_MQTTClientInit+0x200>)
 800242a:	4948      	ldr	r1, [pc, #288]	@ (800254c <WIFI_MQTTClientInit+0x1fc>)
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f7ff fe23 	bl	8002078 <WIFI_SendATCommand>
	} else if(hwifi->mqtt.securityMode == WIFI_MQTT_SECURITY_CERT) {
		// TODO: Add certificate functionality
	}

	// Set keep alive time
	msgLength = sprintf(wifiTxBuffer, "PM=6,%u\r", hwifi->mqtt.keepAlive);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f8b3 3152 	ldrh.w	r3, [r3, #338]	@ 0x152
 8002438:	461a      	mov	r2, r3
 800243a:	494a      	ldr	r1, [pc, #296]	@ (8002564 <WIFI_MQTTClientInit+0x214>)
 800243c:	4843      	ldr	r0, [pc, #268]	@ (800254c <WIFI_MQTTClientInit+0x1fc>)
 800243e:	f006 fa45 	bl	80088cc <siprintf>
 8002442:	60f8      	str	r0, [r7, #12]
	WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	b29b      	uxth	r3, r3
 8002448:	3301      	adds	r3, #1
 800244a:	b29a      	uxth	r2, r3
 800244c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	4b3f      	ldr	r3, [pc, #252]	@ (8002550 <WIFI_MQTTClientInit+0x200>)
 8002454:	493d      	ldr	r1, [pc, #244]	@ (800254c <WIFI_MQTTClientInit+0x1fc>)
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7ff fe0e 	bl	8002078 <WIFI_SendATCommand>

	// Set communication socket
	msgLength = sprintf(wifiTxBuffer, "P0=0\r");
 800245c:	4942      	ldr	r1, [pc, #264]	@ (8002568 <WIFI_MQTTClientInit+0x218>)
 800245e:	483b      	ldr	r0, [pc, #236]	@ (800254c <WIFI_MQTTClientInit+0x1fc>)
 8002460:	f006 fa34 	bl	80088cc <siprintf>
 8002464:	60f8      	str	r0, [r7, #12]
	WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	b29b      	uxth	r3, r3
 800246a:	3301      	adds	r3, #1
 800246c:	b29a      	uxth	r2, r3
 800246e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	4b36      	ldr	r3, [pc, #216]	@ (8002550 <WIFI_MQTTClientInit+0x200>)
 8002476:	4935      	ldr	r1, [pc, #212]	@ (800254c <WIFI_MQTTClientInit+0x1fc>)
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f7ff fdfd 	bl	8002078 <WIFI_SendATCommand>

	// Set transport protocol
	msgLength = sprintf(wifiTxBuffer, "P1=%d\r", WIFI_MQTT_PROTOCOL);
 800247e:	2204      	movs	r2, #4
 8002480:	493a      	ldr	r1, [pc, #232]	@ (800256c <WIFI_MQTTClientInit+0x21c>)
 8002482:	4832      	ldr	r0, [pc, #200]	@ (800254c <WIFI_MQTTClientInit+0x1fc>)
 8002484:	f006 fa22 	bl	80088cc <siprintf>
 8002488:	60f8      	str	r0, [r7, #12]
	WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	b29b      	uxth	r3, r3
 800248e:	3301      	adds	r3, #1
 8002490:	b29a      	uxth	r2, r3
 8002492:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	4b2d      	ldr	r3, [pc, #180]	@ (8002550 <WIFI_MQTTClientInit+0x200>)
 800249a:	492c      	ldr	r1, [pc, #176]	@ (800254c <WIFI_MQTTClientInit+0x1fc>)
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f7ff fdeb 	bl	8002078 <WIFI_SendATCommand>

	// Set port
	msgLength = sprintf(wifiTxBuffer, "P2=%u\r", hwifi->port);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	8a1b      	ldrh	r3, [r3, #16]
 80024a6:	461a      	mov	r2, r3
 80024a8:	4931      	ldr	r1, [pc, #196]	@ (8002570 <WIFI_MQTTClientInit+0x220>)
 80024aa:	4828      	ldr	r0, [pc, #160]	@ (800254c <WIFI_MQTTClientInit+0x1fc>)
 80024ac:	f006 fa0e 	bl	80088cc <siprintf>
 80024b0:	60f8      	str	r0, [r7, #12]
	WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	3301      	adds	r3, #1
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	4b23      	ldr	r3, [pc, #140]	@ (8002550 <WIFI_MQTTClientInit+0x200>)
 80024c2:	4922      	ldr	r1, [pc, #136]	@ (800254c <WIFI_MQTTClientInit+0x1fc>)
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f7ff fdd7 	bl	8002078 <WIFI_SendATCommand>

	// Set remote IP
	msgLength = sprintf(wifiTxBuffer, "D0=%s\r", hwifi->remoteIpAddress);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	3325      	adds	r3, #37	@ 0x25
 80024ce:	461a      	mov	r2, r3
 80024d0:	4928      	ldr	r1, [pc, #160]	@ (8002574 <WIFI_MQTTClientInit+0x224>)
 80024d2:	481e      	ldr	r0, [pc, #120]	@ (800254c <WIFI_MQTTClientInit+0x1fc>)
 80024d4:	f006 f9fa 	bl	80088cc <siprintf>
 80024d8:	60f8      	str	r0, [r7, #12]
	WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	b29b      	uxth	r3, r3
 80024de:	3301      	adds	r3, #1
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	4b19      	ldr	r3, [pc, #100]	@ (8002550 <WIFI_MQTTClientInit+0x200>)
 80024ea:	4918      	ldr	r1, [pc, #96]	@ (800254c <WIFI_MQTTClientInit+0x1fc>)
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7ff fdc3 	bl	8002078 <WIFI_SendATCommand>

	// Set read packet size
	msgLength = sprintf(wifiTxBuffer, "R1=%d\r", WIFI_READ_PACKET_SIZE);
 80024f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024f6:	4920      	ldr	r1, [pc, #128]	@ (8002578 <WIFI_MQTTClientInit+0x228>)
 80024f8:	4814      	ldr	r0, [pc, #80]	@ (800254c <WIFI_MQTTClientInit+0x1fc>)
 80024fa:	f006 f9e7 	bl	80088cc <siprintf>
 80024fe:	60f8      	str	r0, [r7, #12]
	WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	b29b      	uxth	r3, r3
 8002504:	3301      	adds	r3, #1
 8002506:	b29a      	uxth	r2, r3
 8002508:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800250c:	9300      	str	r3, [sp, #0]
 800250e:	4b10      	ldr	r3, [pc, #64]	@ (8002550 <WIFI_MQTTClientInit+0x200>)
 8002510:	490e      	ldr	r1, [pc, #56]	@ (800254c <WIFI_MQTTClientInit+0x1fc>)
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7ff fdb0 	bl	8002078 <WIFI_SendATCommand>

	// Set read timeout
	msgLength = sprintf(wifiTxBuffer, "R2=%d\r", WIFI_READ_TIMEOUT);
 8002518:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800251c:	4917      	ldr	r1, [pc, #92]	@ (800257c <WIFI_MQTTClientInit+0x22c>)
 800251e:	480b      	ldr	r0, [pc, #44]	@ (800254c <WIFI_MQTTClientInit+0x1fc>)
 8002520:	f006 f9d4 	bl	80088cc <siprintf>
 8002524:	60f8      	str	r0, [r7, #12]
	WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	b29b      	uxth	r3, r3
 800252a:	3301      	adds	r3, #1
 800252c:	b29a      	uxth	r2, r3
 800252e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	4b06      	ldr	r3, [pc, #24]	@ (8002550 <WIFI_MQTTClientInit+0x200>)
 8002536:	4905      	ldr	r1, [pc, #20]	@ (800254c <WIFI_MQTTClientInit+0x1fc>)
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f7ff fd9d 	bl	8002078 <WIFI_SendATCommand>

	return WIFI_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	0800cecc 	.word	0x0800cecc
 800254c:	200090c4 	.word	0x200090c4
 8002550:	200094c4 	.word	0x200094c4
 8002554:	0800ced8 	.word	0x0800ced8
 8002558:	0800cee4 	.word	0x0800cee4
 800255c:	0800cef0 	.word	0x0800cef0
 8002560:	0800cefc 	.word	0x0800cefc
 8002564:	0800cf08 	.word	0x0800cf08
 8002568:	0800cdd8 	.word	0x0800cdd8
 800256c:	0800cde0 	.word	0x0800cde0
 8002570:	0800cde8 	.word	0x0800cde8
 8002574:	0800cf14 	.word	0x0800cf14
 8002578:	0800cdf8 	.word	0x0800cdf8
 800257c:	0800ce00 	.word	0x0800ce00

08002580 <WIFI_MQTTPublish>:
  * @param  message: A char buffer, where the message is contained.
  * @param  sizeMessage: Message buffer size.
  * @retval WIFI_StatusTypeDef
  */

WIFI_StatusTypeDef WIFI_MQTTPublish(WIFI_HandleTypeDef* hwifi, char* message, uint16_t sizeMessage){
 8002580:	b580      	push	{r7, lr}
 8002582:	b088      	sub	sp, #32
 8002584:	af02      	add	r7, sp, #8
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	4613      	mov	r3, r2
 800258c:	80fb      	strh	r3, [r7, #6]

	int msgLength = 0;
 800258e:	2300      	movs	r3, #0
 8002590:	617b      	str	r3, [r7, #20]

	// Start client connection
	msgLength = sprintf(wifiTxBuffer, "P6=1\r");
 8002592:	491e      	ldr	r1, [pc, #120]	@ (800260c <WIFI_MQTTPublish+0x8c>)
 8002594:	481e      	ldr	r0, [pc, #120]	@ (8002610 <WIFI_MQTTPublish+0x90>)
 8002596:	f006 f999 	bl	80088cc <siprintf>
 800259a:	6178      	str	r0, [r7, #20]
	WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	b29b      	uxth	r3, r3
 80025a0:	3301      	adds	r3, #1
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002614 <WIFI_MQTTPublish+0x94>)
 80025ac:	4918      	ldr	r1, [pc, #96]	@ (8002610 <WIFI_MQTTPublish+0x90>)
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f7ff fd62 	bl	8002078 <WIFI_SendATCommand>

	// Send response
	msgLength = sprintf(wifiTxBuffer, "S3=%d\r%s", strlen(message), message);
 80025b4:	68b8      	ldr	r0, [r7, #8]
 80025b6:	f7fd fe83 	bl	80002c0 <strlen>
 80025ba:	4602      	mov	r2, r0
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	4916      	ldr	r1, [pc, #88]	@ (8002618 <WIFI_MQTTPublish+0x98>)
 80025c0:	4813      	ldr	r0, [pc, #76]	@ (8002610 <WIFI_MQTTPublish+0x90>)
 80025c2:	f006 f983 	bl	80088cc <siprintf>
 80025c6:	6178      	str	r0, [r7, #20]
	WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	3301      	adds	r3, #1
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002614 <WIFI_MQTTPublish+0x94>)
 80025d8:	490d      	ldr	r1, [pc, #52]	@ (8002610 <WIFI_MQTTPublish+0x90>)
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f7ff fd4c 	bl	8002078 <WIFI_SendATCommand>

	// Stop client connection
	msgLength = sprintf(wifiTxBuffer, "P6=0\r");
 80025e0:	490e      	ldr	r1, [pc, #56]	@ (800261c <WIFI_MQTTPublish+0x9c>)
 80025e2:	480b      	ldr	r0, [pc, #44]	@ (8002610 <WIFI_MQTTPublish+0x90>)
 80025e4:	f006 f972 	bl	80088cc <siprintf>
 80025e8:	6178      	str	r0, [r7, #20]
	WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	3301      	adds	r3, #1
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	4b06      	ldr	r3, [pc, #24]	@ (8002614 <WIFI_MQTTPublish+0x94>)
 80025fa:	4905      	ldr	r1, [pc, #20]	@ (8002610 <WIFI_MQTTPublish+0x90>)
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f7ff fd3b 	bl	8002078 <WIFI_SendATCommand>

	return WIFI_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3718      	adds	r7, #24
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	0800cf1c 	.word	0x0800cf1c
 8002610:	200090c4 	.word	0x200090c4
 8002614:	200094c4 	.word	0x200094c4
 8002618:	0800ce48 	.word	0x0800ce48
 800261c:	0800cf24 	.word	0x0800cf24

08002620 <trimstr>:
  * @param  strSize: C string size
  * @param  size: Character to trim
  * @retval None
  */

void trimstr(char* str, uint32_t strSize, char c){
 8002620:	b580      	push	{r7, lr}
 8002622:	b08a      	sub	sp, #40	@ 0x28
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	4613      	mov	r3, r2
 800262c:	71fb      	strb	r3, [r7, #7]

	uint32_t trimPos = 0;
 800262e:	2300      	movs	r3, #0
 8002630:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t endPos = 0;
 8002632:	2300      	movs	r3, #0
 8002634:	623b      	str	r3, [r7, #32]

	// Find end of string a.k.a. first occurrence of '\0'
	for(uint32_t i = 0; i < strSize; i++){
 8002636:	2300      	movs	r3, #0
 8002638:	61fb      	str	r3, [r7, #28]
 800263a:	e00c      	b.n	8002656 <trimstr+0x36>
		if( str[i] != '\0' ) continue;
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	4413      	add	r3, r2
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d102      	bne.n	800264e <trimstr+0x2e>
		else{
			endPos = i;
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	623b      	str	r3, [r7, #32]
			break;
 800264c:	e007      	b.n	800265e <trimstr+0x3e>
		if( str[i] != '\0' ) continue;
 800264e:	bf00      	nop
	for(uint32_t i = 0; i < strSize; i++){
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	3301      	adds	r3, #1
 8002654:	61fb      	str	r3, [r7, #28]
 8002656:	69fa      	ldr	r2, [r7, #28]
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	429a      	cmp	r2, r3
 800265c:	d3ee      	bcc.n	800263c <trimstr+0x1c>

	/**
	 * If c is at the end of the string, replace it with '\0'.
	 * Repeat until a char emerges that is not c.
	 */
	for(uint32_t i = endPos -1; i > 0; i--){
 800265e:	6a3b      	ldr	r3, [r7, #32]
 8002660:	3b01      	subs	r3, #1
 8002662:	61bb      	str	r3, [r7, #24]
 8002664:	e010      	b.n	8002688 <trimstr+0x68>
		if( str[i] == c ){
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	4413      	add	r3, r2
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	79fa      	ldrb	r2, [r7, #7]
 8002670:	429a      	cmp	r2, r3
 8002672:	d10d      	bne.n	8002690 <trimstr+0x70>
			str[i] = '\0';
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	4413      	add	r3, r2
 800267a:	2200      	movs	r2, #0
 800267c:	701a      	strb	r2, [r3, #0]
			endPos = i;
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	623b      	str	r3, [r7, #32]
	for(uint32_t i = endPos -1; i > 0; i--){
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	3b01      	subs	r3, #1
 8002686:	61bb      	str	r3, [r7, #24]
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1eb      	bne.n	8002666 <trimstr+0x46>
 800268e:	e000      	b.n	8002692 <trimstr+0x72>
		}
		else break;
 8002690:	bf00      	nop
	}

	// Find the position of the first char in the string that is not c.
	for(uint32_t i = 0; i < strSize; i++){
 8002692:	2300      	movs	r3, #0
 8002694:	617b      	str	r3, [r7, #20]
 8002696:	e00c      	b.n	80026b2 <trimstr+0x92>
		if(str[i] == c){
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	4413      	add	r3, r2
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	79fa      	ldrb	r2, [r7, #7]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d10a      	bne.n	80026bc <trimstr+0x9c>
			trimPos = i + 1;
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	3301      	adds	r3, #1
 80026aa:	627b      	str	r3, [r7, #36]	@ 0x24
	for(uint32_t i = 0; i < strSize; i++){
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	3301      	adds	r3, #1
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d3ee      	bcc.n	8002698 <trimstr+0x78>
 80026ba:	e000      	b.n	80026be <trimstr+0x9e>
		}else break;
 80026bc:	bf00      	nop
	}
	// Trim leading c
	snprintf( str, endPos + 1 - trimPos, &str[trimPos] );
 80026be:	6a3a      	ldr	r2, [r7, #32]
 80026c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	1c59      	adds	r1, r3, #1
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ca:	4413      	add	r3, r2
 80026cc:	461a      	mov	r2, r3
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f006 f8c8 	bl	8008864 <sniprintf>
}
 80026d4:	bf00      	nop
 80026d6:	3728      	adds	r7, #40	@ 0x28
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80026dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002714 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80026e0:	f7ff fbba 	bl	8001e58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026e4:	480c      	ldr	r0, [pc, #48]	@ (8002718 <LoopForever+0x6>)
  ldr r1, =_edata
 80026e6:	490d      	ldr	r1, [pc, #52]	@ (800271c <LoopForever+0xa>)
  ldr r2, =_sidata
 80026e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002720 <LoopForever+0xe>)
  movs r3, #0
 80026ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026ec:	e002      	b.n	80026f4 <LoopCopyDataInit>

080026ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026f2:	3304      	adds	r3, #4

080026f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026f8:	d3f9      	bcc.n	80026ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002724 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026fc:	4c0a      	ldr	r4, [pc, #40]	@ (8002728 <LoopForever+0x16>)
  movs r3, #0
 80026fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002700:	e001      	b.n	8002706 <LoopFillZerobss>

08002702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002704:	3204      	adds	r2, #4

08002706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002708:	d3fb      	bcc.n	8002702 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800270a:	f006 fa61 	bl	8008bd0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800270e:	f7fe fd33 	bl	8001178 <main>

08002712 <LoopForever>:

LoopForever:
    b LoopForever
 8002712:	e7fe      	b.n	8002712 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002714:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002718:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800271c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002720:	0800d3f0 	.word	0x0800d3f0
  ldr r2, =_sbss
 8002724:	200085f8 	.word	0x200085f8
  ldr r4, =_ebss
 8002728:	20009e14 	.word	0x20009e14

0800272c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800272c:	e7fe      	b.n	800272c <ADC1_IRQHandler>

0800272e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b082      	sub	sp, #8
 8002732:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002734:	2300      	movs	r3, #0
 8002736:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002738:	2003      	movs	r0, #3
 800273a:	f000 f961 	bl	8002a00 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800273e:	2000      	movs	r0, #0
 8002740:	f000 f80e 	bl	8002760 <HAL_InitTick>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d002      	beq.n	8002750 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	71fb      	strb	r3, [r7, #7]
 800274e:	e001      	b.n	8002754 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002750:	f7ff f962 	bl	8001a18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002754:	79fb      	ldrb	r3, [r7, #7]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
	...

08002760 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002768:	2300      	movs	r3, #0
 800276a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800276c:	4b17      	ldr	r3, [pc, #92]	@ (80027cc <HAL_InitTick+0x6c>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d023      	beq.n	80027bc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002774:	4b16      	ldr	r3, [pc, #88]	@ (80027d0 <HAL_InitTick+0x70>)
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	4b14      	ldr	r3, [pc, #80]	@ (80027cc <HAL_InitTick+0x6c>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	4619      	mov	r1, r3
 800277e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002782:	fbb3 f3f1 	udiv	r3, r3, r1
 8002786:	fbb2 f3f3 	udiv	r3, r2, r3
 800278a:	4618      	mov	r0, r3
 800278c:	f000 f96d 	bl	8002a6a <HAL_SYSTICK_Config>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10f      	bne.n	80027b6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b0f      	cmp	r3, #15
 800279a:	d809      	bhi.n	80027b0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800279c:	2200      	movs	r2, #0
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	f04f 30ff 	mov.w	r0, #4294967295
 80027a4:	f000 f937 	bl	8002a16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027a8:	4a0a      	ldr	r2, [pc, #40]	@ (80027d4 <HAL_InitTick+0x74>)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6013      	str	r3, [r2, #0]
 80027ae:	e007      	b.n	80027c0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	73fb      	strb	r3, [r7, #15]
 80027b4:	e004      	b.n	80027c0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	73fb      	strb	r3, [r7, #15]
 80027ba:	e001      	b.n	80027c0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20000018 	.word	0x20000018
 80027d0:	20000010 	.word	0x20000010
 80027d4:	20000014 	.word	0x20000014

080027d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027dc:	4b06      	ldr	r3, [pc, #24]	@ (80027f8 <HAL_IncTick+0x20>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	461a      	mov	r2, r3
 80027e2:	4b06      	ldr	r3, [pc, #24]	@ (80027fc <HAL_IncTick+0x24>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4413      	add	r3, r2
 80027e8:	4a04      	ldr	r2, [pc, #16]	@ (80027fc <HAL_IncTick+0x24>)
 80027ea:	6013      	str	r3, [r2, #0]
}
 80027ec:	bf00      	nop
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	20000018 	.word	0x20000018
 80027fc:	200098c4 	.word	0x200098c4

08002800 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  return uwTick;
 8002804:	4b03      	ldr	r3, [pc, #12]	@ (8002814 <HAL_GetTick+0x14>)
 8002806:	681b      	ldr	r3, [r3, #0]
}
 8002808:	4618      	mov	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	200098c4 	.word	0x200098c4

08002818 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002820:	f7ff ffee 	bl	8002800 <HAL_GetTick>
 8002824:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002830:	d005      	beq.n	800283e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002832:	4b0a      	ldr	r3, [pc, #40]	@ (800285c <HAL_Delay+0x44>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	461a      	mov	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4413      	add	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800283e:	bf00      	nop
 8002840:	f7ff ffde 	bl	8002800 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	429a      	cmp	r2, r3
 800284e:	d8f7      	bhi.n	8002840 <HAL_Delay+0x28>
  {
  }
}
 8002850:	bf00      	nop
 8002852:	bf00      	nop
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20000018 	.word	0x20000018

08002860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002870:	4b0c      	ldr	r3, [pc, #48]	@ (80028a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800287c:	4013      	ands	r3, r2
 800287e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002888:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800288c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002892:	4a04      	ldr	r2, [pc, #16]	@ (80028a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	60d3      	str	r3, [r2, #12]
}
 8002898:	bf00      	nop
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	e000ed00 	.word	0xe000ed00

080028a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028ac:	4b04      	ldr	r3, [pc, #16]	@ (80028c0 <__NVIC_GetPriorityGrouping+0x18>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	0a1b      	lsrs	r3, r3, #8
 80028b2:	f003 0307 	and.w	r3, r3, #7
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	e000ed00 	.word	0xe000ed00

080028c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	db0b      	blt.n	80028ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	f003 021f 	and.w	r2, r3, #31
 80028dc:	4907      	ldr	r1, [pc, #28]	@ (80028fc <__NVIC_EnableIRQ+0x38>)
 80028de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e2:	095b      	lsrs	r3, r3, #5
 80028e4:	2001      	movs	r0, #1
 80028e6:	fa00 f202 	lsl.w	r2, r0, r2
 80028ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	e000e100 	.word	0xe000e100

08002900 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	4603      	mov	r3, r0
 8002908:	6039      	str	r1, [r7, #0]
 800290a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800290c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002910:	2b00      	cmp	r3, #0
 8002912:	db0a      	blt.n	800292a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	b2da      	uxtb	r2, r3
 8002918:	490c      	ldr	r1, [pc, #48]	@ (800294c <__NVIC_SetPriority+0x4c>)
 800291a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291e:	0112      	lsls	r2, r2, #4
 8002920:	b2d2      	uxtb	r2, r2
 8002922:	440b      	add	r3, r1
 8002924:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002928:	e00a      	b.n	8002940 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	b2da      	uxtb	r2, r3
 800292e:	4908      	ldr	r1, [pc, #32]	@ (8002950 <__NVIC_SetPriority+0x50>)
 8002930:	79fb      	ldrb	r3, [r7, #7]
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	3b04      	subs	r3, #4
 8002938:	0112      	lsls	r2, r2, #4
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	440b      	add	r3, r1
 800293e:	761a      	strb	r2, [r3, #24]
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	e000e100 	.word	0xe000e100
 8002950:	e000ed00 	.word	0xe000ed00

08002954 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002954:	b480      	push	{r7}
 8002956:	b089      	sub	sp, #36	@ 0x24
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	f1c3 0307 	rsb	r3, r3, #7
 800296e:	2b04      	cmp	r3, #4
 8002970:	bf28      	it	cs
 8002972:	2304      	movcs	r3, #4
 8002974:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	3304      	adds	r3, #4
 800297a:	2b06      	cmp	r3, #6
 800297c:	d902      	bls.n	8002984 <NVIC_EncodePriority+0x30>
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	3b03      	subs	r3, #3
 8002982:	e000      	b.n	8002986 <NVIC_EncodePriority+0x32>
 8002984:	2300      	movs	r3, #0
 8002986:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002988:	f04f 32ff 	mov.w	r2, #4294967295
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	43da      	mvns	r2, r3
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	401a      	ands	r2, r3
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800299c:	f04f 31ff 	mov.w	r1, #4294967295
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	fa01 f303 	lsl.w	r3, r1, r3
 80029a6:	43d9      	mvns	r1, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029ac:	4313      	orrs	r3, r2
         );
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3724      	adds	r7, #36	@ 0x24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
	...

080029bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3b01      	subs	r3, #1
 80029c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029cc:	d301      	bcc.n	80029d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029ce:	2301      	movs	r3, #1
 80029d0:	e00f      	b.n	80029f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029d2:	4a0a      	ldr	r2, [pc, #40]	@ (80029fc <SysTick_Config+0x40>)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3b01      	subs	r3, #1
 80029d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029da:	210f      	movs	r1, #15
 80029dc:	f04f 30ff 	mov.w	r0, #4294967295
 80029e0:	f7ff ff8e 	bl	8002900 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029e4:	4b05      	ldr	r3, [pc, #20]	@ (80029fc <SysTick_Config+0x40>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029ea:	4b04      	ldr	r3, [pc, #16]	@ (80029fc <SysTick_Config+0x40>)
 80029ec:	2207      	movs	r2, #7
 80029ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	e000e010 	.word	0xe000e010

08002a00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7ff ff29 	bl	8002860 <__NVIC_SetPriorityGrouping>
}
 8002a0e:	bf00      	nop
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b086      	sub	sp, #24
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	60b9      	str	r1, [r7, #8]
 8002a20:	607a      	str	r2, [r7, #4]
 8002a22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a24:	2300      	movs	r3, #0
 8002a26:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a28:	f7ff ff3e 	bl	80028a8 <__NVIC_GetPriorityGrouping>
 8002a2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	68b9      	ldr	r1, [r7, #8]
 8002a32:	6978      	ldr	r0, [r7, #20]
 8002a34:	f7ff ff8e 	bl	8002954 <NVIC_EncodePriority>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a3e:	4611      	mov	r1, r2
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff ff5d 	bl	8002900 <__NVIC_SetPriority>
}
 8002a46:	bf00      	nop
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b082      	sub	sp, #8
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	4603      	mov	r3, r0
 8002a56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff ff31 	bl	80028c4 <__NVIC_EnableIRQ>
}
 8002a62:	bf00      	nop
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b082      	sub	sp, #8
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7ff ffa2 	bl	80029bc <SysTick_Config>
 8002a78:	4603      	mov	r3, r0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
	...

08002a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b087      	sub	sp, #28
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a92:	e166      	b.n	8002d62 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	2101      	movs	r1, #1
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f000 8158 	beq.w	8002d5c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f003 0303 	and.w	r3, r3, #3
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d005      	beq.n	8002ac4 <HAL_GPIO_Init+0x40>
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f003 0303 	and.w	r3, r3, #3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d130      	bne.n	8002b26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	2203      	movs	r2, #3
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002afa:	2201      	movs	r2, #1
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	43db      	mvns	r3, r3
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	4013      	ands	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	091b      	lsrs	r3, r3, #4
 8002b10:	f003 0201 	and.w	r2, r3, #1
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	2b03      	cmp	r3, #3
 8002b30:	d017      	beq.n	8002b62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	2203      	movs	r2, #3
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	43db      	mvns	r3, r3
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	4013      	ands	r3, r2
 8002b48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	689a      	ldr	r2, [r3, #8]
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f003 0303 	and.w	r3, r3, #3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d123      	bne.n	8002bb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	08da      	lsrs	r2, r3, #3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	3208      	adds	r2, #8
 8002b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	220f      	movs	r2, #15
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	43db      	mvns	r3, r3
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	691a      	ldr	r2, [r3, #16]
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	f003 0307 	and.w	r3, r3, #7
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	08da      	lsrs	r2, r3, #3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3208      	adds	r2, #8
 8002bb0:	6939      	ldr	r1, [r7, #16]
 8002bb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	2203      	movs	r2, #3
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f003 0203 	and.w	r2, r3, #3
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f000 80b2 	beq.w	8002d5c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bf8:	4b61      	ldr	r3, [pc, #388]	@ (8002d80 <HAL_GPIO_Init+0x2fc>)
 8002bfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bfc:	4a60      	ldr	r2, [pc, #384]	@ (8002d80 <HAL_GPIO_Init+0x2fc>)
 8002bfe:	f043 0301 	orr.w	r3, r3, #1
 8002c02:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c04:	4b5e      	ldr	r3, [pc, #376]	@ (8002d80 <HAL_GPIO_Init+0x2fc>)
 8002c06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	60bb      	str	r3, [r7, #8]
 8002c0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c10:	4a5c      	ldr	r2, [pc, #368]	@ (8002d84 <HAL_GPIO_Init+0x300>)
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	089b      	lsrs	r3, r3, #2
 8002c16:	3302      	adds	r3, #2
 8002c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	f003 0303 	and.w	r3, r3, #3
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	220f      	movs	r2, #15
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	4013      	ands	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002c3a:	d02b      	beq.n	8002c94 <HAL_GPIO_Init+0x210>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a52      	ldr	r2, [pc, #328]	@ (8002d88 <HAL_GPIO_Init+0x304>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d025      	beq.n	8002c90 <HAL_GPIO_Init+0x20c>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a51      	ldr	r2, [pc, #324]	@ (8002d8c <HAL_GPIO_Init+0x308>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d01f      	beq.n	8002c8c <HAL_GPIO_Init+0x208>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a50      	ldr	r2, [pc, #320]	@ (8002d90 <HAL_GPIO_Init+0x30c>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d019      	beq.n	8002c88 <HAL_GPIO_Init+0x204>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a4f      	ldr	r2, [pc, #316]	@ (8002d94 <HAL_GPIO_Init+0x310>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d013      	beq.n	8002c84 <HAL_GPIO_Init+0x200>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a4e      	ldr	r2, [pc, #312]	@ (8002d98 <HAL_GPIO_Init+0x314>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d00d      	beq.n	8002c80 <HAL_GPIO_Init+0x1fc>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a4d      	ldr	r2, [pc, #308]	@ (8002d9c <HAL_GPIO_Init+0x318>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d007      	beq.n	8002c7c <HAL_GPIO_Init+0x1f8>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a4c      	ldr	r2, [pc, #304]	@ (8002da0 <HAL_GPIO_Init+0x31c>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d101      	bne.n	8002c78 <HAL_GPIO_Init+0x1f4>
 8002c74:	2307      	movs	r3, #7
 8002c76:	e00e      	b.n	8002c96 <HAL_GPIO_Init+0x212>
 8002c78:	2308      	movs	r3, #8
 8002c7a:	e00c      	b.n	8002c96 <HAL_GPIO_Init+0x212>
 8002c7c:	2306      	movs	r3, #6
 8002c7e:	e00a      	b.n	8002c96 <HAL_GPIO_Init+0x212>
 8002c80:	2305      	movs	r3, #5
 8002c82:	e008      	b.n	8002c96 <HAL_GPIO_Init+0x212>
 8002c84:	2304      	movs	r3, #4
 8002c86:	e006      	b.n	8002c96 <HAL_GPIO_Init+0x212>
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e004      	b.n	8002c96 <HAL_GPIO_Init+0x212>
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	e002      	b.n	8002c96 <HAL_GPIO_Init+0x212>
 8002c90:	2301      	movs	r3, #1
 8002c92:	e000      	b.n	8002c96 <HAL_GPIO_Init+0x212>
 8002c94:	2300      	movs	r3, #0
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	f002 0203 	and.w	r2, r2, #3
 8002c9c:	0092      	lsls	r2, r2, #2
 8002c9e:	4093      	lsls	r3, r2
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ca6:	4937      	ldr	r1, [pc, #220]	@ (8002d84 <HAL_GPIO_Init+0x300>)
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	089b      	lsrs	r3, r3, #2
 8002cac:	3302      	adds	r3, #2
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cb4:	4b3b      	ldr	r3, [pc, #236]	@ (8002da4 <HAL_GPIO_Init+0x320>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d003      	beq.n	8002cd8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002cd8:	4a32      	ldr	r2, [pc, #200]	@ (8002da4 <HAL_GPIO_Init+0x320>)
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002cde:	4b31      	ldr	r3, [pc, #196]	@ (8002da4 <HAL_GPIO_Init+0x320>)
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	4013      	ands	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d02:	4a28      	ldr	r2, [pc, #160]	@ (8002da4 <HAL_GPIO_Init+0x320>)
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d08:	4b26      	ldr	r3, [pc, #152]	@ (8002da4 <HAL_GPIO_Init+0x320>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	43db      	mvns	r3, r3
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	4013      	ands	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d003      	beq.n	8002d2c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d2c:	4a1d      	ldr	r2, [pc, #116]	@ (8002da4 <HAL_GPIO_Init+0x320>)
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002d32:	4b1c      	ldr	r3, [pc, #112]	@ (8002da4 <HAL_GPIO_Init+0x320>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	43db      	mvns	r3, r3
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d56:	4a13      	ldr	r2, [pc, #76]	@ (8002da4 <HAL_GPIO_Init+0x320>)
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	fa22 f303 	lsr.w	r3, r2, r3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f47f ae91 	bne.w	8002a94 <HAL_GPIO_Init+0x10>
  }
}
 8002d72:	bf00      	nop
 8002d74:	bf00      	nop
 8002d76:	371c      	adds	r7, #28
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	40021000 	.word	0x40021000
 8002d84:	40010000 	.word	0x40010000
 8002d88:	48000400 	.word	0x48000400
 8002d8c:	48000800 	.word	0x48000800
 8002d90:	48000c00 	.word	0x48000c00
 8002d94:	48001000 	.word	0x48001000
 8002d98:	48001400 	.word	0x48001400
 8002d9c:	48001800 	.word	0x48001800
 8002da0:	48001c00 	.word	0x48001c00
 8002da4:	40010400 	.word	0x40010400

08002da8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	460b      	mov	r3, r1
 8002db2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691a      	ldr	r2, [r3, #16]
 8002db8:	887b      	ldrh	r3, [r7, #2]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d002      	beq.n	8002dc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	73fb      	strb	r3, [r7, #15]
 8002dc4:	e001      	b.n	8002dca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	460b      	mov	r3, r1
 8002de2:	807b      	strh	r3, [r7, #2]
 8002de4:	4613      	mov	r3, r2
 8002de6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002de8:	787b      	ldrb	r3, [r7, #1]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dee:	887a      	ldrh	r2, [r7, #2]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002df4:	e002      	b.n	8002dfc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002df6:	887a      	ldrh	r2, [r7, #2]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e12:	4b08      	ldr	r3, [pc, #32]	@ (8002e34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e14:	695a      	ldr	r2, [r3, #20]
 8002e16:	88fb      	ldrh	r3, [r7, #6]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d006      	beq.n	8002e2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e1e:	4a05      	ldr	r2, [pc, #20]	@ (8002e34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e20:	88fb      	ldrh	r3, [r7, #6]
 8002e22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e24:	88fb      	ldrh	r3, [r7, #6]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fe fbec 	bl	8001604 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e2c:	bf00      	nop
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40010400 	.word	0x40010400

08002e38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e08d      	b.n	8002f66 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d106      	bne.n	8002e64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7fe fdfe 	bl	8001a60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2224      	movs	r2, #36	@ 0x24
 8002e68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 0201 	bic.w	r2, r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e88:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e98:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d107      	bne.n	8002eb2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689a      	ldr	r2, [r3, #8]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002eae:	609a      	str	r2, [r3, #8]
 8002eb0:	e006      	b.n	8002ec0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689a      	ldr	r2, [r3, #8]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002ebe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d108      	bne.n	8002eda <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ed6:	605a      	str	r2, [r3, #4]
 8002ed8:	e007      	b.n	8002eea <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ee8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	6812      	ldr	r2, [r2, #0]
 8002ef4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ef8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002efc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68da      	ldr	r2, [r3, #12]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f0c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	691a      	ldr	r2, [r3, #16]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	69d9      	ldr	r1, [r3, #28]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a1a      	ldr	r2, [r3, #32]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0201 	orr.w	r2, r2, #1
 8002f46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2220      	movs	r2, #32
 8002f52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
	...

08002f70 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b088      	sub	sp, #32
 8002f74:	af02      	add	r7, sp, #8
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	607a      	str	r2, [r7, #4]
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	817b      	strh	r3, [r7, #10]
 8002f80:	4613      	mov	r3, r2
 8002f82:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b20      	cmp	r3, #32
 8002f8e:	f040 80fd 	bne.w	800318c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d101      	bne.n	8002fa0 <HAL_I2C_Master_Transmit+0x30>
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	e0f6      	b.n	800318e <HAL_I2C_Master_Transmit+0x21e>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002fa8:	f7ff fc2a 	bl	8002800 <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	9300      	str	r3, [sp, #0]
 8002fb2:	2319      	movs	r3, #25
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f000 fa0a 	bl	80033d4 <I2C_WaitOnFlagUntilTimeout>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e0e1      	b.n	800318e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2221      	movs	r2, #33	@ 0x21
 8002fce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2210      	movs	r2, #16
 8002fd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	893a      	ldrh	r2, [r7, #8]
 8002fea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	2bff      	cmp	r3, #255	@ 0xff
 8002ffa:	d906      	bls.n	800300a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	22ff      	movs	r2, #255	@ 0xff
 8003000:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003002:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003006:	617b      	str	r3, [r7, #20]
 8003008:	e007      	b.n	800301a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800300e:	b29a      	uxth	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003014:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003018:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800301e:	2b00      	cmp	r3, #0
 8003020:	d024      	beq.n	800306c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003026:	781a      	ldrb	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003032:	1c5a      	adds	r2, r3, #1
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800303c:	b29b      	uxth	r3, r3
 800303e:	3b01      	subs	r3, #1
 8003040:	b29a      	uxth	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800304a:	3b01      	subs	r3, #1
 800304c:	b29a      	uxth	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003056:	b2db      	uxtb	r3, r3
 8003058:	3301      	adds	r3, #1
 800305a:	b2da      	uxtb	r2, r3
 800305c:	8979      	ldrh	r1, [r7, #10]
 800305e:	4b4e      	ldr	r3, [pc, #312]	@ (8003198 <HAL_I2C_Master_Transmit+0x228>)
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 fc05 	bl	8003874 <I2C_TransferConfig>
 800306a:	e066      	b.n	800313a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003070:	b2da      	uxtb	r2, r3
 8003072:	8979      	ldrh	r1, [r7, #10]
 8003074:	4b48      	ldr	r3, [pc, #288]	@ (8003198 <HAL_I2C_Master_Transmit+0x228>)
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f000 fbfa 	bl	8003874 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003080:	e05b      	b.n	800313a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	6a39      	ldr	r1, [r7, #32]
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f000 f9fd 	bl	8003486 <I2C_WaitOnTXISFlagUntilTimeout>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e07b      	b.n	800318e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309a:	781a      	ldrb	r2, [r3, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a6:	1c5a      	adds	r2, r3, #1
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	3b01      	subs	r3, #1
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030be:	3b01      	subs	r3, #1
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d034      	beq.n	800313a <HAL_I2C_Master_Transmit+0x1ca>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d130      	bne.n	800313a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	6a3b      	ldr	r3, [r7, #32]
 80030de:	2200      	movs	r2, #0
 80030e0:	2180      	movs	r1, #128	@ 0x80
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 f976 	bl	80033d4 <I2C_WaitOnFlagUntilTimeout>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e04d      	b.n	800318e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	2bff      	cmp	r3, #255	@ 0xff
 80030fa:	d90e      	bls.n	800311a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	22ff      	movs	r2, #255	@ 0xff
 8003100:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003106:	b2da      	uxtb	r2, r3
 8003108:	8979      	ldrh	r1, [r7, #10]
 800310a:	2300      	movs	r3, #0
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 fbae 	bl	8003874 <I2C_TransferConfig>
 8003118:	e00f      	b.n	800313a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800311e:	b29a      	uxth	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003128:	b2da      	uxtb	r2, r3
 800312a:	8979      	ldrh	r1, [r7, #10]
 800312c:	2300      	movs	r3, #0
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 fb9d 	bl	8003874 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800313e:	b29b      	uxth	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	d19e      	bne.n	8003082 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	6a39      	ldr	r1, [r7, #32]
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f000 f9e3 	bl	8003514 <I2C_WaitOnSTOPFlagUntilTimeout>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e01a      	b.n	800318e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2220      	movs	r2, #32
 800315e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6859      	ldr	r1, [r3, #4]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	4b0c      	ldr	r3, [pc, #48]	@ (800319c <HAL_I2C_Master_Transmit+0x22c>)
 800316c:	400b      	ands	r3, r1
 800316e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2220      	movs	r2, #32
 8003174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003188:	2300      	movs	r3, #0
 800318a:	e000      	b.n	800318e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800318c:	2302      	movs	r3, #2
  }
}
 800318e:	4618      	mov	r0, r3
 8003190:	3718      	adds	r7, #24
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	80002000 	.word	0x80002000
 800319c:	fe00e800 	.word	0xfe00e800

080031a0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b088      	sub	sp, #32
 80031a4:	af02      	add	r7, sp, #8
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	607a      	str	r2, [r7, #4]
 80031aa:	461a      	mov	r2, r3
 80031ac:	460b      	mov	r3, r1
 80031ae:	817b      	strh	r3, [r7, #10]
 80031b0:	4613      	mov	r3, r2
 80031b2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b20      	cmp	r3, #32
 80031be:	f040 80db 	bne.w	8003378 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d101      	bne.n	80031d0 <HAL_I2C_Master_Receive+0x30>
 80031cc:	2302      	movs	r3, #2
 80031ce:	e0d4      	b.n	800337a <HAL_I2C_Master_Receive+0x1da>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031d8:	f7ff fb12 	bl	8002800 <HAL_GetTick>
 80031dc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	2319      	movs	r3, #25
 80031e4:	2201      	movs	r2, #1
 80031e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	f000 f8f2 	bl	80033d4 <I2C_WaitOnFlagUntilTimeout>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e0bf      	b.n	800337a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2222      	movs	r2, #34	@ 0x22
 80031fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2210      	movs	r2, #16
 8003206:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	893a      	ldrh	r2, [r7, #8]
 800321a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003226:	b29b      	uxth	r3, r3
 8003228:	2bff      	cmp	r3, #255	@ 0xff
 800322a:	d90e      	bls.n	800324a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2201      	movs	r2, #1
 8003230:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003236:	b2da      	uxtb	r2, r3
 8003238:	8979      	ldrh	r1, [r7, #10]
 800323a:	4b52      	ldr	r3, [pc, #328]	@ (8003384 <HAL_I2C_Master_Receive+0x1e4>)
 800323c:	9300      	str	r3, [sp, #0]
 800323e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 fb16 	bl	8003874 <I2C_TransferConfig>
 8003248:	e06d      	b.n	8003326 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800324e:	b29a      	uxth	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003258:	b2da      	uxtb	r2, r3
 800325a:	8979      	ldrh	r1, [r7, #10]
 800325c:	4b49      	ldr	r3, [pc, #292]	@ (8003384 <HAL_I2C_Master_Receive+0x1e4>)
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f000 fb05 	bl	8003874 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800326a:	e05c      	b.n	8003326 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	6a39      	ldr	r1, [r7, #32]
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 f993 	bl	800359c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e07c      	b.n	800337a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003292:	1c5a      	adds	r2, r3, #1
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800329c:	3b01      	subs	r3, #1
 800329e:	b29a      	uxth	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	3b01      	subs	r3, #1
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d034      	beq.n	8003326 <HAL_I2C_Master_Receive+0x186>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d130      	bne.n	8003326 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	6a3b      	ldr	r3, [r7, #32]
 80032ca:	2200      	movs	r2, #0
 80032cc:	2180      	movs	r1, #128	@ 0x80
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f000 f880 	bl	80033d4 <I2C_WaitOnFlagUntilTimeout>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e04d      	b.n	800337a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	2bff      	cmp	r3, #255	@ 0xff
 80032e6:	d90e      	bls.n	8003306 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	22ff      	movs	r2, #255	@ 0xff
 80032ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032f2:	b2da      	uxtb	r2, r3
 80032f4:	8979      	ldrh	r1, [r7, #10]
 80032f6:	2300      	movs	r3, #0
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f000 fab8 	bl	8003874 <I2C_TransferConfig>
 8003304:	e00f      	b.n	8003326 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800330a:	b29a      	uxth	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003314:	b2da      	uxtb	r2, r3
 8003316:	8979      	ldrh	r1, [r7, #10]
 8003318:	2300      	movs	r3, #0
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f000 faa7 	bl	8003874 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800332a:	b29b      	uxth	r3, r3
 800332c:	2b00      	cmp	r3, #0
 800332e:	d19d      	bne.n	800326c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	6a39      	ldr	r1, [r7, #32]
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f000 f8ed 	bl	8003514 <I2C_WaitOnSTOPFlagUntilTimeout>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e01a      	b.n	800337a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2220      	movs	r2, #32
 800334a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6859      	ldr	r1, [r3, #4]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	4b0c      	ldr	r3, [pc, #48]	@ (8003388 <HAL_I2C_Master_Receive+0x1e8>)
 8003358:	400b      	ands	r3, r1
 800335a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2220      	movs	r2, #32
 8003360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003374:	2300      	movs	r3, #0
 8003376:	e000      	b.n	800337a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003378:	2302      	movs	r3, #2
  }
}
 800337a:	4618      	mov	r0, r3
 800337c:	3718      	adds	r7, #24
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	80002400 	.word	0x80002400
 8003388:	fe00e800 	.word	0xfe00e800

0800338c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d103      	bne.n	80033aa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2200      	movs	r2, #0
 80033a8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d007      	beq.n	80033c8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	699a      	ldr	r2, [r3, #24]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f042 0201 	orr.w	r2, r2, #1
 80033c6:	619a      	str	r2, [r3, #24]
  }
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	603b      	str	r3, [r7, #0]
 80033e0:	4613      	mov	r3, r2
 80033e2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033e4:	e03b      	b.n	800345e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	6839      	ldr	r1, [r7, #0]
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f000 f962 	bl	80036b4 <I2C_IsErrorOccurred>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e041      	b.n	800347e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003400:	d02d      	beq.n	800345e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003402:	f7ff f9fd 	bl	8002800 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	429a      	cmp	r2, r3
 8003410:	d302      	bcc.n	8003418 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d122      	bne.n	800345e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	699a      	ldr	r2, [r3, #24]
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	4013      	ands	r3, r2
 8003422:	68ba      	ldr	r2, [r7, #8]
 8003424:	429a      	cmp	r2, r3
 8003426:	bf0c      	ite	eq
 8003428:	2301      	moveq	r3, #1
 800342a:	2300      	movne	r3, #0
 800342c:	b2db      	uxtb	r3, r3
 800342e:	461a      	mov	r2, r3
 8003430:	79fb      	ldrb	r3, [r7, #7]
 8003432:	429a      	cmp	r2, r3
 8003434:	d113      	bne.n	800345e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800343a:	f043 0220 	orr.w	r2, r3, #32
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2220      	movs	r2, #32
 8003446:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e00f      	b.n	800347e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	699a      	ldr	r2, [r3, #24]
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	4013      	ands	r3, r2
 8003468:	68ba      	ldr	r2, [r7, #8]
 800346a:	429a      	cmp	r2, r3
 800346c:	bf0c      	ite	eq
 800346e:	2301      	moveq	r3, #1
 8003470:	2300      	movne	r3, #0
 8003472:	b2db      	uxtb	r3, r3
 8003474:	461a      	mov	r2, r3
 8003476:	79fb      	ldrb	r3, [r7, #7]
 8003478:	429a      	cmp	r2, r3
 800347a:	d0b4      	beq.n	80033e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b084      	sub	sp, #16
 800348a:	af00      	add	r7, sp, #0
 800348c:	60f8      	str	r0, [r7, #12]
 800348e:	60b9      	str	r1, [r7, #8]
 8003490:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003492:	e033      	b.n	80034fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	68b9      	ldr	r1, [r7, #8]
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 f90b 	bl	80036b4 <I2C_IsErrorOccurred>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e031      	b.n	800350c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ae:	d025      	beq.n	80034fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034b0:	f7ff f9a6 	bl	8002800 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d302      	bcc.n	80034c6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d11a      	bne.n	80034fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d013      	beq.n	80034fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d8:	f043 0220 	orr.w	r2, r3, #32
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2220      	movs	r2, #32
 80034e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e007      	b.n	800350c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b02      	cmp	r3, #2
 8003508:	d1c4      	bne.n	8003494 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003520:	e02f      	b.n	8003582 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	68b9      	ldr	r1, [r7, #8]
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 f8c4 	bl	80036b4 <I2C_IsErrorOccurred>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e02d      	b.n	8003592 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003536:	f7ff f963 	bl	8002800 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	429a      	cmp	r2, r3
 8003544:	d302      	bcc.n	800354c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d11a      	bne.n	8003582 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	f003 0320 	and.w	r3, r3, #32
 8003556:	2b20      	cmp	r3, #32
 8003558:	d013      	beq.n	8003582 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800355e:	f043 0220 	orr.w	r2, r3, #32
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2220      	movs	r2, #32
 800356a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e007      	b.n	8003592 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	f003 0320 	and.w	r3, r3, #32
 800358c:	2b20      	cmp	r3, #32
 800358e:	d1c8      	bne.n	8003522 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
	...

0800359c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035a8:	2300      	movs	r3, #0
 80035aa:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80035ac:	e071      	b.n	8003692 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	68b9      	ldr	r1, [r7, #8]
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f000 f87e 	bl	80036b4 <I2C_IsErrorOccurred>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	f003 0320 	and.w	r3, r3, #32
 80035cc:	2b20      	cmp	r3, #32
 80035ce:	d13b      	bne.n	8003648 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80035d0:	7dfb      	ldrb	r3, [r7, #23]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d138      	bne.n	8003648 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b04      	cmp	r3, #4
 80035e2:	d105      	bne.n	80035f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80035ec:	2300      	movs	r3, #0
 80035ee:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	f003 0310 	and.w	r3, r3, #16
 80035fa:	2b10      	cmp	r3, #16
 80035fc:	d121      	bne.n	8003642 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2210      	movs	r2, #16
 8003604:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2204      	movs	r2, #4
 800360a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2220      	movs	r2, #32
 8003612:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6859      	ldr	r1, [r3, #4]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	4b24      	ldr	r3, [pc, #144]	@ (80036b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003620:	400b      	ands	r3, r1
 8003622:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2220      	movs	r2, #32
 8003628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	75fb      	strb	r3, [r7, #23]
 8003640:	e002      	b.n	8003648 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003648:	f7ff f8da 	bl	8002800 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	429a      	cmp	r2, r3
 8003656:	d302      	bcc.n	800365e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d119      	bne.n	8003692 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800365e:	7dfb      	ldrb	r3, [r7, #23]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d116      	bne.n	8003692 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	f003 0304 	and.w	r3, r3, #4
 800366e:	2b04      	cmp	r3, #4
 8003670:	d00f      	beq.n	8003692 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003676:	f043 0220 	orr.w	r2, r3, #32
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2220      	movs	r2, #32
 8003682:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	2b04      	cmp	r3, #4
 800369e:	d002      	beq.n	80036a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80036a0:	7dfb      	ldrb	r3, [r7, #23]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d083      	beq.n	80035ae <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80036a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3718      	adds	r7, #24
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	fe00e800 	.word	0xfe00e800

080036b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b08a      	sub	sp, #40	@ 0x28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036c0:	2300      	movs	r3, #0
 80036c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80036ce:	2300      	movs	r3, #0
 80036d0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	f003 0310 	and.w	r3, r3, #16
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d068      	beq.n	80037b2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2210      	movs	r2, #16
 80036e6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036e8:	e049      	b.n	800377e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f0:	d045      	beq.n	800377e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036f2:	f7ff f885 	bl	8002800 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d302      	bcc.n	8003708 <I2C_IsErrorOccurred+0x54>
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d13a      	bne.n	800377e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003712:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800371a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003726:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800372a:	d121      	bne.n	8003770 <I2C_IsErrorOccurred+0xbc>
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003732:	d01d      	beq.n	8003770 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003734:	7cfb      	ldrb	r3, [r7, #19]
 8003736:	2b20      	cmp	r3, #32
 8003738:	d01a      	beq.n	8003770 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003748:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800374a:	f7ff f859 	bl	8002800 <HAL_GetTick>
 800374e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003750:	e00e      	b.n	8003770 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003752:	f7ff f855 	bl	8002800 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	2b19      	cmp	r3, #25
 800375e:	d907      	bls.n	8003770 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003760:	6a3b      	ldr	r3, [r7, #32]
 8003762:	f043 0320 	orr.w	r3, r3, #32
 8003766:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800376e:	e006      	b.n	800377e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	f003 0320 	and.w	r3, r3, #32
 800377a:	2b20      	cmp	r3, #32
 800377c:	d1e9      	bne.n	8003752 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	f003 0320 	and.w	r3, r3, #32
 8003788:	2b20      	cmp	r3, #32
 800378a:	d003      	beq.n	8003794 <I2C_IsErrorOccurred+0xe0>
 800378c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0aa      	beq.n	80036ea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003794:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003798:	2b00      	cmp	r3, #0
 800379a:	d103      	bne.n	80037a4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2220      	movs	r2, #32
 80037a2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80037a4:	6a3b      	ldr	r3, [r7, #32]
 80037a6:	f043 0304 	orr.w	r3, r3, #4
 80037aa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00b      	beq.n	80037dc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80037c4:	6a3b      	ldr	r3, [r7, #32]
 80037c6:	f043 0301 	orr.w	r3, r3, #1
 80037ca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80037d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00b      	beq.n	80037fe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	f043 0308 	orr.w	r3, r3, #8
 80037ec:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00b      	beq.n	8003820 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	f043 0302 	orr.w	r3, r3, #2
 800380e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003818:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003820:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003824:	2b00      	cmp	r3, #0
 8003826:	d01c      	beq.n	8003862 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f7ff fdaf 	bl	800338c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6859      	ldr	r1, [r3, #4]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	4b0d      	ldr	r3, [pc, #52]	@ (8003870 <I2C_IsErrorOccurred+0x1bc>)
 800383a:	400b      	ands	r3, r1
 800383c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	431a      	orrs	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2220      	movs	r2, #32
 800384e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003862:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003866:	4618      	mov	r0, r3
 8003868:	3728      	adds	r7, #40	@ 0x28
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	fe00e800 	.word	0xfe00e800

08003874 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003874:	b480      	push	{r7}
 8003876:	b087      	sub	sp, #28
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	607b      	str	r3, [r7, #4]
 800387e:	460b      	mov	r3, r1
 8003880:	817b      	strh	r3, [r7, #10]
 8003882:	4613      	mov	r3, r2
 8003884:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003886:	897b      	ldrh	r3, [r7, #10]
 8003888:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800388c:	7a7b      	ldrb	r3, [r7, #9]
 800388e:	041b      	lsls	r3, r3, #16
 8003890:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003894:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	4313      	orrs	r3, r2
 800389e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80038a2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	0d5b      	lsrs	r3, r3, #21
 80038ae:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80038b2:	4b08      	ldr	r3, [pc, #32]	@ (80038d4 <I2C_TransferConfig+0x60>)
 80038b4:	430b      	orrs	r3, r1
 80038b6:	43db      	mvns	r3, r3
 80038b8:	ea02 0103 	and.w	r1, r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80038c6:	bf00      	nop
 80038c8:	371c      	adds	r7, #28
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	03ff63ff 	.word	0x03ff63ff

080038d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b20      	cmp	r3, #32
 80038ec:	d138      	bne.n	8003960 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d101      	bne.n	80038fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038f8:	2302      	movs	r3, #2
 80038fa:	e032      	b.n	8003962 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2224      	movs	r2, #36	@ 0x24
 8003908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 0201 	bic.w	r2, r2, #1
 800391a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800392a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6819      	ldr	r1, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	430a      	orrs	r2, r1
 800393a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f042 0201 	orr.w	r2, r2, #1
 800394a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2220      	movs	r2, #32
 8003950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800395c:	2300      	movs	r3, #0
 800395e:	e000      	b.n	8003962 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003960:	2302      	movs	r3, #2
  }
}
 8003962:	4618      	mov	r0, r3
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800396e:	b480      	push	{r7}
 8003970:	b085      	sub	sp, #20
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
 8003976:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b20      	cmp	r3, #32
 8003982:	d139      	bne.n	80039f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800398a:	2b01      	cmp	r3, #1
 800398c:	d101      	bne.n	8003992 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800398e:	2302      	movs	r3, #2
 8003990:	e033      	b.n	80039fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2224      	movs	r2, #36	@ 0x24
 800399e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0201 	bic.w	r2, r2, #1
 80039b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80039c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	021b      	lsls	r3, r3, #8
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f042 0201 	orr.w	r2, r2, #1
 80039e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80039f4:	2300      	movs	r3, #0
 80039f6:	e000      	b.n	80039fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80039f8:	2302      	movs	r3, #2
  }
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
	...

08003a08 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a0c:	4b0d      	ldr	r3, [pc, #52]	@ (8003a44 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003a14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a18:	d102      	bne.n	8003a20 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003a1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a1e:	e00b      	b.n	8003a38 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003a20:	4b08      	ldr	r3, [pc, #32]	@ (8003a44 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a2e:	d102      	bne.n	8003a36 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003a30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003a34:	e000      	b.n	8003a38 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003a36:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	40007000 	.word	0x40007000

08003a48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d141      	bne.n	8003ada <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a56:	4b4b      	ldr	r3, [pc, #300]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003a5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a62:	d131      	bne.n	8003ac8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a64:	4b47      	ldr	r3, [pc, #284]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a6a:	4a46      	ldr	r2, [pc, #280]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a70:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a74:	4b43      	ldr	r3, [pc, #268]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a7c:	4a41      	ldr	r2, [pc, #260]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003a84:	4b40      	ldr	r3, [pc, #256]	@ (8003b88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2232      	movs	r2, #50	@ 0x32
 8003a8a:	fb02 f303 	mul.w	r3, r2, r3
 8003a8e:	4a3f      	ldr	r2, [pc, #252]	@ (8003b8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003a90:	fba2 2303 	umull	r2, r3, r2, r3
 8003a94:	0c9b      	lsrs	r3, r3, #18
 8003a96:	3301      	adds	r3, #1
 8003a98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a9a:	e002      	b.n	8003aa2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003aa2:	4b38      	ldr	r3, [pc, #224]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aae:	d102      	bne.n	8003ab6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1f2      	bne.n	8003a9c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ab6:	4b33      	ldr	r3, [pc, #204]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003abe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ac2:	d158      	bne.n	8003b76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e057      	b.n	8003b78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ac8:	4b2e      	ldr	r3, [pc, #184]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ace:	4a2d      	ldr	r2, [pc, #180]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ad0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ad4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003ad8:	e04d      	b.n	8003b76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ae0:	d141      	bne.n	8003b66 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ae2:	4b28      	ldr	r3, [pc, #160]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003aea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aee:	d131      	bne.n	8003b54 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003af0:	4b24      	ldr	r3, [pc, #144]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003af6:	4a23      	ldr	r2, [pc, #140]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003af8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003afc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b00:	4b20      	ldr	r3, [pc, #128]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b08:	4a1e      	ldr	r2, [pc, #120]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003b10:	4b1d      	ldr	r3, [pc, #116]	@ (8003b88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2232      	movs	r2, #50	@ 0x32
 8003b16:	fb02 f303 	mul.w	r3, r2, r3
 8003b1a:	4a1c      	ldr	r2, [pc, #112]	@ (8003b8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b20:	0c9b      	lsrs	r3, r3, #18
 8003b22:	3301      	adds	r3, #1
 8003b24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b26:	e002      	b.n	8003b2e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b2e:	4b15      	ldr	r3, [pc, #84]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b3a:	d102      	bne.n	8003b42 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1f2      	bne.n	8003b28 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b42:	4b10      	ldr	r3, [pc, #64]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b4e:	d112      	bne.n	8003b76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e011      	b.n	8003b78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b54:	4b0b      	ldr	r3, [pc, #44]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003b64:	e007      	b.n	8003b76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003b66:	4b07      	ldr	r3, [pc, #28]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b6e:	4a05      	ldr	r2, [pc, #20]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b70:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b74:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3714      	adds	r7, #20
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr
 8003b84:	40007000 	.word	0x40007000
 8003b88:	20000010 	.word	0x20000010
 8003b8c:	431bde83 	.word	0x431bde83

08003b90 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b088      	sub	sp, #32
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d102      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	f000 bc08 	b.w	80043b4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ba4:	4b96      	ldr	r3, [pc, #600]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f003 030c 	and.w	r3, r3, #12
 8003bac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bae:	4b94      	ldr	r3, [pc, #592]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	f003 0303 	and.w	r3, r3, #3
 8003bb6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0310 	and.w	r3, r3, #16
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 80e4 	beq.w	8003d8e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d007      	beq.n	8003bdc <HAL_RCC_OscConfig+0x4c>
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	2b0c      	cmp	r3, #12
 8003bd0:	f040 808b 	bne.w	8003cea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	f040 8087 	bne.w	8003cea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003bdc:	4b88      	ldr	r3, [pc, #544]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d005      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x64>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e3df      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a1a      	ldr	r2, [r3, #32]
 8003bf8:	4b81      	ldr	r3, [pc, #516]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0308 	and.w	r3, r3, #8
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d004      	beq.n	8003c0e <HAL_RCC_OscConfig+0x7e>
 8003c04:	4b7e      	ldr	r3, [pc, #504]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c0c:	e005      	b.n	8003c1a <HAL_RCC_OscConfig+0x8a>
 8003c0e:	4b7c      	ldr	r3, [pc, #496]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c14:	091b      	lsrs	r3, r3, #4
 8003c16:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d223      	bcs.n	8003c66 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 fdcc 	bl	80047c0 <RCC_SetFlashLatencyFromMSIRange>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e3c0      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c32:	4b73      	ldr	r3, [pc, #460]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a72      	ldr	r2, [pc, #456]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003c38:	f043 0308 	orr.w	r3, r3, #8
 8003c3c:	6013      	str	r3, [r2, #0]
 8003c3e:	4b70      	ldr	r3, [pc, #448]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	496d      	ldr	r1, [pc, #436]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c50:	4b6b      	ldr	r3, [pc, #428]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	69db      	ldr	r3, [r3, #28]
 8003c5c:	021b      	lsls	r3, r3, #8
 8003c5e:	4968      	ldr	r1, [pc, #416]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	604b      	str	r3, [r1, #4]
 8003c64:	e025      	b.n	8003cb2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c66:	4b66      	ldr	r3, [pc, #408]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a65      	ldr	r2, [pc, #404]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003c6c:	f043 0308 	orr.w	r3, r3, #8
 8003c70:	6013      	str	r3, [r2, #0]
 8003c72:	4b63      	ldr	r3, [pc, #396]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	4960      	ldr	r1, [pc, #384]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c84:	4b5e      	ldr	r3, [pc, #376]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	69db      	ldr	r3, [r3, #28]
 8003c90:	021b      	lsls	r3, r3, #8
 8003c92:	495b      	ldr	r1, [pc, #364]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d109      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 fd8c 	bl	80047c0 <RCC_SetFlashLatencyFromMSIRange>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e380      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003cb2:	f000 fcc1 	bl	8004638 <HAL_RCC_GetSysClockFreq>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	4b51      	ldr	r3, [pc, #324]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	091b      	lsrs	r3, r3, #4
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	4950      	ldr	r1, [pc, #320]	@ (8003e04 <HAL_RCC_OscConfig+0x274>)
 8003cc4:	5ccb      	ldrb	r3, [r1, r3]
 8003cc6:	f003 031f 	and.w	r3, r3, #31
 8003cca:	fa22 f303 	lsr.w	r3, r2, r3
 8003cce:	4a4e      	ldr	r2, [pc, #312]	@ (8003e08 <HAL_RCC_OscConfig+0x278>)
 8003cd0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003cd2:	4b4e      	ldr	r3, [pc, #312]	@ (8003e0c <HAL_RCC_OscConfig+0x27c>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7fe fd42 	bl	8002760 <HAL_InitTick>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003ce0:	7bfb      	ldrb	r3, [r7, #15]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d052      	beq.n	8003d8c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003ce6:	7bfb      	ldrb	r3, [r7, #15]
 8003ce8:	e364      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d032      	beq.n	8003d58 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003cf2:	4b43      	ldr	r3, [pc, #268]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a42      	ldr	r2, [pc, #264]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003cf8:	f043 0301 	orr.w	r3, r3, #1
 8003cfc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003cfe:	f7fe fd7f 	bl	8002800 <HAL_GetTick>
 8003d02:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d04:	e008      	b.n	8003d18 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d06:	f7fe fd7b 	bl	8002800 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e34d      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d18:	4b39      	ldr	r3, [pc, #228]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0f0      	beq.n	8003d06 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d24:	4b36      	ldr	r3, [pc, #216]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a35      	ldr	r2, [pc, #212]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003d2a:	f043 0308 	orr.w	r3, r3, #8
 8003d2e:	6013      	str	r3, [r2, #0]
 8003d30:	4b33      	ldr	r3, [pc, #204]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	4930      	ldr	r1, [pc, #192]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d42:	4b2f      	ldr	r3, [pc, #188]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	021b      	lsls	r3, r3, #8
 8003d50:	492b      	ldr	r1, [pc, #172]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	604b      	str	r3, [r1, #4]
 8003d56:	e01a      	b.n	8003d8e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d58:	4b29      	ldr	r3, [pc, #164]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a28      	ldr	r2, [pc, #160]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003d5e:	f023 0301 	bic.w	r3, r3, #1
 8003d62:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d64:	f7fe fd4c 	bl	8002800 <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d6c:	f7fe fd48 	bl	8002800 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e31a      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d7e:	4b20      	ldr	r3, [pc, #128]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1f0      	bne.n	8003d6c <HAL_RCC_OscConfig+0x1dc>
 8003d8a:	e000      	b.n	8003d8e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d8c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d073      	beq.n	8003e82 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	2b08      	cmp	r3, #8
 8003d9e:	d005      	beq.n	8003dac <HAL_RCC_OscConfig+0x21c>
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	2b0c      	cmp	r3, #12
 8003da4:	d10e      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	2b03      	cmp	r3, #3
 8003daa:	d10b      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dac:	4b14      	ldr	r3, [pc, #80]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d063      	beq.n	8003e80 <HAL_RCC_OscConfig+0x2f0>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d15f      	bne.n	8003e80 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e2f7      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dcc:	d106      	bne.n	8003ddc <HAL_RCC_OscConfig+0x24c>
 8003dce:	4b0c      	ldr	r3, [pc, #48]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a0b      	ldr	r2, [pc, #44]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003dd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	e025      	b.n	8003e28 <HAL_RCC_OscConfig+0x298>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003de4:	d114      	bne.n	8003e10 <HAL_RCC_OscConfig+0x280>
 8003de6:	4b06      	ldr	r3, [pc, #24]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a05      	ldr	r2, [pc, #20]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003dec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003df0:	6013      	str	r3, [r2, #0]
 8003df2:	4b03      	ldr	r3, [pc, #12]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a02      	ldr	r2, [pc, #8]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003df8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dfc:	6013      	str	r3, [r2, #0]
 8003dfe:	e013      	b.n	8003e28 <HAL_RCC_OscConfig+0x298>
 8003e00:	40021000 	.word	0x40021000
 8003e04:	0800cf2c 	.word	0x0800cf2c
 8003e08:	20000010 	.word	0x20000010
 8003e0c:	20000014 	.word	0x20000014
 8003e10:	4ba0      	ldr	r3, [pc, #640]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a9f      	ldr	r2, [pc, #636]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003e16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e1a:	6013      	str	r3, [r2, #0]
 8003e1c:	4b9d      	ldr	r3, [pc, #628]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a9c      	ldr	r2, [pc, #624]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003e22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d013      	beq.n	8003e58 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e30:	f7fe fce6 	bl	8002800 <HAL_GetTick>
 8003e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e36:	e008      	b.n	8003e4a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e38:	f7fe fce2 	bl	8002800 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b64      	cmp	r3, #100	@ 0x64
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e2b4      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e4a:	4b92      	ldr	r3, [pc, #584]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0f0      	beq.n	8003e38 <HAL_RCC_OscConfig+0x2a8>
 8003e56:	e014      	b.n	8003e82 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e58:	f7fe fcd2 	bl	8002800 <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e5e:	e008      	b.n	8003e72 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e60:	f7fe fcce 	bl	8002800 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b64      	cmp	r3, #100	@ 0x64
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e2a0      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e72:	4b88      	ldr	r3, [pc, #544]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1f0      	bne.n	8003e60 <HAL_RCC_OscConfig+0x2d0>
 8003e7e:	e000      	b.n	8003e82 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d060      	beq.n	8003f50 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	2b04      	cmp	r3, #4
 8003e92:	d005      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x310>
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	2b0c      	cmp	r3, #12
 8003e98:	d119      	bne.n	8003ece <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d116      	bne.n	8003ece <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ea0:	4b7c      	ldr	r3, [pc, #496]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d005      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x328>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d101      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e27d      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb8:	4b76      	ldr	r3, [pc, #472]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	061b      	lsls	r3, r3, #24
 8003ec6:	4973      	ldr	r1, [pc, #460]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ecc:	e040      	b.n	8003f50 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d023      	beq.n	8003f1e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ed6:	4b6f      	ldr	r3, [pc, #444]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a6e      	ldr	r2, [pc, #440]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003edc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ee0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee2:	f7fe fc8d 	bl	8002800 <HAL_GetTick>
 8003ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ee8:	e008      	b.n	8003efc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eea:	f7fe fc89 	bl	8002800 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d901      	bls.n	8003efc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e25b      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003efc:	4b65      	ldr	r3, [pc, #404]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d0f0      	beq.n	8003eea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f08:	4b62      	ldr	r3, [pc, #392]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	061b      	lsls	r3, r3, #24
 8003f16:	495f      	ldr	r1, [pc, #380]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	604b      	str	r3, [r1, #4]
 8003f1c:	e018      	b.n	8003f50 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f1e:	4b5d      	ldr	r3, [pc, #372]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a5c      	ldr	r2, [pc, #368]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003f24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2a:	f7fe fc69 	bl	8002800 <HAL_GetTick>
 8003f2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f30:	e008      	b.n	8003f44 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f32:	f7fe fc65 	bl	8002800 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e237      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f44:	4b53      	ldr	r3, [pc, #332]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1f0      	bne.n	8003f32 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0308 	and.w	r3, r3, #8
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d03c      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d01c      	beq.n	8003f9e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f64:	4b4b      	ldr	r3, [pc, #300]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f6a:	4a4a      	ldr	r2, [pc, #296]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003f6c:	f043 0301 	orr.w	r3, r3, #1
 8003f70:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f74:	f7fe fc44 	bl	8002800 <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f7c:	f7fe fc40 	bl	8002800 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e212      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f8e:	4b41      	ldr	r3, [pc, #260]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d0ef      	beq.n	8003f7c <HAL_RCC_OscConfig+0x3ec>
 8003f9c:	e01b      	b.n	8003fd6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f9e:	4b3d      	ldr	r3, [pc, #244]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003fa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fa4:	4a3b      	ldr	r2, [pc, #236]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003fa6:	f023 0301 	bic.w	r3, r3, #1
 8003faa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fae:	f7fe fc27 	bl	8002800 <HAL_GetTick>
 8003fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fb4:	e008      	b.n	8003fc8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fb6:	f7fe fc23 	bl	8002800 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d901      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e1f5      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fc8:	4b32      	ldr	r3, [pc, #200]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003fca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1ef      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0304 	and.w	r3, r3, #4
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 80a6 	beq.w	8004130 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003fe8:	4b2a      	ldr	r3, [pc, #168]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003fea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10d      	bne.n	8004010 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ff4:	4b27      	ldr	r3, [pc, #156]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff8:	4a26      	ldr	r2, [pc, #152]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003ffa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ffe:	6593      	str	r3, [r2, #88]	@ 0x58
 8004000:	4b24      	ldr	r3, [pc, #144]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8004002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004004:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004008:	60bb      	str	r3, [r7, #8]
 800400a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800400c:	2301      	movs	r3, #1
 800400e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004010:	4b21      	ldr	r3, [pc, #132]	@ (8004098 <HAL_RCC_OscConfig+0x508>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004018:	2b00      	cmp	r3, #0
 800401a:	d118      	bne.n	800404e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800401c:	4b1e      	ldr	r3, [pc, #120]	@ (8004098 <HAL_RCC_OscConfig+0x508>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a1d      	ldr	r2, [pc, #116]	@ (8004098 <HAL_RCC_OscConfig+0x508>)
 8004022:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004026:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004028:	f7fe fbea 	bl	8002800 <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004030:	f7fe fbe6 	bl	8002800 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e1b8      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004042:	4b15      	ldr	r3, [pc, #84]	@ (8004098 <HAL_RCC_OscConfig+0x508>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800404a:	2b00      	cmp	r3, #0
 800404c:	d0f0      	beq.n	8004030 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d108      	bne.n	8004068 <HAL_RCC_OscConfig+0x4d8>
 8004056:	4b0f      	ldr	r3, [pc, #60]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8004058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800405c:	4a0d      	ldr	r2, [pc, #52]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 800405e:	f043 0301 	orr.w	r3, r3, #1
 8004062:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004066:	e029      	b.n	80040bc <HAL_RCC_OscConfig+0x52c>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	2b05      	cmp	r3, #5
 800406e:	d115      	bne.n	800409c <HAL_RCC_OscConfig+0x50c>
 8004070:	4b08      	ldr	r3, [pc, #32]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8004072:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004076:	4a07      	ldr	r2, [pc, #28]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8004078:	f043 0304 	orr.w	r3, r3, #4
 800407c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004080:	4b04      	ldr	r3, [pc, #16]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8004082:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004086:	4a03      	ldr	r2, [pc, #12]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8004088:	f043 0301 	orr.w	r3, r3, #1
 800408c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004090:	e014      	b.n	80040bc <HAL_RCC_OscConfig+0x52c>
 8004092:	bf00      	nop
 8004094:	40021000 	.word	0x40021000
 8004098:	40007000 	.word	0x40007000
 800409c:	4b9d      	ldr	r3, [pc, #628]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 800409e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040a2:	4a9c      	ldr	r2, [pc, #624]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 80040a4:	f023 0301 	bic.w	r3, r3, #1
 80040a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80040ac:	4b99      	ldr	r3, [pc, #612]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 80040ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040b2:	4a98      	ldr	r2, [pc, #608]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 80040b4:	f023 0304 	bic.w	r3, r3, #4
 80040b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d016      	beq.n	80040f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c4:	f7fe fb9c 	bl	8002800 <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040ca:	e00a      	b.n	80040e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040cc:	f7fe fb98 	bl	8002800 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040da:	4293      	cmp	r3, r2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e168      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040e2:	4b8c      	ldr	r3, [pc, #560]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 80040e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d0ed      	beq.n	80040cc <HAL_RCC_OscConfig+0x53c>
 80040f0:	e015      	b.n	800411e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f2:	f7fe fb85 	bl	8002800 <HAL_GetTick>
 80040f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040f8:	e00a      	b.n	8004110 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040fa:	f7fe fb81 	bl	8002800 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004108:	4293      	cmp	r3, r2
 800410a:	d901      	bls.n	8004110 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e151      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004110:	4b80      	ldr	r3, [pc, #512]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 8004112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1ed      	bne.n	80040fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800411e:	7ffb      	ldrb	r3, [r7, #31]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d105      	bne.n	8004130 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004124:	4b7b      	ldr	r3, [pc, #492]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 8004126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004128:	4a7a      	ldr	r2, [pc, #488]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 800412a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800412e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0320 	and.w	r3, r3, #32
 8004138:	2b00      	cmp	r3, #0
 800413a:	d03c      	beq.n	80041b6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004140:	2b00      	cmp	r3, #0
 8004142:	d01c      	beq.n	800417e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004144:	4b73      	ldr	r3, [pc, #460]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 8004146:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800414a:	4a72      	ldr	r2, [pc, #456]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 800414c:	f043 0301 	orr.w	r3, r3, #1
 8004150:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004154:	f7fe fb54 	bl	8002800 <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800415a:	e008      	b.n	800416e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800415c:	f7fe fb50 	bl	8002800 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e122      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800416e:	4b69      	ldr	r3, [pc, #420]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 8004170:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d0ef      	beq.n	800415c <HAL_RCC_OscConfig+0x5cc>
 800417c:	e01b      	b.n	80041b6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800417e:	4b65      	ldr	r3, [pc, #404]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 8004180:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004184:	4a63      	ldr	r2, [pc, #396]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 8004186:	f023 0301 	bic.w	r3, r3, #1
 800418a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800418e:	f7fe fb37 	bl	8002800 <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004194:	e008      	b.n	80041a8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004196:	f7fe fb33 	bl	8002800 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e105      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80041a8:	4b5a      	ldr	r3, [pc, #360]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 80041aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1ef      	bne.n	8004196 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 80f9 	beq.w	80043b2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	f040 80cf 	bne.w	8004368 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80041ca:	4b52      	ldr	r3, [pc, #328]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	f003 0203 	and.w	r2, r3, #3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041da:	429a      	cmp	r2, r3
 80041dc:	d12c      	bne.n	8004238 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e8:	3b01      	subs	r3, #1
 80041ea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d123      	bne.n	8004238 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041fa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d11b      	bne.n	8004238 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800420a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800420c:	429a      	cmp	r2, r3
 800420e:	d113      	bne.n	8004238 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800421a:	085b      	lsrs	r3, r3, #1
 800421c:	3b01      	subs	r3, #1
 800421e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004220:	429a      	cmp	r2, r3
 8004222:	d109      	bne.n	8004238 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422e:	085b      	lsrs	r3, r3, #1
 8004230:	3b01      	subs	r3, #1
 8004232:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004234:	429a      	cmp	r2, r3
 8004236:	d071      	beq.n	800431c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	2b0c      	cmp	r3, #12
 800423c:	d068      	beq.n	8004310 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800423e:	4b35      	ldr	r3, [pc, #212]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d105      	bne.n	8004256 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800424a:	4b32      	ldr	r3, [pc, #200]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e0ac      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800425a:	4b2e      	ldr	r3, [pc, #184]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a2d      	ldr	r2, [pc, #180]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 8004260:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004264:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004266:	f7fe facb 	bl	8002800 <HAL_GetTick>
 800426a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800426c:	e008      	b.n	8004280 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800426e:	f7fe fac7 	bl	8002800 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d901      	bls.n	8004280 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e099      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004280:	4b24      	ldr	r3, [pc, #144]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1f0      	bne.n	800426e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800428c:	4b21      	ldr	r3, [pc, #132]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 800428e:	68da      	ldr	r2, [r3, #12]
 8004290:	4b21      	ldr	r3, [pc, #132]	@ (8004318 <HAL_RCC_OscConfig+0x788>)
 8004292:	4013      	ands	r3, r2
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800429c:	3a01      	subs	r2, #1
 800429e:	0112      	lsls	r2, r2, #4
 80042a0:	4311      	orrs	r1, r2
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80042a6:	0212      	lsls	r2, r2, #8
 80042a8:	4311      	orrs	r1, r2
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80042ae:	0852      	lsrs	r2, r2, #1
 80042b0:	3a01      	subs	r2, #1
 80042b2:	0552      	lsls	r2, r2, #21
 80042b4:	4311      	orrs	r1, r2
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80042ba:	0852      	lsrs	r2, r2, #1
 80042bc:	3a01      	subs	r2, #1
 80042be:	0652      	lsls	r2, r2, #25
 80042c0:	4311      	orrs	r1, r2
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80042c6:	06d2      	lsls	r2, r2, #27
 80042c8:	430a      	orrs	r2, r1
 80042ca:	4912      	ldr	r1, [pc, #72]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80042d0:	4b10      	ldr	r3, [pc, #64]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a0f      	ldr	r2, [pc, #60]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 80042d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042dc:	4b0d      	ldr	r3, [pc, #52]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	4a0c      	ldr	r2, [pc, #48]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 80042e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042e8:	f7fe fa8a 	bl	8002800 <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042f0:	f7fe fa86 	bl	8002800 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e058      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004302:	4b04      	ldr	r3, [pc, #16]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0f0      	beq.n	80042f0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800430e:	e050      	b.n	80043b2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e04f      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
 8004314:	40021000 	.word	0x40021000
 8004318:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800431c:	4b27      	ldr	r3, [pc, #156]	@ (80043bc <HAL_RCC_OscConfig+0x82c>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d144      	bne.n	80043b2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004328:	4b24      	ldr	r3, [pc, #144]	@ (80043bc <HAL_RCC_OscConfig+0x82c>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a23      	ldr	r2, [pc, #140]	@ (80043bc <HAL_RCC_OscConfig+0x82c>)
 800432e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004332:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004334:	4b21      	ldr	r3, [pc, #132]	@ (80043bc <HAL_RCC_OscConfig+0x82c>)
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	4a20      	ldr	r2, [pc, #128]	@ (80043bc <HAL_RCC_OscConfig+0x82c>)
 800433a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800433e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004340:	f7fe fa5e 	bl	8002800 <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004346:	e008      	b.n	800435a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004348:	f7fe fa5a 	bl	8002800 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b02      	cmp	r3, #2
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e02c      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800435a:	4b18      	ldr	r3, [pc, #96]	@ (80043bc <HAL_RCC_OscConfig+0x82c>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0f0      	beq.n	8004348 <HAL_RCC_OscConfig+0x7b8>
 8004366:	e024      	b.n	80043b2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	2b0c      	cmp	r3, #12
 800436c:	d01f      	beq.n	80043ae <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800436e:	4b13      	ldr	r3, [pc, #76]	@ (80043bc <HAL_RCC_OscConfig+0x82c>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a12      	ldr	r2, [pc, #72]	@ (80043bc <HAL_RCC_OscConfig+0x82c>)
 8004374:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004378:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437a:	f7fe fa41 	bl	8002800 <HAL_GetTick>
 800437e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004380:	e008      	b.n	8004394 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004382:	f7fe fa3d 	bl	8002800 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b02      	cmp	r3, #2
 800438e:	d901      	bls.n	8004394 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e00f      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004394:	4b09      	ldr	r3, [pc, #36]	@ (80043bc <HAL_RCC_OscConfig+0x82c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1f0      	bne.n	8004382 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80043a0:	4b06      	ldr	r3, [pc, #24]	@ (80043bc <HAL_RCC_OscConfig+0x82c>)
 80043a2:	68da      	ldr	r2, [r3, #12]
 80043a4:	4905      	ldr	r1, [pc, #20]	@ (80043bc <HAL_RCC_OscConfig+0x82c>)
 80043a6:	4b06      	ldr	r3, [pc, #24]	@ (80043c0 <HAL_RCC_OscConfig+0x830>)
 80043a8:	4013      	ands	r3, r2
 80043aa:	60cb      	str	r3, [r1, #12]
 80043ac:	e001      	b.n	80043b2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e000      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3720      	adds	r7, #32
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	40021000 	.word	0x40021000
 80043c0:	feeefffc 	.word	0xfeeefffc

080043c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80043ce:	2300      	movs	r3, #0
 80043d0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d101      	bne.n	80043dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e11d      	b.n	8004618 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043dc:	4b90      	ldr	r3, [pc, #576]	@ (8004620 <HAL_RCC_ClockConfig+0x25c>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 030f 	and.w	r3, r3, #15
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d910      	bls.n	800440c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ea:	4b8d      	ldr	r3, [pc, #564]	@ (8004620 <HAL_RCC_ClockConfig+0x25c>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f023 020f 	bic.w	r2, r3, #15
 80043f2:	498b      	ldr	r1, [pc, #556]	@ (8004620 <HAL_RCC_ClockConfig+0x25c>)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043fa:	4b89      	ldr	r3, [pc, #548]	@ (8004620 <HAL_RCC_ClockConfig+0x25c>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 030f 	and.w	r3, r3, #15
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	429a      	cmp	r2, r3
 8004406:	d001      	beq.n	800440c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e105      	b.n	8004618 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d010      	beq.n	800443a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689a      	ldr	r2, [r3, #8]
 800441c:	4b81      	ldr	r3, [pc, #516]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004424:	429a      	cmp	r2, r3
 8004426:	d908      	bls.n	800443a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004428:	4b7e      	ldr	r3, [pc, #504]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	497b      	ldr	r1, [pc, #492]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 8004436:	4313      	orrs	r3, r2
 8004438:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d079      	beq.n	800453a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	2b03      	cmp	r3, #3
 800444c:	d11e      	bne.n	800448c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800444e:	4b75      	ldr	r3, [pc, #468]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e0dc      	b.n	8004618 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800445e:	f000 fa09 	bl	8004874 <RCC_GetSysClockFreqFromPLLSource>
 8004462:	4603      	mov	r3, r0
 8004464:	4a70      	ldr	r2, [pc, #448]	@ (8004628 <HAL_RCC_ClockConfig+0x264>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d946      	bls.n	80044f8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800446a:	4b6e      	ldr	r3, [pc, #440]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d140      	bne.n	80044f8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004476:	4b6b      	ldr	r3, [pc, #428]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800447e:	4a69      	ldr	r2, [pc, #420]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 8004480:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004484:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004486:	2380      	movs	r3, #128	@ 0x80
 8004488:	617b      	str	r3, [r7, #20]
 800448a:	e035      	b.n	80044f8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	2b02      	cmp	r3, #2
 8004492:	d107      	bne.n	80044a4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004494:	4b63      	ldr	r3, [pc, #396]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d115      	bne.n	80044cc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e0b9      	b.n	8004618 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d107      	bne.n	80044bc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044ac:	4b5d      	ldr	r3, [pc, #372]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d109      	bne.n	80044cc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e0ad      	b.n	8004618 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044bc:	4b59      	ldr	r3, [pc, #356]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e0a5      	b.n	8004618 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80044cc:	f000 f8b4 	bl	8004638 <HAL_RCC_GetSysClockFreq>
 80044d0:	4603      	mov	r3, r0
 80044d2:	4a55      	ldr	r2, [pc, #340]	@ (8004628 <HAL_RCC_ClockConfig+0x264>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d90f      	bls.n	80044f8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80044d8:	4b52      	ldr	r3, [pc, #328]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d109      	bne.n	80044f8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80044e4:	4b4f      	ldr	r3, [pc, #316]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044ec:	4a4d      	ldr	r2, [pc, #308]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 80044ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044f2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80044f4:	2380      	movs	r3, #128	@ 0x80
 80044f6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044f8:	4b4a      	ldr	r3, [pc, #296]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f023 0203 	bic.w	r2, r3, #3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	4947      	ldr	r1, [pc, #284]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 8004506:	4313      	orrs	r3, r2
 8004508:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800450a:	f7fe f979 	bl	8002800 <HAL_GetTick>
 800450e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004510:	e00a      	b.n	8004528 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004512:	f7fe f975 	bl	8002800 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004520:	4293      	cmp	r3, r2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e077      	b.n	8004618 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004528:	4b3e      	ldr	r3, [pc, #248]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f003 020c 	and.w	r2, r3, #12
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	429a      	cmp	r2, r3
 8004538:	d1eb      	bne.n	8004512 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	2b80      	cmp	r3, #128	@ 0x80
 800453e:	d105      	bne.n	800454c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004540:	4b38      	ldr	r3, [pc, #224]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	4a37      	ldr	r2, [pc, #220]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 8004546:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800454a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d010      	beq.n	800457a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689a      	ldr	r2, [r3, #8]
 800455c:	4b31      	ldr	r3, [pc, #196]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004564:	429a      	cmp	r2, r3
 8004566:	d208      	bcs.n	800457a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004568:	4b2e      	ldr	r3, [pc, #184]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	492b      	ldr	r1, [pc, #172]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 8004576:	4313      	orrs	r3, r2
 8004578:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800457a:	4b29      	ldr	r3, [pc, #164]	@ (8004620 <HAL_RCC_ClockConfig+0x25c>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 030f 	and.w	r3, r3, #15
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	429a      	cmp	r2, r3
 8004586:	d210      	bcs.n	80045aa <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004588:	4b25      	ldr	r3, [pc, #148]	@ (8004620 <HAL_RCC_ClockConfig+0x25c>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f023 020f 	bic.w	r2, r3, #15
 8004590:	4923      	ldr	r1, [pc, #140]	@ (8004620 <HAL_RCC_ClockConfig+0x25c>)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	4313      	orrs	r3, r2
 8004596:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004598:	4b21      	ldr	r3, [pc, #132]	@ (8004620 <HAL_RCC_ClockConfig+0x25c>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 030f 	and.w	r3, r3, #15
 80045a0:	683a      	ldr	r2, [r7, #0]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d001      	beq.n	80045aa <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e036      	b.n	8004618 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0304 	and.w	r3, r3, #4
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d008      	beq.n	80045c8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045b6:	4b1b      	ldr	r3, [pc, #108]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	4918      	ldr	r1, [pc, #96]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0308 	and.w	r3, r3, #8
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d009      	beq.n	80045e8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045d4:	4b13      	ldr	r3, [pc, #76]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	00db      	lsls	r3, r3, #3
 80045e2:	4910      	ldr	r1, [pc, #64]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045e8:	f000 f826 	bl	8004638 <HAL_RCC_GetSysClockFreq>
 80045ec:	4602      	mov	r2, r0
 80045ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	091b      	lsrs	r3, r3, #4
 80045f4:	f003 030f 	and.w	r3, r3, #15
 80045f8:	490c      	ldr	r1, [pc, #48]	@ (800462c <HAL_RCC_ClockConfig+0x268>)
 80045fa:	5ccb      	ldrb	r3, [r1, r3]
 80045fc:	f003 031f 	and.w	r3, r3, #31
 8004600:	fa22 f303 	lsr.w	r3, r2, r3
 8004604:	4a0a      	ldr	r2, [pc, #40]	@ (8004630 <HAL_RCC_ClockConfig+0x26c>)
 8004606:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004608:	4b0a      	ldr	r3, [pc, #40]	@ (8004634 <HAL_RCC_ClockConfig+0x270>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4618      	mov	r0, r3
 800460e:	f7fe f8a7 	bl	8002760 <HAL_InitTick>
 8004612:	4603      	mov	r3, r0
 8004614:	73fb      	strb	r3, [r7, #15]

  return status;
 8004616:	7bfb      	ldrb	r3, [r7, #15]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3718      	adds	r7, #24
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	40022000 	.word	0x40022000
 8004624:	40021000 	.word	0x40021000
 8004628:	04c4b400 	.word	0x04c4b400
 800462c:	0800cf2c 	.word	0x0800cf2c
 8004630:	20000010 	.word	0x20000010
 8004634:	20000014 	.word	0x20000014

08004638 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004638:	b480      	push	{r7}
 800463a:	b089      	sub	sp, #36	@ 0x24
 800463c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800463e:	2300      	movs	r3, #0
 8004640:	61fb      	str	r3, [r7, #28]
 8004642:	2300      	movs	r3, #0
 8004644:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004646:	4b3e      	ldr	r3, [pc, #248]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x108>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f003 030c 	and.w	r3, r3, #12
 800464e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004650:	4b3b      	ldr	r3, [pc, #236]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x108>)
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	f003 0303 	and.w	r3, r3, #3
 8004658:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d005      	beq.n	800466c <HAL_RCC_GetSysClockFreq+0x34>
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	2b0c      	cmp	r3, #12
 8004664:	d121      	bne.n	80046aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d11e      	bne.n	80046aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800466c:	4b34      	ldr	r3, [pc, #208]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x108>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0308 	and.w	r3, r3, #8
 8004674:	2b00      	cmp	r3, #0
 8004676:	d107      	bne.n	8004688 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004678:	4b31      	ldr	r3, [pc, #196]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x108>)
 800467a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800467e:	0a1b      	lsrs	r3, r3, #8
 8004680:	f003 030f 	and.w	r3, r3, #15
 8004684:	61fb      	str	r3, [r7, #28]
 8004686:	e005      	b.n	8004694 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004688:	4b2d      	ldr	r3, [pc, #180]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x108>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	091b      	lsrs	r3, r3, #4
 800468e:	f003 030f 	and.w	r3, r3, #15
 8004692:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004694:	4a2b      	ldr	r2, [pc, #172]	@ (8004744 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800469c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d10d      	bne.n	80046c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046a8:	e00a      	b.n	80046c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	2b04      	cmp	r3, #4
 80046ae:	d102      	bne.n	80046b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046b0:	4b25      	ldr	r3, [pc, #148]	@ (8004748 <HAL_RCC_GetSysClockFreq+0x110>)
 80046b2:	61bb      	str	r3, [r7, #24]
 80046b4:	e004      	b.n	80046c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	2b08      	cmp	r3, #8
 80046ba:	d101      	bne.n	80046c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046bc:	4b23      	ldr	r3, [pc, #140]	@ (800474c <HAL_RCC_GetSysClockFreq+0x114>)
 80046be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	2b0c      	cmp	r3, #12
 80046c4:	d134      	bne.n	8004730 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046c6:	4b1e      	ldr	r3, [pc, #120]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x108>)
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	f003 0303 	and.w	r3, r3, #3
 80046ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d003      	beq.n	80046de <HAL_RCC_GetSysClockFreq+0xa6>
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	2b03      	cmp	r3, #3
 80046da:	d003      	beq.n	80046e4 <HAL_RCC_GetSysClockFreq+0xac>
 80046dc:	e005      	b.n	80046ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80046de:	4b1a      	ldr	r3, [pc, #104]	@ (8004748 <HAL_RCC_GetSysClockFreq+0x110>)
 80046e0:	617b      	str	r3, [r7, #20]
      break;
 80046e2:	e005      	b.n	80046f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80046e4:	4b19      	ldr	r3, [pc, #100]	@ (800474c <HAL_RCC_GetSysClockFreq+0x114>)
 80046e6:	617b      	str	r3, [r7, #20]
      break;
 80046e8:	e002      	b.n	80046f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	617b      	str	r3, [r7, #20]
      break;
 80046ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046f0:	4b13      	ldr	r3, [pc, #76]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x108>)
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	091b      	lsrs	r3, r3, #4
 80046f6:	f003 030f 	and.w	r3, r3, #15
 80046fa:	3301      	adds	r3, #1
 80046fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80046fe:	4b10      	ldr	r3, [pc, #64]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x108>)
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	0a1b      	lsrs	r3, r3, #8
 8004704:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	fb03 f202 	mul.w	r2, r3, r2
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	fbb2 f3f3 	udiv	r3, r2, r3
 8004714:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004716:	4b0a      	ldr	r3, [pc, #40]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x108>)
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	0e5b      	lsrs	r3, r3, #25
 800471c:	f003 0303 	and.w	r3, r3, #3
 8004720:	3301      	adds	r3, #1
 8004722:	005b      	lsls	r3, r3, #1
 8004724:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	fbb2 f3f3 	udiv	r3, r2, r3
 800472e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004730:	69bb      	ldr	r3, [r7, #24]
}
 8004732:	4618      	mov	r0, r3
 8004734:	3724      	adds	r7, #36	@ 0x24
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	40021000 	.word	0x40021000
 8004744:	0800cf44 	.word	0x0800cf44
 8004748:	00f42400 	.word	0x00f42400
 800474c:	007a1200 	.word	0x007a1200

08004750 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004750:	b480      	push	{r7}
 8004752:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004754:	4b03      	ldr	r3, [pc, #12]	@ (8004764 <HAL_RCC_GetHCLKFreq+0x14>)
 8004756:	681b      	ldr	r3, [r3, #0]
}
 8004758:	4618      	mov	r0, r3
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	20000010 	.word	0x20000010

08004768 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800476c:	f7ff fff0 	bl	8004750 <HAL_RCC_GetHCLKFreq>
 8004770:	4602      	mov	r2, r0
 8004772:	4b06      	ldr	r3, [pc, #24]	@ (800478c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	0a1b      	lsrs	r3, r3, #8
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	4904      	ldr	r1, [pc, #16]	@ (8004790 <HAL_RCC_GetPCLK1Freq+0x28>)
 800477e:	5ccb      	ldrb	r3, [r1, r3]
 8004780:	f003 031f 	and.w	r3, r3, #31
 8004784:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004788:	4618      	mov	r0, r3
 800478a:	bd80      	pop	{r7, pc}
 800478c:	40021000 	.word	0x40021000
 8004790:	0800cf3c 	.word	0x0800cf3c

08004794 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004798:	f7ff ffda 	bl	8004750 <HAL_RCC_GetHCLKFreq>
 800479c:	4602      	mov	r2, r0
 800479e:	4b06      	ldr	r3, [pc, #24]	@ (80047b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	0adb      	lsrs	r3, r3, #11
 80047a4:	f003 0307 	and.w	r3, r3, #7
 80047a8:	4904      	ldr	r1, [pc, #16]	@ (80047bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80047aa:	5ccb      	ldrb	r3, [r1, r3]
 80047ac:	f003 031f 	and.w	r3, r3, #31
 80047b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	40021000 	.word	0x40021000
 80047bc:	0800cf3c 	.word	0x0800cf3c

080047c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80047c8:	2300      	movs	r3, #0
 80047ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80047cc:	4b27      	ldr	r3, [pc, #156]	@ (800486c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80047ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d003      	beq.n	80047e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80047d8:	f7ff f916 	bl	8003a08 <HAL_PWREx_GetVoltageRange>
 80047dc:	6178      	str	r0, [r7, #20]
 80047de:	e014      	b.n	800480a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80047e0:	4b22      	ldr	r3, [pc, #136]	@ (800486c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80047e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047e4:	4a21      	ldr	r2, [pc, #132]	@ (800486c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80047e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80047ec:	4b1f      	ldr	r3, [pc, #124]	@ (800486c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80047ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047f4:	60fb      	str	r3, [r7, #12]
 80047f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80047f8:	f7ff f906 	bl	8003a08 <HAL_PWREx_GetVoltageRange>
 80047fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80047fe:	4b1b      	ldr	r3, [pc, #108]	@ (800486c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004802:	4a1a      	ldr	r2, [pc, #104]	@ (800486c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004804:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004808:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004810:	d10b      	bne.n	800482a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b80      	cmp	r3, #128	@ 0x80
 8004816:	d913      	bls.n	8004840 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2ba0      	cmp	r3, #160	@ 0xa0
 800481c:	d902      	bls.n	8004824 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800481e:	2302      	movs	r3, #2
 8004820:	613b      	str	r3, [r7, #16]
 8004822:	e00d      	b.n	8004840 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004824:	2301      	movs	r3, #1
 8004826:	613b      	str	r3, [r7, #16]
 8004828:	e00a      	b.n	8004840 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2b7f      	cmp	r3, #127	@ 0x7f
 800482e:	d902      	bls.n	8004836 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004830:	2302      	movs	r3, #2
 8004832:	613b      	str	r3, [r7, #16]
 8004834:	e004      	b.n	8004840 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b70      	cmp	r3, #112	@ 0x70
 800483a:	d101      	bne.n	8004840 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800483c:	2301      	movs	r3, #1
 800483e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004840:	4b0b      	ldr	r3, [pc, #44]	@ (8004870 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f023 020f 	bic.w	r2, r3, #15
 8004848:	4909      	ldr	r1, [pc, #36]	@ (8004870 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	4313      	orrs	r3, r2
 800484e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004850:	4b07      	ldr	r3, [pc, #28]	@ (8004870 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 030f 	and.w	r3, r3, #15
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	429a      	cmp	r2, r3
 800485c:	d001      	beq.n	8004862 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e000      	b.n	8004864 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3718      	adds	r7, #24
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40021000 	.word	0x40021000
 8004870:	40022000 	.word	0x40022000

08004874 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004874:	b480      	push	{r7}
 8004876:	b087      	sub	sp, #28
 8004878:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800487a:	4b2d      	ldr	r3, [pc, #180]	@ (8004930 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	f003 0303 	and.w	r3, r3, #3
 8004882:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2b03      	cmp	r3, #3
 8004888:	d00b      	beq.n	80048a2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2b03      	cmp	r3, #3
 800488e:	d825      	bhi.n	80048dc <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d008      	beq.n	80048a8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2b02      	cmp	r3, #2
 800489a:	d11f      	bne.n	80048dc <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800489c:	4b25      	ldr	r3, [pc, #148]	@ (8004934 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800489e:	613b      	str	r3, [r7, #16]
    break;
 80048a0:	e01f      	b.n	80048e2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80048a2:	4b25      	ldr	r3, [pc, #148]	@ (8004938 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80048a4:	613b      	str	r3, [r7, #16]
    break;
 80048a6:	e01c      	b.n	80048e2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80048a8:	4b21      	ldr	r3, [pc, #132]	@ (8004930 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0308 	and.w	r3, r3, #8
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d107      	bne.n	80048c4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80048b4:	4b1e      	ldr	r3, [pc, #120]	@ (8004930 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80048b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048ba:	0a1b      	lsrs	r3, r3, #8
 80048bc:	f003 030f 	and.w	r3, r3, #15
 80048c0:	617b      	str	r3, [r7, #20]
 80048c2:	e005      	b.n	80048d0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80048c4:	4b1a      	ldr	r3, [pc, #104]	@ (8004930 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	091b      	lsrs	r3, r3, #4
 80048ca:	f003 030f 	and.w	r3, r3, #15
 80048ce:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80048d0:	4a1a      	ldr	r2, [pc, #104]	@ (800493c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048d8:	613b      	str	r3, [r7, #16]
    break;
 80048da:	e002      	b.n	80048e2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80048dc:	2300      	movs	r3, #0
 80048de:	613b      	str	r3, [r7, #16]
    break;
 80048e0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048e2:	4b13      	ldr	r3, [pc, #76]	@ (8004930 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	091b      	lsrs	r3, r3, #4
 80048e8:	f003 030f 	and.w	r3, r3, #15
 80048ec:	3301      	adds	r3, #1
 80048ee:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80048f0:	4b0f      	ldr	r3, [pc, #60]	@ (8004930 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	0a1b      	lsrs	r3, r3, #8
 80048f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	fb03 f202 	mul.w	r2, r3, r2
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	fbb2 f3f3 	udiv	r3, r2, r3
 8004906:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004908:	4b09      	ldr	r3, [pc, #36]	@ (8004930 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	0e5b      	lsrs	r3, r3, #25
 800490e:	f003 0303 	and.w	r3, r3, #3
 8004912:	3301      	adds	r3, #1
 8004914:	005b      	lsls	r3, r3, #1
 8004916:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004920:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004922:	683b      	ldr	r3, [r7, #0]
}
 8004924:	4618      	mov	r0, r3
 8004926:	371c      	adds	r7, #28
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr
 8004930:	40021000 	.word	0x40021000
 8004934:	00f42400 	.word	0x00f42400
 8004938:	007a1200 	.word	0x007a1200
 800493c:	0800cf44 	.word	0x0800cf44

08004940 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004948:	2300      	movs	r3, #0
 800494a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800494c:	2300      	movs	r3, #0
 800494e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004958:	2b00      	cmp	r3, #0
 800495a:	d040      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004960:	2b80      	cmp	r3, #128	@ 0x80
 8004962:	d02a      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004964:	2b80      	cmp	r3, #128	@ 0x80
 8004966:	d825      	bhi.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004968:	2b60      	cmp	r3, #96	@ 0x60
 800496a:	d026      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800496c:	2b60      	cmp	r3, #96	@ 0x60
 800496e:	d821      	bhi.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004970:	2b40      	cmp	r3, #64	@ 0x40
 8004972:	d006      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004974:	2b40      	cmp	r3, #64	@ 0x40
 8004976:	d81d      	bhi.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004978:	2b00      	cmp	r3, #0
 800497a:	d009      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800497c:	2b20      	cmp	r3, #32
 800497e:	d010      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004980:	e018      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004982:	4b89      	ldr	r3, [pc, #548]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	4a88      	ldr	r2, [pc, #544]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004988:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800498c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800498e:	e015      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	3304      	adds	r3, #4
 8004994:	2100      	movs	r1, #0
 8004996:	4618      	mov	r0, r3
 8004998:	f000 fb02 	bl	8004fa0 <RCCEx_PLLSAI1_Config>
 800499c:	4603      	mov	r3, r0
 800499e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049a0:	e00c      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	3320      	adds	r3, #32
 80049a6:	2100      	movs	r1, #0
 80049a8:	4618      	mov	r0, r3
 80049aa:	f000 fbed 	bl	8005188 <RCCEx_PLLSAI2_Config>
 80049ae:	4603      	mov	r3, r0
 80049b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049b2:	e003      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	74fb      	strb	r3, [r7, #19]
      break;
 80049b8:	e000      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80049ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049bc:	7cfb      	ldrb	r3, [r7, #19]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10b      	bne.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049c2:	4b79      	ldr	r3, [pc, #484]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80049c8:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049d0:	4975      	ldr	r1, [pc, #468]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80049d8:	e001      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049da:	7cfb      	ldrb	r3, [r7, #19]
 80049dc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d047      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049f2:	d030      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80049f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049f8:	d82a      	bhi.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80049fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049fe:	d02a      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004a00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a04:	d824      	bhi.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004a06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a0a:	d008      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004a0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a10:	d81e      	bhi.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00a      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004a16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a1a:	d010      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004a1c:	e018      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a1e:	4b62      	ldr	r3, [pc, #392]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	4a61      	ldr	r2, [pc, #388]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a28:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a2a:	e015      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	3304      	adds	r3, #4
 8004a30:	2100      	movs	r1, #0
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 fab4 	bl	8004fa0 <RCCEx_PLLSAI1_Config>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a3c:	e00c      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	3320      	adds	r3, #32
 8004a42:	2100      	movs	r1, #0
 8004a44:	4618      	mov	r0, r3
 8004a46:	f000 fb9f 	bl	8005188 <RCCEx_PLLSAI2_Config>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a4e:	e003      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	74fb      	strb	r3, [r7, #19]
      break;
 8004a54:	e000      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004a56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a58:	7cfb      	ldrb	r3, [r7, #19]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10b      	bne.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a5e:	4b52      	ldr	r3, [pc, #328]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a60:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a6c:	494e      	ldr	r1, [pc, #312]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004a74:	e001      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a76:	7cfb      	ldrb	r3, [r7, #19]
 8004a78:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f000 809f 	beq.w	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a8c:	4b46      	ldr	r3, [pc, #280]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e000      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00d      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aa2:	4b41      	ldr	r3, [pc, #260]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aa6:	4a40      	ldr	r2, [pc, #256]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004aa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004aac:	6593      	str	r3, [r2, #88]	@ 0x58
 8004aae:	4b3e      	ldr	r3, [pc, #248]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ab6:	60bb      	str	r3, [r7, #8]
 8004ab8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004aba:	2301      	movs	r3, #1
 8004abc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004abe:	4b3b      	ldr	r3, [pc, #236]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a3a      	ldr	r2, [pc, #232]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004ac4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ac8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004aca:	f7fd fe99 	bl	8002800 <HAL_GetTick>
 8004ace:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ad0:	e009      	b.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ad2:	f7fd fe95 	bl	8002800 <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d902      	bls.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	74fb      	strb	r3, [r7, #19]
        break;
 8004ae4:	e005      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ae6:	4b31      	ldr	r3, [pc, #196]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d0ef      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004af2:	7cfb      	ldrb	r3, [r7, #19]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d15b      	bne.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004af8:	4b2b      	ldr	r3, [pc, #172]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004afe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b02:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d01f      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b10:	697a      	ldr	r2, [r7, #20]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d019      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b16:	4b24      	ldr	r3, [pc, #144]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b20:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b22:	4b21      	ldr	r3, [pc, #132]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b28:	4a1f      	ldr	r2, [pc, #124]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b32:	4b1d      	ldr	r3, [pc, #116]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b38:	4a1b      	ldr	r2, [pc, #108]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b42:	4a19      	ldr	r2, [pc, #100]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d016      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b54:	f7fd fe54 	bl	8002800 <HAL_GetTick>
 8004b58:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b5a:	e00b      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b5c:	f7fd fe50 	bl	8002800 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d902      	bls.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	74fb      	strb	r3, [r7, #19]
            break;
 8004b72:	e006      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b74:	4b0c      	ldr	r3, [pc, #48]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d0ec      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004b82:	7cfb      	ldrb	r3, [r7, #19]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d10c      	bne.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b88:	4b07      	ldr	r3, [pc, #28]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b8e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b98:	4903      	ldr	r1, [pc, #12]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004ba0:	e008      	b.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ba2:	7cfb      	ldrb	r3, [r7, #19]
 8004ba4:	74bb      	strb	r3, [r7, #18]
 8004ba6:	e005      	b.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004ba8:	40021000 	.word	0x40021000
 8004bac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb0:	7cfb      	ldrb	r3, [r7, #19]
 8004bb2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bb4:	7c7b      	ldrb	r3, [r7, #17]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d105      	bne.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bba:	4ba0      	ldr	r3, [pc, #640]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bbe:	4a9f      	ldr	r2, [pc, #636]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bc4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00a      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bd2:	4b9a      	ldr	r3, [pc, #616]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bd8:	f023 0203 	bic.w	r2, r3, #3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004be0:	4996      	ldr	r1, [pc, #600]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00a      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004bf4:	4b91      	ldr	r3, [pc, #580]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bfa:	f023 020c 	bic.w	r2, r3, #12
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c02:	498e      	ldr	r1, [pc, #568]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0304 	and.w	r3, r3, #4
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00a      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c16:	4b89      	ldr	r3, [pc, #548]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c1c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c24:	4985      	ldr	r1, [pc, #532]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0308 	and.w	r3, r3, #8
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00a      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c38:	4b80      	ldr	r3, [pc, #512]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c3e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c46:	497d      	ldr	r1, [pc, #500]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0310 	and.w	r3, r3, #16
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00a      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c5a:	4b78      	ldr	r3, [pc, #480]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c68:	4974      	ldr	r1, [pc, #464]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0320 	and.w	r3, r3, #32
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00a      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c7c:	4b6f      	ldr	r3, [pc, #444]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c82:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c8a:	496c      	ldr	r1, [pc, #432]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00a      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c9e:	4b67      	ldr	r3, [pc, #412]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ca4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cac:	4963      	ldr	r1, [pc, #396]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00a      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004cc0:	4b5e      	ldr	r3, [pc, #376]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cc6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004cce:	495b      	ldr	r1, [pc, #364]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00a      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ce2:	4b56      	ldr	r3, [pc, #344]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ce8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cf0:	4952      	ldr	r1, [pc, #328]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00a      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d04:	4b4d      	ldr	r3, [pc, #308]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d0a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d12:	494a      	ldr	r1, [pc, #296]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00a      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d26:	4b45      	ldr	r3, [pc, #276]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d2c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d34:	4941      	ldr	r1, [pc, #260]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00a      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d48:	4b3c      	ldr	r3, [pc, #240]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d4e:	f023 0203 	bic.w	r2, r3, #3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d56:	4939      	ldr	r1, [pc, #228]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d028      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d6a:	4b34      	ldr	r3, [pc, #208]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d70:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d78:	4930      	ldr	r1, [pc, #192]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d88:	d106      	bne.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d8a:	4b2c      	ldr	r3, [pc, #176]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	4a2b      	ldr	r2, [pc, #172]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d90:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d94:	60d3      	str	r3, [r2, #12]
 8004d96:	e011      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d9c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004da0:	d10c      	bne.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	3304      	adds	r3, #4
 8004da6:	2101      	movs	r1, #1
 8004da8:	4618      	mov	r0, r3
 8004daa:	f000 f8f9 	bl	8004fa0 <RCCEx_PLLSAI1_Config>
 8004dae:	4603      	mov	r3, r0
 8004db0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004db2:	7cfb      	ldrb	r3, [r7, #19]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d001      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004db8:	7cfb      	ldrb	r3, [r7, #19]
 8004dba:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d04d      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004dcc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004dd0:	d108      	bne.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004dd2:	4b1a      	ldr	r3, [pc, #104]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004dd8:	4a18      	ldr	r2, [pc, #96]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004dde:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004de2:	e012      	b.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004de4:	4b15      	ldr	r3, [pc, #84]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004de6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004dea:	4a14      	ldr	r2, [pc, #80]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004df0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004df4:	4b11      	ldr	r3, [pc, #68]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dfa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e02:	490e      	ldr	r1, [pc, #56]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e12:	d106      	bne.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e14:	4b09      	ldr	r3, [pc, #36]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	4a08      	ldr	r2, [pc, #32]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e1e:	60d3      	str	r3, [r2, #12]
 8004e20:	e020      	b.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e26:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e2a:	d109      	bne.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e2c:	4b03      	ldr	r3, [pc, #12]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	4a02      	ldr	r2, [pc, #8]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e36:	60d3      	str	r3, [r2, #12]
 8004e38:	e014      	b.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004e3a:	bf00      	nop
 8004e3c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e44:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e48:	d10c      	bne.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	3304      	adds	r3, #4
 8004e4e:	2101      	movs	r1, #1
 8004e50:	4618      	mov	r0, r3
 8004e52:	f000 f8a5 	bl	8004fa0 <RCCEx_PLLSAI1_Config>
 8004e56:	4603      	mov	r3, r0
 8004e58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e5a:	7cfb      	ldrb	r3, [r7, #19]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d001      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004e60:	7cfb      	ldrb	r3, [r7, #19]
 8004e62:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d028      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e70:	4b4a      	ldr	r3, [pc, #296]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e76:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e7e:	4947      	ldr	r1, [pc, #284]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e8e:	d106      	bne.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e90:	4b42      	ldr	r3, [pc, #264]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	4a41      	ldr	r2, [pc, #260]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e9a:	60d3      	str	r3, [r2, #12]
 8004e9c:	e011      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ea2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ea6:	d10c      	bne.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	3304      	adds	r3, #4
 8004eac:	2101      	movs	r1, #1
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f000 f876 	bl	8004fa0 <RCCEx_PLLSAI1_Config>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004eb8:	7cfb      	ldrb	r3, [r7, #19]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d001      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004ebe:	7cfb      	ldrb	r3, [r7, #19]
 8004ec0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d01e      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ece:	4b33      	ldr	r3, [pc, #204]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ed4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ede:	492f      	ldr	r1, [pc, #188]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004eec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ef0:	d10c      	bne.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	3304      	adds	r3, #4
 8004ef6:	2102      	movs	r1, #2
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f000 f851 	bl	8004fa0 <RCCEx_PLLSAI1_Config>
 8004efe:	4603      	mov	r3, r0
 8004f00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f02:	7cfb      	ldrb	r3, [r7, #19]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d001      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004f08:	7cfb      	ldrb	r3, [r7, #19]
 8004f0a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00b      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f18:	4b20      	ldr	r3, [pc, #128]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f1e:	f023 0204 	bic.w	r2, r3, #4
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f28:	491c      	ldr	r1, [pc, #112]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00b      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004f3c:	4b17      	ldr	r3, [pc, #92]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f42:	f023 0218 	bic.w	r2, r3, #24
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f4c:	4913      	ldr	r1, [pc, #76]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d017      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004f60:	4b0e      	ldr	r3, [pc, #56]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f62:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f66:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f70:	490a      	ldr	r1, [pc, #40]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f82:	d105      	bne.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f84:	4b05      	ldr	r3, [pc, #20]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	4a04      	ldr	r2, [pc, #16]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f8e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004f90:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3718      	adds	r7, #24
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	40021000 	.word	0x40021000

08004fa0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004faa:	2300      	movs	r3, #0
 8004fac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004fae:	4b72      	ldr	r3, [pc, #456]	@ (8005178 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	f003 0303 	and.w	r3, r3, #3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00e      	beq.n	8004fd8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004fba:	4b6f      	ldr	r3, [pc, #444]	@ (8005178 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	f003 0203 	and.w	r2, r3, #3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d103      	bne.n	8004fd2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
       ||
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d142      	bne.n	8005058 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	73fb      	strb	r3, [r7, #15]
 8004fd6:	e03f      	b.n	8005058 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2b03      	cmp	r3, #3
 8004fde:	d018      	beq.n	8005012 <RCCEx_PLLSAI1_Config+0x72>
 8004fe0:	2b03      	cmp	r3, #3
 8004fe2:	d825      	bhi.n	8005030 <RCCEx_PLLSAI1_Config+0x90>
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d002      	beq.n	8004fee <RCCEx_PLLSAI1_Config+0x4e>
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d009      	beq.n	8005000 <RCCEx_PLLSAI1_Config+0x60>
 8004fec:	e020      	b.n	8005030 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004fee:	4b62      	ldr	r3, [pc, #392]	@ (8005178 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d11d      	bne.n	8005036 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ffe:	e01a      	b.n	8005036 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005000:	4b5d      	ldr	r3, [pc, #372]	@ (8005178 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005008:	2b00      	cmp	r3, #0
 800500a:	d116      	bne.n	800503a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005010:	e013      	b.n	800503a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005012:	4b59      	ldr	r3, [pc, #356]	@ (8005178 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10f      	bne.n	800503e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800501e:	4b56      	ldr	r3, [pc, #344]	@ (8005178 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d109      	bne.n	800503e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800502e:	e006      	b.n	800503e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	73fb      	strb	r3, [r7, #15]
      break;
 8005034:	e004      	b.n	8005040 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005036:	bf00      	nop
 8005038:	e002      	b.n	8005040 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800503a:	bf00      	nop
 800503c:	e000      	b.n	8005040 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800503e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005040:	7bfb      	ldrb	r3, [r7, #15]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d108      	bne.n	8005058 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005046:	4b4c      	ldr	r3, [pc, #304]	@ (8005178 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	f023 0203 	bic.w	r2, r3, #3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4949      	ldr	r1, [pc, #292]	@ (8005178 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005054:	4313      	orrs	r3, r2
 8005056:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005058:	7bfb      	ldrb	r3, [r7, #15]
 800505a:	2b00      	cmp	r3, #0
 800505c:	f040 8086 	bne.w	800516c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005060:	4b45      	ldr	r3, [pc, #276]	@ (8005178 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a44      	ldr	r2, [pc, #272]	@ (8005178 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005066:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800506a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800506c:	f7fd fbc8 	bl	8002800 <HAL_GetTick>
 8005070:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005072:	e009      	b.n	8005088 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005074:	f7fd fbc4 	bl	8002800 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b02      	cmp	r3, #2
 8005080:	d902      	bls.n	8005088 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	73fb      	strb	r3, [r7, #15]
        break;
 8005086:	e005      	b.n	8005094 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005088:	4b3b      	ldr	r3, [pc, #236]	@ (8005178 <RCCEx_PLLSAI1_Config+0x1d8>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1ef      	bne.n	8005074 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005094:	7bfb      	ldrb	r3, [r7, #15]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d168      	bne.n	800516c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d113      	bne.n	80050c8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050a0:	4b35      	ldr	r3, [pc, #212]	@ (8005178 <RCCEx_PLLSAI1_Config+0x1d8>)
 80050a2:	691a      	ldr	r2, [r3, #16]
 80050a4:	4b35      	ldr	r3, [pc, #212]	@ (800517c <RCCEx_PLLSAI1_Config+0x1dc>)
 80050a6:	4013      	ands	r3, r2
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	6892      	ldr	r2, [r2, #8]
 80050ac:	0211      	lsls	r1, r2, #8
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	68d2      	ldr	r2, [r2, #12]
 80050b2:	06d2      	lsls	r2, r2, #27
 80050b4:	4311      	orrs	r1, r2
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	6852      	ldr	r2, [r2, #4]
 80050ba:	3a01      	subs	r2, #1
 80050bc:	0112      	lsls	r2, r2, #4
 80050be:	430a      	orrs	r2, r1
 80050c0:	492d      	ldr	r1, [pc, #180]	@ (8005178 <RCCEx_PLLSAI1_Config+0x1d8>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	610b      	str	r3, [r1, #16]
 80050c6:	e02d      	b.n	8005124 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d115      	bne.n	80050fa <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050ce:	4b2a      	ldr	r3, [pc, #168]	@ (8005178 <RCCEx_PLLSAI1_Config+0x1d8>)
 80050d0:	691a      	ldr	r2, [r3, #16]
 80050d2:	4b2b      	ldr	r3, [pc, #172]	@ (8005180 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050d4:	4013      	ands	r3, r2
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	6892      	ldr	r2, [r2, #8]
 80050da:	0211      	lsls	r1, r2, #8
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	6912      	ldr	r2, [r2, #16]
 80050e0:	0852      	lsrs	r2, r2, #1
 80050e2:	3a01      	subs	r2, #1
 80050e4:	0552      	lsls	r2, r2, #21
 80050e6:	4311      	orrs	r1, r2
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	6852      	ldr	r2, [r2, #4]
 80050ec:	3a01      	subs	r2, #1
 80050ee:	0112      	lsls	r2, r2, #4
 80050f0:	430a      	orrs	r2, r1
 80050f2:	4921      	ldr	r1, [pc, #132]	@ (8005178 <RCCEx_PLLSAI1_Config+0x1d8>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	610b      	str	r3, [r1, #16]
 80050f8:	e014      	b.n	8005124 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050fa:	4b1f      	ldr	r3, [pc, #124]	@ (8005178 <RCCEx_PLLSAI1_Config+0x1d8>)
 80050fc:	691a      	ldr	r2, [r3, #16]
 80050fe:	4b21      	ldr	r3, [pc, #132]	@ (8005184 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005100:	4013      	ands	r3, r2
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	6892      	ldr	r2, [r2, #8]
 8005106:	0211      	lsls	r1, r2, #8
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	6952      	ldr	r2, [r2, #20]
 800510c:	0852      	lsrs	r2, r2, #1
 800510e:	3a01      	subs	r2, #1
 8005110:	0652      	lsls	r2, r2, #25
 8005112:	4311      	orrs	r1, r2
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	6852      	ldr	r2, [r2, #4]
 8005118:	3a01      	subs	r2, #1
 800511a:	0112      	lsls	r2, r2, #4
 800511c:	430a      	orrs	r2, r1
 800511e:	4916      	ldr	r1, [pc, #88]	@ (8005178 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005120:	4313      	orrs	r3, r2
 8005122:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005124:	4b14      	ldr	r3, [pc, #80]	@ (8005178 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a13      	ldr	r2, [pc, #76]	@ (8005178 <RCCEx_PLLSAI1_Config+0x1d8>)
 800512a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800512e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005130:	f7fd fb66 	bl	8002800 <HAL_GetTick>
 8005134:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005136:	e009      	b.n	800514c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005138:	f7fd fb62 	bl	8002800 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b02      	cmp	r3, #2
 8005144:	d902      	bls.n	800514c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	73fb      	strb	r3, [r7, #15]
          break;
 800514a:	e005      	b.n	8005158 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800514c:	4b0a      	ldr	r3, [pc, #40]	@ (8005178 <RCCEx_PLLSAI1_Config+0x1d8>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d0ef      	beq.n	8005138 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005158:	7bfb      	ldrb	r3, [r7, #15]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d106      	bne.n	800516c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800515e:	4b06      	ldr	r3, [pc, #24]	@ (8005178 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005160:	691a      	ldr	r2, [r3, #16]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	4904      	ldr	r1, [pc, #16]	@ (8005178 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005168:	4313      	orrs	r3, r2
 800516a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800516c:	7bfb      	ldrb	r3, [r7, #15]
}
 800516e:	4618      	mov	r0, r3
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	40021000 	.word	0x40021000
 800517c:	07ff800f 	.word	0x07ff800f
 8005180:	ff9f800f 	.word	0xff9f800f
 8005184:	f9ff800f 	.word	0xf9ff800f

08005188 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005192:	2300      	movs	r3, #0
 8005194:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005196:	4b72      	ldr	r3, [pc, #456]	@ (8005360 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	f003 0303 	and.w	r3, r3, #3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00e      	beq.n	80051c0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80051a2:	4b6f      	ldr	r3, [pc, #444]	@ (8005360 <RCCEx_PLLSAI2_Config+0x1d8>)
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	f003 0203 	and.w	r2, r3, #3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d103      	bne.n	80051ba <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
       ||
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d142      	bne.n	8005240 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	73fb      	strb	r3, [r7, #15]
 80051be:	e03f      	b.n	8005240 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2b03      	cmp	r3, #3
 80051c6:	d018      	beq.n	80051fa <RCCEx_PLLSAI2_Config+0x72>
 80051c8:	2b03      	cmp	r3, #3
 80051ca:	d825      	bhi.n	8005218 <RCCEx_PLLSAI2_Config+0x90>
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d002      	beq.n	80051d6 <RCCEx_PLLSAI2_Config+0x4e>
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d009      	beq.n	80051e8 <RCCEx_PLLSAI2_Config+0x60>
 80051d4:	e020      	b.n	8005218 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80051d6:	4b62      	ldr	r3, [pc, #392]	@ (8005360 <RCCEx_PLLSAI2_Config+0x1d8>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d11d      	bne.n	800521e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051e6:	e01a      	b.n	800521e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80051e8:	4b5d      	ldr	r3, [pc, #372]	@ (8005360 <RCCEx_PLLSAI2_Config+0x1d8>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d116      	bne.n	8005222 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051f8:	e013      	b.n	8005222 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80051fa:	4b59      	ldr	r3, [pc, #356]	@ (8005360 <RCCEx_PLLSAI2_Config+0x1d8>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10f      	bne.n	8005226 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005206:	4b56      	ldr	r3, [pc, #344]	@ (8005360 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d109      	bne.n	8005226 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005216:	e006      	b.n	8005226 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	73fb      	strb	r3, [r7, #15]
      break;
 800521c:	e004      	b.n	8005228 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800521e:	bf00      	nop
 8005220:	e002      	b.n	8005228 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005222:	bf00      	nop
 8005224:	e000      	b.n	8005228 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005226:	bf00      	nop
    }

    if(status == HAL_OK)
 8005228:	7bfb      	ldrb	r3, [r7, #15]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d108      	bne.n	8005240 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800522e:	4b4c      	ldr	r3, [pc, #304]	@ (8005360 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	f023 0203 	bic.w	r2, r3, #3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4949      	ldr	r1, [pc, #292]	@ (8005360 <RCCEx_PLLSAI2_Config+0x1d8>)
 800523c:	4313      	orrs	r3, r2
 800523e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005240:	7bfb      	ldrb	r3, [r7, #15]
 8005242:	2b00      	cmp	r3, #0
 8005244:	f040 8086 	bne.w	8005354 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005248:	4b45      	ldr	r3, [pc, #276]	@ (8005360 <RCCEx_PLLSAI2_Config+0x1d8>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a44      	ldr	r2, [pc, #272]	@ (8005360 <RCCEx_PLLSAI2_Config+0x1d8>)
 800524e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005252:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005254:	f7fd fad4 	bl	8002800 <HAL_GetTick>
 8005258:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800525a:	e009      	b.n	8005270 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800525c:	f7fd fad0 	bl	8002800 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	2b02      	cmp	r3, #2
 8005268:	d902      	bls.n	8005270 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	73fb      	strb	r3, [r7, #15]
        break;
 800526e:	e005      	b.n	800527c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005270:	4b3b      	ldr	r3, [pc, #236]	@ (8005360 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1ef      	bne.n	800525c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800527c:	7bfb      	ldrb	r3, [r7, #15]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d168      	bne.n	8005354 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d113      	bne.n	80052b0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005288:	4b35      	ldr	r3, [pc, #212]	@ (8005360 <RCCEx_PLLSAI2_Config+0x1d8>)
 800528a:	695a      	ldr	r2, [r3, #20]
 800528c:	4b35      	ldr	r3, [pc, #212]	@ (8005364 <RCCEx_PLLSAI2_Config+0x1dc>)
 800528e:	4013      	ands	r3, r2
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	6892      	ldr	r2, [r2, #8]
 8005294:	0211      	lsls	r1, r2, #8
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	68d2      	ldr	r2, [r2, #12]
 800529a:	06d2      	lsls	r2, r2, #27
 800529c:	4311      	orrs	r1, r2
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	6852      	ldr	r2, [r2, #4]
 80052a2:	3a01      	subs	r2, #1
 80052a4:	0112      	lsls	r2, r2, #4
 80052a6:	430a      	orrs	r2, r1
 80052a8:	492d      	ldr	r1, [pc, #180]	@ (8005360 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	614b      	str	r3, [r1, #20]
 80052ae:	e02d      	b.n	800530c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d115      	bne.n	80052e2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80052b6:	4b2a      	ldr	r3, [pc, #168]	@ (8005360 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052b8:	695a      	ldr	r2, [r3, #20]
 80052ba:	4b2b      	ldr	r3, [pc, #172]	@ (8005368 <RCCEx_PLLSAI2_Config+0x1e0>)
 80052bc:	4013      	ands	r3, r2
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	6892      	ldr	r2, [r2, #8]
 80052c2:	0211      	lsls	r1, r2, #8
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	6912      	ldr	r2, [r2, #16]
 80052c8:	0852      	lsrs	r2, r2, #1
 80052ca:	3a01      	subs	r2, #1
 80052cc:	0552      	lsls	r2, r2, #21
 80052ce:	4311      	orrs	r1, r2
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	6852      	ldr	r2, [r2, #4]
 80052d4:	3a01      	subs	r2, #1
 80052d6:	0112      	lsls	r2, r2, #4
 80052d8:	430a      	orrs	r2, r1
 80052da:	4921      	ldr	r1, [pc, #132]	@ (8005360 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	614b      	str	r3, [r1, #20]
 80052e0:	e014      	b.n	800530c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80052e2:	4b1f      	ldr	r3, [pc, #124]	@ (8005360 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052e4:	695a      	ldr	r2, [r3, #20]
 80052e6:	4b21      	ldr	r3, [pc, #132]	@ (800536c <RCCEx_PLLSAI2_Config+0x1e4>)
 80052e8:	4013      	ands	r3, r2
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	6892      	ldr	r2, [r2, #8]
 80052ee:	0211      	lsls	r1, r2, #8
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	6952      	ldr	r2, [r2, #20]
 80052f4:	0852      	lsrs	r2, r2, #1
 80052f6:	3a01      	subs	r2, #1
 80052f8:	0652      	lsls	r2, r2, #25
 80052fa:	4311      	orrs	r1, r2
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	6852      	ldr	r2, [r2, #4]
 8005300:	3a01      	subs	r2, #1
 8005302:	0112      	lsls	r2, r2, #4
 8005304:	430a      	orrs	r2, r1
 8005306:	4916      	ldr	r1, [pc, #88]	@ (8005360 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005308:	4313      	orrs	r3, r2
 800530a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800530c:	4b14      	ldr	r3, [pc, #80]	@ (8005360 <RCCEx_PLLSAI2_Config+0x1d8>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a13      	ldr	r2, [pc, #76]	@ (8005360 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005312:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005316:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005318:	f7fd fa72 	bl	8002800 <HAL_GetTick>
 800531c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800531e:	e009      	b.n	8005334 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005320:	f7fd fa6e 	bl	8002800 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	2b02      	cmp	r3, #2
 800532c:	d902      	bls.n	8005334 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	73fb      	strb	r3, [r7, #15]
          break;
 8005332:	e005      	b.n	8005340 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005334:	4b0a      	ldr	r3, [pc, #40]	@ (8005360 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d0ef      	beq.n	8005320 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005340:	7bfb      	ldrb	r3, [r7, #15]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d106      	bne.n	8005354 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005346:	4b06      	ldr	r3, [pc, #24]	@ (8005360 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005348:	695a      	ldr	r2, [r3, #20]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	4904      	ldr	r1, [pc, #16]	@ (8005360 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005350:	4313      	orrs	r3, r2
 8005352:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005354:	7bfb      	ldrb	r3, [r7, #15]
}
 8005356:	4618      	mov	r0, r3
 8005358:	3710      	adds	r7, #16
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	40021000 	.word	0x40021000
 8005364:	07ff800f 	.word	0x07ff800f
 8005368:	ff9f800f 	.word	0xff9f800f
 800536c:	f9ff800f 	.word	0xf9ff800f

08005370 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e095      	b.n	80054ae <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005386:	2b00      	cmp	r3, #0
 8005388:	d108      	bne.n	800539c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005392:	d009      	beq.n	80053a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	61da      	str	r2, [r3, #28]
 800539a:	e005      	b.n	80053a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d106      	bne.n	80053c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7fc fbaa 	bl	8001b1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2202      	movs	r2, #2
 80053cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80053e8:	d902      	bls.n	80053f0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80053ea:	2300      	movs	r3, #0
 80053ec:	60fb      	str	r3, [r7, #12]
 80053ee:	e002      	b.n	80053f6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80053f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80053f4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80053fe:	d007      	beq.n	8005410 <HAL_SPI_Init+0xa0>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005408:	d002      	beq.n	8005410 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005420:	431a      	orrs	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	431a      	orrs	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	695b      	ldr	r3, [r3, #20]
 8005430:	f003 0301 	and.w	r3, r3, #1
 8005434:	431a      	orrs	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800543e:	431a      	orrs	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	69db      	ldr	r3, [r3, #28]
 8005444:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005448:	431a      	orrs	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005452:	ea42 0103 	orr.w	r1, r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800545a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	430a      	orrs	r2, r1
 8005464:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	0c1b      	lsrs	r3, r3, #16
 800546c:	f003 0204 	and.w	r2, r3, #4
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005474:	f003 0310 	and.w	r3, r3, #16
 8005478:	431a      	orrs	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800547e:	f003 0308 	and.w	r3, r3, #8
 8005482:	431a      	orrs	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800548c:	ea42 0103 	orr.w	r1, r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	430a      	orrs	r2, r1
 800549c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b088      	sub	sp, #32
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	60f8      	str	r0, [r7, #12]
 80054be:	60b9      	str	r1, [r7, #8]
 80054c0:	603b      	str	r3, [r7, #0]
 80054c2:	4613      	mov	r3, r2
 80054c4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054c6:	f7fd f99b 	bl	8002800 <HAL_GetTick>
 80054ca:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80054cc:	88fb      	ldrh	r3, [r7, #6]
 80054ce:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d001      	beq.n	80054e0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80054dc:	2302      	movs	r3, #2
 80054de:	e15c      	b.n	800579a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d002      	beq.n	80054ec <HAL_SPI_Transmit+0x36>
 80054e6:	88fb      	ldrh	r3, [r7, #6]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d101      	bne.n	80054f0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e154      	b.n	800579a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d101      	bne.n	80054fe <HAL_SPI_Transmit+0x48>
 80054fa:	2302      	movs	r3, #2
 80054fc:	e14d      	b.n	800579a <HAL_SPI_Transmit+0x2e4>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2201      	movs	r2, #1
 8005502:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2203      	movs	r2, #3
 800550a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	68ba      	ldr	r2, [r7, #8]
 8005518:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	88fa      	ldrh	r2, [r7, #6]
 800551e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	88fa      	ldrh	r2, [r7, #6]
 8005524:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005550:	d10f      	bne.n	8005572 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005560:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005570:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800557c:	2b40      	cmp	r3, #64	@ 0x40
 800557e:	d007      	beq.n	8005590 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800558e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005598:	d952      	bls.n	8005640 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d002      	beq.n	80055a8 <HAL_SPI_Transmit+0xf2>
 80055a2:	8b7b      	ldrh	r3, [r7, #26]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d145      	bne.n	8005634 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ac:	881a      	ldrh	r2, [r3, #0]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055b8:	1c9a      	adds	r2, r3, #2
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	3b01      	subs	r3, #1
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80055cc:	e032      	b.n	8005634 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f003 0302 	and.w	r3, r3, #2
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d112      	bne.n	8005602 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055e0:	881a      	ldrh	r2, [r3, #0]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ec:	1c9a      	adds	r2, r3, #2
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	3b01      	subs	r3, #1
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005600:	e018      	b.n	8005634 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005602:	f7fd f8fd 	bl	8002800 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	683a      	ldr	r2, [r7, #0]
 800560e:	429a      	cmp	r2, r3
 8005610:	d803      	bhi.n	800561a <HAL_SPI_Transmit+0x164>
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005618:	d102      	bne.n	8005620 <HAL_SPI_Transmit+0x16a>
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d109      	bne.n	8005634 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e0b2      	b.n	800579a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005638:	b29b      	uxth	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1c7      	bne.n	80055ce <HAL_SPI_Transmit+0x118>
 800563e:	e083      	b.n	8005748 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d002      	beq.n	800564e <HAL_SPI_Transmit+0x198>
 8005648:	8b7b      	ldrh	r3, [r7, #26]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d177      	bne.n	800573e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005652:	b29b      	uxth	r3, r3
 8005654:	2b01      	cmp	r3, #1
 8005656:	d912      	bls.n	800567e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800565c:	881a      	ldrh	r2, [r3, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005668:	1c9a      	adds	r2, r3, #2
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005672:	b29b      	uxth	r3, r3
 8005674:	3b02      	subs	r3, #2
 8005676:	b29a      	uxth	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800567c:	e05f      	b.n	800573e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	330c      	adds	r3, #12
 8005688:	7812      	ldrb	r2, [r2, #0]
 800568a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005690:	1c5a      	adds	r2, r3, #1
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800569a:	b29b      	uxth	r3, r3
 800569c:	3b01      	subs	r3, #1
 800569e:	b29a      	uxth	r2, r3
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80056a4:	e04b      	b.n	800573e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f003 0302 	and.w	r3, r3, #2
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d12b      	bne.n	800570c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d912      	bls.n	80056e4 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056c2:	881a      	ldrh	r2, [r3, #0]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ce:	1c9a      	adds	r2, r3, #2
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056d8:	b29b      	uxth	r3, r3
 80056da:	3b02      	subs	r3, #2
 80056dc:	b29a      	uxth	r2, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80056e2:	e02c      	b.n	800573e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	330c      	adds	r3, #12
 80056ee:	7812      	ldrb	r2, [r2, #0]
 80056f0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056f6:	1c5a      	adds	r2, r3, #1
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005700:	b29b      	uxth	r3, r3
 8005702:	3b01      	subs	r3, #1
 8005704:	b29a      	uxth	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800570a:	e018      	b.n	800573e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800570c:	f7fd f878 	bl	8002800 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	683a      	ldr	r2, [r7, #0]
 8005718:	429a      	cmp	r2, r3
 800571a:	d803      	bhi.n	8005724 <HAL_SPI_Transmit+0x26e>
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005722:	d102      	bne.n	800572a <HAL_SPI_Transmit+0x274>
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d109      	bne.n	800573e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e02d      	b.n	800579a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005742:	b29b      	uxth	r3, r3
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1ae      	bne.n	80056a6 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005748:	69fa      	ldr	r2, [r7, #28]
 800574a:	6839      	ldr	r1, [r7, #0]
 800574c:	68f8      	ldr	r0, [r7, #12]
 800574e:	f000 fcf5 	bl	800613c <SPI_EndRxTxTransaction>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d002      	beq.n	800575e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2220      	movs	r2, #32
 800575c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d10a      	bne.n	800577c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005766:	2300      	movs	r3, #0
 8005768:	617b      	str	r3, [r7, #20]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	617b      	str	r3, [r7, #20]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	617b      	str	r3, [r7, #20]
 800577a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005790:	2b00      	cmp	r3, #0
 8005792:	d001      	beq.n	8005798 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e000      	b.n	800579a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005798:	2300      	movs	r3, #0
  }
}
 800579a:	4618      	mov	r0, r3
 800579c:	3720      	adds	r7, #32
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b088      	sub	sp, #32
 80057a6:	af02      	add	r7, sp, #8
 80057a8:	60f8      	str	r0, [r7, #12]
 80057aa:	60b9      	str	r1, [r7, #8]
 80057ac:	603b      	str	r3, [r7, #0]
 80057ae:	4613      	mov	r3, r2
 80057b0:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d001      	beq.n	80057c2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80057be:	2302      	movs	r3, #2
 80057c0:	e123      	b.n	8005a0a <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057ca:	d112      	bne.n	80057f2 <HAL_SPI_Receive+0x50>
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d10e      	bne.n	80057f2 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2204      	movs	r2, #4
 80057d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80057dc:	88fa      	ldrh	r2, [r7, #6]
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	4613      	mov	r3, r2
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	68b9      	ldr	r1, [r7, #8]
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f000 f912 	bl	8005a12 <HAL_SPI_TransmitReceive>
 80057ee:	4603      	mov	r3, r0
 80057f0:	e10b      	b.n	8005a0a <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057f2:	f7fd f805 	bl	8002800 <HAL_GetTick>
 80057f6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d002      	beq.n	8005804 <HAL_SPI_Receive+0x62>
 80057fe:	88fb      	ldrh	r3, [r7, #6]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d101      	bne.n	8005808 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e100      	b.n	8005a0a <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800580e:	2b01      	cmp	r3, #1
 8005810:	d101      	bne.n	8005816 <HAL_SPI_Receive+0x74>
 8005812:	2302      	movs	r3, #2
 8005814:	e0f9      	b.n	8005a0a <HAL_SPI_Receive+0x268>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2204      	movs	r2, #4
 8005822:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	68ba      	ldr	r2, [r7, #8]
 8005830:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	88fa      	ldrh	r2, [r7, #6]
 8005836:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	88fa      	ldrh	r2, [r7, #6]
 800583e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005868:	d908      	bls.n	800587c <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005878:	605a      	str	r2, [r3, #4]
 800587a:	e007      	b.n	800588c <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685a      	ldr	r2, [r3, #4]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800588a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005894:	d10f      	bne.n	80058b6 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80058b4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058c0:	2b40      	cmp	r3, #64	@ 0x40
 80058c2:	d007      	beq.n	80058d4 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058d2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80058dc:	d875      	bhi.n	80059ca <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80058de:	e037      	b.n	8005950 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d117      	bne.n	800591e <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f103 020c 	add.w	r2, r3, #12
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058fa:	7812      	ldrb	r2, [r2, #0]
 80058fc:	b2d2      	uxtb	r2, r2
 80058fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005904:	1c5a      	adds	r2, r3, #1
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005910:	b29b      	uxth	r3, r3
 8005912:	3b01      	subs	r3, #1
 8005914:	b29a      	uxth	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800591c:	e018      	b.n	8005950 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800591e:	f7fc ff6f 	bl	8002800 <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	429a      	cmp	r2, r3
 800592c:	d803      	bhi.n	8005936 <HAL_SPI_Receive+0x194>
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005934:	d102      	bne.n	800593c <HAL_SPI_Receive+0x19a>
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d109      	bne.n	8005950 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	e05c      	b.n	8005a0a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005956:	b29b      	uxth	r3, r3
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1c1      	bne.n	80058e0 <HAL_SPI_Receive+0x13e>
 800595c:	e03b      	b.n	80059d6 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	f003 0301 	and.w	r3, r3, #1
 8005968:	2b01      	cmp	r3, #1
 800596a:	d115      	bne.n	8005998 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68da      	ldr	r2, [r3, #12]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005976:	b292      	uxth	r2, r2
 8005978:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800597e:	1c9a      	adds	r2, r3, #2
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800598a:	b29b      	uxth	r3, r3
 800598c:	3b01      	subs	r3, #1
 800598e:	b29a      	uxth	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005996:	e018      	b.n	80059ca <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005998:	f7fc ff32 	bl	8002800 <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	683a      	ldr	r2, [r7, #0]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d803      	bhi.n	80059b0 <HAL_SPI_Receive+0x20e>
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ae:	d102      	bne.n	80059b6 <HAL_SPI_Receive+0x214>
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d109      	bne.n	80059ca <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e01f      	b.n	8005a0a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1c3      	bne.n	800595e <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	6839      	ldr	r1, [r7, #0]
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f000 fb56 	bl	800608c <SPI_EndRxTransaction>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d002      	beq.n	80059ec <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2220      	movs	r2, #32
 80059ea:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d001      	beq.n	8005a08 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e000      	b.n	8005a0a <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8005a08:	2300      	movs	r3, #0
  }
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3718      	adds	r7, #24
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b08a      	sub	sp, #40	@ 0x28
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	60f8      	str	r0, [r7, #12]
 8005a1a:	60b9      	str	r1, [r7, #8]
 8005a1c:	607a      	str	r2, [r7, #4]
 8005a1e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005a20:	2301      	movs	r3, #1
 8005a22:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a24:	f7fc feec 	bl	8002800 <HAL_GetTick>
 8005a28:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005a30:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005a38:	887b      	ldrh	r3, [r7, #2]
 8005a3a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8005a3c:	887b      	ldrh	r3, [r7, #2]
 8005a3e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a40:	7ffb      	ldrb	r3, [r7, #31]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d00c      	beq.n	8005a60 <HAL_SPI_TransmitReceive+0x4e>
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a4c:	d106      	bne.n	8005a5c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d102      	bne.n	8005a5c <HAL_SPI_TransmitReceive+0x4a>
 8005a56:	7ffb      	ldrb	r3, [r7, #31]
 8005a58:	2b04      	cmp	r3, #4
 8005a5a:	d001      	beq.n	8005a60 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	e1f3      	b.n	8005e48 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d005      	beq.n	8005a72 <HAL_SPI_TransmitReceive+0x60>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d002      	beq.n	8005a72 <HAL_SPI_TransmitReceive+0x60>
 8005a6c:	887b      	ldrh	r3, [r7, #2]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d101      	bne.n	8005a76 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e1e8      	b.n	8005e48 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d101      	bne.n	8005a84 <HAL_SPI_TransmitReceive+0x72>
 8005a80:	2302      	movs	r3, #2
 8005a82:	e1e1      	b.n	8005e48 <HAL_SPI_TransmitReceive+0x436>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	2b04      	cmp	r3, #4
 8005a96:	d003      	beq.n	8005aa0 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2205      	movs	r2, #5
 8005a9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	887a      	ldrh	r2, [r7, #2]
 8005ab0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	887a      	ldrh	r2, [r7, #2]
 8005ab8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	887a      	ldrh	r2, [r7, #2]
 8005ac6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	887a      	ldrh	r2, [r7, #2]
 8005acc:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005ae2:	d802      	bhi.n	8005aea <HAL_SPI_TransmitReceive+0xd8>
 8005ae4:	8abb      	ldrh	r3, [r7, #20]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d908      	bls.n	8005afc <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	685a      	ldr	r2, [r3, #4]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005af8:	605a      	str	r2, [r3, #4]
 8005afa:	e007      	b.n	8005b0c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	685a      	ldr	r2, [r3, #4]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005b0a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b16:	2b40      	cmp	r3, #64	@ 0x40
 8005b18:	d007      	beq.n	8005b2a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b28:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005b32:	f240 8083 	bls.w	8005c3c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d002      	beq.n	8005b44 <HAL_SPI_TransmitReceive+0x132>
 8005b3e:	8afb      	ldrh	r3, [r7, #22]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d16f      	bne.n	8005c24 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b48:	881a      	ldrh	r2, [r3, #0]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b54:	1c9a      	adds	r2, r3, #2
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	3b01      	subs	r3, #1
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b68:	e05c      	b.n	8005c24 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f003 0302 	and.w	r3, r3, #2
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d11b      	bne.n	8005bb0 <HAL_SPI_TransmitReceive+0x19e>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d016      	beq.n	8005bb0 <HAL_SPI_TransmitReceive+0x19e>
 8005b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d113      	bne.n	8005bb0 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b8c:	881a      	ldrh	r2, [r3, #0]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b98:	1c9a      	adds	r2, r3, #2
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005bac:	2300      	movs	r3, #0
 8005bae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d11c      	bne.n	8005bf8 <HAL_SPI_TransmitReceive+0x1e6>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d016      	beq.n	8005bf8 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68da      	ldr	r2, [r3, #12]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bd4:	b292      	uxth	r2, r2
 8005bd6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bdc:	1c9a      	adds	r2, r3, #2
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	3b01      	subs	r3, #1
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005bf8:	f7fc fe02 	bl	8002800 <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	6a3b      	ldr	r3, [r7, #32]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d80d      	bhi.n	8005c24 <HAL_SPI_TransmitReceive+0x212>
 8005c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0e:	d009      	beq.n	8005c24 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e111      	b.n	8005e48 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d19d      	bne.n	8005b6a <HAL_SPI_TransmitReceive+0x158>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d197      	bne.n	8005b6a <HAL_SPI_TransmitReceive+0x158>
 8005c3a:	e0e5      	b.n	8005e08 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d003      	beq.n	8005c4c <HAL_SPI_TransmitReceive+0x23a>
 8005c44:	8afb      	ldrh	r3, [r7, #22]
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	f040 80d1 	bne.w	8005dee <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d912      	bls.n	8005c7c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c5a:	881a      	ldrh	r2, [r3, #0]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c66:	1c9a      	adds	r2, r3, #2
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	3b02      	subs	r3, #2
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005c7a:	e0b8      	b.n	8005dee <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	330c      	adds	r3, #12
 8005c86:	7812      	ldrb	r2, [r2, #0]
 8005c88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c8e:	1c5a      	adds	r2, r3, #1
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ca2:	e0a4      	b.n	8005dee <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f003 0302 	and.w	r3, r3, #2
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d134      	bne.n	8005d1c <HAL_SPI_TransmitReceive+0x30a>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d02f      	beq.n	8005d1c <HAL_SPI_TransmitReceive+0x30a>
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d12c      	bne.n	8005d1c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d912      	bls.n	8005cf2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cd0:	881a      	ldrh	r2, [r3, #0]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cdc:	1c9a      	adds	r2, r3, #2
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	3b02      	subs	r3, #2
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005cf0:	e012      	b.n	8005d18 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	330c      	adds	r3, #12
 8005cfc:	7812      	ldrb	r2, [r2, #0]
 8005cfe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d04:	1c5a      	adds	r2, r3, #1
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	3b01      	subs	r3, #1
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d148      	bne.n	8005dbc <HAL_SPI_TransmitReceive+0x3aa>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d042      	beq.n	8005dbc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d923      	bls.n	8005d8a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68da      	ldr	r2, [r3, #12]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d4c:	b292      	uxth	r2, r2
 8005d4e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d54:	1c9a      	adds	r2, r3, #2
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	3b02      	subs	r3, #2
 8005d64:	b29a      	uxth	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d81f      	bhi.n	8005db8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	685a      	ldr	r2, [r3, #4]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005d86:	605a      	str	r2, [r3, #4]
 8005d88:	e016      	b.n	8005db8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f103 020c 	add.w	r2, r3, #12
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d96:	7812      	ldrb	r2, [r2, #0]
 8005d98:	b2d2      	uxtb	r2, r2
 8005d9a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	3b01      	subs	r3, #1
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005db8:	2301      	movs	r3, #1
 8005dba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005dbc:	f7fc fd20 	bl	8002800 <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	6a3b      	ldr	r3, [r7, #32]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d803      	bhi.n	8005dd4 <HAL_SPI_TransmitReceive+0x3c2>
 8005dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd2:	d102      	bne.n	8005dda <HAL_SPI_TransmitReceive+0x3c8>
 8005dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d109      	bne.n	8005dee <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e02c      	b.n	8005e48 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f47f af55 	bne.w	8005ca4 <HAL_SPI_TransmitReceive+0x292>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f47f af4e 	bne.w	8005ca4 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e08:	6a3a      	ldr	r2, [r7, #32]
 8005e0a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f000 f995 	bl	800613c <SPI_EndRxTxTransaction>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d008      	beq.n	8005e2a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2220      	movs	r2, #32
 8005e1c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e00e      	b.n	8005e48 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d001      	beq.n	8005e46 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e000      	b.n	8005e48 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8005e46:	2300      	movs	r3, #0
  }
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3728      	adds	r7, #40	@ 0x28
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b088      	sub	sp, #32
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	603b      	str	r3, [r7, #0]
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e60:	f7fc fcce 	bl	8002800 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e68:	1a9b      	subs	r3, r3, r2
 8005e6a:	683a      	ldr	r2, [r7, #0]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e70:	f7fc fcc6 	bl	8002800 <HAL_GetTick>
 8005e74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e76:	4b39      	ldr	r3, [pc, #228]	@ (8005f5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	015b      	lsls	r3, r3, #5
 8005e7c:	0d1b      	lsrs	r3, r3, #20
 8005e7e:	69fa      	ldr	r2, [r7, #28]
 8005e80:	fb02 f303 	mul.w	r3, r2, r3
 8005e84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e86:	e054      	b.n	8005f32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e8e:	d050      	beq.n	8005f32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e90:	f7fc fcb6 	bl	8002800 <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	69fa      	ldr	r2, [r7, #28]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d902      	bls.n	8005ea6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d13d      	bne.n	8005f22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005eb4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ebe:	d111      	bne.n	8005ee4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ec8:	d004      	beq.n	8005ed4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ed2:	d107      	bne.n	8005ee4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ee2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ee8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005eec:	d10f      	bne.n	8005f0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005efc:	601a      	str	r2, [r3, #0]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e017      	b.n	8005f52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d101      	bne.n	8005f2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	689a      	ldr	r2, [r3, #8]
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	bf0c      	ite	eq
 8005f42:	2301      	moveq	r3, #1
 8005f44:	2300      	movne	r3, #0
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	461a      	mov	r2, r3
 8005f4a:	79fb      	ldrb	r3, [r7, #7]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d19b      	bne.n	8005e88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3720      	adds	r7, #32
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	20000010 	.word	0x20000010

08005f60 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b08a      	sub	sp, #40	@ 0x28
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	607a      	str	r2, [r7, #4]
 8005f6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005f72:	f7fc fc45 	bl	8002800 <HAL_GetTick>
 8005f76:	4602      	mov	r2, r0
 8005f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f7a:	1a9b      	subs	r3, r3, r2
 8005f7c:	683a      	ldr	r2, [r7, #0]
 8005f7e:	4413      	add	r3, r2
 8005f80:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005f82:	f7fc fc3d 	bl	8002800 <HAL_GetTick>
 8005f86:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	330c      	adds	r3, #12
 8005f8e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005f90:	4b3d      	ldr	r3, [pc, #244]	@ (8006088 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	4613      	mov	r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4413      	add	r3, r2
 8005f9a:	00da      	lsls	r2, r3, #3
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	0d1b      	lsrs	r3, r3, #20
 8005fa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fa2:	fb02 f303 	mul.w	r3, r2, r3
 8005fa6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005fa8:	e060      	b.n	800606c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005fb0:	d107      	bne.n	8005fc2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d104      	bne.n	8005fc2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005fc0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc8:	d050      	beq.n	800606c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005fca:	f7fc fc19 	bl	8002800 <HAL_GetTick>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	6a3b      	ldr	r3, [r7, #32]
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d902      	bls.n	8005fe0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d13d      	bne.n	800605c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	685a      	ldr	r2, [r3, #4]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005fee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ff8:	d111      	bne.n	800601e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006002:	d004      	beq.n	800600e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800600c:	d107      	bne.n	800601e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800601c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006022:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006026:	d10f      	bne.n	8006048 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006036:	601a      	str	r2, [r3, #0]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006046:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2200      	movs	r2, #0
 8006054:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e010      	b.n	800607e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d101      	bne.n	8006066 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006062:	2300      	movs	r3, #0
 8006064:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	3b01      	subs	r3, #1
 800606a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	689a      	ldr	r2, [r3, #8]
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	4013      	ands	r3, r2
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	429a      	cmp	r2, r3
 800607a:	d196      	bne.n	8005faa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3728      	adds	r7, #40	@ 0x28
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	20000010 	.word	0x20000010

0800608c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af02      	add	r7, sp, #8
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060a0:	d111      	bne.n	80060c6 <SPI_EndRxTransaction+0x3a>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060aa:	d004      	beq.n	80060b6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060b4:	d107      	bne.n	80060c6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060c4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	9300      	str	r3, [sp, #0]
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	2200      	movs	r2, #0
 80060ce:	2180      	movs	r1, #128	@ 0x80
 80060d0:	68f8      	ldr	r0, [r7, #12]
 80060d2:	f7ff febd 	bl	8005e50 <SPI_WaitFlagStateUntilTimeout>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d007      	beq.n	80060ec <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060e0:	f043 0220 	orr.w	r2, r3, #32
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e023      	b.n	8006134 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060f4:	d11d      	bne.n	8006132 <SPI_EndRxTransaction+0xa6>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060fe:	d004      	beq.n	800610a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006108:	d113      	bne.n	8006132 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	9300      	str	r3, [sp, #0]
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	2200      	movs	r2, #0
 8006112:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	f7ff ff22 	bl	8005f60 <SPI_WaitFifoStateUntilTimeout>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d007      	beq.n	8006132 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006126:	f043 0220 	orr.w	r2, r3, #32
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e000      	b.n	8006134 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3710      	adds	r7, #16
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b086      	sub	sp, #24
 8006140:	af02      	add	r7, sp, #8
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	9300      	str	r3, [sp, #0]
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	2200      	movs	r2, #0
 8006150:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f7ff ff03 	bl	8005f60 <SPI_WaitFifoStateUntilTimeout>
 800615a:	4603      	mov	r3, r0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d007      	beq.n	8006170 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006164:	f043 0220 	orr.w	r2, r3, #32
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	e027      	b.n	80061c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	9300      	str	r3, [sp, #0]
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	2200      	movs	r2, #0
 8006178:	2180      	movs	r1, #128	@ 0x80
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f7ff fe68 	bl	8005e50 <SPI_WaitFlagStateUntilTimeout>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d007      	beq.n	8006196 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800618a:	f043 0220 	orr.w	r2, r3, #32
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	e014      	b.n	80061c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	9300      	str	r3, [sp, #0]
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	2200      	movs	r2, #0
 800619e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f7ff fedc 	bl	8005f60 <SPI_WaitFifoStateUntilTimeout>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d007      	beq.n	80061be <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061b2:	f043 0220 	orr.w	r2, r3, #32
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e000      	b.n	80061c0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3710      	adds	r7, #16
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d101      	bne.n	80061da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e042      	b.n	8006260 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d106      	bne.n	80061f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f7fb fcd9 	bl	8001ba4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2224      	movs	r2, #36	@ 0x24
 80061f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f022 0201 	bic.w	r2, r2, #1
 8006208:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800620e:	2b00      	cmp	r3, #0
 8006210:	d002      	beq.n	8006218 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 fc7c 	bl	8006b10 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 f97d 	bl	8006518 <UART_SetConfig>
 800621e:	4603      	mov	r3, r0
 8006220:	2b01      	cmp	r3, #1
 8006222:	d101      	bne.n	8006228 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e01b      	b.n	8006260 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	685a      	ldr	r2, [r3, #4]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006236:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	689a      	ldr	r2, [r3, #8]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006246:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f042 0201 	orr.w	r2, r2, #1
 8006256:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 fcfb 	bl	8006c54 <UART_CheckIdleState>
 800625e:	4603      	mov	r3, r0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3708      	adds	r7, #8
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b08a      	sub	sp, #40	@ 0x28
 800626c:	af02      	add	r7, sp, #8
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	603b      	str	r3, [r7, #0]
 8006274:	4613      	mov	r3, r2
 8006276:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800627e:	2b20      	cmp	r3, #32
 8006280:	d17b      	bne.n	800637a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d002      	beq.n	800628e <HAL_UART_Transmit+0x26>
 8006288:	88fb      	ldrh	r3, [r7, #6]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d101      	bne.n	8006292 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e074      	b.n	800637c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2200      	movs	r2, #0
 8006296:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2221      	movs	r2, #33	@ 0x21
 800629e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062a2:	f7fc faad 	bl	8002800 <HAL_GetTick>
 80062a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	88fa      	ldrh	r2, [r7, #6]
 80062ac:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	88fa      	ldrh	r2, [r7, #6]
 80062b4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062c0:	d108      	bne.n	80062d4 <HAL_UART_Transmit+0x6c>
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d104      	bne.n	80062d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80062ca:	2300      	movs	r3, #0
 80062cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	61bb      	str	r3, [r7, #24]
 80062d2:	e003      	b.n	80062dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062d8:	2300      	movs	r3, #0
 80062da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80062dc:	e030      	b.n	8006340 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	9300      	str	r3, [sp, #0]
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	2200      	movs	r2, #0
 80062e6:	2180      	movs	r1, #128	@ 0x80
 80062e8:	68f8      	ldr	r0, [r7, #12]
 80062ea:	f000 fd5d 	bl	8006da8 <UART_WaitOnFlagUntilTimeout>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d005      	beq.n	8006300 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2220      	movs	r2, #32
 80062f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	e03d      	b.n	800637c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d10b      	bne.n	800631e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	881a      	ldrh	r2, [r3, #0]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006312:	b292      	uxth	r2, r2
 8006314:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	3302      	adds	r3, #2
 800631a:	61bb      	str	r3, [r7, #24]
 800631c:	e007      	b.n	800632e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	781a      	ldrb	r2, [r3, #0]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	3301      	adds	r3, #1
 800632c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006334:	b29b      	uxth	r3, r3
 8006336:	3b01      	subs	r3, #1
 8006338:	b29a      	uxth	r2, r3
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006346:	b29b      	uxth	r3, r3
 8006348:	2b00      	cmp	r3, #0
 800634a:	d1c8      	bne.n	80062de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	9300      	str	r3, [sp, #0]
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	2200      	movs	r2, #0
 8006354:	2140      	movs	r1, #64	@ 0x40
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f000 fd26 	bl	8006da8 <UART_WaitOnFlagUntilTimeout>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d005      	beq.n	800636e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2220      	movs	r2, #32
 8006366:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e006      	b.n	800637c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2220      	movs	r2, #32
 8006372:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006376:	2300      	movs	r3, #0
 8006378:	e000      	b.n	800637c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800637a:	2302      	movs	r3, #2
  }
}
 800637c:	4618      	mov	r0, r3
 800637e:	3720      	adds	r7, #32
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b08a      	sub	sp, #40	@ 0x28
 8006388:	af02      	add	r7, sp, #8
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	603b      	str	r3, [r7, #0]
 8006390:	4613      	mov	r3, r2
 8006392:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800639a:	2b20      	cmp	r3, #32
 800639c:	f040 80b6 	bne.w	800650c <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d002      	beq.n	80063ac <HAL_UART_Receive+0x28>
 80063a6:	88fb      	ldrh	r3, [r7, #6]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d101      	bne.n	80063b0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e0ae      	b.n	800650e <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2222      	movs	r2, #34	@ 0x22
 80063bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2200      	movs	r2, #0
 80063c4:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063c6:	f7fc fa1b 	bl	8002800 <HAL_GetTick>
 80063ca:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	88fa      	ldrh	r2, [r7, #6]
 80063d0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	88fa      	ldrh	r2, [r7, #6]
 80063d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063e4:	d10e      	bne.n	8006404 <HAL_UART_Receive+0x80>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d105      	bne.n	80063fa <HAL_UART_Receive+0x76>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80063f4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80063f8:	e02d      	b.n	8006456 <HAL_UART_Receive+0xd2>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	22ff      	movs	r2, #255	@ 0xff
 80063fe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006402:	e028      	b.n	8006456 <HAL_UART_Receive+0xd2>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10d      	bne.n	8006428 <HAL_UART_Receive+0xa4>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d104      	bne.n	800641e <HAL_UART_Receive+0x9a>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	22ff      	movs	r2, #255	@ 0xff
 8006418:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800641c:	e01b      	b.n	8006456 <HAL_UART_Receive+0xd2>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	227f      	movs	r2, #127	@ 0x7f
 8006422:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006426:	e016      	b.n	8006456 <HAL_UART_Receive+0xd2>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006430:	d10d      	bne.n	800644e <HAL_UART_Receive+0xca>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d104      	bne.n	8006444 <HAL_UART_Receive+0xc0>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	227f      	movs	r2, #127	@ 0x7f
 800643e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006442:	e008      	b.n	8006456 <HAL_UART_Receive+0xd2>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	223f      	movs	r2, #63	@ 0x3f
 8006448:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800644c:	e003      	b.n	8006456 <HAL_UART_Receive+0xd2>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800645c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006466:	d108      	bne.n	800647a <HAL_UART_Receive+0xf6>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d104      	bne.n	800647a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006470:	2300      	movs	r3, #0
 8006472:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	61bb      	str	r3, [r7, #24]
 8006478:	e003      	b.n	8006482 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800647e:	2300      	movs	r3, #0
 8006480:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006482:	e037      	b.n	80064f4 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	9300      	str	r3, [sp, #0]
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	2200      	movs	r2, #0
 800648c:	2120      	movs	r1, #32
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f000 fc8a 	bl	8006da8 <UART_WaitOnFlagUntilTimeout>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d005      	beq.n	80064a6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2220      	movs	r2, #32
 800649e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e033      	b.n	800650e <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d10c      	bne.n	80064c6 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	8a7b      	ldrh	r3, [r7, #18]
 80064b6:	4013      	ands	r3, r2
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	3302      	adds	r3, #2
 80064c2:	61bb      	str	r3, [r7, #24]
 80064c4:	e00d      	b.n	80064e2 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	b2da      	uxtb	r2, r3
 80064d0:	8a7b      	ldrh	r3, [r7, #18]
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	4013      	ands	r3, r2
 80064d6:	b2da      	uxtb	r2, r3
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	3301      	adds	r3, #1
 80064e0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	3b01      	subs	r3, #1
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d1c1      	bne.n	8006484 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2220      	movs	r2, #32
 8006504:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8006508:	2300      	movs	r3, #0
 800650a:	e000      	b.n	800650e <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800650c:	2302      	movs	r3, #2
  }
}
 800650e:	4618      	mov	r0, r3
 8006510:	3720      	adds	r7, #32
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
	...

08006518 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006518:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800651c:	b08c      	sub	sp, #48	@ 0x30
 800651e:	af00      	add	r7, sp, #0
 8006520:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006522:	2300      	movs	r3, #0
 8006524:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	689a      	ldr	r2, [r3, #8]
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	431a      	orrs	r2, r3
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	431a      	orrs	r2, r3
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	69db      	ldr	r3, [r3, #28]
 800653c:	4313      	orrs	r3, r2
 800653e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	4baa      	ldr	r3, [pc, #680]	@ (80067f0 <UART_SetConfig+0x2d8>)
 8006548:	4013      	ands	r3, r2
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	6812      	ldr	r2, [r2, #0]
 800654e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006550:	430b      	orrs	r3, r1
 8006552:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	68da      	ldr	r2, [r3, #12]
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	430a      	orrs	r2, r1
 8006568:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	699b      	ldr	r3, [r3, #24]
 800656e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a9f      	ldr	r2, [pc, #636]	@ (80067f4 <UART_SetConfig+0x2dc>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d004      	beq.n	8006584 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	6a1b      	ldr	r3, [r3, #32]
 800657e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006580:	4313      	orrs	r3, r2
 8006582:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800658e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	6812      	ldr	r2, [r2, #0]
 8006596:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006598:	430b      	orrs	r3, r1
 800659a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a2:	f023 010f 	bic.w	r1, r3, #15
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	430a      	orrs	r2, r1
 80065b0:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a90      	ldr	r2, [pc, #576]	@ (80067f8 <UART_SetConfig+0x2e0>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d125      	bne.n	8006608 <UART_SetConfig+0xf0>
 80065bc:	4b8f      	ldr	r3, [pc, #572]	@ (80067fc <UART_SetConfig+0x2e4>)
 80065be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065c2:	f003 0303 	and.w	r3, r3, #3
 80065c6:	2b03      	cmp	r3, #3
 80065c8:	d81a      	bhi.n	8006600 <UART_SetConfig+0xe8>
 80065ca:	a201      	add	r2, pc, #4	@ (adr r2, 80065d0 <UART_SetConfig+0xb8>)
 80065cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d0:	080065e1 	.word	0x080065e1
 80065d4:	080065f1 	.word	0x080065f1
 80065d8:	080065e9 	.word	0x080065e9
 80065dc:	080065f9 	.word	0x080065f9
 80065e0:	2301      	movs	r3, #1
 80065e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065e6:	e116      	b.n	8006816 <UART_SetConfig+0x2fe>
 80065e8:	2302      	movs	r3, #2
 80065ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065ee:	e112      	b.n	8006816 <UART_SetConfig+0x2fe>
 80065f0:	2304      	movs	r3, #4
 80065f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065f6:	e10e      	b.n	8006816 <UART_SetConfig+0x2fe>
 80065f8:	2308      	movs	r3, #8
 80065fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065fe:	e10a      	b.n	8006816 <UART_SetConfig+0x2fe>
 8006600:	2310      	movs	r3, #16
 8006602:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006606:	e106      	b.n	8006816 <UART_SetConfig+0x2fe>
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a7c      	ldr	r2, [pc, #496]	@ (8006800 <UART_SetConfig+0x2e8>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d138      	bne.n	8006684 <UART_SetConfig+0x16c>
 8006612:	4b7a      	ldr	r3, [pc, #488]	@ (80067fc <UART_SetConfig+0x2e4>)
 8006614:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006618:	f003 030c 	and.w	r3, r3, #12
 800661c:	2b0c      	cmp	r3, #12
 800661e:	d82d      	bhi.n	800667c <UART_SetConfig+0x164>
 8006620:	a201      	add	r2, pc, #4	@ (adr r2, 8006628 <UART_SetConfig+0x110>)
 8006622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006626:	bf00      	nop
 8006628:	0800665d 	.word	0x0800665d
 800662c:	0800667d 	.word	0x0800667d
 8006630:	0800667d 	.word	0x0800667d
 8006634:	0800667d 	.word	0x0800667d
 8006638:	0800666d 	.word	0x0800666d
 800663c:	0800667d 	.word	0x0800667d
 8006640:	0800667d 	.word	0x0800667d
 8006644:	0800667d 	.word	0x0800667d
 8006648:	08006665 	.word	0x08006665
 800664c:	0800667d 	.word	0x0800667d
 8006650:	0800667d 	.word	0x0800667d
 8006654:	0800667d 	.word	0x0800667d
 8006658:	08006675 	.word	0x08006675
 800665c:	2300      	movs	r3, #0
 800665e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006662:	e0d8      	b.n	8006816 <UART_SetConfig+0x2fe>
 8006664:	2302      	movs	r3, #2
 8006666:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800666a:	e0d4      	b.n	8006816 <UART_SetConfig+0x2fe>
 800666c:	2304      	movs	r3, #4
 800666e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006672:	e0d0      	b.n	8006816 <UART_SetConfig+0x2fe>
 8006674:	2308      	movs	r3, #8
 8006676:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800667a:	e0cc      	b.n	8006816 <UART_SetConfig+0x2fe>
 800667c:	2310      	movs	r3, #16
 800667e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006682:	e0c8      	b.n	8006816 <UART_SetConfig+0x2fe>
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a5e      	ldr	r2, [pc, #376]	@ (8006804 <UART_SetConfig+0x2ec>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d125      	bne.n	80066da <UART_SetConfig+0x1c2>
 800668e:	4b5b      	ldr	r3, [pc, #364]	@ (80067fc <UART_SetConfig+0x2e4>)
 8006690:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006694:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006698:	2b30      	cmp	r3, #48	@ 0x30
 800669a:	d016      	beq.n	80066ca <UART_SetConfig+0x1b2>
 800669c:	2b30      	cmp	r3, #48	@ 0x30
 800669e:	d818      	bhi.n	80066d2 <UART_SetConfig+0x1ba>
 80066a0:	2b20      	cmp	r3, #32
 80066a2:	d00a      	beq.n	80066ba <UART_SetConfig+0x1a2>
 80066a4:	2b20      	cmp	r3, #32
 80066a6:	d814      	bhi.n	80066d2 <UART_SetConfig+0x1ba>
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d002      	beq.n	80066b2 <UART_SetConfig+0x19a>
 80066ac:	2b10      	cmp	r3, #16
 80066ae:	d008      	beq.n	80066c2 <UART_SetConfig+0x1aa>
 80066b0:	e00f      	b.n	80066d2 <UART_SetConfig+0x1ba>
 80066b2:	2300      	movs	r3, #0
 80066b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066b8:	e0ad      	b.n	8006816 <UART_SetConfig+0x2fe>
 80066ba:	2302      	movs	r3, #2
 80066bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066c0:	e0a9      	b.n	8006816 <UART_SetConfig+0x2fe>
 80066c2:	2304      	movs	r3, #4
 80066c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066c8:	e0a5      	b.n	8006816 <UART_SetConfig+0x2fe>
 80066ca:	2308      	movs	r3, #8
 80066cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066d0:	e0a1      	b.n	8006816 <UART_SetConfig+0x2fe>
 80066d2:	2310      	movs	r3, #16
 80066d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066d8:	e09d      	b.n	8006816 <UART_SetConfig+0x2fe>
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a4a      	ldr	r2, [pc, #296]	@ (8006808 <UART_SetConfig+0x2f0>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d125      	bne.n	8006730 <UART_SetConfig+0x218>
 80066e4:	4b45      	ldr	r3, [pc, #276]	@ (80067fc <UART_SetConfig+0x2e4>)
 80066e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066ea:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80066ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80066f0:	d016      	beq.n	8006720 <UART_SetConfig+0x208>
 80066f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80066f4:	d818      	bhi.n	8006728 <UART_SetConfig+0x210>
 80066f6:	2b80      	cmp	r3, #128	@ 0x80
 80066f8:	d00a      	beq.n	8006710 <UART_SetConfig+0x1f8>
 80066fa:	2b80      	cmp	r3, #128	@ 0x80
 80066fc:	d814      	bhi.n	8006728 <UART_SetConfig+0x210>
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d002      	beq.n	8006708 <UART_SetConfig+0x1f0>
 8006702:	2b40      	cmp	r3, #64	@ 0x40
 8006704:	d008      	beq.n	8006718 <UART_SetConfig+0x200>
 8006706:	e00f      	b.n	8006728 <UART_SetConfig+0x210>
 8006708:	2300      	movs	r3, #0
 800670a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800670e:	e082      	b.n	8006816 <UART_SetConfig+0x2fe>
 8006710:	2302      	movs	r3, #2
 8006712:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006716:	e07e      	b.n	8006816 <UART_SetConfig+0x2fe>
 8006718:	2304      	movs	r3, #4
 800671a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800671e:	e07a      	b.n	8006816 <UART_SetConfig+0x2fe>
 8006720:	2308      	movs	r3, #8
 8006722:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006726:	e076      	b.n	8006816 <UART_SetConfig+0x2fe>
 8006728:	2310      	movs	r3, #16
 800672a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800672e:	e072      	b.n	8006816 <UART_SetConfig+0x2fe>
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a35      	ldr	r2, [pc, #212]	@ (800680c <UART_SetConfig+0x2f4>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d12a      	bne.n	8006790 <UART_SetConfig+0x278>
 800673a:	4b30      	ldr	r3, [pc, #192]	@ (80067fc <UART_SetConfig+0x2e4>)
 800673c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006740:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006744:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006748:	d01a      	beq.n	8006780 <UART_SetConfig+0x268>
 800674a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800674e:	d81b      	bhi.n	8006788 <UART_SetConfig+0x270>
 8006750:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006754:	d00c      	beq.n	8006770 <UART_SetConfig+0x258>
 8006756:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800675a:	d815      	bhi.n	8006788 <UART_SetConfig+0x270>
 800675c:	2b00      	cmp	r3, #0
 800675e:	d003      	beq.n	8006768 <UART_SetConfig+0x250>
 8006760:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006764:	d008      	beq.n	8006778 <UART_SetConfig+0x260>
 8006766:	e00f      	b.n	8006788 <UART_SetConfig+0x270>
 8006768:	2300      	movs	r3, #0
 800676a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800676e:	e052      	b.n	8006816 <UART_SetConfig+0x2fe>
 8006770:	2302      	movs	r3, #2
 8006772:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006776:	e04e      	b.n	8006816 <UART_SetConfig+0x2fe>
 8006778:	2304      	movs	r3, #4
 800677a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800677e:	e04a      	b.n	8006816 <UART_SetConfig+0x2fe>
 8006780:	2308      	movs	r3, #8
 8006782:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006786:	e046      	b.n	8006816 <UART_SetConfig+0x2fe>
 8006788:	2310      	movs	r3, #16
 800678a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800678e:	e042      	b.n	8006816 <UART_SetConfig+0x2fe>
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a17      	ldr	r2, [pc, #92]	@ (80067f4 <UART_SetConfig+0x2dc>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d13a      	bne.n	8006810 <UART_SetConfig+0x2f8>
 800679a:	4b18      	ldr	r3, [pc, #96]	@ (80067fc <UART_SetConfig+0x2e4>)
 800679c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067a0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80067a4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80067a8:	d01a      	beq.n	80067e0 <UART_SetConfig+0x2c8>
 80067aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80067ae:	d81b      	bhi.n	80067e8 <UART_SetConfig+0x2d0>
 80067b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067b4:	d00c      	beq.n	80067d0 <UART_SetConfig+0x2b8>
 80067b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067ba:	d815      	bhi.n	80067e8 <UART_SetConfig+0x2d0>
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d003      	beq.n	80067c8 <UART_SetConfig+0x2b0>
 80067c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067c4:	d008      	beq.n	80067d8 <UART_SetConfig+0x2c0>
 80067c6:	e00f      	b.n	80067e8 <UART_SetConfig+0x2d0>
 80067c8:	2300      	movs	r3, #0
 80067ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067ce:	e022      	b.n	8006816 <UART_SetConfig+0x2fe>
 80067d0:	2302      	movs	r3, #2
 80067d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067d6:	e01e      	b.n	8006816 <UART_SetConfig+0x2fe>
 80067d8:	2304      	movs	r3, #4
 80067da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067de:	e01a      	b.n	8006816 <UART_SetConfig+0x2fe>
 80067e0:	2308      	movs	r3, #8
 80067e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067e6:	e016      	b.n	8006816 <UART_SetConfig+0x2fe>
 80067e8:	2310      	movs	r3, #16
 80067ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067ee:	e012      	b.n	8006816 <UART_SetConfig+0x2fe>
 80067f0:	cfff69f3 	.word	0xcfff69f3
 80067f4:	40008000 	.word	0x40008000
 80067f8:	40013800 	.word	0x40013800
 80067fc:	40021000 	.word	0x40021000
 8006800:	40004400 	.word	0x40004400
 8006804:	40004800 	.word	0x40004800
 8006808:	40004c00 	.word	0x40004c00
 800680c:	40005000 	.word	0x40005000
 8006810:	2310      	movs	r3, #16
 8006812:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4aae      	ldr	r2, [pc, #696]	@ (8006ad4 <UART_SetConfig+0x5bc>)
 800681c:	4293      	cmp	r3, r2
 800681e:	f040 8097 	bne.w	8006950 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006822:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006826:	2b08      	cmp	r3, #8
 8006828:	d823      	bhi.n	8006872 <UART_SetConfig+0x35a>
 800682a:	a201      	add	r2, pc, #4	@ (adr r2, 8006830 <UART_SetConfig+0x318>)
 800682c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006830:	08006855 	.word	0x08006855
 8006834:	08006873 	.word	0x08006873
 8006838:	0800685d 	.word	0x0800685d
 800683c:	08006873 	.word	0x08006873
 8006840:	08006863 	.word	0x08006863
 8006844:	08006873 	.word	0x08006873
 8006848:	08006873 	.word	0x08006873
 800684c:	08006873 	.word	0x08006873
 8006850:	0800686b 	.word	0x0800686b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006854:	f7fd ff88 	bl	8004768 <HAL_RCC_GetPCLK1Freq>
 8006858:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800685a:	e010      	b.n	800687e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800685c:	4b9e      	ldr	r3, [pc, #632]	@ (8006ad8 <UART_SetConfig+0x5c0>)
 800685e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006860:	e00d      	b.n	800687e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006862:	f7fd fee9 	bl	8004638 <HAL_RCC_GetSysClockFreq>
 8006866:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006868:	e009      	b.n	800687e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800686a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800686e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006870:	e005      	b.n	800687e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006872:	2300      	movs	r3, #0
 8006874:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800687c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800687e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006880:	2b00      	cmp	r3, #0
 8006882:	f000 8130 	beq.w	8006ae6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800688a:	4a94      	ldr	r2, [pc, #592]	@ (8006adc <UART_SetConfig+0x5c4>)
 800688c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006890:	461a      	mov	r2, r3
 8006892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006894:	fbb3 f3f2 	udiv	r3, r3, r2
 8006898:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	685a      	ldr	r2, [r3, #4]
 800689e:	4613      	mov	r3, r2
 80068a0:	005b      	lsls	r3, r3, #1
 80068a2:	4413      	add	r3, r2
 80068a4:	69ba      	ldr	r2, [r7, #24]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d305      	bcc.n	80068b6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068b0:	69ba      	ldr	r2, [r7, #24]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d903      	bls.n	80068be <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80068bc:	e113      	b.n	8006ae6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c0:	2200      	movs	r2, #0
 80068c2:	60bb      	str	r3, [r7, #8]
 80068c4:	60fa      	str	r2, [r7, #12]
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ca:	4a84      	ldr	r2, [pc, #528]	@ (8006adc <UART_SetConfig+0x5c4>)
 80068cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	2200      	movs	r2, #0
 80068d4:	603b      	str	r3, [r7, #0]
 80068d6:	607a      	str	r2, [r7, #4]
 80068d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80068e0:	f7fa f9fa 	bl	8000cd8 <__aeabi_uldivmod>
 80068e4:	4602      	mov	r2, r0
 80068e6:	460b      	mov	r3, r1
 80068e8:	4610      	mov	r0, r2
 80068ea:	4619      	mov	r1, r3
 80068ec:	f04f 0200 	mov.w	r2, #0
 80068f0:	f04f 0300 	mov.w	r3, #0
 80068f4:	020b      	lsls	r3, r1, #8
 80068f6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80068fa:	0202      	lsls	r2, r0, #8
 80068fc:	6979      	ldr	r1, [r7, #20]
 80068fe:	6849      	ldr	r1, [r1, #4]
 8006900:	0849      	lsrs	r1, r1, #1
 8006902:	2000      	movs	r0, #0
 8006904:	460c      	mov	r4, r1
 8006906:	4605      	mov	r5, r0
 8006908:	eb12 0804 	adds.w	r8, r2, r4
 800690c:	eb43 0905 	adc.w	r9, r3, r5
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	469a      	mov	sl, r3
 8006918:	4693      	mov	fp, r2
 800691a:	4652      	mov	r2, sl
 800691c:	465b      	mov	r3, fp
 800691e:	4640      	mov	r0, r8
 8006920:	4649      	mov	r1, r9
 8006922:	f7fa f9d9 	bl	8000cd8 <__aeabi_uldivmod>
 8006926:	4602      	mov	r2, r0
 8006928:	460b      	mov	r3, r1
 800692a:	4613      	mov	r3, r2
 800692c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800692e:	6a3b      	ldr	r3, [r7, #32]
 8006930:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006934:	d308      	bcc.n	8006948 <UART_SetConfig+0x430>
 8006936:	6a3b      	ldr	r3, [r7, #32]
 8006938:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800693c:	d204      	bcs.n	8006948 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	6a3a      	ldr	r2, [r7, #32]
 8006944:	60da      	str	r2, [r3, #12]
 8006946:	e0ce      	b.n	8006ae6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800694e:	e0ca      	b.n	8006ae6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	69db      	ldr	r3, [r3, #28]
 8006954:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006958:	d166      	bne.n	8006a28 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800695a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800695e:	2b08      	cmp	r3, #8
 8006960:	d827      	bhi.n	80069b2 <UART_SetConfig+0x49a>
 8006962:	a201      	add	r2, pc, #4	@ (adr r2, 8006968 <UART_SetConfig+0x450>)
 8006964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006968:	0800698d 	.word	0x0800698d
 800696c:	08006995 	.word	0x08006995
 8006970:	0800699d 	.word	0x0800699d
 8006974:	080069b3 	.word	0x080069b3
 8006978:	080069a3 	.word	0x080069a3
 800697c:	080069b3 	.word	0x080069b3
 8006980:	080069b3 	.word	0x080069b3
 8006984:	080069b3 	.word	0x080069b3
 8006988:	080069ab 	.word	0x080069ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800698c:	f7fd feec 	bl	8004768 <HAL_RCC_GetPCLK1Freq>
 8006990:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006992:	e014      	b.n	80069be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006994:	f7fd fefe 	bl	8004794 <HAL_RCC_GetPCLK2Freq>
 8006998:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800699a:	e010      	b.n	80069be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800699c:	4b4e      	ldr	r3, [pc, #312]	@ (8006ad8 <UART_SetConfig+0x5c0>)
 800699e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80069a0:	e00d      	b.n	80069be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069a2:	f7fd fe49 	bl	8004638 <HAL_RCC_GetSysClockFreq>
 80069a6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80069a8:	e009      	b.n	80069be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80069b0:	e005      	b.n	80069be <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80069b2:	2300      	movs	r3, #0
 80069b4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80069bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	f000 8090 	beq.w	8006ae6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ca:	4a44      	ldr	r2, [pc, #272]	@ (8006adc <UART_SetConfig+0x5c4>)
 80069cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069d0:	461a      	mov	r2, r3
 80069d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80069d8:	005a      	lsls	r2, r3, #1
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	085b      	lsrs	r3, r3, #1
 80069e0:	441a      	add	r2, r3
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ea:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069ec:	6a3b      	ldr	r3, [r7, #32]
 80069ee:	2b0f      	cmp	r3, #15
 80069f0:	d916      	bls.n	8006a20 <UART_SetConfig+0x508>
 80069f2:	6a3b      	ldr	r3, [r7, #32]
 80069f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069f8:	d212      	bcs.n	8006a20 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069fa:	6a3b      	ldr	r3, [r7, #32]
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	f023 030f 	bic.w	r3, r3, #15
 8006a02:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a04:	6a3b      	ldr	r3, [r7, #32]
 8006a06:	085b      	lsrs	r3, r3, #1
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	f003 0307 	and.w	r3, r3, #7
 8006a0e:	b29a      	uxth	r2, r3
 8006a10:	8bfb      	ldrh	r3, [r7, #30]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	8bfa      	ldrh	r2, [r7, #30]
 8006a1c:	60da      	str	r2, [r3, #12]
 8006a1e:	e062      	b.n	8006ae6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006a26:	e05e      	b.n	8006ae6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a28:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006a2c:	2b08      	cmp	r3, #8
 8006a2e:	d828      	bhi.n	8006a82 <UART_SetConfig+0x56a>
 8006a30:	a201      	add	r2, pc, #4	@ (adr r2, 8006a38 <UART_SetConfig+0x520>)
 8006a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a36:	bf00      	nop
 8006a38:	08006a5d 	.word	0x08006a5d
 8006a3c:	08006a65 	.word	0x08006a65
 8006a40:	08006a6d 	.word	0x08006a6d
 8006a44:	08006a83 	.word	0x08006a83
 8006a48:	08006a73 	.word	0x08006a73
 8006a4c:	08006a83 	.word	0x08006a83
 8006a50:	08006a83 	.word	0x08006a83
 8006a54:	08006a83 	.word	0x08006a83
 8006a58:	08006a7b 	.word	0x08006a7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a5c:	f7fd fe84 	bl	8004768 <HAL_RCC_GetPCLK1Freq>
 8006a60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a62:	e014      	b.n	8006a8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a64:	f7fd fe96 	bl	8004794 <HAL_RCC_GetPCLK2Freq>
 8006a68:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a6a:	e010      	b.n	8006a8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8006ad8 <UART_SetConfig+0x5c0>)
 8006a6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a70:	e00d      	b.n	8006a8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a72:	f7fd fde1 	bl	8004638 <HAL_RCC_GetSysClockFreq>
 8006a76:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a78:	e009      	b.n	8006a8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a80:	e005      	b.n	8006a8e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006a82:	2300      	movs	r3, #0
 8006a84:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006a8c:	bf00      	nop
    }

    if (pclk != 0U)
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d028      	beq.n	8006ae6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a98:	4a10      	ldr	r2, [pc, #64]	@ (8006adc <UART_SetConfig+0x5c4>)
 8006a9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa2:	fbb3 f2f2 	udiv	r2, r3, r2
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	085b      	lsrs	r3, r3, #1
 8006aac:	441a      	add	r2, r3
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ab6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ab8:	6a3b      	ldr	r3, [r7, #32]
 8006aba:	2b0f      	cmp	r3, #15
 8006abc:	d910      	bls.n	8006ae0 <UART_SetConfig+0x5c8>
 8006abe:	6a3b      	ldr	r3, [r7, #32]
 8006ac0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ac4:	d20c      	bcs.n	8006ae0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ac6:	6a3b      	ldr	r3, [r7, #32]
 8006ac8:	b29a      	uxth	r2, r3
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	60da      	str	r2, [r3, #12]
 8006ad0:	e009      	b.n	8006ae6 <UART_SetConfig+0x5ce>
 8006ad2:	bf00      	nop
 8006ad4:	40008000 	.word	0x40008000
 8006ad8:	00f42400 	.word	0x00f42400
 8006adc:	0800cf74 	.word	0x0800cf74
      }
      else
      {
        ret = HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	2201      	movs	r2, #1
 8006af2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	2200      	movs	r2, #0
 8006afa:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	2200      	movs	r2, #0
 8006b00:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006b02:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3730      	adds	r7, #48	@ 0x30
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006b10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b1c:	f003 0308 	and.w	r3, r3, #8
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00a      	beq.n	8006b3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	430a      	orrs	r2, r1
 8006b38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b3e:	f003 0301 	and.w	r3, r3, #1
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00a      	beq.n	8006b5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	430a      	orrs	r2, r1
 8006b5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b60:	f003 0302 	and.w	r3, r3, #2
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00a      	beq.n	8006b7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	430a      	orrs	r2, r1
 8006b7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b82:	f003 0304 	and.w	r3, r3, #4
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00a      	beq.n	8006ba0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	430a      	orrs	r2, r1
 8006b9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ba4:	f003 0310 	and.w	r3, r3, #16
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d00a      	beq.n	8006bc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	430a      	orrs	r2, r1
 8006bc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bc6:	f003 0320 	and.w	r3, r3, #32
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00a      	beq.n	8006be4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	430a      	orrs	r2, r1
 8006be2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d01a      	beq.n	8006c26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	430a      	orrs	r2, r1
 8006c04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c0e:	d10a      	bne.n	8006c26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	430a      	orrs	r2, r1
 8006c24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00a      	beq.n	8006c48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	430a      	orrs	r2, r1
 8006c46:	605a      	str	r2, [r3, #4]
  }
}
 8006c48:	bf00      	nop
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b098      	sub	sp, #96	@ 0x60
 8006c58:	af02      	add	r7, sp, #8
 8006c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c64:	f7fb fdcc 	bl	8002800 <HAL_GetTick>
 8006c68:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 0308 	and.w	r3, r3, #8
 8006c74:	2b08      	cmp	r3, #8
 8006c76:	d12f      	bne.n	8006cd8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c78:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006c7c:	9300      	str	r3, [sp, #0]
 8006c7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c80:	2200      	movs	r2, #0
 8006c82:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 f88e 	bl	8006da8 <UART_WaitOnFlagUntilTimeout>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d022      	beq.n	8006cd8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c9a:	e853 3f00 	ldrex	r3, [r3]
 8006c9e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ca2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ca6:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	461a      	mov	r2, r3
 8006cae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cb2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006cb6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cb8:	e841 2300 	strex	r3, r2, [r1]
 8006cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006cbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d1e6      	bne.n	8006c92 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2220      	movs	r2, #32
 8006cc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cd4:	2303      	movs	r3, #3
 8006cd6:	e063      	b.n	8006da0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 0304 	and.w	r3, r3, #4
 8006ce2:	2b04      	cmp	r3, #4
 8006ce4:	d149      	bne.n	8006d7a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ce6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006cea:	9300      	str	r3, [sp, #0]
 8006cec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 f857 	bl	8006da8 <UART_WaitOnFlagUntilTimeout>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d03c      	beq.n	8006d7a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d08:	e853 3f00 	ldrex	r3, [r3]
 8006d0c:	623b      	str	r3, [r7, #32]
   return(result);
 8006d0e:	6a3b      	ldr	r3, [r7, #32]
 8006d10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d20:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d26:	e841 2300 	strex	r3, r2, [r1]
 8006d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1e6      	bne.n	8006d00 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	3308      	adds	r3, #8
 8006d38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	e853 3f00 	ldrex	r3, [r3]
 8006d40:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f023 0301 	bic.w	r3, r3, #1
 8006d48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	3308      	adds	r3, #8
 8006d50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d52:	61fa      	str	r2, [r7, #28]
 8006d54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d56:	69b9      	ldr	r1, [r7, #24]
 8006d58:	69fa      	ldr	r2, [r7, #28]
 8006d5a:	e841 2300 	strex	r3, r2, [r1]
 8006d5e:	617b      	str	r3, [r7, #20]
   return(result);
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d1e5      	bne.n	8006d32 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2220      	movs	r2, #32
 8006d6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d76:	2303      	movs	r3, #3
 8006d78:	e012      	b.n	8006da0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2220      	movs	r2, #32
 8006d7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2220      	movs	r2, #32
 8006d86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3758      	adds	r7, #88	@ 0x58
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	603b      	str	r3, [r7, #0]
 8006db4:	4613      	mov	r3, r2
 8006db6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006db8:	e04f      	b.n	8006e5a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc0:	d04b      	beq.n	8006e5a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dc2:	f7fb fd1d 	bl	8002800 <HAL_GetTick>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	1ad3      	subs	r3, r2, r3
 8006dcc:	69ba      	ldr	r2, [r7, #24]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d302      	bcc.n	8006dd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d101      	bne.n	8006ddc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006dd8:	2303      	movs	r3, #3
 8006dda:	e04e      	b.n	8006e7a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 0304 	and.w	r3, r3, #4
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d037      	beq.n	8006e5a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	2b80      	cmp	r3, #128	@ 0x80
 8006dee:	d034      	beq.n	8006e5a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	2b40      	cmp	r3, #64	@ 0x40
 8006df4:	d031      	beq.n	8006e5a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	69db      	ldr	r3, [r3, #28]
 8006dfc:	f003 0308 	and.w	r3, r3, #8
 8006e00:	2b08      	cmp	r3, #8
 8006e02:	d110      	bne.n	8006e26 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	2208      	movs	r2, #8
 8006e0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f000 f838 	bl	8006e82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2208      	movs	r2, #8
 8006e16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e029      	b.n	8006e7a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	69db      	ldr	r3, [r3, #28]
 8006e2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e34:	d111      	bne.n	8006e5a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006e3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e40:	68f8      	ldr	r0, [r7, #12]
 8006e42:	f000 f81e 	bl	8006e82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2220      	movs	r2, #32
 8006e4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006e56:	2303      	movs	r3, #3
 8006e58:	e00f      	b.n	8006e7a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	69da      	ldr	r2, [r3, #28]
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	4013      	ands	r3, r2
 8006e64:	68ba      	ldr	r2, [r7, #8]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	bf0c      	ite	eq
 8006e6a:	2301      	moveq	r3, #1
 8006e6c:	2300      	movne	r3, #0
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	461a      	mov	r2, r3
 8006e72:	79fb      	ldrb	r3, [r7, #7]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d0a0      	beq.n	8006dba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e82:	b480      	push	{r7}
 8006e84:	b095      	sub	sp, #84	@ 0x54
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e92:	e853 3f00 	ldrex	r3, [r3]
 8006e96:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ea8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006eaa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006eae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006eb0:	e841 2300 	strex	r3, r2, [r1]
 8006eb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d1e6      	bne.n	8006e8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	3308      	adds	r3, #8
 8006ec2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec4:	6a3b      	ldr	r3, [r7, #32]
 8006ec6:	e853 3f00 	ldrex	r3, [r3]
 8006eca:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ed2:	f023 0301 	bic.w	r3, r3, #1
 8006ed6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	3308      	adds	r3, #8
 8006ede:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ee0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ee6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ee8:	e841 2300 	strex	r3, r2, [r1]
 8006eec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d1e3      	bne.n	8006ebc <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d118      	bne.n	8006f2e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	e853 3f00 	ldrex	r3, [r3]
 8006f08:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	f023 0310 	bic.w	r3, r3, #16
 8006f10:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	461a      	mov	r2, r3
 8006f18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f1a:	61bb      	str	r3, [r7, #24]
 8006f1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1e:	6979      	ldr	r1, [r7, #20]
 8006f20:	69ba      	ldr	r2, [r7, #24]
 8006f22:	e841 2300 	strex	r3, r2, [r1]
 8006f26:	613b      	str	r3, [r7, #16]
   return(result);
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d1e6      	bne.n	8006efc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2220      	movs	r2, #32
 8006f32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006f42:	bf00      	nop
 8006f44:	3754      	adds	r7, #84	@ 0x54
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr

08006f4e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006f4e:	b480      	push	{r7}
 8006f50:	b085      	sub	sp, #20
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d101      	bne.n	8006f64 <HAL_UARTEx_DisableFifoMode+0x16>
 8006f60:	2302      	movs	r3, #2
 8006f62:	e027      	b.n	8006fb4 <HAL_UARTEx_DisableFifoMode+0x66>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2224      	movs	r2, #36	@ 0x24
 8006f70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f022 0201 	bic.w	r2, r2, #1
 8006f8a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006f92:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	68fa      	ldr	r2, [r7, #12]
 8006fa0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2220      	movs	r2, #32
 8006fa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3714      	adds	r7, #20
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d101      	bne.n	8006fd8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006fd4:	2302      	movs	r3, #2
 8006fd6:	e02d      	b.n	8007034 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2224      	movs	r2, #36	@ 0x24
 8006fe4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f022 0201 	bic.w	r2, r2, #1
 8006ffe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	683a      	ldr	r2, [r7, #0]
 8007010:	430a      	orrs	r2, r1
 8007012:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 f84f 	bl	80070b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68fa      	ldr	r2, [r7, #12]
 8007020:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2220      	movs	r2, #32
 8007026:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3710      	adds	r7, #16
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800704c:	2b01      	cmp	r3, #1
 800704e:	d101      	bne.n	8007054 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007050:	2302      	movs	r3, #2
 8007052:	e02d      	b.n	80070b0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2224      	movs	r2, #36	@ 0x24
 8007060:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f022 0201 	bic.w	r2, r2, #1
 800707a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	683a      	ldr	r2, [r7, #0]
 800708c:	430a      	orrs	r2, r1
 800708e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 f811 	bl	80070b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2220      	movs	r2, #32
 80070a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80070ae:	2300      	movs	r3, #0
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3710      	adds	r7, #16
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d108      	bne.n	80070da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80070d8:	e031      	b.n	800713e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80070da:	2308      	movs	r3, #8
 80070dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80070de:	2308      	movs	r3, #8
 80070e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	0e5b      	lsrs	r3, r3, #25
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	f003 0307 	and.w	r3, r3, #7
 80070f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	0f5b      	lsrs	r3, r3, #29
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	f003 0307 	and.w	r3, r3, #7
 8007100:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007102:	7bbb      	ldrb	r3, [r7, #14]
 8007104:	7b3a      	ldrb	r2, [r7, #12]
 8007106:	4911      	ldr	r1, [pc, #68]	@ (800714c <UARTEx_SetNbDataToProcess+0x94>)
 8007108:	5c8a      	ldrb	r2, [r1, r2]
 800710a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800710e:	7b3a      	ldrb	r2, [r7, #12]
 8007110:	490f      	ldr	r1, [pc, #60]	@ (8007150 <UARTEx_SetNbDataToProcess+0x98>)
 8007112:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007114:	fb93 f3f2 	sdiv	r3, r3, r2
 8007118:	b29a      	uxth	r2, r3
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007120:	7bfb      	ldrb	r3, [r7, #15]
 8007122:	7b7a      	ldrb	r2, [r7, #13]
 8007124:	4909      	ldr	r1, [pc, #36]	@ (800714c <UARTEx_SetNbDataToProcess+0x94>)
 8007126:	5c8a      	ldrb	r2, [r1, r2]
 8007128:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800712c:	7b7a      	ldrb	r2, [r7, #13]
 800712e:	4908      	ldr	r1, [pc, #32]	@ (8007150 <UARTEx_SetNbDataToProcess+0x98>)
 8007130:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007132:	fb93 f3f2 	sdiv	r3, r3, r2
 8007136:	b29a      	uxth	r2, r3
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800713e:	bf00      	nop
 8007140:	3714      	adds	r7, #20
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	0800cf8c 	.word	0x0800cf8c
 8007150:	0800cf94 	.word	0x0800cf94

08007154 <funchad51.constprop.0>:
 8007154:	4b04      	ldr	r3, [pc, #16]	@ (8007168 <funchad51.constprop.0+0x14>)
 8007156:	f503 6180 	add.w	r1, r3, #1024	@ 0x400
 800715a:	f850 2b04 	ldr.w	r2, [r0], #4
 800715e:	f843 2b04 	str.w	r2, [r3], #4
 8007162:	4299      	cmp	r1, r3
 8007164:	d1f9      	bne.n	800715a <funchad51.constprop.0+0x6>
 8007166:	4770      	bx	lr
 8007168:	200098c8 	.word	0x200098c8

0800716c <neai_anomalydetection_learn>:
 800716c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007170:	ed2d 8b04 	vpush	{d8-d9}
 8007174:	4bd0      	ldr	r3, [pc, #832]	@ (80074b8 <neai_anomalydetection_learn+0x34c>)
 8007176:	781d      	ldrb	r5, [r3, #0]
 8007178:	2d01      	cmp	r5, #1
 800717a:	d006      	beq.n	800718a <neai_anomalydetection_learn+0x1e>
 800717c:	4bcf      	ldr	r3, [pc, #828]	@ (80074bc <neai_anomalydetection_learn+0x350>)
 800717e:	207b      	movs	r0, #123	@ 0x7b
 8007180:	7018      	strb	r0, [r3, #0]
 8007182:	ecbd 8b04 	vpop	{d8-d9}
 8007186:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800718a:	f7ff ffe3 	bl	8007154 <funchad51.constprop.0>
 800718e:	4acc      	ldr	r2, [pc, #816]	@ (80074c0 <neai_anomalydetection_learn+0x354>)
 8007190:	4bcc      	ldr	r3, [pc, #816]	@ (80074c4 <neai_anomalydetection_learn+0x358>)
 8007192:	6814      	ldr	r4, [r2, #0]
 8007194:	7819      	ldrb	r1, [r3, #0]
 8007196:	3401      	adds	r4, #1
 8007198:	ee07 4a90 	vmov	s15, r4
 800719c:	2901      	cmp	r1, #1
 800719e:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80071a2:	6014      	str	r4, [r2, #0]
 80071a4:	d914      	bls.n	80071d0 <neai_anomalydetection_learn+0x64>
 80071a6:	49c8      	ldr	r1, [pc, #800]	@ (80074c8 <neai_anomalydetection_learn+0x35c>)
 80071a8:	4ac8      	ldr	r2, [pc, #800]	@ (80074cc <neai_anomalydetection_learn+0x360>)
 80071aa:	701d      	strb	r5, [r3, #0]
 80071ac:	f101 0080 	add.w	r0, r1, #128	@ 0x80
 80071b0:	ecb1 7a01 	vldmia	r1!, {s14}
 80071b4:	f5a2 6380 	sub.w	r3, r2, #1024	@ 0x400
 80071b8:	edd3 7a00 	vldr	s15, [r3]
 80071bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80071c0:	ece3 7a01 	vstmia	r3!, {s15}
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d1f7      	bne.n	80071b8 <neai_anomalydetection_learn+0x4c>
 80071c8:	4288      	cmp	r0, r1
 80071ca:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80071ce:	d1ef      	bne.n	80071b0 <neai_anomalydetection_learn+0x44>
 80071d0:	f8df a30c 	ldr.w	sl, [pc, #780]	@ 80074e0 <neai_anomalydetection_learn+0x374>
 80071d4:	49be      	ldr	r1, [pc, #760]	@ (80074d0 <neai_anomalydetection_learn+0x364>)
 80071d6:	48bc      	ldr	r0, [pc, #752]	@ (80074c8 <neai_anomalydetection_learn+0x35c>)
 80071d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80071dc:	f001 fd1f 	bl	8008c1e <memcpy>
 80071e0:	f8ba 6000 	ldrh.w	r6, [sl]
 80071e4:	2e1f      	cmp	r6, #31
 80071e6:	f200 80c9 	bhi.w	800737c <neai_anomalydetection_learn+0x210>
 80071ea:	f8df 82f0 	ldr.w	r8, [pc, #752]	@ 80074dc <neai_anomalydetection_learn+0x370>
 80071ee:	eddf 8ab9 	vldr	s17, [pc, #740]	@ 80074d4 <neai_anomalydetection_learn+0x368>
 80071f2:	4647      	mov	r7, r8
 80071f4:	eef7 9a00 	vmov.f32	s19, #112	@ 0x3f800000  1.0
 80071f8:	eeb1 9a00 	vmov.f32	s18, #16	@ 0x40800000  4.0
 80071fc:	f508 6580 	add.w	r5, r8, #1024	@ 0x400
 8007200:	f106 0901 	add.w	r9, r6, #1
 8007204:	f04f 0b00 	mov.w	fp, #0
 8007208:	455e      	cmp	r6, fp
 800720a:	ed9f 0ab3 	vldr	s0, [pc, #716]	@ 80074d8 <neai_anomalydetection_learn+0x36c>
 800720e:	d03f      	beq.n	8007290 <neai_anomalydetection_learn+0x124>
 8007210:	463b      	mov	r3, r7
 8007212:	ecf3 7a01 	vldmia	r3!, {s15}
 8007216:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800721a:	429d      	cmp	r5, r3
 800721c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007220:	d1f7      	bne.n	8007212 <neai_anomalydetection_learn+0xa6>
 8007222:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800722a:	f100 8165 	bmi.w	80074f8 <neai_anomalydetection_learn+0x38c>
 800722e:	eef1 6ac0 	vsqrt.f32	s13, s0
 8007232:	eef4 6ae8 	vcmpe.f32	s13, s17
 8007236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800723a:	dc70      	bgt.n	800731e <neai_anomalydetection_learn+0x1b2>
 800723c:	ed9f 0aa6 	vldr	s0, [pc, #664]	@ 80074d8 <neai_anomalydetection_learn+0x36c>
 8007240:	463b      	mov	r3, r7
 8007242:	ecf3 7a01 	vldmia	r3!, {s15}
 8007246:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800724a:	429d      	cmp	r5, r3
 800724c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007250:	d1f7      	bne.n	8007242 <neai_anomalydetection_learn+0xd6>
 8007252:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800725a:	f100 8152 	bmi.w	8007502 <neai_anomalydetection_learn+0x396>
 800725e:	eeb1 6ac0 	vsqrt.f32	s12, s0
 8007262:	eeb4 6ae8 	vcmpe.f32	s12, s17
 8007266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800726a:	dc35      	bgt.n	80072d8 <neai_anomalydetection_learn+0x16c>
 800726c:	f10b 0b01 	add.w	fp, fp, #1
 8007270:	45cb      	cmp	fp, r9
 8007272:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8007276:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800727a:	d1c5      	bne.n	8007208 <neai_anomalydetection_learn+0x9c>
 800727c:	2c09      	cmp	r4, #9
 800727e:	bf8c      	ite	hi
 8007280:	207f      	movhi	r0, #127	@ 0x7f
 8007282:	207e      	movls	r0, #126	@ 0x7e
 8007284:	4b8d      	ldr	r3, [pc, #564]	@ (80074bc <neai_anomalydetection_learn+0x350>)
 8007286:	7018      	strb	r0, [r3, #0]
 8007288:	ecbd 8b04 	vpop	{d8-d9}
 800728c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007290:	4b8d      	ldr	r3, [pc, #564]	@ (80074c8 <neai_anomalydetection_learn+0x35c>)
 8007292:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 8007296:	ecf3 7a01 	vldmia	r3!, {s15}
 800729a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800729e:	4293      	cmp	r3, r2
 80072a0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80072a4:	d1f7      	bne.n	8007296 <neai_anomalydetection_learn+0x12a>
 80072a6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80072aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072ae:	f100 80fd 	bmi.w	80074ac <neai_anomalydetection_learn+0x340>
 80072b2:	eef1 7ac0 	vsqrt.f32	s15, s0
 80072b6:	eef4 7ae8 	vcmpe.f32	s15, s17
 80072ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072be:	ddd5      	ble.n	800726c <neai_anomalydetection_learn+0x100>
 80072c0:	eb08 2086 	add.w	r0, r8, r6, lsl #10
 80072c4:	3601      	adds	r6, #1
 80072c6:	4980      	ldr	r1, [pc, #512]	@ (80074c8 <neai_anomalydetection_learn+0x35c>)
 80072c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80072cc:	b2b6      	uxth	r6, r6
 80072ce:	f001 fca6 	bl	8008c1e <memcpy>
 80072d2:	f8aa 6000 	strh.w	r6, [sl]
 80072d6:	e7c9      	b.n	800726c <neai_anomalydetection_learn+0x100>
 80072d8:	4b7b      	ldr	r3, [pc, #492]	@ (80074c8 <neai_anomalydetection_learn+0x35c>)
 80072da:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 80074d8 <neai_anomalydetection_learn+0x36c>
 80072de:	4638      	mov	r0, r7
 80072e0:	f503 6180 	add.w	r1, r3, #1024	@ 0x400
 80072e4:	461a      	mov	r2, r3
 80072e6:	ecf2 7a01 	vldmia	r2!, {s15}
 80072ea:	ecf0 6a01 	vldmia	r0!, {s13}
 80072ee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80072f2:	4291      	cmp	r1, r2
 80072f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80072f8:	d1f5      	bne.n	80072e6 <neai_anomalydetection_learn+0x17a>
 80072fa:	eec7 5a06 	vdiv.f32	s11, s14, s12
 80072fe:	463a      	mov	r2, r7
 8007300:	ecf2 6a01 	vldmia	r2!, {s13}
 8007304:	edd3 7a00 	vldr	s15, [r3]
 8007308:	ee86 7a86 	vdiv.f32	s14, s13, s12
 800730c:	ee27 7a25 	vmul.f32	s14, s14, s11
 8007310:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007314:	ece3 7a01 	vstmia	r3!, {s15}
 8007318:	428b      	cmp	r3, r1
 800731a:	d1f1      	bne.n	8007300 <neai_anomalydetection_learn+0x194>
 800731c:	e7a6      	b.n	800726c <neai_anomalydetection_learn+0x100>
 800731e:	4b6a      	ldr	r3, [pc, #424]	@ (80074c8 <neai_anomalydetection_learn+0x35c>)
 8007320:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 80074d8 <neai_anomalydetection_learn+0x36c>
 8007324:	4638      	mov	r0, r7
 8007326:	f503 6180 	add.w	r1, r3, #1024	@ 0x400
 800732a:	461a      	mov	r2, r3
 800732c:	ecf2 7a01 	vldmia	r2!, {s15}
 8007330:	ecb0 6a01 	vldmia	r0!, {s12}
 8007334:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007338:	4291      	cmp	r1, r2
 800733a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800733e:	d1f5      	bne.n	800732c <neai_anomalydetection_learn+0x1c0>
 8007340:	ee78 7a69 	vsub.f32	s15, s16, s19
 8007344:	eeb1 5a04 	vmov.f32	s10, #20	@ 0x40a00000  5.0
 8007348:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800734c:	eec7 5a26 	vdiv.f32	s11, s14, s13
 8007350:	463a      	mov	r2, r7
 8007352:	ee87 6a88 	vdiv.f32	s12, s15, s16
 8007356:	eec5 6a08 	vdiv.f32	s13, s10, s16
 800735a:	ecf3 7a01 	vldmia	r3!, {s15}
 800735e:	ed92 7a00 	vldr	s14, [r2]
 8007362:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007366:	ee26 7a07 	vmul.f32	s14, s12, s14
 800736a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800736e:	4299      	cmp	r1, r3
 8007370:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007374:	ece2 7a01 	vstmia	r2!, {s15}
 8007378:	d1ef      	bne.n	800735a <neai_anomalydetection_learn+0x1ee>
 800737a:	e75f      	b.n	800723c <neai_anomalydetection_learn+0xd0>
 800737c:	4e57      	ldr	r6, [pc, #348]	@ (80074dc <neai_anomalydetection_learn+0x370>)
 800737e:	eddf 9a55 	vldr	s19, [pc, #340]	@ 80074d4 <neai_anomalydetection_learn+0x368>
 8007382:	f506 6580 	add.w	r5, r6, #1024	@ 0x400
 8007386:	f506 4700 	add.w	r7, r6, #32768	@ 0x8000
 800738a:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 800738e:	eef1 8a00 	vmov.f32	s17, #16	@ 0x40800000  4.0
 8007392:	ed9f 0a51 	vldr	s0, [pc, #324]	@ 80074d8 <neai_anomalydetection_learn+0x36c>
 8007396:	4633      	mov	r3, r6
 8007398:	ecf3 7a01 	vldmia	r3!, {s15}
 800739c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80073a0:	429d      	cmp	r5, r3
 80073a2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80073a6:	d1f7      	bne.n	8007398 <neai_anomalydetection_learn+0x22c>
 80073a8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80073ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073b0:	f100 8098 	bmi.w	80074e4 <neai_anomalydetection_learn+0x378>
 80073b4:	eeb1 6ac0 	vsqrt.f32	s12, s0
 80073b8:	eeb4 6ae9 	vcmpe.f32	s12, s19
 80073bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073c0:	dc22      	bgt.n	8007408 <neai_anomalydetection_learn+0x29c>
 80073c2:	ed9f 0a45 	vldr	s0, [pc, #276]	@ 80074d8 <neai_anomalydetection_learn+0x36c>
 80073c6:	4633      	mov	r3, r6
 80073c8:	ecf3 7a01 	vldmia	r3!, {s15}
 80073cc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80073d0:	429d      	cmp	r5, r3
 80073d2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80073d6:	d1f7      	bne.n	80073c8 <neai_anomalydetection_learn+0x25c>
 80073d8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80073dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073e0:	f100 8085 	bmi.w	80074ee <neai_anomalydetection_learn+0x382>
 80073e4:	eeb1 6ac0 	vsqrt.f32	s12, s0
 80073e8:	eeb4 6ae9 	vcmpe.f32	s12, s19
 80073ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073f0:	dc39      	bgt.n	8007466 <neai_anomalydetection_learn+0x2fa>
 80073f2:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80073f6:	42b7      	cmp	r7, r6
 80073f8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80073fc:	d1c9      	bne.n	8007392 <neai_anomalydetection_learn+0x226>
 80073fe:	2c09      	cmp	r4, #9
 8007400:	bf8c      	ite	hi
 8007402:	207f      	movhi	r0, #127	@ 0x7f
 8007404:	207e      	movls	r0, #126	@ 0x7e
 8007406:	e73d      	b.n	8007284 <neai_anomalydetection_learn+0x118>
 8007408:	4b2f      	ldr	r3, [pc, #188]	@ (80074c8 <neai_anomalydetection_learn+0x35c>)
 800740a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80074d8 <neai_anomalydetection_learn+0x36c>
 800740e:	f503 6180 	add.w	r1, r3, #1024	@ 0x400
 8007412:	4630      	mov	r0, r6
 8007414:	461a      	mov	r2, r3
 8007416:	ecf2 7a01 	vldmia	r2!, {s15}
 800741a:	ecf0 6a01 	vldmia	r0!, {s13}
 800741e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007422:	4291      	cmp	r1, r2
 8007424:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007428:	d1f5      	bne.n	8007416 <neai_anomalydetection_learn+0x2aa>
 800742a:	ee78 7a49 	vsub.f32	s15, s16, s18
 800742e:	eeb1 5a04 	vmov.f32	s10, #20	@ 0x40a00000  5.0
 8007432:	ee77 7ae8 	vsub.f32	s15, s15, s17
 8007436:	eec7 5a06 	vdiv.f32	s11, s14, s12
 800743a:	4632      	mov	r2, r6
 800743c:	ee87 6a88 	vdiv.f32	s12, s15, s16
 8007440:	eec5 6a08 	vdiv.f32	s13, s10, s16
 8007444:	ecf3 7a01 	vldmia	r3!, {s15}
 8007448:	ed92 7a00 	vldr	s14, [r2]
 800744c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007450:	ee26 7a07 	vmul.f32	s14, s12, s14
 8007454:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007458:	4299      	cmp	r1, r3
 800745a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800745e:	ece2 7a01 	vstmia	r2!, {s15}
 8007462:	d1ef      	bne.n	8007444 <neai_anomalydetection_learn+0x2d8>
 8007464:	e7ad      	b.n	80073c2 <neai_anomalydetection_learn+0x256>
 8007466:	4b18      	ldr	r3, [pc, #96]	@ (80074c8 <neai_anomalydetection_learn+0x35c>)
 8007468:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80074d8 <neai_anomalydetection_learn+0x36c>
 800746c:	f503 6180 	add.w	r1, r3, #1024	@ 0x400
 8007470:	4630      	mov	r0, r6
 8007472:	461a      	mov	r2, r3
 8007474:	ecf2 7a01 	vldmia	r2!, {s15}
 8007478:	ecf0 6a01 	vldmia	r0!, {s13}
 800747c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007480:	4291      	cmp	r1, r2
 8007482:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007486:	d1f5      	bne.n	8007474 <neai_anomalydetection_learn+0x308>
 8007488:	eec7 5a06 	vdiv.f32	s11, s14, s12
 800748c:	4632      	mov	r2, r6
 800748e:	ecf2 6a01 	vldmia	r2!, {s13}
 8007492:	edd3 7a00 	vldr	s15, [r3]
 8007496:	ee86 7a86 	vdiv.f32	s14, s13, s12
 800749a:	ee27 7a25 	vmul.f32	s14, s14, s11
 800749e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80074a2:	ece3 7a01 	vstmia	r3!, {s15}
 80074a6:	4299      	cmp	r1, r3
 80074a8:	d1f1      	bne.n	800748e <neai_anomalydetection_learn+0x322>
 80074aa:	e7a2      	b.n	80073f2 <neai_anomalydetection_learn+0x286>
 80074ac:	f004 fef0 	bl	800c290 <sqrtf>
 80074b0:	eef0 7a40 	vmov.f32	s15, s0
 80074b4:	e6ff      	b.n	80072b6 <neai_anomalydetection_learn+0x14a>
 80074b6:	bf00      	nop
 80074b8:	200001f0 	.word	0x200001f0
 80074bc:	200001e8 	.word	0x200001e8
 80074c0:	200001ec 	.word	0x200001ec
 80074c4:	200001f4 	.word	0x200001f4
 80074c8:	200001f8 	.word	0x200001f8
 80074cc:	200009f8 	.word	0x200009f8
 80074d0:	200098c8 	.word	0x200098c8
 80074d4:	3089705f 	.word	0x3089705f
 80074d8:	00000000 	.word	0x00000000
 80074dc:	200005f8 	.word	0x200005f8
 80074e0:	200001f2 	.word	0x200001f2
 80074e4:	f004 fed4 	bl	800c290 <sqrtf>
 80074e8:	eeb0 6a40 	vmov.f32	s12, s0
 80074ec:	e764      	b.n	80073b8 <neai_anomalydetection_learn+0x24c>
 80074ee:	f004 fecf 	bl	800c290 <sqrtf>
 80074f2:	eeb0 6a40 	vmov.f32	s12, s0
 80074f6:	e777      	b.n	80073e8 <neai_anomalydetection_learn+0x27c>
 80074f8:	f004 feca 	bl	800c290 <sqrtf>
 80074fc:	eef0 6a40 	vmov.f32	s13, s0
 8007500:	e697      	b.n	8007232 <neai_anomalydetection_learn+0xc6>
 8007502:	f004 fec5 	bl	800c290 <sqrtf>
 8007506:	eeb0 6a40 	vmov.f32	s12, s0
 800750a:	e6aa      	b.n	8007262 <neai_anomalydetection_learn+0xf6>
 800750c:	0000      	movs	r0, r0
	...

08007510 <neai_anomalydetection_detect>:
 8007510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007514:	ed2d 8b04 	vpush	{d8-d9}
 8007518:	4ad5      	ldr	r2, [pc, #852]	@ (8007870 <neai_anomalydetection_detect+0x360>)
 800751a:	460c      	mov	r4, r1
 800751c:	7813      	ldrb	r3, [r2, #0]
 800751e:	21ff      	movs	r1, #255	@ 0xff
 8007520:	7021      	strb	r1, [r4, #0]
 8007522:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8007526:	2901      	cmp	r1, #1
 8007528:	b082      	sub	sp, #8
 800752a:	d947      	bls.n	80075bc <neai_anomalydetection_detect+0xac>
 800752c:	2b80      	cmp	r3, #128	@ 0x80
 800752e:	d045      	beq.n	80075bc <neai_anomalydetection_detect+0xac>
 8007530:	4bd0      	ldr	r3, [pc, #832]	@ (8007874 <neai_anomalydetection_detect+0x364>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2b09      	cmp	r3, #9
 8007536:	d947      	bls.n	80075c8 <neai_anomalydetection_detect+0xb8>
 8007538:	f7ff fe0c 	bl	8007154 <funchad51.constprop.0>
 800753c:	4bce      	ldr	r3, [pc, #824]	@ (8007878 <neai_anomalydetection_detect+0x368>)
 800753e:	49cf      	ldr	r1, [pc, #828]	@ (800787c <neai_anomalydetection_detect+0x36c>)
 8007540:	781a      	ldrb	r2, [r3, #0]
 8007542:	680d      	ldr	r5, [r1, #0]
 8007544:	2a01      	cmp	r2, #1
 8007546:	f000 80a1 	beq.w	800768c <neai_anomalydetection_detect+0x17c>
 800754a:	4ecd      	ldr	r6, [pc, #820]	@ (8007880 <neai_anomalydetection_detect+0x370>)
 800754c:	eddf 8acd 	vldr	s17, [pc, #820]	@ 8007884 <neai_anomalydetection_detect+0x374>
 8007550:	49cd      	ldr	r1, [pc, #820]	@ (8007888 <neai_anomalydetection_detect+0x378>)
 8007552:	f506 4700 	add.w	r7, r6, #32768	@ 0x8000
 8007556:	48cd      	ldr	r0, [pc, #820]	@ (800788c <neai_anomalydetection_detect+0x37c>)
 8007558:	ed9f 7aca 	vldr	s14, [pc, #808]	@ 8007884 <neai_anomalydetection_detect+0x374>
 800755c:	4632      	mov	r2, r6
 800755e:	4603      	mov	r3, r0
 8007560:	ecf3 7a01 	vldmia	r3!, {s15}
 8007564:	ecf2 6a01 	vldmia	r2!, {s13}
 8007568:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800756c:	428b      	cmp	r3, r1
 800756e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007572:	d1f5      	bne.n	8007560 <neai_anomalydetection_detect+0x50>
 8007574:	ee27 7a07 	vmul.f32	s14, s14, s14
 8007578:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800757c:	42b7      	cmp	r7, r6
 800757e:	ee78 8a87 	vadd.f32	s17, s17, s14
 8007582:	d1e8      	bne.n	8007556 <neai_anomalydetection_detect+0x46>
 8007584:	ed9f 8abf 	vldr	s16, [pc, #764]	@ 8007884 <neai_anomalydetection_detect+0x374>
 8007588:	ecf0 7a01 	vldmia	r0!, {s15}
 800758c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007590:	4288      	cmp	r0, r1
 8007592:	ee38 8a27 	vadd.f32	s16, s16, s15
 8007596:	d1f7      	bne.n	8007588 <neai_anomalydetection_detect+0x78>
 8007598:	eddf 7abd 	vldr	s15, [pc, #756]	@ 8007890 <neai_anomalydetection_detect+0x380>
 800759c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80075a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075a4:	d518      	bpl.n	80075d8 <neai_anomalydetection_detect+0xc8>
 80075a6:	4bbb      	ldr	r3, [pc, #748]	@ (8007894 <neai_anomalydetection_detect+0x384>)
 80075a8:	ed93 7a00 	vldr	s14, [r3]
 80075ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80075b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075b4:	d468      	bmi.n	8007688 <neai_anomalydetection_detect+0x178>
 80075b6:	2300      	movs	r3, #0
 80075b8:	7023      	strb	r3, [r4, #0]
 80075ba:	2300      	movs	r3, #0
 80075bc:	4618      	mov	r0, r3
 80075be:	b002      	add	sp, #8
 80075c0:	ecbd 8b04 	vpop	{d8-d9}
 80075c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075c8:	237e      	movs	r3, #126	@ 0x7e
 80075ca:	4618      	mov	r0, r3
 80075cc:	7013      	strb	r3, [r2, #0]
 80075ce:	b002      	add	sp, #8
 80075d0:	ecbd 8b04 	vpop	{d8-d9}
 80075d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075d8:	4628      	mov	r0, r5
 80075da:	f7f8 ffdd 	bl	8000598 <__aeabi_f2d>
 80075de:	a39e      	add	r3, pc, #632	@ (adr r3, 8007858 <neai_anomalydetection_detect+0x348>)
 80075e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e4:	f7f9 f830 	bl	8000648 <__aeabi_dmul>
 80075e8:	f7f9 fb26 	bl	8000c38 <__aeabi_d2f>
 80075ec:	f7f8 ffd4 	bl	8000598 <__aeabi_f2d>
 80075f0:	ec41 0b10 	vmov	d0, r0, r1
 80075f4:	f004 fdd8 	bl	800c1a8 <log>
 80075f8:	a399      	add	r3, pc, #612	@ (adr r3, 8007860 <neai_anomalydetection_detect+0x350>)
 80075fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fe:	ec51 0b10 	vmov	r0, r1, d0
 8007602:	f7f9 f821 	bl	8000648 <__aeabi_dmul>
 8007606:	a398      	add	r3, pc, #608	@ (adr r3, 8007868 <neai_anomalydetection_detect+0x358>)
 8007608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760c:	f7f8 fe66 	bl	80002dc <__adddf3>
 8007610:	f7f9 fb12 	bl	8000c38 <__aeabi_d2f>
 8007614:	eec8 7a88 	vdiv.f32	s15, s17, s16
 8007618:	ee07 0a10 	vmov	s14, r0
 800761c:	ee37 8ac7 	vsub.f32	s16, s15, s14
 8007620:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007624:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 8007898 <neai_anomalydetection_detect+0x388>
 8007628:	eddf 7a9c 	vldr	s15, [pc, #624]	@ 800789c <neai_anomalydetection_detect+0x38c>
 800762c:	ee38 8a07 	vadd.f32	s16, s16, s14
 8007630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007634:	ee28 8a27 	vmul.f32	s16, s16, s15
 8007638:	eeb0 0a48 	vmov.f32	s0, s16
 800763c:	f140 8091 	bpl.w	8007762 <neai_anomalydetection_detect+0x252>
 8007640:	f004 fdf0 	bl	800c224 <expf>
 8007644:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8007648:	ee30 7a28 	vadd.f32	s14, s0, s17
 800764c:	ed9f 9a94 	vldr	s18, [pc, #592]	@ 80078a0 <neai_anomalydetection_detect+0x390>
 8007650:	eddf 6a94 	vldr	s13, [pc, #592]	@ 80078a4 <neai_anomalydetection_detect+0x394>
 8007654:	eec9 7a07 	vdiv.f32	s15, s18, s14
 8007658:	ee77 7aa8 	vadd.f32	s15, s15, s17
 800765c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8007660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007664:	f340 80a7 	ble.w	80077b6 <neai_anomalydetection_detect+0x2a6>
 8007668:	eeb0 0a48 	vmov.f32	s0, s16
 800766c:	f004 fdda 	bl	800c224 <expf>
 8007670:	ee30 7a28 	vadd.f32	s14, s0, s17
 8007674:	eec9 7a07 	vdiv.f32	s15, s18, s14
 8007678:	ee77 7aa8 	vadd.f32	s15, s15, s17
 800767c:	eef4 7ac9 	vcmpe.f32	s15, s18
 8007680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007684:	f340 8097 	ble.w	80077b6 <neai_anomalydetection_detect+0x2a6>
 8007688:	2364      	movs	r3, #100	@ 0x64
 800768a:	e795      	b.n	80075b8 <neai_anomalydetection_detect+0xa8>
 800768c:	4e7c      	ldr	r6, [pc, #496]	@ (8007880 <neai_anomalydetection_detect+0x370>)
 800768e:	ed9f 8a86 	vldr	s16, [pc, #536]	@ 80078a8 <neai_anomalydetection_detect+0x398>
 8007692:	f8df 9200 	ldr.w	r9, [pc, #512]	@ 8007894 <neai_anomalydetection_detect+0x384>
 8007696:	2202      	movs	r2, #2
 8007698:	701a      	strb	r2, [r3, #0]
 800769a:	f506 6780 	add.w	r7, r6, #1024	@ 0x400
 800769e:	f04f 0800 	mov.w	r8, #0
 80076a2:	ed9f 0a78 	vldr	s0, [pc, #480]	@ 8007884 <neai_anomalydetection_detect+0x374>
 80076a6:	46c2      	mov	sl, r8
 80076a8:	4633      	mov	r3, r6
 80076aa:	ecf3 7a01 	vldmia	r3!, {s15}
 80076ae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80076b2:	429f      	cmp	r7, r3
 80076b4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80076b8:	d1f7      	bne.n	80076aa <neai_anomalydetection_detect+0x19a>
 80076ba:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80076be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076c2:	f100 80c1 	bmi.w	8007848 <neai_anomalydetection_detect+0x338>
 80076c6:	eef1 6ac0 	vsqrt.f32	s13, s0
 80076ca:	eef4 6ac8 	vcmpe.f32	s13, s16
 80076ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076d2:	ece9 6a01 	vstmia	r9!, {s13}
 80076d6:	dc3a      	bgt.n	800774e <neai_anomalydetection_detect+0x23e>
 80076d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80076dc:	2100      	movs	r1, #0
 80076de:	4630      	mov	r0, r6
 80076e0:	f001 f9ec 	bl	8008abc <memset>
 80076e4:	f108 0801 	add.w	r8, r8, #1
 80076e8:	f1b8 0f20 	cmp.w	r8, #32
 80076ec:	f43f af2d 	beq.w	800754a <neai_anomalydetection_detect+0x3a>
 80076f0:	f10a 0c01 	add.w	ip, sl, #1
 80076f4:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 80076f8:	f506 6100 	add.w	r1, r6, #2048	@ 0x800
 80076fc:	f5a1 6380 	sub.w	r3, r1, #1024	@ 0x400
 8007700:	eddf 6a60 	vldr	s13, [pc, #384]	@ 8007884 <neai_anomalydetection_detect+0x374>
 8007704:	4630      	mov	r0, r6
 8007706:	461a      	mov	r2, r3
 8007708:	ecf2 7a01 	vldmia	r2!, {s15}
 800770c:	ecb0 7a01 	vldmia	r0!, {s14}
 8007710:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007714:	4291      	cmp	r1, r2
 8007716:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800771a:	d1f5      	bne.n	8007708 <neai_anomalydetection_detect+0x1f8>
 800771c:	4632      	mov	r2, r6
 800771e:	ecb2 7a01 	vldmia	r2!, {s14}
 8007722:	edd3 7a00 	vldr	s15, [r3]
 8007726:	ee26 7a87 	vmul.f32	s14, s13, s14
 800772a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800772e:	ece3 7a01 	vstmia	r3!, {s15}
 8007732:	4299      	cmp	r1, r3
 8007734:	d1f3      	bne.n	800771e <neai_anomalydetection_detect+0x20e>
 8007736:	f50c 7c80 	add.w	ip, ip, #256	@ 0x100
 800773a:	f5bc 5f00 	cmp.w	ip, #8192	@ 0x2000
 800773e:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007742:	d1db      	bne.n	80076fc <neai_anomalydetection_detect+0x1ec>
 8007744:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8007748:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 800774c:	e7a9      	b.n	80076a2 <neai_anomalydetection_detect+0x192>
 800774e:	4633      	mov	r3, r6
 8007750:	ed93 7a00 	vldr	s14, [r3]
 8007754:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007758:	ece3 7a01 	vstmia	r3!, {s15}
 800775c:	429f      	cmp	r7, r3
 800775e:	d1f7      	bne.n	8007750 <neai_anomalydetection_detect+0x240>
 8007760:	e7c0      	b.n	80076e4 <neai_anomalydetection_detect+0x1d4>
 8007762:	f004 fd5f 	bl	800c224 <expf>
 8007766:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800776a:	ee30 7a28 	vadd.f32	s14, s0, s17
 800776e:	ed9f 9a4c 	vldr	s18, [pc, #304]	@ 80078a0 <neai_anomalydetection_detect+0x390>
 8007772:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80078ac <neai_anomalydetection_detect+0x39c>
 8007776:	eec9 7a07 	vdiv.f32	s15, s18, s14
 800777a:	ee77 7ae8 	vsub.f32	s15, s15, s17
 800777e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8007782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007786:	d42d      	bmi.n	80077e4 <neai_anomalydetection_detect+0x2d4>
 8007788:	eeb0 0a48 	vmov.f32	s0, s16
 800778c:	f004 fd4a 	bl	800c224 <expf>
 8007790:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8007794:	ee30 7a28 	vadd.f32	s14, s0, s17
 8007798:	ed9f 9a41 	vldr	s18, [pc, #260]	@ 80078a0 <neai_anomalydetection_detect+0x390>
 800779c:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80078ac <neai_anomalydetection_detect+0x39c>
 80077a0:	eec9 7a07 	vdiv.f32	s15, s18, s14
 80077a4:	ee77 7ae8 	vsub.f32	s15, s15, s17
 80077a8:	eef4 7ae6 	vcmpe.f32	s15, s13
 80077ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077b0:	d428      	bmi.n	8007804 <neai_anomalydetection_detect+0x2f4>
 80077b2:	2359      	movs	r3, #89	@ 0x59
 80077b4:	e700      	b.n	80075b8 <neai_anomalydetection_detect+0xa8>
 80077b6:	eeb0 0a48 	vmov.f32	s0, s16
 80077ba:	f004 fd33 	bl	800c224 <expf>
 80077be:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80077c2:	ee30 7a28 	vadd.f32	s14, s0, s17
 80077c6:	ed9f 9a36 	vldr	s18, [pc, #216]	@ 80078a0 <neai_anomalydetection_detect+0x390>
 80077ca:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80078a4 <neai_anomalydetection_detect+0x394>
 80077ce:	eec9 7a07 	vdiv.f32	s15, s18, s14
 80077d2:	ee77 7aa8 	vadd.f32	s15, s15, s17
 80077d6:	eef4 7ae6 	vcmpe.f32	s15, s13
 80077da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077de:	dc22      	bgt.n	8007826 <neai_anomalydetection_detect+0x316>
 80077e0:	235b      	movs	r3, #91	@ 0x5b
 80077e2:	e6e9      	b.n	80075b8 <neai_anomalydetection_detect+0xa8>
 80077e4:	eeb0 0a48 	vmov.f32	s0, s16
 80077e8:	f004 fd1c 	bl	800c224 <expf>
 80077ec:	ee30 7a28 	vadd.f32	s14, s0, s17
 80077f0:	eec9 7a07 	vdiv.f32	s15, s18, s14
 80077f4:	ee77 7ae8 	vsub.f32	s15, s15, s17
 80077f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80077fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007800:	d5c2      	bpl.n	8007788 <neai_anomalydetection_detect+0x278>
 8007802:	e6d8      	b.n	80075b6 <neai_anomalydetection_detect+0xa6>
 8007804:	eeb0 0a48 	vmov.f32	s0, s16
 8007808:	f004 fd0c 	bl	800c224 <expf>
 800780c:	ee30 7a28 	vadd.f32	s14, s0, s17
 8007810:	eec9 7a07 	vdiv.f32	s15, s18, s14
 8007814:	ee77 7ae8 	vsub.f32	s15, s15, s17
 8007818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800781c:	edcd 7a01 	vstr	s15, [sp, #4]
 8007820:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007824:	e6c8      	b.n	80075b8 <neai_anomalydetection_detect+0xa8>
 8007826:	eeb0 0a48 	vmov.f32	s0, s16
 800782a:	f004 fcfb 	bl	800c224 <expf>
 800782e:	ee30 7a28 	vadd.f32	s14, s0, s17
 8007832:	eec9 7a07 	vdiv.f32	s15, s18, s14
 8007836:	ee77 7aa8 	vadd.f32	s15, s15, s17
 800783a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800783e:	edcd 7a01 	vstr	s15, [sp, #4]
 8007842:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007846:	e6b7      	b.n	80075b8 <neai_anomalydetection_detect+0xa8>
 8007848:	f004 fd22 	bl	800c290 <sqrtf>
 800784c:	eef0 6a40 	vmov.f32	s13, s0
 8007850:	e73b      	b.n	80076ca <neai_anomalydetection_detect+0x1ba>
 8007852:	bf00      	nop
 8007854:	f3af 8000 	nop.w
 8007858:	c28f5c29 	.word	0xc28f5c29
 800785c:	400028f5 	.word	0x400028f5
 8007860:	a0000000 	.word	0xa0000000
 8007864:	3fb99999 	.word	0x3fb99999
 8007868:	b851eb85 	.word	0xb851eb85
 800786c:	3fe3851e 	.word	0x3fe3851e
 8007870:	200001e8 	.word	0x200001e8
 8007874:	200001ec 	.word	0x200001ec
 8007878:	200001f4 	.word	0x200001f4
 800787c:	2000001c 	.word	0x2000001c
 8007880:	200005f8 	.word	0x200005f8
 8007884:	00000000 	.word	0x00000000
 8007888:	20009cc8 	.word	0x20009cc8
 800788c:	200098c8 	.word	0x200098c8
 8007890:	3089705f 	.word	0x3089705f
 8007894:	200001f8 	.word	0x200001f8
 8007898:	3d60ff54 	.word	0x3d60ff54
 800789c:	c2200000 	.word	0xc2200000
 80078a0:	42c80000 	.word	0x42c80000
 80078a4:	42b60000 	.word	0x42b60000
 80078a8:	322bcc77 	.word	0x322bcc77
 80078ac:	42b20000 	.word	0x42b20000

080078b0 <_fminf>:
 80078b0:	f004 bd16 	b.w	800c2e0 <fminf>

080078b4 <neai_anomalydetection_init>:
 80078b4:	b510      	push	{r4, lr}
 80078b6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80078ba:	ed2d 8b02 	vpush	{d8}
 80078be:	2100      	movs	r1, #0
 80078c0:	4811      	ldr	r0, [pc, #68]	@ (8007908 <neai_anomalydetection_init+0x54>)
 80078c2:	ed9f 8a12 	vldr	s16, [pc, #72]	@ 800790c <neai_anomalydetection_init+0x58>
 80078c6:	4c12      	ldr	r4, [pc, #72]	@ (8007910 <neai_anomalydetection_init+0x5c>)
 80078c8:	f001 f8f8 	bl	8008abc <memset>
 80078cc:	4a11      	ldr	r2, [pc, #68]	@ (8007914 <neai_anomalydetection_init+0x60>)
 80078ce:	4812      	ldr	r0, [pc, #72]	@ (8007918 <neai_anomalydetection_init+0x64>)
 80078d0:	4912      	ldr	r1, [pc, #72]	@ (800791c <neai_anomalydetection_init+0x68>)
 80078d2:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8007920 <neai_anomalydetection_init+0x6c>
 80078d6:	2300      	movs	r3, #0
 80078d8:	8013      	strh	r3, [r2, #0]
 80078da:	eeb0 0a48 	vmov.f32	s0, s16
 80078de:	2201      	movs	r2, #1
 80078e0:	7002      	strb	r2, [r0, #0]
 80078e2:	700a      	strb	r2, [r1, #0]
 80078e4:	7023      	strb	r3, [r4, #0]
 80078e6:	f7ff ffe3 	bl	80078b0 <_fminf>
 80078ea:	eeb4 0a48 	vcmp.f32	s0, s16
 80078ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078f2:	bf1c      	itt	ne
 80078f4:	2081      	movne	r0, #129	@ 0x81
 80078f6:	7020      	strbne	r0, [r4, #0]
 80078f8:	ecbd 8b02 	vpop	{d8}
 80078fc:	4b09      	ldr	r3, [pc, #36]	@ (8007924 <neai_anomalydetection_init+0x70>)
 80078fe:	bf08      	it	eq
 8007900:	7820      	ldrbeq	r0, [r4, #0]
 8007902:	2200      	movs	r2, #0
 8007904:	601a      	str	r2, [r3, #0]
 8007906:	bd10      	pop	{r4, pc}
 8007908:	200005f8 	.word	0x200005f8
 800790c:	3f8ccccd 	.word	0x3f8ccccd
 8007910:	200001e8 	.word	0x200001e8
 8007914:	200001f2 	.word	0x200001f2
 8007918:	200001f4 	.word	0x200001f4
 800791c:	200001f0 	.word	0x200001f0
 8007920:	40066666 	.word	0x40066666
 8007924:	200001ec 	.word	0x200001ec

08007928 <__cvt>:
 8007928:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800792c:	ec57 6b10 	vmov	r6, r7, d0
 8007930:	2f00      	cmp	r7, #0
 8007932:	460c      	mov	r4, r1
 8007934:	4619      	mov	r1, r3
 8007936:	463b      	mov	r3, r7
 8007938:	bfbb      	ittet	lt
 800793a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800793e:	461f      	movlt	r7, r3
 8007940:	2300      	movge	r3, #0
 8007942:	232d      	movlt	r3, #45	@ 0x2d
 8007944:	700b      	strb	r3, [r1, #0]
 8007946:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007948:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800794c:	4691      	mov	r9, r2
 800794e:	f023 0820 	bic.w	r8, r3, #32
 8007952:	bfbc      	itt	lt
 8007954:	4632      	movlt	r2, r6
 8007956:	4616      	movlt	r6, r2
 8007958:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800795c:	d005      	beq.n	800796a <__cvt+0x42>
 800795e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007962:	d100      	bne.n	8007966 <__cvt+0x3e>
 8007964:	3401      	adds	r4, #1
 8007966:	2102      	movs	r1, #2
 8007968:	e000      	b.n	800796c <__cvt+0x44>
 800796a:	2103      	movs	r1, #3
 800796c:	ab03      	add	r3, sp, #12
 800796e:	9301      	str	r3, [sp, #4]
 8007970:	ab02      	add	r3, sp, #8
 8007972:	9300      	str	r3, [sp, #0]
 8007974:	ec47 6b10 	vmov	d0, r6, r7
 8007978:	4653      	mov	r3, sl
 800797a:	4622      	mov	r2, r4
 800797c:	f001 f9ec 	bl	8008d58 <_dtoa_r>
 8007980:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007984:	4605      	mov	r5, r0
 8007986:	d119      	bne.n	80079bc <__cvt+0x94>
 8007988:	f019 0f01 	tst.w	r9, #1
 800798c:	d00e      	beq.n	80079ac <__cvt+0x84>
 800798e:	eb00 0904 	add.w	r9, r0, r4
 8007992:	2200      	movs	r2, #0
 8007994:	2300      	movs	r3, #0
 8007996:	4630      	mov	r0, r6
 8007998:	4639      	mov	r1, r7
 800799a:	f7f9 f8bd 	bl	8000b18 <__aeabi_dcmpeq>
 800799e:	b108      	cbz	r0, 80079a4 <__cvt+0x7c>
 80079a0:	f8cd 900c 	str.w	r9, [sp, #12]
 80079a4:	2230      	movs	r2, #48	@ 0x30
 80079a6:	9b03      	ldr	r3, [sp, #12]
 80079a8:	454b      	cmp	r3, r9
 80079aa:	d31e      	bcc.n	80079ea <__cvt+0xc2>
 80079ac:	9b03      	ldr	r3, [sp, #12]
 80079ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80079b0:	1b5b      	subs	r3, r3, r5
 80079b2:	4628      	mov	r0, r5
 80079b4:	6013      	str	r3, [r2, #0]
 80079b6:	b004      	add	sp, #16
 80079b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079bc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80079c0:	eb00 0904 	add.w	r9, r0, r4
 80079c4:	d1e5      	bne.n	8007992 <__cvt+0x6a>
 80079c6:	7803      	ldrb	r3, [r0, #0]
 80079c8:	2b30      	cmp	r3, #48	@ 0x30
 80079ca:	d10a      	bne.n	80079e2 <__cvt+0xba>
 80079cc:	2200      	movs	r2, #0
 80079ce:	2300      	movs	r3, #0
 80079d0:	4630      	mov	r0, r6
 80079d2:	4639      	mov	r1, r7
 80079d4:	f7f9 f8a0 	bl	8000b18 <__aeabi_dcmpeq>
 80079d8:	b918      	cbnz	r0, 80079e2 <__cvt+0xba>
 80079da:	f1c4 0401 	rsb	r4, r4, #1
 80079de:	f8ca 4000 	str.w	r4, [sl]
 80079e2:	f8da 3000 	ldr.w	r3, [sl]
 80079e6:	4499      	add	r9, r3
 80079e8:	e7d3      	b.n	8007992 <__cvt+0x6a>
 80079ea:	1c59      	adds	r1, r3, #1
 80079ec:	9103      	str	r1, [sp, #12]
 80079ee:	701a      	strb	r2, [r3, #0]
 80079f0:	e7d9      	b.n	80079a6 <__cvt+0x7e>

080079f2 <__exponent>:
 80079f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079f4:	2900      	cmp	r1, #0
 80079f6:	bfba      	itte	lt
 80079f8:	4249      	neglt	r1, r1
 80079fa:	232d      	movlt	r3, #45	@ 0x2d
 80079fc:	232b      	movge	r3, #43	@ 0x2b
 80079fe:	2909      	cmp	r1, #9
 8007a00:	7002      	strb	r2, [r0, #0]
 8007a02:	7043      	strb	r3, [r0, #1]
 8007a04:	dd29      	ble.n	8007a5a <__exponent+0x68>
 8007a06:	f10d 0307 	add.w	r3, sp, #7
 8007a0a:	461d      	mov	r5, r3
 8007a0c:	270a      	movs	r7, #10
 8007a0e:	461a      	mov	r2, r3
 8007a10:	fbb1 f6f7 	udiv	r6, r1, r7
 8007a14:	fb07 1416 	mls	r4, r7, r6, r1
 8007a18:	3430      	adds	r4, #48	@ 0x30
 8007a1a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007a1e:	460c      	mov	r4, r1
 8007a20:	2c63      	cmp	r4, #99	@ 0x63
 8007a22:	f103 33ff 	add.w	r3, r3, #4294967295
 8007a26:	4631      	mov	r1, r6
 8007a28:	dcf1      	bgt.n	8007a0e <__exponent+0x1c>
 8007a2a:	3130      	adds	r1, #48	@ 0x30
 8007a2c:	1e94      	subs	r4, r2, #2
 8007a2e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007a32:	1c41      	adds	r1, r0, #1
 8007a34:	4623      	mov	r3, r4
 8007a36:	42ab      	cmp	r3, r5
 8007a38:	d30a      	bcc.n	8007a50 <__exponent+0x5e>
 8007a3a:	f10d 0309 	add.w	r3, sp, #9
 8007a3e:	1a9b      	subs	r3, r3, r2
 8007a40:	42ac      	cmp	r4, r5
 8007a42:	bf88      	it	hi
 8007a44:	2300      	movhi	r3, #0
 8007a46:	3302      	adds	r3, #2
 8007a48:	4403      	add	r3, r0
 8007a4a:	1a18      	subs	r0, r3, r0
 8007a4c:	b003      	add	sp, #12
 8007a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a50:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007a54:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007a58:	e7ed      	b.n	8007a36 <__exponent+0x44>
 8007a5a:	2330      	movs	r3, #48	@ 0x30
 8007a5c:	3130      	adds	r1, #48	@ 0x30
 8007a5e:	7083      	strb	r3, [r0, #2]
 8007a60:	70c1      	strb	r1, [r0, #3]
 8007a62:	1d03      	adds	r3, r0, #4
 8007a64:	e7f1      	b.n	8007a4a <__exponent+0x58>
	...

08007a68 <_printf_float>:
 8007a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a6c:	b08d      	sub	sp, #52	@ 0x34
 8007a6e:	460c      	mov	r4, r1
 8007a70:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007a74:	4616      	mov	r6, r2
 8007a76:	461f      	mov	r7, r3
 8007a78:	4605      	mov	r5, r0
 8007a7a:	f001 f859 	bl	8008b30 <_localeconv_r>
 8007a7e:	6803      	ldr	r3, [r0, #0]
 8007a80:	9304      	str	r3, [sp, #16]
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7f8 fc1c 	bl	80002c0 <strlen>
 8007a88:	2300      	movs	r3, #0
 8007a8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a8c:	f8d8 3000 	ldr.w	r3, [r8]
 8007a90:	9005      	str	r0, [sp, #20]
 8007a92:	3307      	adds	r3, #7
 8007a94:	f023 0307 	bic.w	r3, r3, #7
 8007a98:	f103 0208 	add.w	r2, r3, #8
 8007a9c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007aa0:	f8d4 b000 	ldr.w	fp, [r4]
 8007aa4:	f8c8 2000 	str.w	r2, [r8]
 8007aa8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007aac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007ab0:	9307      	str	r3, [sp, #28]
 8007ab2:	f8cd 8018 	str.w	r8, [sp, #24]
 8007ab6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007aba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007abe:	4b9c      	ldr	r3, [pc, #624]	@ (8007d30 <_printf_float+0x2c8>)
 8007ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ac4:	f7f9 f85a 	bl	8000b7c <__aeabi_dcmpun>
 8007ac8:	bb70      	cbnz	r0, 8007b28 <_printf_float+0xc0>
 8007aca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ace:	4b98      	ldr	r3, [pc, #608]	@ (8007d30 <_printf_float+0x2c8>)
 8007ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ad4:	f7f9 f834 	bl	8000b40 <__aeabi_dcmple>
 8007ad8:	bb30      	cbnz	r0, 8007b28 <_printf_float+0xc0>
 8007ada:	2200      	movs	r2, #0
 8007adc:	2300      	movs	r3, #0
 8007ade:	4640      	mov	r0, r8
 8007ae0:	4649      	mov	r1, r9
 8007ae2:	f7f9 f823 	bl	8000b2c <__aeabi_dcmplt>
 8007ae6:	b110      	cbz	r0, 8007aee <_printf_float+0x86>
 8007ae8:	232d      	movs	r3, #45	@ 0x2d
 8007aea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007aee:	4a91      	ldr	r2, [pc, #580]	@ (8007d34 <_printf_float+0x2cc>)
 8007af0:	4b91      	ldr	r3, [pc, #580]	@ (8007d38 <_printf_float+0x2d0>)
 8007af2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007af6:	bf94      	ite	ls
 8007af8:	4690      	movls	r8, r2
 8007afa:	4698      	movhi	r8, r3
 8007afc:	2303      	movs	r3, #3
 8007afe:	6123      	str	r3, [r4, #16]
 8007b00:	f02b 0304 	bic.w	r3, fp, #4
 8007b04:	6023      	str	r3, [r4, #0]
 8007b06:	f04f 0900 	mov.w	r9, #0
 8007b0a:	9700      	str	r7, [sp, #0]
 8007b0c:	4633      	mov	r3, r6
 8007b0e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007b10:	4621      	mov	r1, r4
 8007b12:	4628      	mov	r0, r5
 8007b14:	f000 f9d2 	bl	8007ebc <_printf_common>
 8007b18:	3001      	adds	r0, #1
 8007b1a:	f040 808d 	bne.w	8007c38 <_printf_float+0x1d0>
 8007b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8007b22:	b00d      	add	sp, #52	@ 0x34
 8007b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b28:	4642      	mov	r2, r8
 8007b2a:	464b      	mov	r3, r9
 8007b2c:	4640      	mov	r0, r8
 8007b2e:	4649      	mov	r1, r9
 8007b30:	f7f9 f824 	bl	8000b7c <__aeabi_dcmpun>
 8007b34:	b140      	cbz	r0, 8007b48 <_printf_float+0xe0>
 8007b36:	464b      	mov	r3, r9
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	bfbc      	itt	lt
 8007b3c:	232d      	movlt	r3, #45	@ 0x2d
 8007b3e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007b42:	4a7e      	ldr	r2, [pc, #504]	@ (8007d3c <_printf_float+0x2d4>)
 8007b44:	4b7e      	ldr	r3, [pc, #504]	@ (8007d40 <_printf_float+0x2d8>)
 8007b46:	e7d4      	b.n	8007af2 <_printf_float+0x8a>
 8007b48:	6863      	ldr	r3, [r4, #4]
 8007b4a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007b4e:	9206      	str	r2, [sp, #24]
 8007b50:	1c5a      	adds	r2, r3, #1
 8007b52:	d13b      	bne.n	8007bcc <_printf_float+0x164>
 8007b54:	2306      	movs	r3, #6
 8007b56:	6063      	str	r3, [r4, #4]
 8007b58:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	6022      	str	r2, [r4, #0]
 8007b60:	9303      	str	r3, [sp, #12]
 8007b62:	ab0a      	add	r3, sp, #40	@ 0x28
 8007b64:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007b68:	ab09      	add	r3, sp, #36	@ 0x24
 8007b6a:	9300      	str	r3, [sp, #0]
 8007b6c:	6861      	ldr	r1, [r4, #4]
 8007b6e:	ec49 8b10 	vmov	d0, r8, r9
 8007b72:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007b76:	4628      	mov	r0, r5
 8007b78:	f7ff fed6 	bl	8007928 <__cvt>
 8007b7c:	9b06      	ldr	r3, [sp, #24]
 8007b7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007b80:	2b47      	cmp	r3, #71	@ 0x47
 8007b82:	4680      	mov	r8, r0
 8007b84:	d129      	bne.n	8007bda <_printf_float+0x172>
 8007b86:	1cc8      	adds	r0, r1, #3
 8007b88:	db02      	blt.n	8007b90 <_printf_float+0x128>
 8007b8a:	6863      	ldr	r3, [r4, #4]
 8007b8c:	4299      	cmp	r1, r3
 8007b8e:	dd41      	ble.n	8007c14 <_printf_float+0x1ac>
 8007b90:	f1aa 0a02 	sub.w	sl, sl, #2
 8007b94:	fa5f fa8a 	uxtb.w	sl, sl
 8007b98:	3901      	subs	r1, #1
 8007b9a:	4652      	mov	r2, sl
 8007b9c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007ba0:	9109      	str	r1, [sp, #36]	@ 0x24
 8007ba2:	f7ff ff26 	bl	80079f2 <__exponent>
 8007ba6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007ba8:	1813      	adds	r3, r2, r0
 8007baa:	2a01      	cmp	r2, #1
 8007bac:	4681      	mov	r9, r0
 8007bae:	6123      	str	r3, [r4, #16]
 8007bb0:	dc02      	bgt.n	8007bb8 <_printf_float+0x150>
 8007bb2:	6822      	ldr	r2, [r4, #0]
 8007bb4:	07d2      	lsls	r2, r2, #31
 8007bb6:	d501      	bpl.n	8007bbc <_printf_float+0x154>
 8007bb8:	3301      	adds	r3, #1
 8007bba:	6123      	str	r3, [r4, #16]
 8007bbc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d0a2      	beq.n	8007b0a <_printf_float+0xa2>
 8007bc4:	232d      	movs	r3, #45	@ 0x2d
 8007bc6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bca:	e79e      	b.n	8007b0a <_printf_float+0xa2>
 8007bcc:	9a06      	ldr	r2, [sp, #24]
 8007bce:	2a47      	cmp	r2, #71	@ 0x47
 8007bd0:	d1c2      	bne.n	8007b58 <_printf_float+0xf0>
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d1c0      	bne.n	8007b58 <_printf_float+0xf0>
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e7bd      	b.n	8007b56 <_printf_float+0xee>
 8007bda:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007bde:	d9db      	bls.n	8007b98 <_printf_float+0x130>
 8007be0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007be4:	d118      	bne.n	8007c18 <_printf_float+0x1b0>
 8007be6:	2900      	cmp	r1, #0
 8007be8:	6863      	ldr	r3, [r4, #4]
 8007bea:	dd0b      	ble.n	8007c04 <_printf_float+0x19c>
 8007bec:	6121      	str	r1, [r4, #16]
 8007bee:	b913      	cbnz	r3, 8007bf6 <_printf_float+0x18e>
 8007bf0:	6822      	ldr	r2, [r4, #0]
 8007bf2:	07d0      	lsls	r0, r2, #31
 8007bf4:	d502      	bpl.n	8007bfc <_printf_float+0x194>
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	440b      	add	r3, r1
 8007bfa:	6123      	str	r3, [r4, #16]
 8007bfc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007bfe:	f04f 0900 	mov.w	r9, #0
 8007c02:	e7db      	b.n	8007bbc <_printf_float+0x154>
 8007c04:	b913      	cbnz	r3, 8007c0c <_printf_float+0x1a4>
 8007c06:	6822      	ldr	r2, [r4, #0]
 8007c08:	07d2      	lsls	r2, r2, #31
 8007c0a:	d501      	bpl.n	8007c10 <_printf_float+0x1a8>
 8007c0c:	3302      	adds	r3, #2
 8007c0e:	e7f4      	b.n	8007bfa <_printf_float+0x192>
 8007c10:	2301      	movs	r3, #1
 8007c12:	e7f2      	b.n	8007bfa <_printf_float+0x192>
 8007c14:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007c18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c1a:	4299      	cmp	r1, r3
 8007c1c:	db05      	blt.n	8007c2a <_printf_float+0x1c2>
 8007c1e:	6823      	ldr	r3, [r4, #0]
 8007c20:	6121      	str	r1, [r4, #16]
 8007c22:	07d8      	lsls	r0, r3, #31
 8007c24:	d5ea      	bpl.n	8007bfc <_printf_float+0x194>
 8007c26:	1c4b      	adds	r3, r1, #1
 8007c28:	e7e7      	b.n	8007bfa <_printf_float+0x192>
 8007c2a:	2900      	cmp	r1, #0
 8007c2c:	bfd4      	ite	le
 8007c2e:	f1c1 0202 	rsble	r2, r1, #2
 8007c32:	2201      	movgt	r2, #1
 8007c34:	4413      	add	r3, r2
 8007c36:	e7e0      	b.n	8007bfa <_printf_float+0x192>
 8007c38:	6823      	ldr	r3, [r4, #0]
 8007c3a:	055a      	lsls	r2, r3, #21
 8007c3c:	d407      	bmi.n	8007c4e <_printf_float+0x1e6>
 8007c3e:	6923      	ldr	r3, [r4, #16]
 8007c40:	4642      	mov	r2, r8
 8007c42:	4631      	mov	r1, r6
 8007c44:	4628      	mov	r0, r5
 8007c46:	47b8      	blx	r7
 8007c48:	3001      	adds	r0, #1
 8007c4a:	d12b      	bne.n	8007ca4 <_printf_float+0x23c>
 8007c4c:	e767      	b.n	8007b1e <_printf_float+0xb6>
 8007c4e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007c52:	f240 80dd 	bls.w	8007e10 <_printf_float+0x3a8>
 8007c56:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	f7f8 ff5b 	bl	8000b18 <__aeabi_dcmpeq>
 8007c62:	2800      	cmp	r0, #0
 8007c64:	d033      	beq.n	8007cce <_printf_float+0x266>
 8007c66:	4a37      	ldr	r2, [pc, #220]	@ (8007d44 <_printf_float+0x2dc>)
 8007c68:	2301      	movs	r3, #1
 8007c6a:	4631      	mov	r1, r6
 8007c6c:	4628      	mov	r0, r5
 8007c6e:	47b8      	blx	r7
 8007c70:	3001      	adds	r0, #1
 8007c72:	f43f af54 	beq.w	8007b1e <_printf_float+0xb6>
 8007c76:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007c7a:	4543      	cmp	r3, r8
 8007c7c:	db02      	blt.n	8007c84 <_printf_float+0x21c>
 8007c7e:	6823      	ldr	r3, [r4, #0]
 8007c80:	07d8      	lsls	r0, r3, #31
 8007c82:	d50f      	bpl.n	8007ca4 <_printf_float+0x23c>
 8007c84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c88:	4631      	mov	r1, r6
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	47b8      	blx	r7
 8007c8e:	3001      	adds	r0, #1
 8007c90:	f43f af45 	beq.w	8007b1e <_printf_float+0xb6>
 8007c94:	f04f 0900 	mov.w	r9, #0
 8007c98:	f108 38ff 	add.w	r8, r8, #4294967295
 8007c9c:	f104 0a1a 	add.w	sl, r4, #26
 8007ca0:	45c8      	cmp	r8, r9
 8007ca2:	dc09      	bgt.n	8007cb8 <_printf_float+0x250>
 8007ca4:	6823      	ldr	r3, [r4, #0]
 8007ca6:	079b      	lsls	r3, r3, #30
 8007ca8:	f100 8103 	bmi.w	8007eb2 <_printf_float+0x44a>
 8007cac:	68e0      	ldr	r0, [r4, #12]
 8007cae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007cb0:	4298      	cmp	r0, r3
 8007cb2:	bfb8      	it	lt
 8007cb4:	4618      	movlt	r0, r3
 8007cb6:	e734      	b.n	8007b22 <_printf_float+0xba>
 8007cb8:	2301      	movs	r3, #1
 8007cba:	4652      	mov	r2, sl
 8007cbc:	4631      	mov	r1, r6
 8007cbe:	4628      	mov	r0, r5
 8007cc0:	47b8      	blx	r7
 8007cc2:	3001      	adds	r0, #1
 8007cc4:	f43f af2b 	beq.w	8007b1e <_printf_float+0xb6>
 8007cc8:	f109 0901 	add.w	r9, r9, #1
 8007ccc:	e7e8      	b.n	8007ca0 <_printf_float+0x238>
 8007cce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	dc39      	bgt.n	8007d48 <_printf_float+0x2e0>
 8007cd4:	4a1b      	ldr	r2, [pc, #108]	@ (8007d44 <_printf_float+0x2dc>)
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	4631      	mov	r1, r6
 8007cda:	4628      	mov	r0, r5
 8007cdc:	47b8      	blx	r7
 8007cde:	3001      	adds	r0, #1
 8007ce0:	f43f af1d 	beq.w	8007b1e <_printf_float+0xb6>
 8007ce4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007ce8:	ea59 0303 	orrs.w	r3, r9, r3
 8007cec:	d102      	bne.n	8007cf4 <_printf_float+0x28c>
 8007cee:	6823      	ldr	r3, [r4, #0]
 8007cf0:	07d9      	lsls	r1, r3, #31
 8007cf2:	d5d7      	bpl.n	8007ca4 <_printf_float+0x23c>
 8007cf4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cf8:	4631      	mov	r1, r6
 8007cfa:	4628      	mov	r0, r5
 8007cfc:	47b8      	blx	r7
 8007cfe:	3001      	adds	r0, #1
 8007d00:	f43f af0d 	beq.w	8007b1e <_printf_float+0xb6>
 8007d04:	f04f 0a00 	mov.w	sl, #0
 8007d08:	f104 0b1a 	add.w	fp, r4, #26
 8007d0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d0e:	425b      	negs	r3, r3
 8007d10:	4553      	cmp	r3, sl
 8007d12:	dc01      	bgt.n	8007d18 <_printf_float+0x2b0>
 8007d14:	464b      	mov	r3, r9
 8007d16:	e793      	b.n	8007c40 <_printf_float+0x1d8>
 8007d18:	2301      	movs	r3, #1
 8007d1a:	465a      	mov	r2, fp
 8007d1c:	4631      	mov	r1, r6
 8007d1e:	4628      	mov	r0, r5
 8007d20:	47b8      	blx	r7
 8007d22:	3001      	adds	r0, #1
 8007d24:	f43f aefb 	beq.w	8007b1e <_printf_float+0xb6>
 8007d28:	f10a 0a01 	add.w	sl, sl, #1
 8007d2c:	e7ee      	b.n	8007d0c <_printf_float+0x2a4>
 8007d2e:	bf00      	nop
 8007d30:	7fefffff 	.word	0x7fefffff
 8007d34:	0800cf9c 	.word	0x0800cf9c
 8007d38:	0800cfa0 	.word	0x0800cfa0
 8007d3c:	0800cfa4 	.word	0x0800cfa4
 8007d40:	0800cfa8 	.word	0x0800cfa8
 8007d44:	0800cfac 	.word	0x0800cfac
 8007d48:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007d4a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007d4e:	4553      	cmp	r3, sl
 8007d50:	bfa8      	it	ge
 8007d52:	4653      	movge	r3, sl
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	4699      	mov	r9, r3
 8007d58:	dc36      	bgt.n	8007dc8 <_printf_float+0x360>
 8007d5a:	f04f 0b00 	mov.w	fp, #0
 8007d5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d62:	f104 021a 	add.w	r2, r4, #26
 8007d66:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007d68:	9306      	str	r3, [sp, #24]
 8007d6a:	eba3 0309 	sub.w	r3, r3, r9
 8007d6e:	455b      	cmp	r3, fp
 8007d70:	dc31      	bgt.n	8007dd6 <_printf_float+0x36e>
 8007d72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d74:	459a      	cmp	sl, r3
 8007d76:	dc3a      	bgt.n	8007dee <_printf_float+0x386>
 8007d78:	6823      	ldr	r3, [r4, #0]
 8007d7a:	07da      	lsls	r2, r3, #31
 8007d7c:	d437      	bmi.n	8007dee <_printf_float+0x386>
 8007d7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d80:	ebaa 0903 	sub.w	r9, sl, r3
 8007d84:	9b06      	ldr	r3, [sp, #24]
 8007d86:	ebaa 0303 	sub.w	r3, sl, r3
 8007d8a:	4599      	cmp	r9, r3
 8007d8c:	bfa8      	it	ge
 8007d8e:	4699      	movge	r9, r3
 8007d90:	f1b9 0f00 	cmp.w	r9, #0
 8007d94:	dc33      	bgt.n	8007dfe <_printf_float+0x396>
 8007d96:	f04f 0800 	mov.w	r8, #0
 8007d9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d9e:	f104 0b1a 	add.w	fp, r4, #26
 8007da2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007da4:	ebaa 0303 	sub.w	r3, sl, r3
 8007da8:	eba3 0309 	sub.w	r3, r3, r9
 8007dac:	4543      	cmp	r3, r8
 8007dae:	f77f af79 	ble.w	8007ca4 <_printf_float+0x23c>
 8007db2:	2301      	movs	r3, #1
 8007db4:	465a      	mov	r2, fp
 8007db6:	4631      	mov	r1, r6
 8007db8:	4628      	mov	r0, r5
 8007dba:	47b8      	blx	r7
 8007dbc:	3001      	adds	r0, #1
 8007dbe:	f43f aeae 	beq.w	8007b1e <_printf_float+0xb6>
 8007dc2:	f108 0801 	add.w	r8, r8, #1
 8007dc6:	e7ec      	b.n	8007da2 <_printf_float+0x33a>
 8007dc8:	4642      	mov	r2, r8
 8007dca:	4631      	mov	r1, r6
 8007dcc:	4628      	mov	r0, r5
 8007dce:	47b8      	blx	r7
 8007dd0:	3001      	adds	r0, #1
 8007dd2:	d1c2      	bne.n	8007d5a <_printf_float+0x2f2>
 8007dd4:	e6a3      	b.n	8007b1e <_printf_float+0xb6>
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	4631      	mov	r1, r6
 8007dda:	4628      	mov	r0, r5
 8007ddc:	9206      	str	r2, [sp, #24]
 8007dde:	47b8      	blx	r7
 8007de0:	3001      	adds	r0, #1
 8007de2:	f43f ae9c 	beq.w	8007b1e <_printf_float+0xb6>
 8007de6:	9a06      	ldr	r2, [sp, #24]
 8007de8:	f10b 0b01 	add.w	fp, fp, #1
 8007dec:	e7bb      	b.n	8007d66 <_printf_float+0x2fe>
 8007dee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007df2:	4631      	mov	r1, r6
 8007df4:	4628      	mov	r0, r5
 8007df6:	47b8      	blx	r7
 8007df8:	3001      	adds	r0, #1
 8007dfa:	d1c0      	bne.n	8007d7e <_printf_float+0x316>
 8007dfc:	e68f      	b.n	8007b1e <_printf_float+0xb6>
 8007dfe:	9a06      	ldr	r2, [sp, #24]
 8007e00:	464b      	mov	r3, r9
 8007e02:	4442      	add	r2, r8
 8007e04:	4631      	mov	r1, r6
 8007e06:	4628      	mov	r0, r5
 8007e08:	47b8      	blx	r7
 8007e0a:	3001      	adds	r0, #1
 8007e0c:	d1c3      	bne.n	8007d96 <_printf_float+0x32e>
 8007e0e:	e686      	b.n	8007b1e <_printf_float+0xb6>
 8007e10:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007e14:	f1ba 0f01 	cmp.w	sl, #1
 8007e18:	dc01      	bgt.n	8007e1e <_printf_float+0x3b6>
 8007e1a:	07db      	lsls	r3, r3, #31
 8007e1c:	d536      	bpl.n	8007e8c <_printf_float+0x424>
 8007e1e:	2301      	movs	r3, #1
 8007e20:	4642      	mov	r2, r8
 8007e22:	4631      	mov	r1, r6
 8007e24:	4628      	mov	r0, r5
 8007e26:	47b8      	blx	r7
 8007e28:	3001      	adds	r0, #1
 8007e2a:	f43f ae78 	beq.w	8007b1e <_printf_float+0xb6>
 8007e2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e32:	4631      	mov	r1, r6
 8007e34:	4628      	mov	r0, r5
 8007e36:	47b8      	blx	r7
 8007e38:	3001      	adds	r0, #1
 8007e3a:	f43f ae70 	beq.w	8007b1e <_printf_float+0xb6>
 8007e3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007e42:	2200      	movs	r2, #0
 8007e44:	2300      	movs	r3, #0
 8007e46:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e4a:	f7f8 fe65 	bl	8000b18 <__aeabi_dcmpeq>
 8007e4e:	b9c0      	cbnz	r0, 8007e82 <_printf_float+0x41a>
 8007e50:	4653      	mov	r3, sl
 8007e52:	f108 0201 	add.w	r2, r8, #1
 8007e56:	4631      	mov	r1, r6
 8007e58:	4628      	mov	r0, r5
 8007e5a:	47b8      	blx	r7
 8007e5c:	3001      	adds	r0, #1
 8007e5e:	d10c      	bne.n	8007e7a <_printf_float+0x412>
 8007e60:	e65d      	b.n	8007b1e <_printf_float+0xb6>
 8007e62:	2301      	movs	r3, #1
 8007e64:	465a      	mov	r2, fp
 8007e66:	4631      	mov	r1, r6
 8007e68:	4628      	mov	r0, r5
 8007e6a:	47b8      	blx	r7
 8007e6c:	3001      	adds	r0, #1
 8007e6e:	f43f ae56 	beq.w	8007b1e <_printf_float+0xb6>
 8007e72:	f108 0801 	add.w	r8, r8, #1
 8007e76:	45d0      	cmp	r8, sl
 8007e78:	dbf3      	blt.n	8007e62 <_printf_float+0x3fa>
 8007e7a:	464b      	mov	r3, r9
 8007e7c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007e80:	e6df      	b.n	8007c42 <_printf_float+0x1da>
 8007e82:	f04f 0800 	mov.w	r8, #0
 8007e86:	f104 0b1a 	add.w	fp, r4, #26
 8007e8a:	e7f4      	b.n	8007e76 <_printf_float+0x40e>
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	4642      	mov	r2, r8
 8007e90:	e7e1      	b.n	8007e56 <_printf_float+0x3ee>
 8007e92:	2301      	movs	r3, #1
 8007e94:	464a      	mov	r2, r9
 8007e96:	4631      	mov	r1, r6
 8007e98:	4628      	mov	r0, r5
 8007e9a:	47b8      	blx	r7
 8007e9c:	3001      	adds	r0, #1
 8007e9e:	f43f ae3e 	beq.w	8007b1e <_printf_float+0xb6>
 8007ea2:	f108 0801 	add.w	r8, r8, #1
 8007ea6:	68e3      	ldr	r3, [r4, #12]
 8007ea8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007eaa:	1a5b      	subs	r3, r3, r1
 8007eac:	4543      	cmp	r3, r8
 8007eae:	dcf0      	bgt.n	8007e92 <_printf_float+0x42a>
 8007eb0:	e6fc      	b.n	8007cac <_printf_float+0x244>
 8007eb2:	f04f 0800 	mov.w	r8, #0
 8007eb6:	f104 0919 	add.w	r9, r4, #25
 8007eba:	e7f4      	b.n	8007ea6 <_printf_float+0x43e>

08007ebc <_printf_common>:
 8007ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ec0:	4616      	mov	r6, r2
 8007ec2:	4698      	mov	r8, r3
 8007ec4:	688a      	ldr	r2, [r1, #8]
 8007ec6:	690b      	ldr	r3, [r1, #16]
 8007ec8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	bfb8      	it	lt
 8007ed0:	4613      	movlt	r3, r2
 8007ed2:	6033      	str	r3, [r6, #0]
 8007ed4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007ed8:	4607      	mov	r7, r0
 8007eda:	460c      	mov	r4, r1
 8007edc:	b10a      	cbz	r2, 8007ee2 <_printf_common+0x26>
 8007ede:	3301      	adds	r3, #1
 8007ee0:	6033      	str	r3, [r6, #0]
 8007ee2:	6823      	ldr	r3, [r4, #0]
 8007ee4:	0699      	lsls	r1, r3, #26
 8007ee6:	bf42      	ittt	mi
 8007ee8:	6833      	ldrmi	r3, [r6, #0]
 8007eea:	3302      	addmi	r3, #2
 8007eec:	6033      	strmi	r3, [r6, #0]
 8007eee:	6825      	ldr	r5, [r4, #0]
 8007ef0:	f015 0506 	ands.w	r5, r5, #6
 8007ef4:	d106      	bne.n	8007f04 <_printf_common+0x48>
 8007ef6:	f104 0a19 	add.w	sl, r4, #25
 8007efa:	68e3      	ldr	r3, [r4, #12]
 8007efc:	6832      	ldr	r2, [r6, #0]
 8007efe:	1a9b      	subs	r3, r3, r2
 8007f00:	42ab      	cmp	r3, r5
 8007f02:	dc26      	bgt.n	8007f52 <_printf_common+0x96>
 8007f04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007f08:	6822      	ldr	r2, [r4, #0]
 8007f0a:	3b00      	subs	r3, #0
 8007f0c:	bf18      	it	ne
 8007f0e:	2301      	movne	r3, #1
 8007f10:	0692      	lsls	r2, r2, #26
 8007f12:	d42b      	bmi.n	8007f6c <_printf_common+0xb0>
 8007f14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007f18:	4641      	mov	r1, r8
 8007f1a:	4638      	mov	r0, r7
 8007f1c:	47c8      	blx	r9
 8007f1e:	3001      	adds	r0, #1
 8007f20:	d01e      	beq.n	8007f60 <_printf_common+0xa4>
 8007f22:	6823      	ldr	r3, [r4, #0]
 8007f24:	6922      	ldr	r2, [r4, #16]
 8007f26:	f003 0306 	and.w	r3, r3, #6
 8007f2a:	2b04      	cmp	r3, #4
 8007f2c:	bf02      	ittt	eq
 8007f2e:	68e5      	ldreq	r5, [r4, #12]
 8007f30:	6833      	ldreq	r3, [r6, #0]
 8007f32:	1aed      	subeq	r5, r5, r3
 8007f34:	68a3      	ldr	r3, [r4, #8]
 8007f36:	bf0c      	ite	eq
 8007f38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f3c:	2500      	movne	r5, #0
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	bfc4      	itt	gt
 8007f42:	1a9b      	subgt	r3, r3, r2
 8007f44:	18ed      	addgt	r5, r5, r3
 8007f46:	2600      	movs	r6, #0
 8007f48:	341a      	adds	r4, #26
 8007f4a:	42b5      	cmp	r5, r6
 8007f4c:	d11a      	bne.n	8007f84 <_printf_common+0xc8>
 8007f4e:	2000      	movs	r0, #0
 8007f50:	e008      	b.n	8007f64 <_printf_common+0xa8>
 8007f52:	2301      	movs	r3, #1
 8007f54:	4652      	mov	r2, sl
 8007f56:	4641      	mov	r1, r8
 8007f58:	4638      	mov	r0, r7
 8007f5a:	47c8      	blx	r9
 8007f5c:	3001      	adds	r0, #1
 8007f5e:	d103      	bne.n	8007f68 <_printf_common+0xac>
 8007f60:	f04f 30ff 	mov.w	r0, #4294967295
 8007f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f68:	3501      	adds	r5, #1
 8007f6a:	e7c6      	b.n	8007efa <_printf_common+0x3e>
 8007f6c:	18e1      	adds	r1, r4, r3
 8007f6e:	1c5a      	adds	r2, r3, #1
 8007f70:	2030      	movs	r0, #48	@ 0x30
 8007f72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007f76:	4422      	add	r2, r4
 8007f78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007f7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007f80:	3302      	adds	r3, #2
 8007f82:	e7c7      	b.n	8007f14 <_printf_common+0x58>
 8007f84:	2301      	movs	r3, #1
 8007f86:	4622      	mov	r2, r4
 8007f88:	4641      	mov	r1, r8
 8007f8a:	4638      	mov	r0, r7
 8007f8c:	47c8      	blx	r9
 8007f8e:	3001      	adds	r0, #1
 8007f90:	d0e6      	beq.n	8007f60 <_printf_common+0xa4>
 8007f92:	3601      	adds	r6, #1
 8007f94:	e7d9      	b.n	8007f4a <_printf_common+0x8e>
	...

08007f98 <_printf_i>:
 8007f98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f9c:	7e0f      	ldrb	r7, [r1, #24]
 8007f9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007fa0:	2f78      	cmp	r7, #120	@ 0x78
 8007fa2:	4691      	mov	r9, r2
 8007fa4:	4680      	mov	r8, r0
 8007fa6:	460c      	mov	r4, r1
 8007fa8:	469a      	mov	sl, r3
 8007faa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007fae:	d807      	bhi.n	8007fc0 <_printf_i+0x28>
 8007fb0:	2f62      	cmp	r7, #98	@ 0x62
 8007fb2:	d80a      	bhi.n	8007fca <_printf_i+0x32>
 8007fb4:	2f00      	cmp	r7, #0
 8007fb6:	f000 80d2 	beq.w	800815e <_printf_i+0x1c6>
 8007fba:	2f58      	cmp	r7, #88	@ 0x58
 8007fbc:	f000 80b9 	beq.w	8008132 <_printf_i+0x19a>
 8007fc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007fc4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007fc8:	e03a      	b.n	8008040 <_printf_i+0xa8>
 8007fca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007fce:	2b15      	cmp	r3, #21
 8007fd0:	d8f6      	bhi.n	8007fc0 <_printf_i+0x28>
 8007fd2:	a101      	add	r1, pc, #4	@ (adr r1, 8007fd8 <_printf_i+0x40>)
 8007fd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007fd8:	08008031 	.word	0x08008031
 8007fdc:	08008045 	.word	0x08008045
 8007fe0:	08007fc1 	.word	0x08007fc1
 8007fe4:	08007fc1 	.word	0x08007fc1
 8007fe8:	08007fc1 	.word	0x08007fc1
 8007fec:	08007fc1 	.word	0x08007fc1
 8007ff0:	08008045 	.word	0x08008045
 8007ff4:	08007fc1 	.word	0x08007fc1
 8007ff8:	08007fc1 	.word	0x08007fc1
 8007ffc:	08007fc1 	.word	0x08007fc1
 8008000:	08007fc1 	.word	0x08007fc1
 8008004:	08008145 	.word	0x08008145
 8008008:	0800806f 	.word	0x0800806f
 800800c:	080080ff 	.word	0x080080ff
 8008010:	08007fc1 	.word	0x08007fc1
 8008014:	08007fc1 	.word	0x08007fc1
 8008018:	08008167 	.word	0x08008167
 800801c:	08007fc1 	.word	0x08007fc1
 8008020:	0800806f 	.word	0x0800806f
 8008024:	08007fc1 	.word	0x08007fc1
 8008028:	08007fc1 	.word	0x08007fc1
 800802c:	08008107 	.word	0x08008107
 8008030:	6833      	ldr	r3, [r6, #0]
 8008032:	1d1a      	adds	r2, r3, #4
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	6032      	str	r2, [r6, #0]
 8008038:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800803c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008040:	2301      	movs	r3, #1
 8008042:	e09d      	b.n	8008180 <_printf_i+0x1e8>
 8008044:	6833      	ldr	r3, [r6, #0]
 8008046:	6820      	ldr	r0, [r4, #0]
 8008048:	1d19      	adds	r1, r3, #4
 800804a:	6031      	str	r1, [r6, #0]
 800804c:	0606      	lsls	r6, r0, #24
 800804e:	d501      	bpl.n	8008054 <_printf_i+0xbc>
 8008050:	681d      	ldr	r5, [r3, #0]
 8008052:	e003      	b.n	800805c <_printf_i+0xc4>
 8008054:	0645      	lsls	r5, r0, #25
 8008056:	d5fb      	bpl.n	8008050 <_printf_i+0xb8>
 8008058:	f9b3 5000 	ldrsh.w	r5, [r3]
 800805c:	2d00      	cmp	r5, #0
 800805e:	da03      	bge.n	8008068 <_printf_i+0xd0>
 8008060:	232d      	movs	r3, #45	@ 0x2d
 8008062:	426d      	negs	r5, r5
 8008064:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008068:	4859      	ldr	r0, [pc, #356]	@ (80081d0 <_printf_i+0x238>)
 800806a:	230a      	movs	r3, #10
 800806c:	e011      	b.n	8008092 <_printf_i+0xfa>
 800806e:	6821      	ldr	r1, [r4, #0]
 8008070:	6833      	ldr	r3, [r6, #0]
 8008072:	0608      	lsls	r0, r1, #24
 8008074:	f853 5b04 	ldr.w	r5, [r3], #4
 8008078:	d402      	bmi.n	8008080 <_printf_i+0xe8>
 800807a:	0649      	lsls	r1, r1, #25
 800807c:	bf48      	it	mi
 800807e:	b2ad      	uxthmi	r5, r5
 8008080:	2f6f      	cmp	r7, #111	@ 0x6f
 8008082:	4853      	ldr	r0, [pc, #332]	@ (80081d0 <_printf_i+0x238>)
 8008084:	6033      	str	r3, [r6, #0]
 8008086:	bf14      	ite	ne
 8008088:	230a      	movne	r3, #10
 800808a:	2308      	moveq	r3, #8
 800808c:	2100      	movs	r1, #0
 800808e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008092:	6866      	ldr	r6, [r4, #4]
 8008094:	60a6      	str	r6, [r4, #8]
 8008096:	2e00      	cmp	r6, #0
 8008098:	bfa2      	ittt	ge
 800809a:	6821      	ldrge	r1, [r4, #0]
 800809c:	f021 0104 	bicge.w	r1, r1, #4
 80080a0:	6021      	strge	r1, [r4, #0]
 80080a2:	b90d      	cbnz	r5, 80080a8 <_printf_i+0x110>
 80080a4:	2e00      	cmp	r6, #0
 80080a6:	d04b      	beq.n	8008140 <_printf_i+0x1a8>
 80080a8:	4616      	mov	r6, r2
 80080aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80080ae:	fb03 5711 	mls	r7, r3, r1, r5
 80080b2:	5dc7      	ldrb	r7, [r0, r7]
 80080b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80080b8:	462f      	mov	r7, r5
 80080ba:	42bb      	cmp	r3, r7
 80080bc:	460d      	mov	r5, r1
 80080be:	d9f4      	bls.n	80080aa <_printf_i+0x112>
 80080c0:	2b08      	cmp	r3, #8
 80080c2:	d10b      	bne.n	80080dc <_printf_i+0x144>
 80080c4:	6823      	ldr	r3, [r4, #0]
 80080c6:	07df      	lsls	r7, r3, #31
 80080c8:	d508      	bpl.n	80080dc <_printf_i+0x144>
 80080ca:	6923      	ldr	r3, [r4, #16]
 80080cc:	6861      	ldr	r1, [r4, #4]
 80080ce:	4299      	cmp	r1, r3
 80080d0:	bfde      	ittt	le
 80080d2:	2330      	movle	r3, #48	@ 0x30
 80080d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80080d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80080dc:	1b92      	subs	r2, r2, r6
 80080de:	6122      	str	r2, [r4, #16]
 80080e0:	f8cd a000 	str.w	sl, [sp]
 80080e4:	464b      	mov	r3, r9
 80080e6:	aa03      	add	r2, sp, #12
 80080e8:	4621      	mov	r1, r4
 80080ea:	4640      	mov	r0, r8
 80080ec:	f7ff fee6 	bl	8007ebc <_printf_common>
 80080f0:	3001      	adds	r0, #1
 80080f2:	d14a      	bne.n	800818a <_printf_i+0x1f2>
 80080f4:	f04f 30ff 	mov.w	r0, #4294967295
 80080f8:	b004      	add	sp, #16
 80080fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080fe:	6823      	ldr	r3, [r4, #0]
 8008100:	f043 0320 	orr.w	r3, r3, #32
 8008104:	6023      	str	r3, [r4, #0]
 8008106:	4833      	ldr	r0, [pc, #204]	@ (80081d4 <_printf_i+0x23c>)
 8008108:	2778      	movs	r7, #120	@ 0x78
 800810a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800810e:	6823      	ldr	r3, [r4, #0]
 8008110:	6831      	ldr	r1, [r6, #0]
 8008112:	061f      	lsls	r7, r3, #24
 8008114:	f851 5b04 	ldr.w	r5, [r1], #4
 8008118:	d402      	bmi.n	8008120 <_printf_i+0x188>
 800811a:	065f      	lsls	r7, r3, #25
 800811c:	bf48      	it	mi
 800811e:	b2ad      	uxthmi	r5, r5
 8008120:	6031      	str	r1, [r6, #0]
 8008122:	07d9      	lsls	r1, r3, #31
 8008124:	bf44      	itt	mi
 8008126:	f043 0320 	orrmi.w	r3, r3, #32
 800812a:	6023      	strmi	r3, [r4, #0]
 800812c:	b11d      	cbz	r5, 8008136 <_printf_i+0x19e>
 800812e:	2310      	movs	r3, #16
 8008130:	e7ac      	b.n	800808c <_printf_i+0xf4>
 8008132:	4827      	ldr	r0, [pc, #156]	@ (80081d0 <_printf_i+0x238>)
 8008134:	e7e9      	b.n	800810a <_printf_i+0x172>
 8008136:	6823      	ldr	r3, [r4, #0]
 8008138:	f023 0320 	bic.w	r3, r3, #32
 800813c:	6023      	str	r3, [r4, #0]
 800813e:	e7f6      	b.n	800812e <_printf_i+0x196>
 8008140:	4616      	mov	r6, r2
 8008142:	e7bd      	b.n	80080c0 <_printf_i+0x128>
 8008144:	6833      	ldr	r3, [r6, #0]
 8008146:	6825      	ldr	r5, [r4, #0]
 8008148:	6961      	ldr	r1, [r4, #20]
 800814a:	1d18      	adds	r0, r3, #4
 800814c:	6030      	str	r0, [r6, #0]
 800814e:	062e      	lsls	r6, r5, #24
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	d501      	bpl.n	8008158 <_printf_i+0x1c0>
 8008154:	6019      	str	r1, [r3, #0]
 8008156:	e002      	b.n	800815e <_printf_i+0x1c6>
 8008158:	0668      	lsls	r0, r5, #25
 800815a:	d5fb      	bpl.n	8008154 <_printf_i+0x1bc>
 800815c:	8019      	strh	r1, [r3, #0]
 800815e:	2300      	movs	r3, #0
 8008160:	6123      	str	r3, [r4, #16]
 8008162:	4616      	mov	r6, r2
 8008164:	e7bc      	b.n	80080e0 <_printf_i+0x148>
 8008166:	6833      	ldr	r3, [r6, #0]
 8008168:	1d1a      	adds	r2, r3, #4
 800816a:	6032      	str	r2, [r6, #0]
 800816c:	681e      	ldr	r6, [r3, #0]
 800816e:	6862      	ldr	r2, [r4, #4]
 8008170:	2100      	movs	r1, #0
 8008172:	4630      	mov	r0, r6
 8008174:	f7f8 f854 	bl	8000220 <memchr>
 8008178:	b108      	cbz	r0, 800817e <_printf_i+0x1e6>
 800817a:	1b80      	subs	r0, r0, r6
 800817c:	6060      	str	r0, [r4, #4]
 800817e:	6863      	ldr	r3, [r4, #4]
 8008180:	6123      	str	r3, [r4, #16]
 8008182:	2300      	movs	r3, #0
 8008184:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008188:	e7aa      	b.n	80080e0 <_printf_i+0x148>
 800818a:	6923      	ldr	r3, [r4, #16]
 800818c:	4632      	mov	r2, r6
 800818e:	4649      	mov	r1, r9
 8008190:	4640      	mov	r0, r8
 8008192:	47d0      	blx	sl
 8008194:	3001      	adds	r0, #1
 8008196:	d0ad      	beq.n	80080f4 <_printf_i+0x15c>
 8008198:	6823      	ldr	r3, [r4, #0]
 800819a:	079b      	lsls	r3, r3, #30
 800819c:	d413      	bmi.n	80081c6 <_printf_i+0x22e>
 800819e:	68e0      	ldr	r0, [r4, #12]
 80081a0:	9b03      	ldr	r3, [sp, #12]
 80081a2:	4298      	cmp	r0, r3
 80081a4:	bfb8      	it	lt
 80081a6:	4618      	movlt	r0, r3
 80081a8:	e7a6      	b.n	80080f8 <_printf_i+0x160>
 80081aa:	2301      	movs	r3, #1
 80081ac:	4632      	mov	r2, r6
 80081ae:	4649      	mov	r1, r9
 80081b0:	4640      	mov	r0, r8
 80081b2:	47d0      	blx	sl
 80081b4:	3001      	adds	r0, #1
 80081b6:	d09d      	beq.n	80080f4 <_printf_i+0x15c>
 80081b8:	3501      	adds	r5, #1
 80081ba:	68e3      	ldr	r3, [r4, #12]
 80081bc:	9903      	ldr	r1, [sp, #12]
 80081be:	1a5b      	subs	r3, r3, r1
 80081c0:	42ab      	cmp	r3, r5
 80081c2:	dcf2      	bgt.n	80081aa <_printf_i+0x212>
 80081c4:	e7eb      	b.n	800819e <_printf_i+0x206>
 80081c6:	2500      	movs	r5, #0
 80081c8:	f104 0619 	add.w	r6, r4, #25
 80081cc:	e7f5      	b.n	80081ba <_printf_i+0x222>
 80081ce:	bf00      	nop
 80081d0:	0800cfae 	.word	0x0800cfae
 80081d4:	0800cfbf 	.word	0x0800cfbf

080081d8 <_scanf_float>:
 80081d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081dc:	b087      	sub	sp, #28
 80081de:	4617      	mov	r7, r2
 80081e0:	9303      	str	r3, [sp, #12]
 80081e2:	688b      	ldr	r3, [r1, #8]
 80081e4:	1e5a      	subs	r2, r3, #1
 80081e6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80081ea:	bf81      	itttt	hi
 80081ec:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80081f0:	eb03 0b05 	addhi.w	fp, r3, r5
 80081f4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80081f8:	608b      	strhi	r3, [r1, #8]
 80081fa:	680b      	ldr	r3, [r1, #0]
 80081fc:	460a      	mov	r2, r1
 80081fe:	f04f 0500 	mov.w	r5, #0
 8008202:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008206:	f842 3b1c 	str.w	r3, [r2], #28
 800820a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800820e:	4680      	mov	r8, r0
 8008210:	460c      	mov	r4, r1
 8008212:	bf98      	it	ls
 8008214:	f04f 0b00 	movls.w	fp, #0
 8008218:	9201      	str	r2, [sp, #4]
 800821a:	4616      	mov	r6, r2
 800821c:	46aa      	mov	sl, r5
 800821e:	46a9      	mov	r9, r5
 8008220:	9502      	str	r5, [sp, #8]
 8008222:	68a2      	ldr	r2, [r4, #8]
 8008224:	b152      	cbz	r2, 800823c <_scanf_float+0x64>
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	2b4e      	cmp	r3, #78	@ 0x4e
 800822c:	d864      	bhi.n	80082f8 <_scanf_float+0x120>
 800822e:	2b40      	cmp	r3, #64	@ 0x40
 8008230:	d83c      	bhi.n	80082ac <_scanf_float+0xd4>
 8008232:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008236:	b2c8      	uxtb	r0, r1
 8008238:	280e      	cmp	r0, #14
 800823a:	d93a      	bls.n	80082b2 <_scanf_float+0xda>
 800823c:	f1b9 0f00 	cmp.w	r9, #0
 8008240:	d003      	beq.n	800824a <_scanf_float+0x72>
 8008242:	6823      	ldr	r3, [r4, #0]
 8008244:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008248:	6023      	str	r3, [r4, #0]
 800824a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800824e:	f1ba 0f01 	cmp.w	sl, #1
 8008252:	f200 8117 	bhi.w	8008484 <_scanf_float+0x2ac>
 8008256:	9b01      	ldr	r3, [sp, #4]
 8008258:	429e      	cmp	r6, r3
 800825a:	f200 8108 	bhi.w	800846e <_scanf_float+0x296>
 800825e:	2001      	movs	r0, #1
 8008260:	b007      	add	sp, #28
 8008262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008266:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800826a:	2a0d      	cmp	r2, #13
 800826c:	d8e6      	bhi.n	800823c <_scanf_float+0x64>
 800826e:	a101      	add	r1, pc, #4	@ (adr r1, 8008274 <_scanf_float+0x9c>)
 8008270:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008274:	080083bb 	.word	0x080083bb
 8008278:	0800823d 	.word	0x0800823d
 800827c:	0800823d 	.word	0x0800823d
 8008280:	0800823d 	.word	0x0800823d
 8008284:	0800841b 	.word	0x0800841b
 8008288:	080083f3 	.word	0x080083f3
 800828c:	0800823d 	.word	0x0800823d
 8008290:	0800823d 	.word	0x0800823d
 8008294:	080083c9 	.word	0x080083c9
 8008298:	0800823d 	.word	0x0800823d
 800829c:	0800823d 	.word	0x0800823d
 80082a0:	0800823d 	.word	0x0800823d
 80082a4:	0800823d 	.word	0x0800823d
 80082a8:	08008381 	.word	0x08008381
 80082ac:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80082b0:	e7db      	b.n	800826a <_scanf_float+0x92>
 80082b2:	290e      	cmp	r1, #14
 80082b4:	d8c2      	bhi.n	800823c <_scanf_float+0x64>
 80082b6:	a001      	add	r0, pc, #4	@ (adr r0, 80082bc <_scanf_float+0xe4>)
 80082b8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80082bc:	08008371 	.word	0x08008371
 80082c0:	0800823d 	.word	0x0800823d
 80082c4:	08008371 	.word	0x08008371
 80082c8:	08008407 	.word	0x08008407
 80082cc:	0800823d 	.word	0x0800823d
 80082d0:	08008319 	.word	0x08008319
 80082d4:	08008357 	.word	0x08008357
 80082d8:	08008357 	.word	0x08008357
 80082dc:	08008357 	.word	0x08008357
 80082e0:	08008357 	.word	0x08008357
 80082e4:	08008357 	.word	0x08008357
 80082e8:	08008357 	.word	0x08008357
 80082ec:	08008357 	.word	0x08008357
 80082f0:	08008357 	.word	0x08008357
 80082f4:	08008357 	.word	0x08008357
 80082f8:	2b6e      	cmp	r3, #110	@ 0x6e
 80082fa:	d809      	bhi.n	8008310 <_scanf_float+0x138>
 80082fc:	2b60      	cmp	r3, #96	@ 0x60
 80082fe:	d8b2      	bhi.n	8008266 <_scanf_float+0x8e>
 8008300:	2b54      	cmp	r3, #84	@ 0x54
 8008302:	d07b      	beq.n	80083fc <_scanf_float+0x224>
 8008304:	2b59      	cmp	r3, #89	@ 0x59
 8008306:	d199      	bne.n	800823c <_scanf_float+0x64>
 8008308:	2d07      	cmp	r5, #7
 800830a:	d197      	bne.n	800823c <_scanf_float+0x64>
 800830c:	2508      	movs	r5, #8
 800830e:	e02c      	b.n	800836a <_scanf_float+0x192>
 8008310:	2b74      	cmp	r3, #116	@ 0x74
 8008312:	d073      	beq.n	80083fc <_scanf_float+0x224>
 8008314:	2b79      	cmp	r3, #121	@ 0x79
 8008316:	e7f6      	b.n	8008306 <_scanf_float+0x12e>
 8008318:	6821      	ldr	r1, [r4, #0]
 800831a:	05c8      	lsls	r0, r1, #23
 800831c:	d51b      	bpl.n	8008356 <_scanf_float+0x17e>
 800831e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008322:	6021      	str	r1, [r4, #0]
 8008324:	f109 0901 	add.w	r9, r9, #1
 8008328:	f1bb 0f00 	cmp.w	fp, #0
 800832c:	d003      	beq.n	8008336 <_scanf_float+0x15e>
 800832e:	3201      	adds	r2, #1
 8008330:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008334:	60a2      	str	r2, [r4, #8]
 8008336:	68a3      	ldr	r3, [r4, #8]
 8008338:	3b01      	subs	r3, #1
 800833a:	60a3      	str	r3, [r4, #8]
 800833c:	6923      	ldr	r3, [r4, #16]
 800833e:	3301      	adds	r3, #1
 8008340:	6123      	str	r3, [r4, #16]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	3b01      	subs	r3, #1
 8008346:	2b00      	cmp	r3, #0
 8008348:	607b      	str	r3, [r7, #4]
 800834a:	f340 8087 	ble.w	800845c <_scanf_float+0x284>
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	3301      	adds	r3, #1
 8008352:	603b      	str	r3, [r7, #0]
 8008354:	e765      	b.n	8008222 <_scanf_float+0x4a>
 8008356:	eb1a 0105 	adds.w	r1, sl, r5
 800835a:	f47f af6f 	bne.w	800823c <_scanf_float+0x64>
 800835e:	6822      	ldr	r2, [r4, #0]
 8008360:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008364:	6022      	str	r2, [r4, #0]
 8008366:	460d      	mov	r5, r1
 8008368:	468a      	mov	sl, r1
 800836a:	f806 3b01 	strb.w	r3, [r6], #1
 800836e:	e7e2      	b.n	8008336 <_scanf_float+0x15e>
 8008370:	6822      	ldr	r2, [r4, #0]
 8008372:	0610      	lsls	r0, r2, #24
 8008374:	f57f af62 	bpl.w	800823c <_scanf_float+0x64>
 8008378:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800837c:	6022      	str	r2, [r4, #0]
 800837e:	e7f4      	b.n	800836a <_scanf_float+0x192>
 8008380:	f1ba 0f00 	cmp.w	sl, #0
 8008384:	d10e      	bne.n	80083a4 <_scanf_float+0x1cc>
 8008386:	f1b9 0f00 	cmp.w	r9, #0
 800838a:	d10e      	bne.n	80083aa <_scanf_float+0x1d2>
 800838c:	6822      	ldr	r2, [r4, #0]
 800838e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008392:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008396:	d108      	bne.n	80083aa <_scanf_float+0x1d2>
 8008398:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800839c:	6022      	str	r2, [r4, #0]
 800839e:	f04f 0a01 	mov.w	sl, #1
 80083a2:	e7e2      	b.n	800836a <_scanf_float+0x192>
 80083a4:	f1ba 0f02 	cmp.w	sl, #2
 80083a8:	d055      	beq.n	8008456 <_scanf_float+0x27e>
 80083aa:	2d01      	cmp	r5, #1
 80083ac:	d002      	beq.n	80083b4 <_scanf_float+0x1dc>
 80083ae:	2d04      	cmp	r5, #4
 80083b0:	f47f af44 	bne.w	800823c <_scanf_float+0x64>
 80083b4:	3501      	adds	r5, #1
 80083b6:	b2ed      	uxtb	r5, r5
 80083b8:	e7d7      	b.n	800836a <_scanf_float+0x192>
 80083ba:	f1ba 0f01 	cmp.w	sl, #1
 80083be:	f47f af3d 	bne.w	800823c <_scanf_float+0x64>
 80083c2:	f04f 0a02 	mov.w	sl, #2
 80083c6:	e7d0      	b.n	800836a <_scanf_float+0x192>
 80083c8:	b97d      	cbnz	r5, 80083ea <_scanf_float+0x212>
 80083ca:	f1b9 0f00 	cmp.w	r9, #0
 80083ce:	f47f af38 	bne.w	8008242 <_scanf_float+0x6a>
 80083d2:	6822      	ldr	r2, [r4, #0]
 80083d4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80083d8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80083dc:	f040 8108 	bne.w	80085f0 <_scanf_float+0x418>
 80083e0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80083e4:	6022      	str	r2, [r4, #0]
 80083e6:	2501      	movs	r5, #1
 80083e8:	e7bf      	b.n	800836a <_scanf_float+0x192>
 80083ea:	2d03      	cmp	r5, #3
 80083ec:	d0e2      	beq.n	80083b4 <_scanf_float+0x1dc>
 80083ee:	2d05      	cmp	r5, #5
 80083f0:	e7de      	b.n	80083b0 <_scanf_float+0x1d8>
 80083f2:	2d02      	cmp	r5, #2
 80083f4:	f47f af22 	bne.w	800823c <_scanf_float+0x64>
 80083f8:	2503      	movs	r5, #3
 80083fa:	e7b6      	b.n	800836a <_scanf_float+0x192>
 80083fc:	2d06      	cmp	r5, #6
 80083fe:	f47f af1d 	bne.w	800823c <_scanf_float+0x64>
 8008402:	2507      	movs	r5, #7
 8008404:	e7b1      	b.n	800836a <_scanf_float+0x192>
 8008406:	6822      	ldr	r2, [r4, #0]
 8008408:	0591      	lsls	r1, r2, #22
 800840a:	f57f af17 	bpl.w	800823c <_scanf_float+0x64>
 800840e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008412:	6022      	str	r2, [r4, #0]
 8008414:	f8cd 9008 	str.w	r9, [sp, #8]
 8008418:	e7a7      	b.n	800836a <_scanf_float+0x192>
 800841a:	6822      	ldr	r2, [r4, #0]
 800841c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008420:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008424:	d006      	beq.n	8008434 <_scanf_float+0x25c>
 8008426:	0550      	lsls	r0, r2, #21
 8008428:	f57f af08 	bpl.w	800823c <_scanf_float+0x64>
 800842c:	f1b9 0f00 	cmp.w	r9, #0
 8008430:	f000 80de 	beq.w	80085f0 <_scanf_float+0x418>
 8008434:	0591      	lsls	r1, r2, #22
 8008436:	bf58      	it	pl
 8008438:	9902      	ldrpl	r1, [sp, #8]
 800843a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800843e:	bf58      	it	pl
 8008440:	eba9 0101 	subpl.w	r1, r9, r1
 8008444:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008448:	bf58      	it	pl
 800844a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800844e:	6022      	str	r2, [r4, #0]
 8008450:	f04f 0900 	mov.w	r9, #0
 8008454:	e789      	b.n	800836a <_scanf_float+0x192>
 8008456:	f04f 0a03 	mov.w	sl, #3
 800845a:	e786      	b.n	800836a <_scanf_float+0x192>
 800845c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008460:	4639      	mov	r1, r7
 8008462:	4640      	mov	r0, r8
 8008464:	4798      	blx	r3
 8008466:	2800      	cmp	r0, #0
 8008468:	f43f aedb 	beq.w	8008222 <_scanf_float+0x4a>
 800846c:	e6e6      	b.n	800823c <_scanf_float+0x64>
 800846e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008472:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008476:	463a      	mov	r2, r7
 8008478:	4640      	mov	r0, r8
 800847a:	4798      	blx	r3
 800847c:	6923      	ldr	r3, [r4, #16]
 800847e:	3b01      	subs	r3, #1
 8008480:	6123      	str	r3, [r4, #16]
 8008482:	e6e8      	b.n	8008256 <_scanf_float+0x7e>
 8008484:	1e6b      	subs	r3, r5, #1
 8008486:	2b06      	cmp	r3, #6
 8008488:	d824      	bhi.n	80084d4 <_scanf_float+0x2fc>
 800848a:	2d02      	cmp	r5, #2
 800848c:	d836      	bhi.n	80084fc <_scanf_float+0x324>
 800848e:	9b01      	ldr	r3, [sp, #4]
 8008490:	429e      	cmp	r6, r3
 8008492:	f67f aee4 	bls.w	800825e <_scanf_float+0x86>
 8008496:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800849a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800849e:	463a      	mov	r2, r7
 80084a0:	4640      	mov	r0, r8
 80084a2:	4798      	blx	r3
 80084a4:	6923      	ldr	r3, [r4, #16]
 80084a6:	3b01      	subs	r3, #1
 80084a8:	6123      	str	r3, [r4, #16]
 80084aa:	e7f0      	b.n	800848e <_scanf_float+0x2b6>
 80084ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80084b0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80084b4:	463a      	mov	r2, r7
 80084b6:	4640      	mov	r0, r8
 80084b8:	4798      	blx	r3
 80084ba:	6923      	ldr	r3, [r4, #16]
 80084bc:	3b01      	subs	r3, #1
 80084be:	6123      	str	r3, [r4, #16]
 80084c0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80084c4:	fa5f fa8a 	uxtb.w	sl, sl
 80084c8:	f1ba 0f02 	cmp.w	sl, #2
 80084cc:	d1ee      	bne.n	80084ac <_scanf_float+0x2d4>
 80084ce:	3d03      	subs	r5, #3
 80084d0:	b2ed      	uxtb	r5, r5
 80084d2:	1b76      	subs	r6, r6, r5
 80084d4:	6823      	ldr	r3, [r4, #0]
 80084d6:	05da      	lsls	r2, r3, #23
 80084d8:	d530      	bpl.n	800853c <_scanf_float+0x364>
 80084da:	055b      	lsls	r3, r3, #21
 80084dc:	d511      	bpl.n	8008502 <_scanf_float+0x32a>
 80084de:	9b01      	ldr	r3, [sp, #4]
 80084e0:	429e      	cmp	r6, r3
 80084e2:	f67f aebc 	bls.w	800825e <_scanf_float+0x86>
 80084e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80084ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80084ee:	463a      	mov	r2, r7
 80084f0:	4640      	mov	r0, r8
 80084f2:	4798      	blx	r3
 80084f4:	6923      	ldr	r3, [r4, #16]
 80084f6:	3b01      	subs	r3, #1
 80084f8:	6123      	str	r3, [r4, #16]
 80084fa:	e7f0      	b.n	80084de <_scanf_float+0x306>
 80084fc:	46aa      	mov	sl, r5
 80084fe:	46b3      	mov	fp, r6
 8008500:	e7de      	b.n	80084c0 <_scanf_float+0x2e8>
 8008502:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008506:	6923      	ldr	r3, [r4, #16]
 8008508:	2965      	cmp	r1, #101	@ 0x65
 800850a:	f103 33ff 	add.w	r3, r3, #4294967295
 800850e:	f106 35ff 	add.w	r5, r6, #4294967295
 8008512:	6123      	str	r3, [r4, #16]
 8008514:	d00c      	beq.n	8008530 <_scanf_float+0x358>
 8008516:	2945      	cmp	r1, #69	@ 0x45
 8008518:	d00a      	beq.n	8008530 <_scanf_float+0x358>
 800851a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800851e:	463a      	mov	r2, r7
 8008520:	4640      	mov	r0, r8
 8008522:	4798      	blx	r3
 8008524:	6923      	ldr	r3, [r4, #16]
 8008526:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800852a:	3b01      	subs	r3, #1
 800852c:	1eb5      	subs	r5, r6, #2
 800852e:	6123      	str	r3, [r4, #16]
 8008530:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008534:	463a      	mov	r2, r7
 8008536:	4640      	mov	r0, r8
 8008538:	4798      	blx	r3
 800853a:	462e      	mov	r6, r5
 800853c:	6822      	ldr	r2, [r4, #0]
 800853e:	f012 0210 	ands.w	r2, r2, #16
 8008542:	d001      	beq.n	8008548 <_scanf_float+0x370>
 8008544:	2000      	movs	r0, #0
 8008546:	e68b      	b.n	8008260 <_scanf_float+0x88>
 8008548:	7032      	strb	r2, [r6, #0]
 800854a:	6823      	ldr	r3, [r4, #0]
 800854c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008550:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008554:	d11c      	bne.n	8008590 <_scanf_float+0x3b8>
 8008556:	9b02      	ldr	r3, [sp, #8]
 8008558:	454b      	cmp	r3, r9
 800855a:	eba3 0209 	sub.w	r2, r3, r9
 800855e:	d123      	bne.n	80085a8 <_scanf_float+0x3d0>
 8008560:	9901      	ldr	r1, [sp, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	4640      	mov	r0, r8
 8008566:	f002 fd6f 	bl	800b048 <_strtod_r>
 800856a:	9b03      	ldr	r3, [sp, #12]
 800856c:	6821      	ldr	r1, [r4, #0]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f011 0f02 	tst.w	r1, #2
 8008574:	ec57 6b10 	vmov	r6, r7, d0
 8008578:	f103 0204 	add.w	r2, r3, #4
 800857c:	d01f      	beq.n	80085be <_scanf_float+0x3e6>
 800857e:	9903      	ldr	r1, [sp, #12]
 8008580:	600a      	str	r2, [r1, #0]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	e9c3 6700 	strd	r6, r7, [r3]
 8008588:	68e3      	ldr	r3, [r4, #12]
 800858a:	3301      	adds	r3, #1
 800858c:	60e3      	str	r3, [r4, #12]
 800858e:	e7d9      	b.n	8008544 <_scanf_float+0x36c>
 8008590:	9b04      	ldr	r3, [sp, #16]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d0e4      	beq.n	8008560 <_scanf_float+0x388>
 8008596:	9905      	ldr	r1, [sp, #20]
 8008598:	230a      	movs	r3, #10
 800859a:	3101      	adds	r1, #1
 800859c:	4640      	mov	r0, r8
 800859e:	f002 fdd3 	bl	800b148 <_strtol_r>
 80085a2:	9b04      	ldr	r3, [sp, #16]
 80085a4:	9e05      	ldr	r6, [sp, #20]
 80085a6:	1ac2      	subs	r2, r0, r3
 80085a8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80085ac:	429e      	cmp	r6, r3
 80085ae:	bf28      	it	cs
 80085b0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80085b4:	4910      	ldr	r1, [pc, #64]	@ (80085f8 <_scanf_float+0x420>)
 80085b6:	4630      	mov	r0, r6
 80085b8:	f000 f988 	bl	80088cc <siprintf>
 80085bc:	e7d0      	b.n	8008560 <_scanf_float+0x388>
 80085be:	f011 0f04 	tst.w	r1, #4
 80085c2:	9903      	ldr	r1, [sp, #12]
 80085c4:	600a      	str	r2, [r1, #0]
 80085c6:	d1dc      	bne.n	8008582 <_scanf_float+0x3aa>
 80085c8:	681d      	ldr	r5, [r3, #0]
 80085ca:	4632      	mov	r2, r6
 80085cc:	463b      	mov	r3, r7
 80085ce:	4630      	mov	r0, r6
 80085d0:	4639      	mov	r1, r7
 80085d2:	f7f8 fad3 	bl	8000b7c <__aeabi_dcmpun>
 80085d6:	b128      	cbz	r0, 80085e4 <_scanf_float+0x40c>
 80085d8:	4808      	ldr	r0, [pc, #32]	@ (80085fc <_scanf_float+0x424>)
 80085da:	f000 fb2f 	bl	8008c3c <nanf>
 80085de:	ed85 0a00 	vstr	s0, [r5]
 80085e2:	e7d1      	b.n	8008588 <_scanf_float+0x3b0>
 80085e4:	4630      	mov	r0, r6
 80085e6:	4639      	mov	r1, r7
 80085e8:	f7f8 fb26 	bl	8000c38 <__aeabi_d2f>
 80085ec:	6028      	str	r0, [r5, #0]
 80085ee:	e7cb      	b.n	8008588 <_scanf_float+0x3b0>
 80085f0:	f04f 0900 	mov.w	r9, #0
 80085f4:	e629      	b.n	800824a <_scanf_float+0x72>
 80085f6:	bf00      	nop
 80085f8:	0800cfd0 	.word	0x0800cfd0
 80085fc:	0800d365 	.word	0x0800d365

08008600 <std>:
 8008600:	2300      	movs	r3, #0
 8008602:	b510      	push	{r4, lr}
 8008604:	4604      	mov	r4, r0
 8008606:	e9c0 3300 	strd	r3, r3, [r0]
 800860a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800860e:	6083      	str	r3, [r0, #8]
 8008610:	8181      	strh	r1, [r0, #12]
 8008612:	6643      	str	r3, [r0, #100]	@ 0x64
 8008614:	81c2      	strh	r2, [r0, #14]
 8008616:	6183      	str	r3, [r0, #24]
 8008618:	4619      	mov	r1, r3
 800861a:	2208      	movs	r2, #8
 800861c:	305c      	adds	r0, #92	@ 0x5c
 800861e:	f000 fa4d 	bl	8008abc <memset>
 8008622:	4b0d      	ldr	r3, [pc, #52]	@ (8008658 <std+0x58>)
 8008624:	6263      	str	r3, [r4, #36]	@ 0x24
 8008626:	4b0d      	ldr	r3, [pc, #52]	@ (800865c <std+0x5c>)
 8008628:	62a3      	str	r3, [r4, #40]	@ 0x28
 800862a:	4b0d      	ldr	r3, [pc, #52]	@ (8008660 <std+0x60>)
 800862c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800862e:	4b0d      	ldr	r3, [pc, #52]	@ (8008664 <std+0x64>)
 8008630:	6323      	str	r3, [r4, #48]	@ 0x30
 8008632:	4b0d      	ldr	r3, [pc, #52]	@ (8008668 <std+0x68>)
 8008634:	6224      	str	r4, [r4, #32]
 8008636:	429c      	cmp	r4, r3
 8008638:	d006      	beq.n	8008648 <std+0x48>
 800863a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800863e:	4294      	cmp	r4, r2
 8008640:	d002      	beq.n	8008648 <std+0x48>
 8008642:	33d0      	adds	r3, #208	@ 0xd0
 8008644:	429c      	cmp	r4, r3
 8008646:	d105      	bne.n	8008654 <std+0x54>
 8008648:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800864c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008650:	f000 bae2 	b.w	8008c18 <__retarget_lock_init_recursive>
 8008654:	bd10      	pop	{r4, pc}
 8008656:	bf00      	nop
 8008658:	0800890d 	.word	0x0800890d
 800865c:	0800892f 	.word	0x0800892f
 8008660:	08008967 	.word	0x08008967
 8008664:	0800898b 	.word	0x0800898b
 8008668:	20009cc8 	.word	0x20009cc8

0800866c <stdio_exit_handler>:
 800866c:	4a02      	ldr	r2, [pc, #8]	@ (8008678 <stdio_exit_handler+0xc>)
 800866e:	4903      	ldr	r1, [pc, #12]	@ (800867c <stdio_exit_handler+0x10>)
 8008670:	4803      	ldr	r0, [pc, #12]	@ (8008680 <stdio_exit_handler+0x14>)
 8008672:	f000 b869 	b.w	8008748 <_fwalk_sglue>
 8008676:	bf00      	nop
 8008678:	20000020 	.word	0x20000020
 800867c:	0800b789 	.word	0x0800b789
 8008680:	20000030 	.word	0x20000030

08008684 <cleanup_stdio>:
 8008684:	6841      	ldr	r1, [r0, #4]
 8008686:	4b0c      	ldr	r3, [pc, #48]	@ (80086b8 <cleanup_stdio+0x34>)
 8008688:	4299      	cmp	r1, r3
 800868a:	b510      	push	{r4, lr}
 800868c:	4604      	mov	r4, r0
 800868e:	d001      	beq.n	8008694 <cleanup_stdio+0x10>
 8008690:	f003 f87a 	bl	800b788 <_fflush_r>
 8008694:	68a1      	ldr	r1, [r4, #8]
 8008696:	4b09      	ldr	r3, [pc, #36]	@ (80086bc <cleanup_stdio+0x38>)
 8008698:	4299      	cmp	r1, r3
 800869a:	d002      	beq.n	80086a2 <cleanup_stdio+0x1e>
 800869c:	4620      	mov	r0, r4
 800869e:	f003 f873 	bl	800b788 <_fflush_r>
 80086a2:	68e1      	ldr	r1, [r4, #12]
 80086a4:	4b06      	ldr	r3, [pc, #24]	@ (80086c0 <cleanup_stdio+0x3c>)
 80086a6:	4299      	cmp	r1, r3
 80086a8:	d004      	beq.n	80086b4 <cleanup_stdio+0x30>
 80086aa:	4620      	mov	r0, r4
 80086ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086b0:	f003 b86a 	b.w	800b788 <_fflush_r>
 80086b4:	bd10      	pop	{r4, pc}
 80086b6:	bf00      	nop
 80086b8:	20009cc8 	.word	0x20009cc8
 80086bc:	20009d30 	.word	0x20009d30
 80086c0:	20009d98 	.word	0x20009d98

080086c4 <global_stdio_init.part.0>:
 80086c4:	b510      	push	{r4, lr}
 80086c6:	4b0b      	ldr	r3, [pc, #44]	@ (80086f4 <global_stdio_init.part.0+0x30>)
 80086c8:	4c0b      	ldr	r4, [pc, #44]	@ (80086f8 <global_stdio_init.part.0+0x34>)
 80086ca:	4a0c      	ldr	r2, [pc, #48]	@ (80086fc <global_stdio_init.part.0+0x38>)
 80086cc:	601a      	str	r2, [r3, #0]
 80086ce:	4620      	mov	r0, r4
 80086d0:	2200      	movs	r2, #0
 80086d2:	2104      	movs	r1, #4
 80086d4:	f7ff ff94 	bl	8008600 <std>
 80086d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80086dc:	2201      	movs	r2, #1
 80086de:	2109      	movs	r1, #9
 80086e0:	f7ff ff8e 	bl	8008600 <std>
 80086e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80086e8:	2202      	movs	r2, #2
 80086ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086ee:	2112      	movs	r1, #18
 80086f0:	f7ff bf86 	b.w	8008600 <std>
 80086f4:	20009e00 	.word	0x20009e00
 80086f8:	20009cc8 	.word	0x20009cc8
 80086fc:	0800866d 	.word	0x0800866d

08008700 <__sfp_lock_acquire>:
 8008700:	4801      	ldr	r0, [pc, #4]	@ (8008708 <__sfp_lock_acquire+0x8>)
 8008702:	f000 ba8a 	b.w	8008c1a <__retarget_lock_acquire_recursive>
 8008706:	bf00      	nop
 8008708:	20009e09 	.word	0x20009e09

0800870c <__sfp_lock_release>:
 800870c:	4801      	ldr	r0, [pc, #4]	@ (8008714 <__sfp_lock_release+0x8>)
 800870e:	f000 ba85 	b.w	8008c1c <__retarget_lock_release_recursive>
 8008712:	bf00      	nop
 8008714:	20009e09 	.word	0x20009e09

08008718 <__sinit>:
 8008718:	b510      	push	{r4, lr}
 800871a:	4604      	mov	r4, r0
 800871c:	f7ff fff0 	bl	8008700 <__sfp_lock_acquire>
 8008720:	6a23      	ldr	r3, [r4, #32]
 8008722:	b11b      	cbz	r3, 800872c <__sinit+0x14>
 8008724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008728:	f7ff bff0 	b.w	800870c <__sfp_lock_release>
 800872c:	4b04      	ldr	r3, [pc, #16]	@ (8008740 <__sinit+0x28>)
 800872e:	6223      	str	r3, [r4, #32]
 8008730:	4b04      	ldr	r3, [pc, #16]	@ (8008744 <__sinit+0x2c>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d1f5      	bne.n	8008724 <__sinit+0xc>
 8008738:	f7ff ffc4 	bl	80086c4 <global_stdio_init.part.0>
 800873c:	e7f2      	b.n	8008724 <__sinit+0xc>
 800873e:	bf00      	nop
 8008740:	08008685 	.word	0x08008685
 8008744:	20009e00 	.word	0x20009e00

08008748 <_fwalk_sglue>:
 8008748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800874c:	4607      	mov	r7, r0
 800874e:	4688      	mov	r8, r1
 8008750:	4614      	mov	r4, r2
 8008752:	2600      	movs	r6, #0
 8008754:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008758:	f1b9 0901 	subs.w	r9, r9, #1
 800875c:	d505      	bpl.n	800876a <_fwalk_sglue+0x22>
 800875e:	6824      	ldr	r4, [r4, #0]
 8008760:	2c00      	cmp	r4, #0
 8008762:	d1f7      	bne.n	8008754 <_fwalk_sglue+0xc>
 8008764:	4630      	mov	r0, r6
 8008766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800876a:	89ab      	ldrh	r3, [r5, #12]
 800876c:	2b01      	cmp	r3, #1
 800876e:	d907      	bls.n	8008780 <_fwalk_sglue+0x38>
 8008770:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008774:	3301      	adds	r3, #1
 8008776:	d003      	beq.n	8008780 <_fwalk_sglue+0x38>
 8008778:	4629      	mov	r1, r5
 800877a:	4638      	mov	r0, r7
 800877c:	47c0      	blx	r8
 800877e:	4306      	orrs	r6, r0
 8008780:	3568      	adds	r5, #104	@ 0x68
 8008782:	e7e9      	b.n	8008758 <_fwalk_sglue+0x10>

08008784 <iprintf>:
 8008784:	b40f      	push	{r0, r1, r2, r3}
 8008786:	b507      	push	{r0, r1, r2, lr}
 8008788:	4906      	ldr	r1, [pc, #24]	@ (80087a4 <iprintf+0x20>)
 800878a:	ab04      	add	r3, sp, #16
 800878c:	6808      	ldr	r0, [r1, #0]
 800878e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008792:	6881      	ldr	r1, [r0, #8]
 8008794:	9301      	str	r3, [sp, #4]
 8008796:	f002 fe5b 	bl	800b450 <_vfiprintf_r>
 800879a:	b003      	add	sp, #12
 800879c:	f85d eb04 	ldr.w	lr, [sp], #4
 80087a0:	b004      	add	sp, #16
 80087a2:	4770      	bx	lr
 80087a4:	2000002c 	.word	0x2000002c

080087a8 <_puts_r>:
 80087a8:	6a03      	ldr	r3, [r0, #32]
 80087aa:	b570      	push	{r4, r5, r6, lr}
 80087ac:	6884      	ldr	r4, [r0, #8]
 80087ae:	4605      	mov	r5, r0
 80087b0:	460e      	mov	r6, r1
 80087b2:	b90b      	cbnz	r3, 80087b8 <_puts_r+0x10>
 80087b4:	f7ff ffb0 	bl	8008718 <__sinit>
 80087b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80087ba:	07db      	lsls	r3, r3, #31
 80087bc:	d405      	bmi.n	80087ca <_puts_r+0x22>
 80087be:	89a3      	ldrh	r3, [r4, #12]
 80087c0:	0598      	lsls	r0, r3, #22
 80087c2:	d402      	bmi.n	80087ca <_puts_r+0x22>
 80087c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087c6:	f000 fa28 	bl	8008c1a <__retarget_lock_acquire_recursive>
 80087ca:	89a3      	ldrh	r3, [r4, #12]
 80087cc:	0719      	lsls	r1, r3, #28
 80087ce:	d502      	bpl.n	80087d6 <_puts_r+0x2e>
 80087d0:	6923      	ldr	r3, [r4, #16]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d135      	bne.n	8008842 <_puts_r+0x9a>
 80087d6:	4621      	mov	r1, r4
 80087d8:	4628      	mov	r0, r5
 80087da:	f000 f919 	bl	8008a10 <__swsetup_r>
 80087de:	b380      	cbz	r0, 8008842 <_puts_r+0x9a>
 80087e0:	f04f 35ff 	mov.w	r5, #4294967295
 80087e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80087e6:	07da      	lsls	r2, r3, #31
 80087e8:	d405      	bmi.n	80087f6 <_puts_r+0x4e>
 80087ea:	89a3      	ldrh	r3, [r4, #12]
 80087ec:	059b      	lsls	r3, r3, #22
 80087ee:	d402      	bmi.n	80087f6 <_puts_r+0x4e>
 80087f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087f2:	f000 fa13 	bl	8008c1c <__retarget_lock_release_recursive>
 80087f6:	4628      	mov	r0, r5
 80087f8:	bd70      	pop	{r4, r5, r6, pc}
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	da04      	bge.n	8008808 <_puts_r+0x60>
 80087fe:	69a2      	ldr	r2, [r4, #24]
 8008800:	429a      	cmp	r2, r3
 8008802:	dc17      	bgt.n	8008834 <_puts_r+0x8c>
 8008804:	290a      	cmp	r1, #10
 8008806:	d015      	beq.n	8008834 <_puts_r+0x8c>
 8008808:	6823      	ldr	r3, [r4, #0]
 800880a:	1c5a      	adds	r2, r3, #1
 800880c:	6022      	str	r2, [r4, #0]
 800880e:	7019      	strb	r1, [r3, #0]
 8008810:	68a3      	ldr	r3, [r4, #8]
 8008812:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008816:	3b01      	subs	r3, #1
 8008818:	60a3      	str	r3, [r4, #8]
 800881a:	2900      	cmp	r1, #0
 800881c:	d1ed      	bne.n	80087fa <_puts_r+0x52>
 800881e:	2b00      	cmp	r3, #0
 8008820:	da11      	bge.n	8008846 <_puts_r+0x9e>
 8008822:	4622      	mov	r2, r4
 8008824:	210a      	movs	r1, #10
 8008826:	4628      	mov	r0, r5
 8008828:	f000 f8b3 	bl	8008992 <__swbuf_r>
 800882c:	3001      	adds	r0, #1
 800882e:	d0d7      	beq.n	80087e0 <_puts_r+0x38>
 8008830:	250a      	movs	r5, #10
 8008832:	e7d7      	b.n	80087e4 <_puts_r+0x3c>
 8008834:	4622      	mov	r2, r4
 8008836:	4628      	mov	r0, r5
 8008838:	f000 f8ab 	bl	8008992 <__swbuf_r>
 800883c:	3001      	adds	r0, #1
 800883e:	d1e7      	bne.n	8008810 <_puts_r+0x68>
 8008840:	e7ce      	b.n	80087e0 <_puts_r+0x38>
 8008842:	3e01      	subs	r6, #1
 8008844:	e7e4      	b.n	8008810 <_puts_r+0x68>
 8008846:	6823      	ldr	r3, [r4, #0]
 8008848:	1c5a      	adds	r2, r3, #1
 800884a:	6022      	str	r2, [r4, #0]
 800884c:	220a      	movs	r2, #10
 800884e:	701a      	strb	r2, [r3, #0]
 8008850:	e7ee      	b.n	8008830 <_puts_r+0x88>
	...

08008854 <puts>:
 8008854:	4b02      	ldr	r3, [pc, #8]	@ (8008860 <puts+0xc>)
 8008856:	4601      	mov	r1, r0
 8008858:	6818      	ldr	r0, [r3, #0]
 800885a:	f7ff bfa5 	b.w	80087a8 <_puts_r>
 800885e:	bf00      	nop
 8008860:	2000002c 	.word	0x2000002c

08008864 <sniprintf>:
 8008864:	b40c      	push	{r2, r3}
 8008866:	b530      	push	{r4, r5, lr}
 8008868:	4b17      	ldr	r3, [pc, #92]	@ (80088c8 <sniprintf+0x64>)
 800886a:	1e0c      	subs	r4, r1, #0
 800886c:	681d      	ldr	r5, [r3, #0]
 800886e:	b09d      	sub	sp, #116	@ 0x74
 8008870:	da08      	bge.n	8008884 <sniprintf+0x20>
 8008872:	238b      	movs	r3, #139	@ 0x8b
 8008874:	602b      	str	r3, [r5, #0]
 8008876:	f04f 30ff 	mov.w	r0, #4294967295
 800887a:	b01d      	add	sp, #116	@ 0x74
 800887c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008880:	b002      	add	sp, #8
 8008882:	4770      	bx	lr
 8008884:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008888:	f8ad 3014 	strh.w	r3, [sp, #20]
 800888c:	bf14      	ite	ne
 800888e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008892:	4623      	moveq	r3, r4
 8008894:	9304      	str	r3, [sp, #16]
 8008896:	9307      	str	r3, [sp, #28]
 8008898:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800889c:	9002      	str	r0, [sp, #8]
 800889e:	9006      	str	r0, [sp, #24]
 80088a0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80088a4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80088a6:	ab21      	add	r3, sp, #132	@ 0x84
 80088a8:	a902      	add	r1, sp, #8
 80088aa:	4628      	mov	r0, r5
 80088ac:	9301      	str	r3, [sp, #4]
 80088ae:	f002 fca9 	bl	800b204 <_svfiprintf_r>
 80088b2:	1c43      	adds	r3, r0, #1
 80088b4:	bfbc      	itt	lt
 80088b6:	238b      	movlt	r3, #139	@ 0x8b
 80088b8:	602b      	strlt	r3, [r5, #0]
 80088ba:	2c00      	cmp	r4, #0
 80088bc:	d0dd      	beq.n	800887a <sniprintf+0x16>
 80088be:	9b02      	ldr	r3, [sp, #8]
 80088c0:	2200      	movs	r2, #0
 80088c2:	701a      	strb	r2, [r3, #0]
 80088c4:	e7d9      	b.n	800887a <sniprintf+0x16>
 80088c6:	bf00      	nop
 80088c8:	2000002c 	.word	0x2000002c

080088cc <siprintf>:
 80088cc:	b40e      	push	{r1, r2, r3}
 80088ce:	b500      	push	{lr}
 80088d0:	b09c      	sub	sp, #112	@ 0x70
 80088d2:	ab1d      	add	r3, sp, #116	@ 0x74
 80088d4:	9002      	str	r0, [sp, #8]
 80088d6:	9006      	str	r0, [sp, #24]
 80088d8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80088dc:	4809      	ldr	r0, [pc, #36]	@ (8008904 <siprintf+0x38>)
 80088de:	9107      	str	r1, [sp, #28]
 80088e0:	9104      	str	r1, [sp, #16]
 80088e2:	4909      	ldr	r1, [pc, #36]	@ (8008908 <siprintf+0x3c>)
 80088e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80088e8:	9105      	str	r1, [sp, #20]
 80088ea:	6800      	ldr	r0, [r0, #0]
 80088ec:	9301      	str	r3, [sp, #4]
 80088ee:	a902      	add	r1, sp, #8
 80088f0:	f002 fc88 	bl	800b204 <_svfiprintf_r>
 80088f4:	9b02      	ldr	r3, [sp, #8]
 80088f6:	2200      	movs	r2, #0
 80088f8:	701a      	strb	r2, [r3, #0]
 80088fa:	b01c      	add	sp, #112	@ 0x70
 80088fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008900:	b003      	add	sp, #12
 8008902:	4770      	bx	lr
 8008904:	2000002c 	.word	0x2000002c
 8008908:	ffff0208 	.word	0xffff0208

0800890c <__sread>:
 800890c:	b510      	push	{r4, lr}
 800890e:	460c      	mov	r4, r1
 8008910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008914:	f000 f932 	bl	8008b7c <_read_r>
 8008918:	2800      	cmp	r0, #0
 800891a:	bfab      	itete	ge
 800891c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800891e:	89a3      	ldrhlt	r3, [r4, #12]
 8008920:	181b      	addge	r3, r3, r0
 8008922:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008926:	bfac      	ite	ge
 8008928:	6563      	strge	r3, [r4, #84]	@ 0x54
 800892a:	81a3      	strhlt	r3, [r4, #12]
 800892c:	bd10      	pop	{r4, pc}

0800892e <__swrite>:
 800892e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008932:	461f      	mov	r7, r3
 8008934:	898b      	ldrh	r3, [r1, #12]
 8008936:	05db      	lsls	r3, r3, #23
 8008938:	4605      	mov	r5, r0
 800893a:	460c      	mov	r4, r1
 800893c:	4616      	mov	r6, r2
 800893e:	d505      	bpl.n	800894c <__swrite+0x1e>
 8008940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008944:	2302      	movs	r3, #2
 8008946:	2200      	movs	r2, #0
 8008948:	f000 f906 	bl	8008b58 <_lseek_r>
 800894c:	89a3      	ldrh	r3, [r4, #12]
 800894e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008952:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008956:	81a3      	strh	r3, [r4, #12]
 8008958:	4632      	mov	r2, r6
 800895a:	463b      	mov	r3, r7
 800895c:	4628      	mov	r0, r5
 800895e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008962:	f000 b91d 	b.w	8008ba0 <_write_r>

08008966 <__sseek>:
 8008966:	b510      	push	{r4, lr}
 8008968:	460c      	mov	r4, r1
 800896a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800896e:	f000 f8f3 	bl	8008b58 <_lseek_r>
 8008972:	1c43      	adds	r3, r0, #1
 8008974:	89a3      	ldrh	r3, [r4, #12]
 8008976:	bf15      	itete	ne
 8008978:	6560      	strne	r0, [r4, #84]	@ 0x54
 800897a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800897e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008982:	81a3      	strheq	r3, [r4, #12]
 8008984:	bf18      	it	ne
 8008986:	81a3      	strhne	r3, [r4, #12]
 8008988:	bd10      	pop	{r4, pc}

0800898a <__sclose>:
 800898a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800898e:	f000 b8d3 	b.w	8008b38 <_close_r>

08008992 <__swbuf_r>:
 8008992:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008994:	460e      	mov	r6, r1
 8008996:	4614      	mov	r4, r2
 8008998:	4605      	mov	r5, r0
 800899a:	b118      	cbz	r0, 80089a4 <__swbuf_r+0x12>
 800899c:	6a03      	ldr	r3, [r0, #32]
 800899e:	b90b      	cbnz	r3, 80089a4 <__swbuf_r+0x12>
 80089a0:	f7ff feba 	bl	8008718 <__sinit>
 80089a4:	69a3      	ldr	r3, [r4, #24]
 80089a6:	60a3      	str	r3, [r4, #8]
 80089a8:	89a3      	ldrh	r3, [r4, #12]
 80089aa:	071a      	lsls	r2, r3, #28
 80089ac:	d501      	bpl.n	80089b2 <__swbuf_r+0x20>
 80089ae:	6923      	ldr	r3, [r4, #16]
 80089b0:	b943      	cbnz	r3, 80089c4 <__swbuf_r+0x32>
 80089b2:	4621      	mov	r1, r4
 80089b4:	4628      	mov	r0, r5
 80089b6:	f000 f82b 	bl	8008a10 <__swsetup_r>
 80089ba:	b118      	cbz	r0, 80089c4 <__swbuf_r+0x32>
 80089bc:	f04f 37ff 	mov.w	r7, #4294967295
 80089c0:	4638      	mov	r0, r7
 80089c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089c4:	6823      	ldr	r3, [r4, #0]
 80089c6:	6922      	ldr	r2, [r4, #16]
 80089c8:	1a98      	subs	r0, r3, r2
 80089ca:	6963      	ldr	r3, [r4, #20]
 80089cc:	b2f6      	uxtb	r6, r6
 80089ce:	4283      	cmp	r3, r0
 80089d0:	4637      	mov	r7, r6
 80089d2:	dc05      	bgt.n	80089e0 <__swbuf_r+0x4e>
 80089d4:	4621      	mov	r1, r4
 80089d6:	4628      	mov	r0, r5
 80089d8:	f002 fed6 	bl	800b788 <_fflush_r>
 80089dc:	2800      	cmp	r0, #0
 80089de:	d1ed      	bne.n	80089bc <__swbuf_r+0x2a>
 80089e0:	68a3      	ldr	r3, [r4, #8]
 80089e2:	3b01      	subs	r3, #1
 80089e4:	60a3      	str	r3, [r4, #8]
 80089e6:	6823      	ldr	r3, [r4, #0]
 80089e8:	1c5a      	adds	r2, r3, #1
 80089ea:	6022      	str	r2, [r4, #0]
 80089ec:	701e      	strb	r6, [r3, #0]
 80089ee:	6962      	ldr	r2, [r4, #20]
 80089f0:	1c43      	adds	r3, r0, #1
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d004      	beq.n	8008a00 <__swbuf_r+0x6e>
 80089f6:	89a3      	ldrh	r3, [r4, #12]
 80089f8:	07db      	lsls	r3, r3, #31
 80089fa:	d5e1      	bpl.n	80089c0 <__swbuf_r+0x2e>
 80089fc:	2e0a      	cmp	r6, #10
 80089fe:	d1df      	bne.n	80089c0 <__swbuf_r+0x2e>
 8008a00:	4621      	mov	r1, r4
 8008a02:	4628      	mov	r0, r5
 8008a04:	f002 fec0 	bl	800b788 <_fflush_r>
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	d0d9      	beq.n	80089c0 <__swbuf_r+0x2e>
 8008a0c:	e7d6      	b.n	80089bc <__swbuf_r+0x2a>
	...

08008a10 <__swsetup_r>:
 8008a10:	b538      	push	{r3, r4, r5, lr}
 8008a12:	4b29      	ldr	r3, [pc, #164]	@ (8008ab8 <__swsetup_r+0xa8>)
 8008a14:	4605      	mov	r5, r0
 8008a16:	6818      	ldr	r0, [r3, #0]
 8008a18:	460c      	mov	r4, r1
 8008a1a:	b118      	cbz	r0, 8008a24 <__swsetup_r+0x14>
 8008a1c:	6a03      	ldr	r3, [r0, #32]
 8008a1e:	b90b      	cbnz	r3, 8008a24 <__swsetup_r+0x14>
 8008a20:	f7ff fe7a 	bl	8008718 <__sinit>
 8008a24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a28:	0719      	lsls	r1, r3, #28
 8008a2a:	d422      	bmi.n	8008a72 <__swsetup_r+0x62>
 8008a2c:	06da      	lsls	r2, r3, #27
 8008a2e:	d407      	bmi.n	8008a40 <__swsetup_r+0x30>
 8008a30:	2209      	movs	r2, #9
 8008a32:	602a      	str	r2, [r5, #0]
 8008a34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a38:	81a3      	strh	r3, [r4, #12]
 8008a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a3e:	e033      	b.n	8008aa8 <__swsetup_r+0x98>
 8008a40:	0758      	lsls	r0, r3, #29
 8008a42:	d512      	bpl.n	8008a6a <__swsetup_r+0x5a>
 8008a44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a46:	b141      	cbz	r1, 8008a5a <__swsetup_r+0x4a>
 8008a48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a4c:	4299      	cmp	r1, r3
 8008a4e:	d002      	beq.n	8008a56 <__swsetup_r+0x46>
 8008a50:	4628      	mov	r0, r5
 8008a52:	f000 ff45 	bl	80098e0 <_free_r>
 8008a56:	2300      	movs	r3, #0
 8008a58:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a5a:	89a3      	ldrh	r3, [r4, #12]
 8008a5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008a60:	81a3      	strh	r3, [r4, #12]
 8008a62:	2300      	movs	r3, #0
 8008a64:	6063      	str	r3, [r4, #4]
 8008a66:	6923      	ldr	r3, [r4, #16]
 8008a68:	6023      	str	r3, [r4, #0]
 8008a6a:	89a3      	ldrh	r3, [r4, #12]
 8008a6c:	f043 0308 	orr.w	r3, r3, #8
 8008a70:	81a3      	strh	r3, [r4, #12]
 8008a72:	6923      	ldr	r3, [r4, #16]
 8008a74:	b94b      	cbnz	r3, 8008a8a <__swsetup_r+0x7a>
 8008a76:	89a3      	ldrh	r3, [r4, #12]
 8008a78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008a7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a80:	d003      	beq.n	8008a8a <__swsetup_r+0x7a>
 8008a82:	4621      	mov	r1, r4
 8008a84:	4628      	mov	r0, r5
 8008a86:	f002 fecd 	bl	800b824 <__smakebuf_r>
 8008a8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a8e:	f013 0201 	ands.w	r2, r3, #1
 8008a92:	d00a      	beq.n	8008aaa <__swsetup_r+0x9a>
 8008a94:	2200      	movs	r2, #0
 8008a96:	60a2      	str	r2, [r4, #8]
 8008a98:	6962      	ldr	r2, [r4, #20]
 8008a9a:	4252      	negs	r2, r2
 8008a9c:	61a2      	str	r2, [r4, #24]
 8008a9e:	6922      	ldr	r2, [r4, #16]
 8008aa0:	b942      	cbnz	r2, 8008ab4 <__swsetup_r+0xa4>
 8008aa2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008aa6:	d1c5      	bne.n	8008a34 <__swsetup_r+0x24>
 8008aa8:	bd38      	pop	{r3, r4, r5, pc}
 8008aaa:	0799      	lsls	r1, r3, #30
 8008aac:	bf58      	it	pl
 8008aae:	6962      	ldrpl	r2, [r4, #20]
 8008ab0:	60a2      	str	r2, [r4, #8]
 8008ab2:	e7f4      	b.n	8008a9e <__swsetup_r+0x8e>
 8008ab4:	2000      	movs	r0, #0
 8008ab6:	e7f7      	b.n	8008aa8 <__swsetup_r+0x98>
 8008ab8:	2000002c 	.word	0x2000002c

08008abc <memset>:
 8008abc:	4402      	add	r2, r0
 8008abe:	4603      	mov	r3, r0
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d100      	bne.n	8008ac6 <memset+0xa>
 8008ac4:	4770      	bx	lr
 8008ac6:	f803 1b01 	strb.w	r1, [r3], #1
 8008aca:	e7f9      	b.n	8008ac0 <memset+0x4>

08008acc <strcat>:
 8008acc:	b510      	push	{r4, lr}
 8008ace:	4602      	mov	r2, r0
 8008ad0:	7814      	ldrb	r4, [r2, #0]
 8008ad2:	4613      	mov	r3, r2
 8008ad4:	3201      	adds	r2, #1
 8008ad6:	2c00      	cmp	r4, #0
 8008ad8:	d1fa      	bne.n	8008ad0 <strcat+0x4>
 8008ada:	3b01      	subs	r3, #1
 8008adc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ae0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ae4:	2a00      	cmp	r2, #0
 8008ae6:	d1f9      	bne.n	8008adc <strcat+0x10>
 8008ae8:	bd10      	pop	{r4, pc}

08008aea <strchr>:
 8008aea:	b2c9      	uxtb	r1, r1
 8008aec:	4603      	mov	r3, r0
 8008aee:	4618      	mov	r0, r3
 8008af0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008af4:	b112      	cbz	r2, 8008afc <strchr+0x12>
 8008af6:	428a      	cmp	r2, r1
 8008af8:	d1f9      	bne.n	8008aee <strchr+0x4>
 8008afa:	4770      	bx	lr
 8008afc:	2900      	cmp	r1, #0
 8008afe:	bf18      	it	ne
 8008b00:	2000      	movne	r0, #0
 8008b02:	4770      	bx	lr

08008b04 <strstr>:
 8008b04:	780a      	ldrb	r2, [r1, #0]
 8008b06:	b570      	push	{r4, r5, r6, lr}
 8008b08:	b96a      	cbnz	r2, 8008b26 <strstr+0x22>
 8008b0a:	bd70      	pop	{r4, r5, r6, pc}
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d109      	bne.n	8008b24 <strstr+0x20>
 8008b10:	460c      	mov	r4, r1
 8008b12:	4605      	mov	r5, r0
 8008b14:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d0f6      	beq.n	8008b0a <strstr+0x6>
 8008b1c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008b20:	429e      	cmp	r6, r3
 8008b22:	d0f7      	beq.n	8008b14 <strstr+0x10>
 8008b24:	3001      	adds	r0, #1
 8008b26:	7803      	ldrb	r3, [r0, #0]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d1ef      	bne.n	8008b0c <strstr+0x8>
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	e7ec      	b.n	8008b0a <strstr+0x6>

08008b30 <_localeconv_r>:
 8008b30:	4800      	ldr	r0, [pc, #0]	@ (8008b34 <_localeconv_r+0x4>)
 8008b32:	4770      	bx	lr
 8008b34:	2000016c 	.word	0x2000016c

08008b38 <_close_r>:
 8008b38:	b538      	push	{r3, r4, r5, lr}
 8008b3a:	4d06      	ldr	r5, [pc, #24]	@ (8008b54 <_close_r+0x1c>)
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	4604      	mov	r4, r0
 8008b40:	4608      	mov	r0, r1
 8008b42:	602b      	str	r3, [r5, #0]
 8008b44:	f7f9 f91e 	bl	8001d84 <_close>
 8008b48:	1c43      	adds	r3, r0, #1
 8008b4a:	d102      	bne.n	8008b52 <_close_r+0x1a>
 8008b4c:	682b      	ldr	r3, [r5, #0]
 8008b4e:	b103      	cbz	r3, 8008b52 <_close_r+0x1a>
 8008b50:	6023      	str	r3, [r4, #0]
 8008b52:	bd38      	pop	{r3, r4, r5, pc}
 8008b54:	20009e04 	.word	0x20009e04

08008b58 <_lseek_r>:
 8008b58:	b538      	push	{r3, r4, r5, lr}
 8008b5a:	4d07      	ldr	r5, [pc, #28]	@ (8008b78 <_lseek_r+0x20>)
 8008b5c:	4604      	mov	r4, r0
 8008b5e:	4608      	mov	r0, r1
 8008b60:	4611      	mov	r1, r2
 8008b62:	2200      	movs	r2, #0
 8008b64:	602a      	str	r2, [r5, #0]
 8008b66:	461a      	mov	r2, r3
 8008b68:	f7f9 f933 	bl	8001dd2 <_lseek>
 8008b6c:	1c43      	adds	r3, r0, #1
 8008b6e:	d102      	bne.n	8008b76 <_lseek_r+0x1e>
 8008b70:	682b      	ldr	r3, [r5, #0]
 8008b72:	b103      	cbz	r3, 8008b76 <_lseek_r+0x1e>
 8008b74:	6023      	str	r3, [r4, #0]
 8008b76:	bd38      	pop	{r3, r4, r5, pc}
 8008b78:	20009e04 	.word	0x20009e04

08008b7c <_read_r>:
 8008b7c:	b538      	push	{r3, r4, r5, lr}
 8008b7e:	4d07      	ldr	r5, [pc, #28]	@ (8008b9c <_read_r+0x20>)
 8008b80:	4604      	mov	r4, r0
 8008b82:	4608      	mov	r0, r1
 8008b84:	4611      	mov	r1, r2
 8008b86:	2200      	movs	r2, #0
 8008b88:	602a      	str	r2, [r5, #0]
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	f7f9 f8c1 	bl	8001d12 <_read>
 8008b90:	1c43      	adds	r3, r0, #1
 8008b92:	d102      	bne.n	8008b9a <_read_r+0x1e>
 8008b94:	682b      	ldr	r3, [r5, #0]
 8008b96:	b103      	cbz	r3, 8008b9a <_read_r+0x1e>
 8008b98:	6023      	str	r3, [r4, #0]
 8008b9a:	bd38      	pop	{r3, r4, r5, pc}
 8008b9c:	20009e04 	.word	0x20009e04

08008ba0 <_write_r>:
 8008ba0:	b538      	push	{r3, r4, r5, lr}
 8008ba2:	4d07      	ldr	r5, [pc, #28]	@ (8008bc0 <_write_r+0x20>)
 8008ba4:	4604      	mov	r4, r0
 8008ba6:	4608      	mov	r0, r1
 8008ba8:	4611      	mov	r1, r2
 8008baa:	2200      	movs	r2, #0
 8008bac:	602a      	str	r2, [r5, #0]
 8008bae:	461a      	mov	r2, r3
 8008bb0:	f7f9 f8cc 	bl	8001d4c <_write>
 8008bb4:	1c43      	adds	r3, r0, #1
 8008bb6:	d102      	bne.n	8008bbe <_write_r+0x1e>
 8008bb8:	682b      	ldr	r3, [r5, #0]
 8008bba:	b103      	cbz	r3, 8008bbe <_write_r+0x1e>
 8008bbc:	6023      	str	r3, [r4, #0]
 8008bbe:	bd38      	pop	{r3, r4, r5, pc}
 8008bc0:	20009e04 	.word	0x20009e04

08008bc4 <__errno>:
 8008bc4:	4b01      	ldr	r3, [pc, #4]	@ (8008bcc <__errno+0x8>)
 8008bc6:	6818      	ldr	r0, [r3, #0]
 8008bc8:	4770      	bx	lr
 8008bca:	bf00      	nop
 8008bcc:	2000002c 	.word	0x2000002c

08008bd0 <__libc_init_array>:
 8008bd0:	b570      	push	{r4, r5, r6, lr}
 8008bd2:	4d0d      	ldr	r5, [pc, #52]	@ (8008c08 <__libc_init_array+0x38>)
 8008bd4:	4c0d      	ldr	r4, [pc, #52]	@ (8008c0c <__libc_init_array+0x3c>)
 8008bd6:	1b64      	subs	r4, r4, r5
 8008bd8:	10a4      	asrs	r4, r4, #2
 8008bda:	2600      	movs	r6, #0
 8008bdc:	42a6      	cmp	r6, r4
 8008bde:	d109      	bne.n	8008bf4 <__libc_init_array+0x24>
 8008be0:	4d0b      	ldr	r5, [pc, #44]	@ (8008c10 <__libc_init_array+0x40>)
 8008be2:	4c0c      	ldr	r4, [pc, #48]	@ (8008c14 <__libc_init_array+0x44>)
 8008be4:	f003 fe66 	bl	800c8b4 <_init>
 8008be8:	1b64      	subs	r4, r4, r5
 8008bea:	10a4      	asrs	r4, r4, #2
 8008bec:	2600      	movs	r6, #0
 8008bee:	42a6      	cmp	r6, r4
 8008bf0:	d105      	bne.n	8008bfe <__libc_init_array+0x2e>
 8008bf2:	bd70      	pop	{r4, r5, r6, pc}
 8008bf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bf8:	4798      	blx	r3
 8008bfa:	3601      	adds	r6, #1
 8008bfc:	e7ee      	b.n	8008bdc <__libc_init_array+0xc>
 8008bfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c02:	4798      	blx	r3
 8008c04:	3601      	adds	r6, #1
 8008c06:	e7f2      	b.n	8008bee <__libc_init_array+0x1e>
 8008c08:	0800d3e8 	.word	0x0800d3e8
 8008c0c:	0800d3e8 	.word	0x0800d3e8
 8008c10:	0800d3e8 	.word	0x0800d3e8
 8008c14:	0800d3ec 	.word	0x0800d3ec

08008c18 <__retarget_lock_init_recursive>:
 8008c18:	4770      	bx	lr

08008c1a <__retarget_lock_acquire_recursive>:
 8008c1a:	4770      	bx	lr

08008c1c <__retarget_lock_release_recursive>:
 8008c1c:	4770      	bx	lr

08008c1e <memcpy>:
 8008c1e:	440a      	add	r2, r1
 8008c20:	4291      	cmp	r1, r2
 8008c22:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c26:	d100      	bne.n	8008c2a <memcpy+0xc>
 8008c28:	4770      	bx	lr
 8008c2a:	b510      	push	{r4, lr}
 8008c2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c34:	4291      	cmp	r1, r2
 8008c36:	d1f9      	bne.n	8008c2c <memcpy+0xe>
 8008c38:	bd10      	pop	{r4, pc}
	...

08008c3c <nanf>:
 8008c3c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008c44 <nanf+0x8>
 8008c40:	4770      	bx	lr
 8008c42:	bf00      	nop
 8008c44:	7fc00000 	.word	0x7fc00000

08008c48 <quorem>:
 8008c48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c4c:	6903      	ldr	r3, [r0, #16]
 8008c4e:	690c      	ldr	r4, [r1, #16]
 8008c50:	42a3      	cmp	r3, r4
 8008c52:	4607      	mov	r7, r0
 8008c54:	db7e      	blt.n	8008d54 <quorem+0x10c>
 8008c56:	3c01      	subs	r4, #1
 8008c58:	f101 0814 	add.w	r8, r1, #20
 8008c5c:	00a3      	lsls	r3, r4, #2
 8008c5e:	f100 0514 	add.w	r5, r0, #20
 8008c62:	9300      	str	r3, [sp, #0]
 8008c64:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c68:	9301      	str	r3, [sp, #4]
 8008c6a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008c6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c72:	3301      	adds	r3, #1
 8008c74:	429a      	cmp	r2, r3
 8008c76:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008c7a:	fbb2 f6f3 	udiv	r6, r2, r3
 8008c7e:	d32e      	bcc.n	8008cde <quorem+0x96>
 8008c80:	f04f 0a00 	mov.w	sl, #0
 8008c84:	46c4      	mov	ip, r8
 8008c86:	46ae      	mov	lr, r5
 8008c88:	46d3      	mov	fp, sl
 8008c8a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008c8e:	b298      	uxth	r0, r3
 8008c90:	fb06 a000 	mla	r0, r6, r0, sl
 8008c94:	0c02      	lsrs	r2, r0, #16
 8008c96:	0c1b      	lsrs	r3, r3, #16
 8008c98:	fb06 2303 	mla	r3, r6, r3, r2
 8008c9c:	f8de 2000 	ldr.w	r2, [lr]
 8008ca0:	b280      	uxth	r0, r0
 8008ca2:	b292      	uxth	r2, r2
 8008ca4:	1a12      	subs	r2, r2, r0
 8008ca6:	445a      	add	r2, fp
 8008ca8:	f8de 0000 	ldr.w	r0, [lr]
 8008cac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008cb6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008cba:	b292      	uxth	r2, r2
 8008cbc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008cc0:	45e1      	cmp	r9, ip
 8008cc2:	f84e 2b04 	str.w	r2, [lr], #4
 8008cc6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008cca:	d2de      	bcs.n	8008c8a <quorem+0x42>
 8008ccc:	9b00      	ldr	r3, [sp, #0]
 8008cce:	58eb      	ldr	r3, [r5, r3]
 8008cd0:	b92b      	cbnz	r3, 8008cde <quorem+0x96>
 8008cd2:	9b01      	ldr	r3, [sp, #4]
 8008cd4:	3b04      	subs	r3, #4
 8008cd6:	429d      	cmp	r5, r3
 8008cd8:	461a      	mov	r2, r3
 8008cda:	d32f      	bcc.n	8008d3c <quorem+0xf4>
 8008cdc:	613c      	str	r4, [r7, #16]
 8008cde:	4638      	mov	r0, r7
 8008ce0:	f001 f9c2 	bl	800a068 <__mcmp>
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	db25      	blt.n	8008d34 <quorem+0xec>
 8008ce8:	4629      	mov	r1, r5
 8008cea:	2000      	movs	r0, #0
 8008cec:	f858 2b04 	ldr.w	r2, [r8], #4
 8008cf0:	f8d1 c000 	ldr.w	ip, [r1]
 8008cf4:	fa1f fe82 	uxth.w	lr, r2
 8008cf8:	fa1f f38c 	uxth.w	r3, ip
 8008cfc:	eba3 030e 	sub.w	r3, r3, lr
 8008d00:	4403      	add	r3, r0
 8008d02:	0c12      	lsrs	r2, r2, #16
 8008d04:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008d08:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d12:	45c1      	cmp	r9, r8
 8008d14:	f841 3b04 	str.w	r3, [r1], #4
 8008d18:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008d1c:	d2e6      	bcs.n	8008cec <quorem+0xa4>
 8008d1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d26:	b922      	cbnz	r2, 8008d32 <quorem+0xea>
 8008d28:	3b04      	subs	r3, #4
 8008d2a:	429d      	cmp	r5, r3
 8008d2c:	461a      	mov	r2, r3
 8008d2e:	d30b      	bcc.n	8008d48 <quorem+0x100>
 8008d30:	613c      	str	r4, [r7, #16]
 8008d32:	3601      	adds	r6, #1
 8008d34:	4630      	mov	r0, r6
 8008d36:	b003      	add	sp, #12
 8008d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d3c:	6812      	ldr	r2, [r2, #0]
 8008d3e:	3b04      	subs	r3, #4
 8008d40:	2a00      	cmp	r2, #0
 8008d42:	d1cb      	bne.n	8008cdc <quorem+0x94>
 8008d44:	3c01      	subs	r4, #1
 8008d46:	e7c6      	b.n	8008cd6 <quorem+0x8e>
 8008d48:	6812      	ldr	r2, [r2, #0]
 8008d4a:	3b04      	subs	r3, #4
 8008d4c:	2a00      	cmp	r2, #0
 8008d4e:	d1ef      	bne.n	8008d30 <quorem+0xe8>
 8008d50:	3c01      	subs	r4, #1
 8008d52:	e7ea      	b.n	8008d2a <quorem+0xe2>
 8008d54:	2000      	movs	r0, #0
 8008d56:	e7ee      	b.n	8008d36 <quorem+0xee>

08008d58 <_dtoa_r>:
 8008d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d5c:	69c7      	ldr	r7, [r0, #28]
 8008d5e:	b099      	sub	sp, #100	@ 0x64
 8008d60:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008d64:	ec55 4b10 	vmov	r4, r5, d0
 8008d68:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008d6a:	9109      	str	r1, [sp, #36]	@ 0x24
 8008d6c:	4683      	mov	fp, r0
 8008d6e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008d70:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008d72:	b97f      	cbnz	r7, 8008d94 <_dtoa_r+0x3c>
 8008d74:	2010      	movs	r0, #16
 8008d76:	f000 fdfd 	bl	8009974 <malloc>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	f8cb 001c 	str.w	r0, [fp, #28]
 8008d80:	b920      	cbnz	r0, 8008d8c <_dtoa_r+0x34>
 8008d82:	4ba7      	ldr	r3, [pc, #668]	@ (8009020 <_dtoa_r+0x2c8>)
 8008d84:	21ef      	movs	r1, #239	@ 0xef
 8008d86:	48a7      	ldr	r0, [pc, #668]	@ (8009024 <_dtoa_r+0x2cc>)
 8008d88:	f002 fdee 	bl	800b968 <__assert_func>
 8008d8c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008d90:	6007      	str	r7, [r0, #0]
 8008d92:	60c7      	str	r7, [r0, #12]
 8008d94:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008d98:	6819      	ldr	r1, [r3, #0]
 8008d9a:	b159      	cbz	r1, 8008db4 <_dtoa_r+0x5c>
 8008d9c:	685a      	ldr	r2, [r3, #4]
 8008d9e:	604a      	str	r2, [r1, #4]
 8008da0:	2301      	movs	r3, #1
 8008da2:	4093      	lsls	r3, r2
 8008da4:	608b      	str	r3, [r1, #8]
 8008da6:	4658      	mov	r0, fp
 8008da8:	f000 feda 	bl	8009b60 <_Bfree>
 8008dac:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008db0:	2200      	movs	r2, #0
 8008db2:	601a      	str	r2, [r3, #0]
 8008db4:	1e2b      	subs	r3, r5, #0
 8008db6:	bfb9      	ittee	lt
 8008db8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008dbc:	9303      	strlt	r3, [sp, #12]
 8008dbe:	2300      	movge	r3, #0
 8008dc0:	6033      	strge	r3, [r6, #0]
 8008dc2:	9f03      	ldr	r7, [sp, #12]
 8008dc4:	4b98      	ldr	r3, [pc, #608]	@ (8009028 <_dtoa_r+0x2d0>)
 8008dc6:	bfbc      	itt	lt
 8008dc8:	2201      	movlt	r2, #1
 8008dca:	6032      	strlt	r2, [r6, #0]
 8008dcc:	43bb      	bics	r3, r7
 8008dce:	d112      	bne.n	8008df6 <_dtoa_r+0x9e>
 8008dd0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008dd2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008dd6:	6013      	str	r3, [r2, #0]
 8008dd8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008ddc:	4323      	orrs	r3, r4
 8008dde:	f000 854d 	beq.w	800987c <_dtoa_r+0xb24>
 8008de2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008de4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800903c <_dtoa_r+0x2e4>
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	f000 854f 	beq.w	800988c <_dtoa_r+0xb34>
 8008dee:	f10a 0303 	add.w	r3, sl, #3
 8008df2:	f000 bd49 	b.w	8009888 <_dtoa_r+0xb30>
 8008df6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	ec51 0b17 	vmov	r0, r1, d7
 8008e00:	2300      	movs	r3, #0
 8008e02:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008e06:	f7f7 fe87 	bl	8000b18 <__aeabi_dcmpeq>
 8008e0a:	4680      	mov	r8, r0
 8008e0c:	b158      	cbz	r0, 8008e26 <_dtoa_r+0xce>
 8008e0e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008e10:	2301      	movs	r3, #1
 8008e12:	6013      	str	r3, [r2, #0]
 8008e14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008e16:	b113      	cbz	r3, 8008e1e <_dtoa_r+0xc6>
 8008e18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008e1a:	4b84      	ldr	r3, [pc, #528]	@ (800902c <_dtoa_r+0x2d4>)
 8008e1c:	6013      	str	r3, [r2, #0]
 8008e1e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009040 <_dtoa_r+0x2e8>
 8008e22:	f000 bd33 	b.w	800988c <_dtoa_r+0xb34>
 8008e26:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008e2a:	aa16      	add	r2, sp, #88	@ 0x58
 8008e2c:	a917      	add	r1, sp, #92	@ 0x5c
 8008e2e:	4658      	mov	r0, fp
 8008e30:	f001 fa3a 	bl	800a2a8 <__d2b>
 8008e34:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008e38:	4681      	mov	r9, r0
 8008e3a:	2e00      	cmp	r6, #0
 8008e3c:	d077      	beq.n	8008f2e <_dtoa_r+0x1d6>
 8008e3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008e40:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008e44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008e4c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008e50:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008e54:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008e58:	4619      	mov	r1, r3
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	4b74      	ldr	r3, [pc, #464]	@ (8009030 <_dtoa_r+0x2d8>)
 8008e5e:	f7f7 fa3b 	bl	80002d8 <__aeabi_dsub>
 8008e62:	a369      	add	r3, pc, #420	@ (adr r3, 8009008 <_dtoa_r+0x2b0>)
 8008e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e68:	f7f7 fbee 	bl	8000648 <__aeabi_dmul>
 8008e6c:	a368      	add	r3, pc, #416	@ (adr r3, 8009010 <_dtoa_r+0x2b8>)
 8008e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e72:	f7f7 fa33 	bl	80002dc <__adddf3>
 8008e76:	4604      	mov	r4, r0
 8008e78:	4630      	mov	r0, r6
 8008e7a:	460d      	mov	r5, r1
 8008e7c:	f7f7 fb7a 	bl	8000574 <__aeabi_i2d>
 8008e80:	a365      	add	r3, pc, #404	@ (adr r3, 8009018 <_dtoa_r+0x2c0>)
 8008e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e86:	f7f7 fbdf 	bl	8000648 <__aeabi_dmul>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	460b      	mov	r3, r1
 8008e8e:	4620      	mov	r0, r4
 8008e90:	4629      	mov	r1, r5
 8008e92:	f7f7 fa23 	bl	80002dc <__adddf3>
 8008e96:	4604      	mov	r4, r0
 8008e98:	460d      	mov	r5, r1
 8008e9a:	f7f7 fe85 	bl	8000ba8 <__aeabi_d2iz>
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	4607      	mov	r7, r0
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	4620      	mov	r0, r4
 8008ea6:	4629      	mov	r1, r5
 8008ea8:	f7f7 fe40 	bl	8000b2c <__aeabi_dcmplt>
 8008eac:	b140      	cbz	r0, 8008ec0 <_dtoa_r+0x168>
 8008eae:	4638      	mov	r0, r7
 8008eb0:	f7f7 fb60 	bl	8000574 <__aeabi_i2d>
 8008eb4:	4622      	mov	r2, r4
 8008eb6:	462b      	mov	r3, r5
 8008eb8:	f7f7 fe2e 	bl	8000b18 <__aeabi_dcmpeq>
 8008ebc:	b900      	cbnz	r0, 8008ec0 <_dtoa_r+0x168>
 8008ebe:	3f01      	subs	r7, #1
 8008ec0:	2f16      	cmp	r7, #22
 8008ec2:	d851      	bhi.n	8008f68 <_dtoa_r+0x210>
 8008ec4:	4b5b      	ldr	r3, [pc, #364]	@ (8009034 <_dtoa_r+0x2dc>)
 8008ec6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ece:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ed2:	f7f7 fe2b 	bl	8000b2c <__aeabi_dcmplt>
 8008ed6:	2800      	cmp	r0, #0
 8008ed8:	d048      	beq.n	8008f6c <_dtoa_r+0x214>
 8008eda:	3f01      	subs	r7, #1
 8008edc:	2300      	movs	r3, #0
 8008ede:	9312      	str	r3, [sp, #72]	@ 0x48
 8008ee0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008ee2:	1b9b      	subs	r3, r3, r6
 8008ee4:	1e5a      	subs	r2, r3, #1
 8008ee6:	bf44      	itt	mi
 8008ee8:	f1c3 0801 	rsbmi	r8, r3, #1
 8008eec:	2300      	movmi	r3, #0
 8008eee:	9208      	str	r2, [sp, #32]
 8008ef0:	bf54      	ite	pl
 8008ef2:	f04f 0800 	movpl.w	r8, #0
 8008ef6:	9308      	strmi	r3, [sp, #32]
 8008ef8:	2f00      	cmp	r7, #0
 8008efa:	db39      	blt.n	8008f70 <_dtoa_r+0x218>
 8008efc:	9b08      	ldr	r3, [sp, #32]
 8008efe:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008f00:	443b      	add	r3, r7
 8008f02:	9308      	str	r3, [sp, #32]
 8008f04:	2300      	movs	r3, #0
 8008f06:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f0a:	2b09      	cmp	r3, #9
 8008f0c:	d864      	bhi.n	8008fd8 <_dtoa_r+0x280>
 8008f0e:	2b05      	cmp	r3, #5
 8008f10:	bfc4      	itt	gt
 8008f12:	3b04      	subgt	r3, #4
 8008f14:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008f16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f18:	f1a3 0302 	sub.w	r3, r3, #2
 8008f1c:	bfcc      	ite	gt
 8008f1e:	2400      	movgt	r4, #0
 8008f20:	2401      	movle	r4, #1
 8008f22:	2b03      	cmp	r3, #3
 8008f24:	d863      	bhi.n	8008fee <_dtoa_r+0x296>
 8008f26:	e8df f003 	tbb	[pc, r3]
 8008f2a:	372a      	.short	0x372a
 8008f2c:	5535      	.short	0x5535
 8008f2e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008f32:	441e      	add	r6, r3
 8008f34:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008f38:	2b20      	cmp	r3, #32
 8008f3a:	bfc1      	itttt	gt
 8008f3c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008f40:	409f      	lslgt	r7, r3
 8008f42:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008f46:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008f4a:	bfd6      	itet	le
 8008f4c:	f1c3 0320 	rsble	r3, r3, #32
 8008f50:	ea47 0003 	orrgt.w	r0, r7, r3
 8008f54:	fa04 f003 	lslle.w	r0, r4, r3
 8008f58:	f7f7 fafc 	bl	8000554 <__aeabi_ui2d>
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008f62:	3e01      	subs	r6, #1
 8008f64:	9214      	str	r2, [sp, #80]	@ 0x50
 8008f66:	e777      	b.n	8008e58 <_dtoa_r+0x100>
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e7b8      	b.n	8008ede <_dtoa_r+0x186>
 8008f6c:	9012      	str	r0, [sp, #72]	@ 0x48
 8008f6e:	e7b7      	b.n	8008ee0 <_dtoa_r+0x188>
 8008f70:	427b      	negs	r3, r7
 8008f72:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f74:	2300      	movs	r3, #0
 8008f76:	eba8 0807 	sub.w	r8, r8, r7
 8008f7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008f7c:	e7c4      	b.n	8008f08 <_dtoa_r+0x1b0>
 8008f7e:	2300      	movs	r3, #0
 8008f80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	dc35      	bgt.n	8008ff4 <_dtoa_r+0x29c>
 8008f88:	2301      	movs	r3, #1
 8008f8a:	9300      	str	r3, [sp, #0]
 8008f8c:	9307      	str	r3, [sp, #28]
 8008f8e:	461a      	mov	r2, r3
 8008f90:	920e      	str	r2, [sp, #56]	@ 0x38
 8008f92:	e00b      	b.n	8008fac <_dtoa_r+0x254>
 8008f94:	2301      	movs	r3, #1
 8008f96:	e7f3      	b.n	8008f80 <_dtoa_r+0x228>
 8008f98:	2300      	movs	r3, #0
 8008f9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f9e:	18fb      	adds	r3, r7, r3
 8008fa0:	9300      	str	r3, [sp, #0]
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	9307      	str	r3, [sp, #28]
 8008fa8:	bfb8      	it	lt
 8008faa:	2301      	movlt	r3, #1
 8008fac:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008fb0:	2100      	movs	r1, #0
 8008fb2:	2204      	movs	r2, #4
 8008fb4:	f102 0514 	add.w	r5, r2, #20
 8008fb8:	429d      	cmp	r5, r3
 8008fba:	d91f      	bls.n	8008ffc <_dtoa_r+0x2a4>
 8008fbc:	6041      	str	r1, [r0, #4]
 8008fbe:	4658      	mov	r0, fp
 8008fc0:	f000 fd8e 	bl	8009ae0 <_Balloc>
 8008fc4:	4682      	mov	sl, r0
 8008fc6:	2800      	cmp	r0, #0
 8008fc8:	d13c      	bne.n	8009044 <_dtoa_r+0x2ec>
 8008fca:	4b1b      	ldr	r3, [pc, #108]	@ (8009038 <_dtoa_r+0x2e0>)
 8008fcc:	4602      	mov	r2, r0
 8008fce:	f240 11af 	movw	r1, #431	@ 0x1af
 8008fd2:	e6d8      	b.n	8008d86 <_dtoa_r+0x2e>
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	e7e0      	b.n	8008f9a <_dtoa_r+0x242>
 8008fd8:	2401      	movs	r4, #1
 8008fda:	2300      	movs	r3, #0
 8008fdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fde:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8008fe4:	9300      	str	r3, [sp, #0]
 8008fe6:	9307      	str	r3, [sp, #28]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	2312      	movs	r3, #18
 8008fec:	e7d0      	b.n	8008f90 <_dtoa_r+0x238>
 8008fee:	2301      	movs	r3, #1
 8008ff0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ff2:	e7f5      	b.n	8008fe0 <_dtoa_r+0x288>
 8008ff4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ff6:	9300      	str	r3, [sp, #0]
 8008ff8:	9307      	str	r3, [sp, #28]
 8008ffa:	e7d7      	b.n	8008fac <_dtoa_r+0x254>
 8008ffc:	3101      	adds	r1, #1
 8008ffe:	0052      	lsls	r2, r2, #1
 8009000:	e7d8      	b.n	8008fb4 <_dtoa_r+0x25c>
 8009002:	bf00      	nop
 8009004:	f3af 8000 	nop.w
 8009008:	636f4361 	.word	0x636f4361
 800900c:	3fd287a7 	.word	0x3fd287a7
 8009010:	8b60c8b3 	.word	0x8b60c8b3
 8009014:	3fc68a28 	.word	0x3fc68a28
 8009018:	509f79fb 	.word	0x509f79fb
 800901c:	3fd34413 	.word	0x3fd34413
 8009020:	0800cfe2 	.word	0x0800cfe2
 8009024:	0800cff9 	.word	0x0800cff9
 8009028:	7ff00000 	.word	0x7ff00000
 800902c:	0800cfad 	.word	0x0800cfad
 8009030:	3ff80000 	.word	0x3ff80000
 8009034:	0800d0f0 	.word	0x0800d0f0
 8009038:	0800d051 	.word	0x0800d051
 800903c:	0800cfde 	.word	0x0800cfde
 8009040:	0800cfac 	.word	0x0800cfac
 8009044:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009048:	6018      	str	r0, [r3, #0]
 800904a:	9b07      	ldr	r3, [sp, #28]
 800904c:	2b0e      	cmp	r3, #14
 800904e:	f200 80a4 	bhi.w	800919a <_dtoa_r+0x442>
 8009052:	2c00      	cmp	r4, #0
 8009054:	f000 80a1 	beq.w	800919a <_dtoa_r+0x442>
 8009058:	2f00      	cmp	r7, #0
 800905a:	dd33      	ble.n	80090c4 <_dtoa_r+0x36c>
 800905c:	4bad      	ldr	r3, [pc, #692]	@ (8009314 <_dtoa_r+0x5bc>)
 800905e:	f007 020f 	and.w	r2, r7, #15
 8009062:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009066:	ed93 7b00 	vldr	d7, [r3]
 800906a:	05f8      	lsls	r0, r7, #23
 800906c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009070:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009074:	d516      	bpl.n	80090a4 <_dtoa_r+0x34c>
 8009076:	4ba8      	ldr	r3, [pc, #672]	@ (8009318 <_dtoa_r+0x5c0>)
 8009078:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800907c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009080:	f7f7 fc0c 	bl	800089c <__aeabi_ddiv>
 8009084:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009088:	f004 040f 	and.w	r4, r4, #15
 800908c:	2603      	movs	r6, #3
 800908e:	4da2      	ldr	r5, [pc, #648]	@ (8009318 <_dtoa_r+0x5c0>)
 8009090:	b954      	cbnz	r4, 80090a8 <_dtoa_r+0x350>
 8009092:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009096:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800909a:	f7f7 fbff 	bl	800089c <__aeabi_ddiv>
 800909e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090a2:	e028      	b.n	80090f6 <_dtoa_r+0x39e>
 80090a4:	2602      	movs	r6, #2
 80090a6:	e7f2      	b.n	800908e <_dtoa_r+0x336>
 80090a8:	07e1      	lsls	r1, r4, #31
 80090aa:	d508      	bpl.n	80090be <_dtoa_r+0x366>
 80090ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80090b4:	f7f7 fac8 	bl	8000648 <__aeabi_dmul>
 80090b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80090bc:	3601      	adds	r6, #1
 80090be:	1064      	asrs	r4, r4, #1
 80090c0:	3508      	adds	r5, #8
 80090c2:	e7e5      	b.n	8009090 <_dtoa_r+0x338>
 80090c4:	f000 80d2 	beq.w	800926c <_dtoa_r+0x514>
 80090c8:	427c      	negs	r4, r7
 80090ca:	4b92      	ldr	r3, [pc, #584]	@ (8009314 <_dtoa_r+0x5bc>)
 80090cc:	4d92      	ldr	r5, [pc, #584]	@ (8009318 <_dtoa_r+0x5c0>)
 80090ce:	f004 020f 	and.w	r2, r4, #15
 80090d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80090de:	f7f7 fab3 	bl	8000648 <__aeabi_dmul>
 80090e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090e6:	1124      	asrs	r4, r4, #4
 80090e8:	2300      	movs	r3, #0
 80090ea:	2602      	movs	r6, #2
 80090ec:	2c00      	cmp	r4, #0
 80090ee:	f040 80b2 	bne.w	8009256 <_dtoa_r+0x4fe>
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d1d3      	bne.n	800909e <_dtoa_r+0x346>
 80090f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80090f8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	f000 80b7 	beq.w	8009270 <_dtoa_r+0x518>
 8009102:	4b86      	ldr	r3, [pc, #536]	@ (800931c <_dtoa_r+0x5c4>)
 8009104:	2200      	movs	r2, #0
 8009106:	4620      	mov	r0, r4
 8009108:	4629      	mov	r1, r5
 800910a:	f7f7 fd0f 	bl	8000b2c <__aeabi_dcmplt>
 800910e:	2800      	cmp	r0, #0
 8009110:	f000 80ae 	beq.w	8009270 <_dtoa_r+0x518>
 8009114:	9b07      	ldr	r3, [sp, #28]
 8009116:	2b00      	cmp	r3, #0
 8009118:	f000 80aa 	beq.w	8009270 <_dtoa_r+0x518>
 800911c:	9b00      	ldr	r3, [sp, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	dd37      	ble.n	8009192 <_dtoa_r+0x43a>
 8009122:	1e7b      	subs	r3, r7, #1
 8009124:	9304      	str	r3, [sp, #16]
 8009126:	4620      	mov	r0, r4
 8009128:	4b7d      	ldr	r3, [pc, #500]	@ (8009320 <_dtoa_r+0x5c8>)
 800912a:	2200      	movs	r2, #0
 800912c:	4629      	mov	r1, r5
 800912e:	f7f7 fa8b 	bl	8000648 <__aeabi_dmul>
 8009132:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009136:	9c00      	ldr	r4, [sp, #0]
 8009138:	3601      	adds	r6, #1
 800913a:	4630      	mov	r0, r6
 800913c:	f7f7 fa1a 	bl	8000574 <__aeabi_i2d>
 8009140:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009144:	f7f7 fa80 	bl	8000648 <__aeabi_dmul>
 8009148:	4b76      	ldr	r3, [pc, #472]	@ (8009324 <_dtoa_r+0x5cc>)
 800914a:	2200      	movs	r2, #0
 800914c:	f7f7 f8c6 	bl	80002dc <__adddf3>
 8009150:	4605      	mov	r5, r0
 8009152:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009156:	2c00      	cmp	r4, #0
 8009158:	f040 808d 	bne.w	8009276 <_dtoa_r+0x51e>
 800915c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009160:	4b71      	ldr	r3, [pc, #452]	@ (8009328 <_dtoa_r+0x5d0>)
 8009162:	2200      	movs	r2, #0
 8009164:	f7f7 f8b8 	bl	80002d8 <__aeabi_dsub>
 8009168:	4602      	mov	r2, r0
 800916a:	460b      	mov	r3, r1
 800916c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009170:	462a      	mov	r2, r5
 8009172:	4633      	mov	r3, r6
 8009174:	f7f7 fcf8 	bl	8000b68 <__aeabi_dcmpgt>
 8009178:	2800      	cmp	r0, #0
 800917a:	f040 828b 	bne.w	8009694 <_dtoa_r+0x93c>
 800917e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009182:	462a      	mov	r2, r5
 8009184:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009188:	f7f7 fcd0 	bl	8000b2c <__aeabi_dcmplt>
 800918c:	2800      	cmp	r0, #0
 800918e:	f040 8128 	bne.w	80093e2 <_dtoa_r+0x68a>
 8009192:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009196:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800919a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800919c:	2b00      	cmp	r3, #0
 800919e:	f2c0 815a 	blt.w	8009456 <_dtoa_r+0x6fe>
 80091a2:	2f0e      	cmp	r7, #14
 80091a4:	f300 8157 	bgt.w	8009456 <_dtoa_r+0x6fe>
 80091a8:	4b5a      	ldr	r3, [pc, #360]	@ (8009314 <_dtoa_r+0x5bc>)
 80091aa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80091ae:	ed93 7b00 	vldr	d7, [r3]
 80091b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	ed8d 7b00 	vstr	d7, [sp]
 80091ba:	da03      	bge.n	80091c4 <_dtoa_r+0x46c>
 80091bc:	9b07      	ldr	r3, [sp, #28]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	f340 8101 	ble.w	80093c6 <_dtoa_r+0x66e>
 80091c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80091c8:	4656      	mov	r6, sl
 80091ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091ce:	4620      	mov	r0, r4
 80091d0:	4629      	mov	r1, r5
 80091d2:	f7f7 fb63 	bl	800089c <__aeabi_ddiv>
 80091d6:	f7f7 fce7 	bl	8000ba8 <__aeabi_d2iz>
 80091da:	4680      	mov	r8, r0
 80091dc:	f7f7 f9ca 	bl	8000574 <__aeabi_i2d>
 80091e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091e4:	f7f7 fa30 	bl	8000648 <__aeabi_dmul>
 80091e8:	4602      	mov	r2, r0
 80091ea:	460b      	mov	r3, r1
 80091ec:	4620      	mov	r0, r4
 80091ee:	4629      	mov	r1, r5
 80091f0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80091f4:	f7f7 f870 	bl	80002d8 <__aeabi_dsub>
 80091f8:	f806 4b01 	strb.w	r4, [r6], #1
 80091fc:	9d07      	ldr	r5, [sp, #28]
 80091fe:	eba6 040a 	sub.w	r4, r6, sl
 8009202:	42a5      	cmp	r5, r4
 8009204:	4602      	mov	r2, r0
 8009206:	460b      	mov	r3, r1
 8009208:	f040 8117 	bne.w	800943a <_dtoa_r+0x6e2>
 800920c:	f7f7 f866 	bl	80002dc <__adddf3>
 8009210:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009214:	4604      	mov	r4, r0
 8009216:	460d      	mov	r5, r1
 8009218:	f7f7 fca6 	bl	8000b68 <__aeabi_dcmpgt>
 800921c:	2800      	cmp	r0, #0
 800921e:	f040 80f9 	bne.w	8009414 <_dtoa_r+0x6bc>
 8009222:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009226:	4620      	mov	r0, r4
 8009228:	4629      	mov	r1, r5
 800922a:	f7f7 fc75 	bl	8000b18 <__aeabi_dcmpeq>
 800922e:	b118      	cbz	r0, 8009238 <_dtoa_r+0x4e0>
 8009230:	f018 0f01 	tst.w	r8, #1
 8009234:	f040 80ee 	bne.w	8009414 <_dtoa_r+0x6bc>
 8009238:	4649      	mov	r1, r9
 800923a:	4658      	mov	r0, fp
 800923c:	f000 fc90 	bl	8009b60 <_Bfree>
 8009240:	2300      	movs	r3, #0
 8009242:	7033      	strb	r3, [r6, #0]
 8009244:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009246:	3701      	adds	r7, #1
 8009248:	601f      	str	r7, [r3, #0]
 800924a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800924c:	2b00      	cmp	r3, #0
 800924e:	f000 831d 	beq.w	800988c <_dtoa_r+0xb34>
 8009252:	601e      	str	r6, [r3, #0]
 8009254:	e31a      	b.n	800988c <_dtoa_r+0xb34>
 8009256:	07e2      	lsls	r2, r4, #31
 8009258:	d505      	bpl.n	8009266 <_dtoa_r+0x50e>
 800925a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800925e:	f7f7 f9f3 	bl	8000648 <__aeabi_dmul>
 8009262:	3601      	adds	r6, #1
 8009264:	2301      	movs	r3, #1
 8009266:	1064      	asrs	r4, r4, #1
 8009268:	3508      	adds	r5, #8
 800926a:	e73f      	b.n	80090ec <_dtoa_r+0x394>
 800926c:	2602      	movs	r6, #2
 800926e:	e742      	b.n	80090f6 <_dtoa_r+0x39e>
 8009270:	9c07      	ldr	r4, [sp, #28]
 8009272:	9704      	str	r7, [sp, #16]
 8009274:	e761      	b.n	800913a <_dtoa_r+0x3e2>
 8009276:	4b27      	ldr	r3, [pc, #156]	@ (8009314 <_dtoa_r+0x5bc>)
 8009278:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800927a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800927e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009282:	4454      	add	r4, sl
 8009284:	2900      	cmp	r1, #0
 8009286:	d053      	beq.n	8009330 <_dtoa_r+0x5d8>
 8009288:	4928      	ldr	r1, [pc, #160]	@ (800932c <_dtoa_r+0x5d4>)
 800928a:	2000      	movs	r0, #0
 800928c:	f7f7 fb06 	bl	800089c <__aeabi_ddiv>
 8009290:	4633      	mov	r3, r6
 8009292:	462a      	mov	r2, r5
 8009294:	f7f7 f820 	bl	80002d8 <__aeabi_dsub>
 8009298:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800929c:	4656      	mov	r6, sl
 800929e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092a2:	f7f7 fc81 	bl	8000ba8 <__aeabi_d2iz>
 80092a6:	4605      	mov	r5, r0
 80092a8:	f7f7 f964 	bl	8000574 <__aeabi_i2d>
 80092ac:	4602      	mov	r2, r0
 80092ae:	460b      	mov	r3, r1
 80092b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092b4:	f7f7 f810 	bl	80002d8 <__aeabi_dsub>
 80092b8:	3530      	adds	r5, #48	@ 0x30
 80092ba:	4602      	mov	r2, r0
 80092bc:	460b      	mov	r3, r1
 80092be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80092c2:	f806 5b01 	strb.w	r5, [r6], #1
 80092c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80092ca:	f7f7 fc2f 	bl	8000b2c <__aeabi_dcmplt>
 80092ce:	2800      	cmp	r0, #0
 80092d0:	d171      	bne.n	80093b6 <_dtoa_r+0x65e>
 80092d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80092d6:	4911      	ldr	r1, [pc, #68]	@ (800931c <_dtoa_r+0x5c4>)
 80092d8:	2000      	movs	r0, #0
 80092da:	f7f6 fffd 	bl	80002d8 <__aeabi_dsub>
 80092de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80092e2:	f7f7 fc23 	bl	8000b2c <__aeabi_dcmplt>
 80092e6:	2800      	cmp	r0, #0
 80092e8:	f040 8095 	bne.w	8009416 <_dtoa_r+0x6be>
 80092ec:	42a6      	cmp	r6, r4
 80092ee:	f43f af50 	beq.w	8009192 <_dtoa_r+0x43a>
 80092f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80092f6:	4b0a      	ldr	r3, [pc, #40]	@ (8009320 <_dtoa_r+0x5c8>)
 80092f8:	2200      	movs	r2, #0
 80092fa:	f7f7 f9a5 	bl	8000648 <__aeabi_dmul>
 80092fe:	4b08      	ldr	r3, [pc, #32]	@ (8009320 <_dtoa_r+0x5c8>)
 8009300:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009304:	2200      	movs	r2, #0
 8009306:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800930a:	f7f7 f99d 	bl	8000648 <__aeabi_dmul>
 800930e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009312:	e7c4      	b.n	800929e <_dtoa_r+0x546>
 8009314:	0800d0f0 	.word	0x0800d0f0
 8009318:	0800d0c8 	.word	0x0800d0c8
 800931c:	3ff00000 	.word	0x3ff00000
 8009320:	40240000 	.word	0x40240000
 8009324:	401c0000 	.word	0x401c0000
 8009328:	40140000 	.word	0x40140000
 800932c:	3fe00000 	.word	0x3fe00000
 8009330:	4631      	mov	r1, r6
 8009332:	4628      	mov	r0, r5
 8009334:	f7f7 f988 	bl	8000648 <__aeabi_dmul>
 8009338:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800933c:	9415      	str	r4, [sp, #84]	@ 0x54
 800933e:	4656      	mov	r6, sl
 8009340:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009344:	f7f7 fc30 	bl	8000ba8 <__aeabi_d2iz>
 8009348:	4605      	mov	r5, r0
 800934a:	f7f7 f913 	bl	8000574 <__aeabi_i2d>
 800934e:	4602      	mov	r2, r0
 8009350:	460b      	mov	r3, r1
 8009352:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009356:	f7f6 ffbf 	bl	80002d8 <__aeabi_dsub>
 800935a:	3530      	adds	r5, #48	@ 0x30
 800935c:	f806 5b01 	strb.w	r5, [r6], #1
 8009360:	4602      	mov	r2, r0
 8009362:	460b      	mov	r3, r1
 8009364:	42a6      	cmp	r6, r4
 8009366:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800936a:	f04f 0200 	mov.w	r2, #0
 800936e:	d124      	bne.n	80093ba <_dtoa_r+0x662>
 8009370:	4bac      	ldr	r3, [pc, #688]	@ (8009624 <_dtoa_r+0x8cc>)
 8009372:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009376:	f7f6 ffb1 	bl	80002dc <__adddf3>
 800937a:	4602      	mov	r2, r0
 800937c:	460b      	mov	r3, r1
 800937e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009382:	f7f7 fbf1 	bl	8000b68 <__aeabi_dcmpgt>
 8009386:	2800      	cmp	r0, #0
 8009388:	d145      	bne.n	8009416 <_dtoa_r+0x6be>
 800938a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800938e:	49a5      	ldr	r1, [pc, #660]	@ (8009624 <_dtoa_r+0x8cc>)
 8009390:	2000      	movs	r0, #0
 8009392:	f7f6 ffa1 	bl	80002d8 <__aeabi_dsub>
 8009396:	4602      	mov	r2, r0
 8009398:	460b      	mov	r3, r1
 800939a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800939e:	f7f7 fbc5 	bl	8000b2c <__aeabi_dcmplt>
 80093a2:	2800      	cmp	r0, #0
 80093a4:	f43f aef5 	beq.w	8009192 <_dtoa_r+0x43a>
 80093a8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80093aa:	1e73      	subs	r3, r6, #1
 80093ac:	9315      	str	r3, [sp, #84]	@ 0x54
 80093ae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80093b2:	2b30      	cmp	r3, #48	@ 0x30
 80093b4:	d0f8      	beq.n	80093a8 <_dtoa_r+0x650>
 80093b6:	9f04      	ldr	r7, [sp, #16]
 80093b8:	e73e      	b.n	8009238 <_dtoa_r+0x4e0>
 80093ba:	4b9b      	ldr	r3, [pc, #620]	@ (8009628 <_dtoa_r+0x8d0>)
 80093bc:	f7f7 f944 	bl	8000648 <__aeabi_dmul>
 80093c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093c4:	e7bc      	b.n	8009340 <_dtoa_r+0x5e8>
 80093c6:	d10c      	bne.n	80093e2 <_dtoa_r+0x68a>
 80093c8:	4b98      	ldr	r3, [pc, #608]	@ (800962c <_dtoa_r+0x8d4>)
 80093ca:	2200      	movs	r2, #0
 80093cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80093d0:	f7f7 f93a 	bl	8000648 <__aeabi_dmul>
 80093d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80093d8:	f7f7 fbbc 	bl	8000b54 <__aeabi_dcmpge>
 80093dc:	2800      	cmp	r0, #0
 80093de:	f000 8157 	beq.w	8009690 <_dtoa_r+0x938>
 80093e2:	2400      	movs	r4, #0
 80093e4:	4625      	mov	r5, r4
 80093e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80093e8:	43db      	mvns	r3, r3
 80093ea:	9304      	str	r3, [sp, #16]
 80093ec:	4656      	mov	r6, sl
 80093ee:	2700      	movs	r7, #0
 80093f0:	4621      	mov	r1, r4
 80093f2:	4658      	mov	r0, fp
 80093f4:	f000 fbb4 	bl	8009b60 <_Bfree>
 80093f8:	2d00      	cmp	r5, #0
 80093fa:	d0dc      	beq.n	80093b6 <_dtoa_r+0x65e>
 80093fc:	b12f      	cbz	r7, 800940a <_dtoa_r+0x6b2>
 80093fe:	42af      	cmp	r7, r5
 8009400:	d003      	beq.n	800940a <_dtoa_r+0x6b2>
 8009402:	4639      	mov	r1, r7
 8009404:	4658      	mov	r0, fp
 8009406:	f000 fbab 	bl	8009b60 <_Bfree>
 800940a:	4629      	mov	r1, r5
 800940c:	4658      	mov	r0, fp
 800940e:	f000 fba7 	bl	8009b60 <_Bfree>
 8009412:	e7d0      	b.n	80093b6 <_dtoa_r+0x65e>
 8009414:	9704      	str	r7, [sp, #16]
 8009416:	4633      	mov	r3, r6
 8009418:	461e      	mov	r6, r3
 800941a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800941e:	2a39      	cmp	r2, #57	@ 0x39
 8009420:	d107      	bne.n	8009432 <_dtoa_r+0x6da>
 8009422:	459a      	cmp	sl, r3
 8009424:	d1f8      	bne.n	8009418 <_dtoa_r+0x6c0>
 8009426:	9a04      	ldr	r2, [sp, #16]
 8009428:	3201      	adds	r2, #1
 800942a:	9204      	str	r2, [sp, #16]
 800942c:	2230      	movs	r2, #48	@ 0x30
 800942e:	f88a 2000 	strb.w	r2, [sl]
 8009432:	781a      	ldrb	r2, [r3, #0]
 8009434:	3201      	adds	r2, #1
 8009436:	701a      	strb	r2, [r3, #0]
 8009438:	e7bd      	b.n	80093b6 <_dtoa_r+0x65e>
 800943a:	4b7b      	ldr	r3, [pc, #492]	@ (8009628 <_dtoa_r+0x8d0>)
 800943c:	2200      	movs	r2, #0
 800943e:	f7f7 f903 	bl	8000648 <__aeabi_dmul>
 8009442:	2200      	movs	r2, #0
 8009444:	2300      	movs	r3, #0
 8009446:	4604      	mov	r4, r0
 8009448:	460d      	mov	r5, r1
 800944a:	f7f7 fb65 	bl	8000b18 <__aeabi_dcmpeq>
 800944e:	2800      	cmp	r0, #0
 8009450:	f43f aebb 	beq.w	80091ca <_dtoa_r+0x472>
 8009454:	e6f0      	b.n	8009238 <_dtoa_r+0x4e0>
 8009456:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009458:	2a00      	cmp	r2, #0
 800945a:	f000 80db 	beq.w	8009614 <_dtoa_r+0x8bc>
 800945e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009460:	2a01      	cmp	r2, #1
 8009462:	f300 80bf 	bgt.w	80095e4 <_dtoa_r+0x88c>
 8009466:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009468:	2a00      	cmp	r2, #0
 800946a:	f000 80b7 	beq.w	80095dc <_dtoa_r+0x884>
 800946e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009472:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009474:	4646      	mov	r6, r8
 8009476:	9a08      	ldr	r2, [sp, #32]
 8009478:	2101      	movs	r1, #1
 800947a:	441a      	add	r2, r3
 800947c:	4658      	mov	r0, fp
 800947e:	4498      	add	r8, r3
 8009480:	9208      	str	r2, [sp, #32]
 8009482:	f000 fc6b 	bl	8009d5c <__i2b>
 8009486:	4605      	mov	r5, r0
 8009488:	b15e      	cbz	r6, 80094a2 <_dtoa_r+0x74a>
 800948a:	9b08      	ldr	r3, [sp, #32]
 800948c:	2b00      	cmp	r3, #0
 800948e:	dd08      	ble.n	80094a2 <_dtoa_r+0x74a>
 8009490:	42b3      	cmp	r3, r6
 8009492:	9a08      	ldr	r2, [sp, #32]
 8009494:	bfa8      	it	ge
 8009496:	4633      	movge	r3, r6
 8009498:	eba8 0803 	sub.w	r8, r8, r3
 800949c:	1af6      	subs	r6, r6, r3
 800949e:	1ad3      	subs	r3, r2, r3
 80094a0:	9308      	str	r3, [sp, #32]
 80094a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094a4:	b1f3      	cbz	r3, 80094e4 <_dtoa_r+0x78c>
 80094a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	f000 80b7 	beq.w	800961c <_dtoa_r+0x8c4>
 80094ae:	b18c      	cbz	r4, 80094d4 <_dtoa_r+0x77c>
 80094b0:	4629      	mov	r1, r5
 80094b2:	4622      	mov	r2, r4
 80094b4:	4658      	mov	r0, fp
 80094b6:	f000 fd11 	bl	8009edc <__pow5mult>
 80094ba:	464a      	mov	r2, r9
 80094bc:	4601      	mov	r1, r0
 80094be:	4605      	mov	r5, r0
 80094c0:	4658      	mov	r0, fp
 80094c2:	f000 fc61 	bl	8009d88 <__multiply>
 80094c6:	4649      	mov	r1, r9
 80094c8:	9004      	str	r0, [sp, #16]
 80094ca:	4658      	mov	r0, fp
 80094cc:	f000 fb48 	bl	8009b60 <_Bfree>
 80094d0:	9b04      	ldr	r3, [sp, #16]
 80094d2:	4699      	mov	r9, r3
 80094d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094d6:	1b1a      	subs	r2, r3, r4
 80094d8:	d004      	beq.n	80094e4 <_dtoa_r+0x78c>
 80094da:	4649      	mov	r1, r9
 80094dc:	4658      	mov	r0, fp
 80094de:	f000 fcfd 	bl	8009edc <__pow5mult>
 80094e2:	4681      	mov	r9, r0
 80094e4:	2101      	movs	r1, #1
 80094e6:	4658      	mov	r0, fp
 80094e8:	f000 fc38 	bl	8009d5c <__i2b>
 80094ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094ee:	4604      	mov	r4, r0
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	f000 81cf 	beq.w	8009894 <_dtoa_r+0xb3c>
 80094f6:	461a      	mov	r2, r3
 80094f8:	4601      	mov	r1, r0
 80094fa:	4658      	mov	r0, fp
 80094fc:	f000 fcee 	bl	8009edc <__pow5mult>
 8009500:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009502:	2b01      	cmp	r3, #1
 8009504:	4604      	mov	r4, r0
 8009506:	f300 8095 	bgt.w	8009634 <_dtoa_r+0x8dc>
 800950a:	9b02      	ldr	r3, [sp, #8]
 800950c:	2b00      	cmp	r3, #0
 800950e:	f040 8087 	bne.w	8009620 <_dtoa_r+0x8c8>
 8009512:	9b03      	ldr	r3, [sp, #12]
 8009514:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009518:	2b00      	cmp	r3, #0
 800951a:	f040 8089 	bne.w	8009630 <_dtoa_r+0x8d8>
 800951e:	9b03      	ldr	r3, [sp, #12]
 8009520:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009524:	0d1b      	lsrs	r3, r3, #20
 8009526:	051b      	lsls	r3, r3, #20
 8009528:	b12b      	cbz	r3, 8009536 <_dtoa_r+0x7de>
 800952a:	9b08      	ldr	r3, [sp, #32]
 800952c:	3301      	adds	r3, #1
 800952e:	9308      	str	r3, [sp, #32]
 8009530:	f108 0801 	add.w	r8, r8, #1
 8009534:	2301      	movs	r3, #1
 8009536:	930a      	str	r3, [sp, #40]	@ 0x28
 8009538:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800953a:	2b00      	cmp	r3, #0
 800953c:	f000 81b0 	beq.w	80098a0 <_dtoa_r+0xb48>
 8009540:	6923      	ldr	r3, [r4, #16]
 8009542:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009546:	6918      	ldr	r0, [r3, #16]
 8009548:	f000 fbbc 	bl	8009cc4 <__hi0bits>
 800954c:	f1c0 0020 	rsb	r0, r0, #32
 8009550:	9b08      	ldr	r3, [sp, #32]
 8009552:	4418      	add	r0, r3
 8009554:	f010 001f 	ands.w	r0, r0, #31
 8009558:	d077      	beq.n	800964a <_dtoa_r+0x8f2>
 800955a:	f1c0 0320 	rsb	r3, r0, #32
 800955e:	2b04      	cmp	r3, #4
 8009560:	dd6b      	ble.n	800963a <_dtoa_r+0x8e2>
 8009562:	9b08      	ldr	r3, [sp, #32]
 8009564:	f1c0 001c 	rsb	r0, r0, #28
 8009568:	4403      	add	r3, r0
 800956a:	4480      	add	r8, r0
 800956c:	4406      	add	r6, r0
 800956e:	9308      	str	r3, [sp, #32]
 8009570:	f1b8 0f00 	cmp.w	r8, #0
 8009574:	dd05      	ble.n	8009582 <_dtoa_r+0x82a>
 8009576:	4649      	mov	r1, r9
 8009578:	4642      	mov	r2, r8
 800957a:	4658      	mov	r0, fp
 800957c:	f000 fd08 	bl	8009f90 <__lshift>
 8009580:	4681      	mov	r9, r0
 8009582:	9b08      	ldr	r3, [sp, #32]
 8009584:	2b00      	cmp	r3, #0
 8009586:	dd05      	ble.n	8009594 <_dtoa_r+0x83c>
 8009588:	4621      	mov	r1, r4
 800958a:	461a      	mov	r2, r3
 800958c:	4658      	mov	r0, fp
 800958e:	f000 fcff 	bl	8009f90 <__lshift>
 8009592:	4604      	mov	r4, r0
 8009594:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009596:	2b00      	cmp	r3, #0
 8009598:	d059      	beq.n	800964e <_dtoa_r+0x8f6>
 800959a:	4621      	mov	r1, r4
 800959c:	4648      	mov	r0, r9
 800959e:	f000 fd63 	bl	800a068 <__mcmp>
 80095a2:	2800      	cmp	r0, #0
 80095a4:	da53      	bge.n	800964e <_dtoa_r+0x8f6>
 80095a6:	1e7b      	subs	r3, r7, #1
 80095a8:	9304      	str	r3, [sp, #16]
 80095aa:	4649      	mov	r1, r9
 80095ac:	2300      	movs	r3, #0
 80095ae:	220a      	movs	r2, #10
 80095b0:	4658      	mov	r0, fp
 80095b2:	f000 faf7 	bl	8009ba4 <__multadd>
 80095b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095b8:	4681      	mov	r9, r0
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	f000 8172 	beq.w	80098a4 <_dtoa_r+0xb4c>
 80095c0:	2300      	movs	r3, #0
 80095c2:	4629      	mov	r1, r5
 80095c4:	220a      	movs	r2, #10
 80095c6:	4658      	mov	r0, fp
 80095c8:	f000 faec 	bl	8009ba4 <__multadd>
 80095cc:	9b00      	ldr	r3, [sp, #0]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	4605      	mov	r5, r0
 80095d2:	dc67      	bgt.n	80096a4 <_dtoa_r+0x94c>
 80095d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095d6:	2b02      	cmp	r3, #2
 80095d8:	dc41      	bgt.n	800965e <_dtoa_r+0x906>
 80095da:	e063      	b.n	80096a4 <_dtoa_r+0x94c>
 80095dc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80095de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80095e2:	e746      	b.n	8009472 <_dtoa_r+0x71a>
 80095e4:	9b07      	ldr	r3, [sp, #28]
 80095e6:	1e5c      	subs	r4, r3, #1
 80095e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095ea:	42a3      	cmp	r3, r4
 80095ec:	bfbf      	itttt	lt
 80095ee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80095f0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80095f2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80095f4:	1ae3      	sublt	r3, r4, r3
 80095f6:	bfb4      	ite	lt
 80095f8:	18d2      	addlt	r2, r2, r3
 80095fa:	1b1c      	subge	r4, r3, r4
 80095fc:	9b07      	ldr	r3, [sp, #28]
 80095fe:	bfbc      	itt	lt
 8009600:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009602:	2400      	movlt	r4, #0
 8009604:	2b00      	cmp	r3, #0
 8009606:	bfb5      	itete	lt
 8009608:	eba8 0603 	sublt.w	r6, r8, r3
 800960c:	9b07      	ldrge	r3, [sp, #28]
 800960e:	2300      	movlt	r3, #0
 8009610:	4646      	movge	r6, r8
 8009612:	e730      	b.n	8009476 <_dtoa_r+0x71e>
 8009614:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009616:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009618:	4646      	mov	r6, r8
 800961a:	e735      	b.n	8009488 <_dtoa_r+0x730>
 800961c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800961e:	e75c      	b.n	80094da <_dtoa_r+0x782>
 8009620:	2300      	movs	r3, #0
 8009622:	e788      	b.n	8009536 <_dtoa_r+0x7de>
 8009624:	3fe00000 	.word	0x3fe00000
 8009628:	40240000 	.word	0x40240000
 800962c:	40140000 	.word	0x40140000
 8009630:	9b02      	ldr	r3, [sp, #8]
 8009632:	e780      	b.n	8009536 <_dtoa_r+0x7de>
 8009634:	2300      	movs	r3, #0
 8009636:	930a      	str	r3, [sp, #40]	@ 0x28
 8009638:	e782      	b.n	8009540 <_dtoa_r+0x7e8>
 800963a:	d099      	beq.n	8009570 <_dtoa_r+0x818>
 800963c:	9a08      	ldr	r2, [sp, #32]
 800963e:	331c      	adds	r3, #28
 8009640:	441a      	add	r2, r3
 8009642:	4498      	add	r8, r3
 8009644:	441e      	add	r6, r3
 8009646:	9208      	str	r2, [sp, #32]
 8009648:	e792      	b.n	8009570 <_dtoa_r+0x818>
 800964a:	4603      	mov	r3, r0
 800964c:	e7f6      	b.n	800963c <_dtoa_r+0x8e4>
 800964e:	9b07      	ldr	r3, [sp, #28]
 8009650:	9704      	str	r7, [sp, #16]
 8009652:	2b00      	cmp	r3, #0
 8009654:	dc20      	bgt.n	8009698 <_dtoa_r+0x940>
 8009656:	9300      	str	r3, [sp, #0]
 8009658:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800965a:	2b02      	cmp	r3, #2
 800965c:	dd1e      	ble.n	800969c <_dtoa_r+0x944>
 800965e:	9b00      	ldr	r3, [sp, #0]
 8009660:	2b00      	cmp	r3, #0
 8009662:	f47f aec0 	bne.w	80093e6 <_dtoa_r+0x68e>
 8009666:	4621      	mov	r1, r4
 8009668:	2205      	movs	r2, #5
 800966a:	4658      	mov	r0, fp
 800966c:	f000 fa9a 	bl	8009ba4 <__multadd>
 8009670:	4601      	mov	r1, r0
 8009672:	4604      	mov	r4, r0
 8009674:	4648      	mov	r0, r9
 8009676:	f000 fcf7 	bl	800a068 <__mcmp>
 800967a:	2800      	cmp	r0, #0
 800967c:	f77f aeb3 	ble.w	80093e6 <_dtoa_r+0x68e>
 8009680:	4656      	mov	r6, sl
 8009682:	2331      	movs	r3, #49	@ 0x31
 8009684:	f806 3b01 	strb.w	r3, [r6], #1
 8009688:	9b04      	ldr	r3, [sp, #16]
 800968a:	3301      	adds	r3, #1
 800968c:	9304      	str	r3, [sp, #16]
 800968e:	e6ae      	b.n	80093ee <_dtoa_r+0x696>
 8009690:	9c07      	ldr	r4, [sp, #28]
 8009692:	9704      	str	r7, [sp, #16]
 8009694:	4625      	mov	r5, r4
 8009696:	e7f3      	b.n	8009680 <_dtoa_r+0x928>
 8009698:	9b07      	ldr	r3, [sp, #28]
 800969a:	9300      	str	r3, [sp, #0]
 800969c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800969e:	2b00      	cmp	r3, #0
 80096a0:	f000 8104 	beq.w	80098ac <_dtoa_r+0xb54>
 80096a4:	2e00      	cmp	r6, #0
 80096a6:	dd05      	ble.n	80096b4 <_dtoa_r+0x95c>
 80096a8:	4629      	mov	r1, r5
 80096aa:	4632      	mov	r2, r6
 80096ac:	4658      	mov	r0, fp
 80096ae:	f000 fc6f 	bl	8009f90 <__lshift>
 80096b2:	4605      	mov	r5, r0
 80096b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d05a      	beq.n	8009770 <_dtoa_r+0xa18>
 80096ba:	6869      	ldr	r1, [r5, #4]
 80096bc:	4658      	mov	r0, fp
 80096be:	f000 fa0f 	bl	8009ae0 <_Balloc>
 80096c2:	4606      	mov	r6, r0
 80096c4:	b928      	cbnz	r0, 80096d2 <_dtoa_r+0x97a>
 80096c6:	4b84      	ldr	r3, [pc, #528]	@ (80098d8 <_dtoa_r+0xb80>)
 80096c8:	4602      	mov	r2, r0
 80096ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80096ce:	f7ff bb5a 	b.w	8008d86 <_dtoa_r+0x2e>
 80096d2:	692a      	ldr	r2, [r5, #16]
 80096d4:	3202      	adds	r2, #2
 80096d6:	0092      	lsls	r2, r2, #2
 80096d8:	f105 010c 	add.w	r1, r5, #12
 80096dc:	300c      	adds	r0, #12
 80096de:	f7ff fa9e 	bl	8008c1e <memcpy>
 80096e2:	2201      	movs	r2, #1
 80096e4:	4631      	mov	r1, r6
 80096e6:	4658      	mov	r0, fp
 80096e8:	f000 fc52 	bl	8009f90 <__lshift>
 80096ec:	f10a 0301 	add.w	r3, sl, #1
 80096f0:	9307      	str	r3, [sp, #28]
 80096f2:	9b00      	ldr	r3, [sp, #0]
 80096f4:	4453      	add	r3, sl
 80096f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80096f8:	9b02      	ldr	r3, [sp, #8]
 80096fa:	f003 0301 	and.w	r3, r3, #1
 80096fe:	462f      	mov	r7, r5
 8009700:	930a      	str	r3, [sp, #40]	@ 0x28
 8009702:	4605      	mov	r5, r0
 8009704:	9b07      	ldr	r3, [sp, #28]
 8009706:	4621      	mov	r1, r4
 8009708:	3b01      	subs	r3, #1
 800970a:	4648      	mov	r0, r9
 800970c:	9300      	str	r3, [sp, #0]
 800970e:	f7ff fa9b 	bl	8008c48 <quorem>
 8009712:	4639      	mov	r1, r7
 8009714:	9002      	str	r0, [sp, #8]
 8009716:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800971a:	4648      	mov	r0, r9
 800971c:	f000 fca4 	bl	800a068 <__mcmp>
 8009720:	462a      	mov	r2, r5
 8009722:	9008      	str	r0, [sp, #32]
 8009724:	4621      	mov	r1, r4
 8009726:	4658      	mov	r0, fp
 8009728:	f000 fcba 	bl	800a0a0 <__mdiff>
 800972c:	68c2      	ldr	r2, [r0, #12]
 800972e:	4606      	mov	r6, r0
 8009730:	bb02      	cbnz	r2, 8009774 <_dtoa_r+0xa1c>
 8009732:	4601      	mov	r1, r0
 8009734:	4648      	mov	r0, r9
 8009736:	f000 fc97 	bl	800a068 <__mcmp>
 800973a:	4602      	mov	r2, r0
 800973c:	4631      	mov	r1, r6
 800973e:	4658      	mov	r0, fp
 8009740:	920e      	str	r2, [sp, #56]	@ 0x38
 8009742:	f000 fa0d 	bl	8009b60 <_Bfree>
 8009746:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009748:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800974a:	9e07      	ldr	r6, [sp, #28]
 800974c:	ea43 0102 	orr.w	r1, r3, r2
 8009750:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009752:	4319      	orrs	r1, r3
 8009754:	d110      	bne.n	8009778 <_dtoa_r+0xa20>
 8009756:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800975a:	d029      	beq.n	80097b0 <_dtoa_r+0xa58>
 800975c:	9b08      	ldr	r3, [sp, #32]
 800975e:	2b00      	cmp	r3, #0
 8009760:	dd02      	ble.n	8009768 <_dtoa_r+0xa10>
 8009762:	9b02      	ldr	r3, [sp, #8]
 8009764:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009768:	9b00      	ldr	r3, [sp, #0]
 800976a:	f883 8000 	strb.w	r8, [r3]
 800976e:	e63f      	b.n	80093f0 <_dtoa_r+0x698>
 8009770:	4628      	mov	r0, r5
 8009772:	e7bb      	b.n	80096ec <_dtoa_r+0x994>
 8009774:	2201      	movs	r2, #1
 8009776:	e7e1      	b.n	800973c <_dtoa_r+0x9e4>
 8009778:	9b08      	ldr	r3, [sp, #32]
 800977a:	2b00      	cmp	r3, #0
 800977c:	db04      	blt.n	8009788 <_dtoa_r+0xa30>
 800977e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009780:	430b      	orrs	r3, r1
 8009782:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009784:	430b      	orrs	r3, r1
 8009786:	d120      	bne.n	80097ca <_dtoa_r+0xa72>
 8009788:	2a00      	cmp	r2, #0
 800978a:	dded      	ble.n	8009768 <_dtoa_r+0xa10>
 800978c:	4649      	mov	r1, r9
 800978e:	2201      	movs	r2, #1
 8009790:	4658      	mov	r0, fp
 8009792:	f000 fbfd 	bl	8009f90 <__lshift>
 8009796:	4621      	mov	r1, r4
 8009798:	4681      	mov	r9, r0
 800979a:	f000 fc65 	bl	800a068 <__mcmp>
 800979e:	2800      	cmp	r0, #0
 80097a0:	dc03      	bgt.n	80097aa <_dtoa_r+0xa52>
 80097a2:	d1e1      	bne.n	8009768 <_dtoa_r+0xa10>
 80097a4:	f018 0f01 	tst.w	r8, #1
 80097a8:	d0de      	beq.n	8009768 <_dtoa_r+0xa10>
 80097aa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80097ae:	d1d8      	bne.n	8009762 <_dtoa_r+0xa0a>
 80097b0:	9a00      	ldr	r2, [sp, #0]
 80097b2:	2339      	movs	r3, #57	@ 0x39
 80097b4:	7013      	strb	r3, [r2, #0]
 80097b6:	4633      	mov	r3, r6
 80097b8:	461e      	mov	r6, r3
 80097ba:	3b01      	subs	r3, #1
 80097bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80097c0:	2a39      	cmp	r2, #57	@ 0x39
 80097c2:	d052      	beq.n	800986a <_dtoa_r+0xb12>
 80097c4:	3201      	adds	r2, #1
 80097c6:	701a      	strb	r2, [r3, #0]
 80097c8:	e612      	b.n	80093f0 <_dtoa_r+0x698>
 80097ca:	2a00      	cmp	r2, #0
 80097cc:	dd07      	ble.n	80097de <_dtoa_r+0xa86>
 80097ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80097d2:	d0ed      	beq.n	80097b0 <_dtoa_r+0xa58>
 80097d4:	9a00      	ldr	r2, [sp, #0]
 80097d6:	f108 0301 	add.w	r3, r8, #1
 80097da:	7013      	strb	r3, [r2, #0]
 80097dc:	e608      	b.n	80093f0 <_dtoa_r+0x698>
 80097de:	9b07      	ldr	r3, [sp, #28]
 80097e0:	9a07      	ldr	r2, [sp, #28]
 80097e2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80097e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d028      	beq.n	800983e <_dtoa_r+0xae6>
 80097ec:	4649      	mov	r1, r9
 80097ee:	2300      	movs	r3, #0
 80097f0:	220a      	movs	r2, #10
 80097f2:	4658      	mov	r0, fp
 80097f4:	f000 f9d6 	bl	8009ba4 <__multadd>
 80097f8:	42af      	cmp	r7, r5
 80097fa:	4681      	mov	r9, r0
 80097fc:	f04f 0300 	mov.w	r3, #0
 8009800:	f04f 020a 	mov.w	r2, #10
 8009804:	4639      	mov	r1, r7
 8009806:	4658      	mov	r0, fp
 8009808:	d107      	bne.n	800981a <_dtoa_r+0xac2>
 800980a:	f000 f9cb 	bl	8009ba4 <__multadd>
 800980e:	4607      	mov	r7, r0
 8009810:	4605      	mov	r5, r0
 8009812:	9b07      	ldr	r3, [sp, #28]
 8009814:	3301      	adds	r3, #1
 8009816:	9307      	str	r3, [sp, #28]
 8009818:	e774      	b.n	8009704 <_dtoa_r+0x9ac>
 800981a:	f000 f9c3 	bl	8009ba4 <__multadd>
 800981e:	4629      	mov	r1, r5
 8009820:	4607      	mov	r7, r0
 8009822:	2300      	movs	r3, #0
 8009824:	220a      	movs	r2, #10
 8009826:	4658      	mov	r0, fp
 8009828:	f000 f9bc 	bl	8009ba4 <__multadd>
 800982c:	4605      	mov	r5, r0
 800982e:	e7f0      	b.n	8009812 <_dtoa_r+0xaba>
 8009830:	9b00      	ldr	r3, [sp, #0]
 8009832:	2b00      	cmp	r3, #0
 8009834:	bfcc      	ite	gt
 8009836:	461e      	movgt	r6, r3
 8009838:	2601      	movle	r6, #1
 800983a:	4456      	add	r6, sl
 800983c:	2700      	movs	r7, #0
 800983e:	4649      	mov	r1, r9
 8009840:	2201      	movs	r2, #1
 8009842:	4658      	mov	r0, fp
 8009844:	f000 fba4 	bl	8009f90 <__lshift>
 8009848:	4621      	mov	r1, r4
 800984a:	4681      	mov	r9, r0
 800984c:	f000 fc0c 	bl	800a068 <__mcmp>
 8009850:	2800      	cmp	r0, #0
 8009852:	dcb0      	bgt.n	80097b6 <_dtoa_r+0xa5e>
 8009854:	d102      	bne.n	800985c <_dtoa_r+0xb04>
 8009856:	f018 0f01 	tst.w	r8, #1
 800985a:	d1ac      	bne.n	80097b6 <_dtoa_r+0xa5e>
 800985c:	4633      	mov	r3, r6
 800985e:	461e      	mov	r6, r3
 8009860:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009864:	2a30      	cmp	r2, #48	@ 0x30
 8009866:	d0fa      	beq.n	800985e <_dtoa_r+0xb06>
 8009868:	e5c2      	b.n	80093f0 <_dtoa_r+0x698>
 800986a:	459a      	cmp	sl, r3
 800986c:	d1a4      	bne.n	80097b8 <_dtoa_r+0xa60>
 800986e:	9b04      	ldr	r3, [sp, #16]
 8009870:	3301      	adds	r3, #1
 8009872:	9304      	str	r3, [sp, #16]
 8009874:	2331      	movs	r3, #49	@ 0x31
 8009876:	f88a 3000 	strb.w	r3, [sl]
 800987a:	e5b9      	b.n	80093f0 <_dtoa_r+0x698>
 800987c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800987e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80098dc <_dtoa_r+0xb84>
 8009882:	b11b      	cbz	r3, 800988c <_dtoa_r+0xb34>
 8009884:	f10a 0308 	add.w	r3, sl, #8
 8009888:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800988a:	6013      	str	r3, [r2, #0]
 800988c:	4650      	mov	r0, sl
 800988e:	b019      	add	sp, #100	@ 0x64
 8009890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009894:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009896:	2b01      	cmp	r3, #1
 8009898:	f77f ae37 	ble.w	800950a <_dtoa_r+0x7b2>
 800989c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800989e:	930a      	str	r3, [sp, #40]	@ 0x28
 80098a0:	2001      	movs	r0, #1
 80098a2:	e655      	b.n	8009550 <_dtoa_r+0x7f8>
 80098a4:	9b00      	ldr	r3, [sp, #0]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	f77f aed6 	ble.w	8009658 <_dtoa_r+0x900>
 80098ac:	4656      	mov	r6, sl
 80098ae:	4621      	mov	r1, r4
 80098b0:	4648      	mov	r0, r9
 80098b2:	f7ff f9c9 	bl	8008c48 <quorem>
 80098b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80098ba:	f806 8b01 	strb.w	r8, [r6], #1
 80098be:	9b00      	ldr	r3, [sp, #0]
 80098c0:	eba6 020a 	sub.w	r2, r6, sl
 80098c4:	4293      	cmp	r3, r2
 80098c6:	ddb3      	ble.n	8009830 <_dtoa_r+0xad8>
 80098c8:	4649      	mov	r1, r9
 80098ca:	2300      	movs	r3, #0
 80098cc:	220a      	movs	r2, #10
 80098ce:	4658      	mov	r0, fp
 80098d0:	f000 f968 	bl	8009ba4 <__multadd>
 80098d4:	4681      	mov	r9, r0
 80098d6:	e7ea      	b.n	80098ae <_dtoa_r+0xb56>
 80098d8:	0800d051 	.word	0x0800d051
 80098dc:	0800cfd5 	.word	0x0800cfd5

080098e0 <_free_r>:
 80098e0:	b538      	push	{r3, r4, r5, lr}
 80098e2:	4605      	mov	r5, r0
 80098e4:	2900      	cmp	r1, #0
 80098e6:	d041      	beq.n	800996c <_free_r+0x8c>
 80098e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098ec:	1f0c      	subs	r4, r1, #4
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	bfb8      	it	lt
 80098f2:	18e4      	addlt	r4, r4, r3
 80098f4:	f000 f8e8 	bl	8009ac8 <__malloc_lock>
 80098f8:	4a1d      	ldr	r2, [pc, #116]	@ (8009970 <_free_r+0x90>)
 80098fa:	6813      	ldr	r3, [r2, #0]
 80098fc:	b933      	cbnz	r3, 800990c <_free_r+0x2c>
 80098fe:	6063      	str	r3, [r4, #4]
 8009900:	6014      	str	r4, [r2, #0]
 8009902:	4628      	mov	r0, r5
 8009904:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009908:	f000 b8e4 	b.w	8009ad4 <__malloc_unlock>
 800990c:	42a3      	cmp	r3, r4
 800990e:	d908      	bls.n	8009922 <_free_r+0x42>
 8009910:	6820      	ldr	r0, [r4, #0]
 8009912:	1821      	adds	r1, r4, r0
 8009914:	428b      	cmp	r3, r1
 8009916:	bf01      	itttt	eq
 8009918:	6819      	ldreq	r1, [r3, #0]
 800991a:	685b      	ldreq	r3, [r3, #4]
 800991c:	1809      	addeq	r1, r1, r0
 800991e:	6021      	streq	r1, [r4, #0]
 8009920:	e7ed      	b.n	80098fe <_free_r+0x1e>
 8009922:	461a      	mov	r2, r3
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	b10b      	cbz	r3, 800992c <_free_r+0x4c>
 8009928:	42a3      	cmp	r3, r4
 800992a:	d9fa      	bls.n	8009922 <_free_r+0x42>
 800992c:	6811      	ldr	r1, [r2, #0]
 800992e:	1850      	adds	r0, r2, r1
 8009930:	42a0      	cmp	r0, r4
 8009932:	d10b      	bne.n	800994c <_free_r+0x6c>
 8009934:	6820      	ldr	r0, [r4, #0]
 8009936:	4401      	add	r1, r0
 8009938:	1850      	adds	r0, r2, r1
 800993a:	4283      	cmp	r3, r0
 800993c:	6011      	str	r1, [r2, #0]
 800993e:	d1e0      	bne.n	8009902 <_free_r+0x22>
 8009940:	6818      	ldr	r0, [r3, #0]
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	6053      	str	r3, [r2, #4]
 8009946:	4408      	add	r0, r1
 8009948:	6010      	str	r0, [r2, #0]
 800994a:	e7da      	b.n	8009902 <_free_r+0x22>
 800994c:	d902      	bls.n	8009954 <_free_r+0x74>
 800994e:	230c      	movs	r3, #12
 8009950:	602b      	str	r3, [r5, #0]
 8009952:	e7d6      	b.n	8009902 <_free_r+0x22>
 8009954:	6820      	ldr	r0, [r4, #0]
 8009956:	1821      	adds	r1, r4, r0
 8009958:	428b      	cmp	r3, r1
 800995a:	bf04      	itt	eq
 800995c:	6819      	ldreq	r1, [r3, #0]
 800995e:	685b      	ldreq	r3, [r3, #4]
 8009960:	6063      	str	r3, [r4, #4]
 8009962:	bf04      	itt	eq
 8009964:	1809      	addeq	r1, r1, r0
 8009966:	6021      	streq	r1, [r4, #0]
 8009968:	6054      	str	r4, [r2, #4]
 800996a:	e7ca      	b.n	8009902 <_free_r+0x22>
 800996c:	bd38      	pop	{r3, r4, r5, pc}
 800996e:	bf00      	nop
 8009970:	20009e10 	.word	0x20009e10

08009974 <malloc>:
 8009974:	4b02      	ldr	r3, [pc, #8]	@ (8009980 <malloc+0xc>)
 8009976:	4601      	mov	r1, r0
 8009978:	6818      	ldr	r0, [r3, #0]
 800997a:	f000 b825 	b.w	80099c8 <_malloc_r>
 800997e:	bf00      	nop
 8009980:	2000002c 	.word	0x2000002c

08009984 <sbrk_aligned>:
 8009984:	b570      	push	{r4, r5, r6, lr}
 8009986:	4e0f      	ldr	r6, [pc, #60]	@ (80099c4 <sbrk_aligned+0x40>)
 8009988:	460c      	mov	r4, r1
 800998a:	6831      	ldr	r1, [r6, #0]
 800998c:	4605      	mov	r5, r0
 800998e:	b911      	cbnz	r1, 8009996 <sbrk_aligned+0x12>
 8009990:	f001 ffd2 	bl	800b938 <_sbrk_r>
 8009994:	6030      	str	r0, [r6, #0]
 8009996:	4621      	mov	r1, r4
 8009998:	4628      	mov	r0, r5
 800999a:	f001 ffcd 	bl	800b938 <_sbrk_r>
 800999e:	1c43      	adds	r3, r0, #1
 80099a0:	d103      	bne.n	80099aa <sbrk_aligned+0x26>
 80099a2:	f04f 34ff 	mov.w	r4, #4294967295
 80099a6:	4620      	mov	r0, r4
 80099a8:	bd70      	pop	{r4, r5, r6, pc}
 80099aa:	1cc4      	adds	r4, r0, #3
 80099ac:	f024 0403 	bic.w	r4, r4, #3
 80099b0:	42a0      	cmp	r0, r4
 80099b2:	d0f8      	beq.n	80099a6 <sbrk_aligned+0x22>
 80099b4:	1a21      	subs	r1, r4, r0
 80099b6:	4628      	mov	r0, r5
 80099b8:	f001 ffbe 	bl	800b938 <_sbrk_r>
 80099bc:	3001      	adds	r0, #1
 80099be:	d1f2      	bne.n	80099a6 <sbrk_aligned+0x22>
 80099c0:	e7ef      	b.n	80099a2 <sbrk_aligned+0x1e>
 80099c2:	bf00      	nop
 80099c4:	20009e0c 	.word	0x20009e0c

080099c8 <_malloc_r>:
 80099c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099cc:	1ccd      	adds	r5, r1, #3
 80099ce:	f025 0503 	bic.w	r5, r5, #3
 80099d2:	3508      	adds	r5, #8
 80099d4:	2d0c      	cmp	r5, #12
 80099d6:	bf38      	it	cc
 80099d8:	250c      	movcc	r5, #12
 80099da:	2d00      	cmp	r5, #0
 80099dc:	4606      	mov	r6, r0
 80099de:	db01      	blt.n	80099e4 <_malloc_r+0x1c>
 80099e0:	42a9      	cmp	r1, r5
 80099e2:	d904      	bls.n	80099ee <_malloc_r+0x26>
 80099e4:	230c      	movs	r3, #12
 80099e6:	6033      	str	r3, [r6, #0]
 80099e8:	2000      	movs	r0, #0
 80099ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009ac4 <_malloc_r+0xfc>
 80099f2:	f000 f869 	bl	8009ac8 <__malloc_lock>
 80099f6:	f8d8 3000 	ldr.w	r3, [r8]
 80099fa:	461c      	mov	r4, r3
 80099fc:	bb44      	cbnz	r4, 8009a50 <_malloc_r+0x88>
 80099fe:	4629      	mov	r1, r5
 8009a00:	4630      	mov	r0, r6
 8009a02:	f7ff ffbf 	bl	8009984 <sbrk_aligned>
 8009a06:	1c43      	adds	r3, r0, #1
 8009a08:	4604      	mov	r4, r0
 8009a0a:	d158      	bne.n	8009abe <_malloc_r+0xf6>
 8009a0c:	f8d8 4000 	ldr.w	r4, [r8]
 8009a10:	4627      	mov	r7, r4
 8009a12:	2f00      	cmp	r7, #0
 8009a14:	d143      	bne.n	8009a9e <_malloc_r+0xd6>
 8009a16:	2c00      	cmp	r4, #0
 8009a18:	d04b      	beq.n	8009ab2 <_malloc_r+0xea>
 8009a1a:	6823      	ldr	r3, [r4, #0]
 8009a1c:	4639      	mov	r1, r7
 8009a1e:	4630      	mov	r0, r6
 8009a20:	eb04 0903 	add.w	r9, r4, r3
 8009a24:	f001 ff88 	bl	800b938 <_sbrk_r>
 8009a28:	4581      	cmp	r9, r0
 8009a2a:	d142      	bne.n	8009ab2 <_malloc_r+0xea>
 8009a2c:	6821      	ldr	r1, [r4, #0]
 8009a2e:	1a6d      	subs	r5, r5, r1
 8009a30:	4629      	mov	r1, r5
 8009a32:	4630      	mov	r0, r6
 8009a34:	f7ff ffa6 	bl	8009984 <sbrk_aligned>
 8009a38:	3001      	adds	r0, #1
 8009a3a:	d03a      	beq.n	8009ab2 <_malloc_r+0xea>
 8009a3c:	6823      	ldr	r3, [r4, #0]
 8009a3e:	442b      	add	r3, r5
 8009a40:	6023      	str	r3, [r4, #0]
 8009a42:	f8d8 3000 	ldr.w	r3, [r8]
 8009a46:	685a      	ldr	r2, [r3, #4]
 8009a48:	bb62      	cbnz	r2, 8009aa4 <_malloc_r+0xdc>
 8009a4a:	f8c8 7000 	str.w	r7, [r8]
 8009a4e:	e00f      	b.n	8009a70 <_malloc_r+0xa8>
 8009a50:	6822      	ldr	r2, [r4, #0]
 8009a52:	1b52      	subs	r2, r2, r5
 8009a54:	d420      	bmi.n	8009a98 <_malloc_r+0xd0>
 8009a56:	2a0b      	cmp	r2, #11
 8009a58:	d917      	bls.n	8009a8a <_malloc_r+0xc2>
 8009a5a:	1961      	adds	r1, r4, r5
 8009a5c:	42a3      	cmp	r3, r4
 8009a5e:	6025      	str	r5, [r4, #0]
 8009a60:	bf18      	it	ne
 8009a62:	6059      	strne	r1, [r3, #4]
 8009a64:	6863      	ldr	r3, [r4, #4]
 8009a66:	bf08      	it	eq
 8009a68:	f8c8 1000 	streq.w	r1, [r8]
 8009a6c:	5162      	str	r2, [r4, r5]
 8009a6e:	604b      	str	r3, [r1, #4]
 8009a70:	4630      	mov	r0, r6
 8009a72:	f000 f82f 	bl	8009ad4 <__malloc_unlock>
 8009a76:	f104 000b 	add.w	r0, r4, #11
 8009a7a:	1d23      	adds	r3, r4, #4
 8009a7c:	f020 0007 	bic.w	r0, r0, #7
 8009a80:	1ac2      	subs	r2, r0, r3
 8009a82:	bf1c      	itt	ne
 8009a84:	1a1b      	subne	r3, r3, r0
 8009a86:	50a3      	strne	r3, [r4, r2]
 8009a88:	e7af      	b.n	80099ea <_malloc_r+0x22>
 8009a8a:	6862      	ldr	r2, [r4, #4]
 8009a8c:	42a3      	cmp	r3, r4
 8009a8e:	bf0c      	ite	eq
 8009a90:	f8c8 2000 	streq.w	r2, [r8]
 8009a94:	605a      	strne	r2, [r3, #4]
 8009a96:	e7eb      	b.n	8009a70 <_malloc_r+0xa8>
 8009a98:	4623      	mov	r3, r4
 8009a9a:	6864      	ldr	r4, [r4, #4]
 8009a9c:	e7ae      	b.n	80099fc <_malloc_r+0x34>
 8009a9e:	463c      	mov	r4, r7
 8009aa0:	687f      	ldr	r7, [r7, #4]
 8009aa2:	e7b6      	b.n	8009a12 <_malloc_r+0x4a>
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	42a3      	cmp	r3, r4
 8009aaa:	d1fb      	bne.n	8009aa4 <_malloc_r+0xdc>
 8009aac:	2300      	movs	r3, #0
 8009aae:	6053      	str	r3, [r2, #4]
 8009ab0:	e7de      	b.n	8009a70 <_malloc_r+0xa8>
 8009ab2:	230c      	movs	r3, #12
 8009ab4:	6033      	str	r3, [r6, #0]
 8009ab6:	4630      	mov	r0, r6
 8009ab8:	f000 f80c 	bl	8009ad4 <__malloc_unlock>
 8009abc:	e794      	b.n	80099e8 <_malloc_r+0x20>
 8009abe:	6005      	str	r5, [r0, #0]
 8009ac0:	e7d6      	b.n	8009a70 <_malloc_r+0xa8>
 8009ac2:	bf00      	nop
 8009ac4:	20009e10 	.word	0x20009e10

08009ac8 <__malloc_lock>:
 8009ac8:	4801      	ldr	r0, [pc, #4]	@ (8009ad0 <__malloc_lock+0x8>)
 8009aca:	f7ff b8a6 	b.w	8008c1a <__retarget_lock_acquire_recursive>
 8009ace:	bf00      	nop
 8009ad0:	20009e08 	.word	0x20009e08

08009ad4 <__malloc_unlock>:
 8009ad4:	4801      	ldr	r0, [pc, #4]	@ (8009adc <__malloc_unlock+0x8>)
 8009ad6:	f7ff b8a1 	b.w	8008c1c <__retarget_lock_release_recursive>
 8009ada:	bf00      	nop
 8009adc:	20009e08 	.word	0x20009e08

08009ae0 <_Balloc>:
 8009ae0:	b570      	push	{r4, r5, r6, lr}
 8009ae2:	69c6      	ldr	r6, [r0, #28]
 8009ae4:	4604      	mov	r4, r0
 8009ae6:	460d      	mov	r5, r1
 8009ae8:	b976      	cbnz	r6, 8009b08 <_Balloc+0x28>
 8009aea:	2010      	movs	r0, #16
 8009aec:	f7ff ff42 	bl	8009974 <malloc>
 8009af0:	4602      	mov	r2, r0
 8009af2:	61e0      	str	r0, [r4, #28]
 8009af4:	b920      	cbnz	r0, 8009b00 <_Balloc+0x20>
 8009af6:	4b18      	ldr	r3, [pc, #96]	@ (8009b58 <_Balloc+0x78>)
 8009af8:	4818      	ldr	r0, [pc, #96]	@ (8009b5c <_Balloc+0x7c>)
 8009afa:	216b      	movs	r1, #107	@ 0x6b
 8009afc:	f001 ff34 	bl	800b968 <__assert_func>
 8009b00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b04:	6006      	str	r6, [r0, #0]
 8009b06:	60c6      	str	r6, [r0, #12]
 8009b08:	69e6      	ldr	r6, [r4, #28]
 8009b0a:	68f3      	ldr	r3, [r6, #12]
 8009b0c:	b183      	cbz	r3, 8009b30 <_Balloc+0x50>
 8009b0e:	69e3      	ldr	r3, [r4, #28]
 8009b10:	68db      	ldr	r3, [r3, #12]
 8009b12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009b16:	b9b8      	cbnz	r0, 8009b48 <_Balloc+0x68>
 8009b18:	2101      	movs	r1, #1
 8009b1a:	fa01 f605 	lsl.w	r6, r1, r5
 8009b1e:	1d72      	adds	r2, r6, #5
 8009b20:	0092      	lsls	r2, r2, #2
 8009b22:	4620      	mov	r0, r4
 8009b24:	f001 ff3e 	bl	800b9a4 <_calloc_r>
 8009b28:	b160      	cbz	r0, 8009b44 <_Balloc+0x64>
 8009b2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009b2e:	e00e      	b.n	8009b4e <_Balloc+0x6e>
 8009b30:	2221      	movs	r2, #33	@ 0x21
 8009b32:	2104      	movs	r1, #4
 8009b34:	4620      	mov	r0, r4
 8009b36:	f001 ff35 	bl	800b9a4 <_calloc_r>
 8009b3a:	69e3      	ldr	r3, [r4, #28]
 8009b3c:	60f0      	str	r0, [r6, #12]
 8009b3e:	68db      	ldr	r3, [r3, #12]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d1e4      	bne.n	8009b0e <_Balloc+0x2e>
 8009b44:	2000      	movs	r0, #0
 8009b46:	bd70      	pop	{r4, r5, r6, pc}
 8009b48:	6802      	ldr	r2, [r0, #0]
 8009b4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009b4e:	2300      	movs	r3, #0
 8009b50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b54:	e7f7      	b.n	8009b46 <_Balloc+0x66>
 8009b56:	bf00      	nop
 8009b58:	0800cfe2 	.word	0x0800cfe2
 8009b5c:	0800d062 	.word	0x0800d062

08009b60 <_Bfree>:
 8009b60:	b570      	push	{r4, r5, r6, lr}
 8009b62:	69c6      	ldr	r6, [r0, #28]
 8009b64:	4605      	mov	r5, r0
 8009b66:	460c      	mov	r4, r1
 8009b68:	b976      	cbnz	r6, 8009b88 <_Bfree+0x28>
 8009b6a:	2010      	movs	r0, #16
 8009b6c:	f7ff ff02 	bl	8009974 <malloc>
 8009b70:	4602      	mov	r2, r0
 8009b72:	61e8      	str	r0, [r5, #28]
 8009b74:	b920      	cbnz	r0, 8009b80 <_Bfree+0x20>
 8009b76:	4b09      	ldr	r3, [pc, #36]	@ (8009b9c <_Bfree+0x3c>)
 8009b78:	4809      	ldr	r0, [pc, #36]	@ (8009ba0 <_Bfree+0x40>)
 8009b7a:	218f      	movs	r1, #143	@ 0x8f
 8009b7c:	f001 fef4 	bl	800b968 <__assert_func>
 8009b80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b84:	6006      	str	r6, [r0, #0]
 8009b86:	60c6      	str	r6, [r0, #12]
 8009b88:	b13c      	cbz	r4, 8009b9a <_Bfree+0x3a>
 8009b8a:	69eb      	ldr	r3, [r5, #28]
 8009b8c:	6862      	ldr	r2, [r4, #4]
 8009b8e:	68db      	ldr	r3, [r3, #12]
 8009b90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b94:	6021      	str	r1, [r4, #0]
 8009b96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009b9a:	bd70      	pop	{r4, r5, r6, pc}
 8009b9c:	0800cfe2 	.word	0x0800cfe2
 8009ba0:	0800d062 	.word	0x0800d062

08009ba4 <__multadd>:
 8009ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ba8:	690d      	ldr	r5, [r1, #16]
 8009baa:	4607      	mov	r7, r0
 8009bac:	460c      	mov	r4, r1
 8009bae:	461e      	mov	r6, r3
 8009bb0:	f101 0c14 	add.w	ip, r1, #20
 8009bb4:	2000      	movs	r0, #0
 8009bb6:	f8dc 3000 	ldr.w	r3, [ip]
 8009bba:	b299      	uxth	r1, r3
 8009bbc:	fb02 6101 	mla	r1, r2, r1, r6
 8009bc0:	0c1e      	lsrs	r6, r3, #16
 8009bc2:	0c0b      	lsrs	r3, r1, #16
 8009bc4:	fb02 3306 	mla	r3, r2, r6, r3
 8009bc8:	b289      	uxth	r1, r1
 8009bca:	3001      	adds	r0, #1
 8009bcc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009bd0:	4285      	cmp	r5, r0
 8009bd2:	f84c 1b04 	str.w	r1, [ip], #4
 8009bd6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009bda:	dcec      	bgt.n	8009bb6 <__multadd+0x12>
 8009bdc:	b30e      	cbz	r6, 8009c22 <__multadd+0x7e>
 8009bde:	68a3      	ldr	r3, [r4, #8]
 8009be0:	42ab      	cmp	r3, r5
 8009be2:	dc19      	bgt.n	8009c18 <__multadd+0x74>
 8009be4:	6861      	ldr	r1, [r4, #4]
 8009be6:	4638      	mov	r0, r7
 8009be8:	3101      	adds	r1, #1
 8009bea:	f7ff ff79 	bl	8009ae0 <_Balloc>
 8009bee:	4680      	mov	r8, r0
 8009bf0:	b928      	cbnz	r0, 8009bfe <__multadd+0x5a>
 8009bf2:	4602      	mov	r2, r0
 8009bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8009c28 <__multadd+0x84>)
 8009bf6:	480d      	ldr	r0, [pc, #52]	@ (8009c2c <__multadd+0x88>)
 8009bf8:	21ba      	movs	r1, #186	@ 0xba
 8009bfa:	f001 feb5 	bl	800b968 <__assert_func>
 8009bfe:	6922      	ldr	r2, [r4, #16]
 8009c00:	3202      	adds	r2, #2
 8009c02:	f104 010c 	add.w	r1, r4, #12
 8009c06:	0092      	lsls	r2, r2, #2
 8009c08:	300c      	adds	r0, #12
 8009c0a:	f7ff f808 	bl	8008c1e <memcpy>
 8009c0e:	4621      	mov	r1, r4
 8009c10:	4638      	mov	r0, r7
 8009c12:	f7ff ffa5 	bl	8009b60 <_Bfree>
 8009c16:	4644      	mov	r4, r8
 8009c18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009c1c:	3501      	adds	r5, #1
 8009c1e:	615e      	str	r6, [r3, #20]
 8009c20:	6125      	str	r5, [r4, #16]
 8009c22:	4620      	mov	r0, r4
 8009c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c28:	0800d051 	.word	0x0800d051
 8009c2c:	0800d062 	.word	0x0800d062

08009c30 <__s2b>:
 8009c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c34:	460c      	mov	r4, r1
 8009c36:	4615      	mov	r5, r2
 8009c38:	461f      	mov	r7, r3
 8009c3a:	2209      	movs	r2, #9
 8009c3c:	3308      	adds	r3, #8
 8009c3e:	4606      	mov	r6, r0
 8009c40:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c44:	2100      	movs	r1, #0
 8009c46:	2201      	movs	r2, #1
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	db09      	blt.n	8009c60 <__s2b+0x30>
 8009c4c:	4630      	mov	r0, r6
 8009c4e:	f7ff ff47 	bl	8009ae0 <_Balloc>
 8009c52:	b940      	cbnz	r0, 8009c66 <__s2b+0x36>
 8009c54:	4602      	mov	r2, r0
 8009c56:	4b19      	ldr	r3, [pc, #100]	@ (8009cbc <__s2b+0x8c>)
 8009c58:	4819      	ldr	r0, [pc, #100]	@ (8009cc0 <__s2b+0x90>)
 8009c5a:	21d3      	movs	r1, #211	@ 0xd3
 8009c5c:	f001 fe84 	bl	800b968 <__assert_func>
 8009c60:	0052      	lsls	r2, r2, #1
 8009c62:	3101      	adds	r1, #1
 8009c64:	e7f0      	b.n	8009c48 <__s2b+0x18>
 8009c66:	9b08      	ldr	r3, [sp, #32]
 8009c68:	6143      	str	r3, [r0, #20]
 8009c6a:	2d09      	cmp	r5, #9
 8009c6c:	f04f 0301 	mov.w	r3, #1
 8009c70:	6103      	str	r3, [r0, #16]
 8009c72:	dd16      	ble.n	8009ca2 <__s2b+0x72>
 8009c74:	f104 0909 	add.w	r9, r4, #9
 8009c78:	46c8      	mov	r8, r9
 8009c7a:	442c      	add	r4, r5
 8009c7c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009c80:	4601      	mov	r1, r0
 8009c82:	3b30      	subs	r3, #48	@ 0x30
 8009c84:	220a      	movs	r2, #10
 8009c86:	4630      	mov	r0, r6
 8009c88:	f7ff ff8c 	bl	8009ba4 <__multadd>
 8009c8c:	45a0      	cmp	r8, r4
 8009c8e:	d1f5      	bne.n	8009c7c <__s2b+0x4c>
 8009c90:	f1a5 0408 	sub.w	r4, r5, #8
 8009c94:	444c      	add	r4, r9
 8009c96:	1b2d      	subs	r5, r5, r4
 8009c98:	1963      	adds	r3, r4, r5
 8009c9a:	42bb      	cmp	r3, r7
 8009c9c:	db04      	blt.n	8009ca8 <__s2b+0x78>
 8009c9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ca2:	340a      	adds	r4, #10
 8009ca4:	2509      	movs	r5, #9
 8009ca6:	e7f6      	b.n	8009c96 <__s2b+0x66>
 8009ca8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009cac:	4601      	mov	r1, r0
 8009cae:	3b30      	subs	r3, #48	@ 0x30
 8009cb0:	220a      	movs	r2, #10
 8009cb2:	4630      	mov	r0, r6
 8009cb4:	f7ff ff76 	bl	8009ba4 <__multadd>
 8009cb8:	e7ee      	b.n	8009c98 <__s2b+0x68>
 8009cba:	bf00      	nop
 8009cbc:	0800d051 	.word	0x0800d051
 8009cc0:	0800d062 	.word	0x0800d062

08009cc4 <__hi0bits>:
 8009cc4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009cc8:	4603      	mov	r3, r0
 8009cca:	bf36      	itet	cc
 8009ccc:	0403      	lslcc	r3, r0, #16
 8009cce:	2000      	movcs	r0, #0
 8009cd0:	2010      	movcc	r0, #16
 8009cd2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009cd6:	bf3c      	itt	cc
 8009cd8:	021b      	lslcc	r3, r3, #8
 8009cda:	3008      	addcc	r0, #8
 8009cdc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ce0:	bf3c      	itt	cc
 8009ce2:	011b      	lslcc	r3, r3, #4
 8009ce4:	3004      	addcc	r0, #4
 8009ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cea:	bf3c      	itt	cc
 8009cec:	009b      	lslcc	r3, r3, #2
 8009cee:	3002      	addcc	r0, #2
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	db05      	blt.n	8009d00 <__hi0bits+0x3c>
 8009cf4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009cf8:	f100 0001 	add.w	r0, r0, #1
 8009cfc:	bf08      	it	eq
 8009cfe:	2020      	moveq	r0, #32
 8009d00:	4770      	bx	lr

08009d02 <__lo0bits>:
 8009d02:	6803      	ldr	r3, [r0, #0]
 8009d04:	4602      	mov	r2, r0
 8009d06:	f013 0007 	ands.w	r0, r3, #7
 8009d0a:	d00b      	beq.n	8009d24 <__lo0bits+0x22>
 8009d0c:	07d9      	lsls	r1, r3, #31
 8009d0e:	d421      	bmi.n	8009d54 <__lo0bits+0x52>
 8009d10:	0798      	lsls	r0, r3, #30
 8009d12:	bf49      	itett	mi
 8009d14:	085b      	lsrmi	r3, r3, #1
 8009d16:	089b      	lsrpl	r3, r3, #2
 8009d18:	2001      	movmi	r0, #1
 8009d1a:	6013      	strmi	r3, [r2, #0]
 8009d1c:	bf5c      	itt	pl
 8009d1e:	6013      	strpl	r3, [r2, #0]
 8009d20:	2002      	movpl	r0, #2
 8009d22:	4770      	bx	lr
 8009d24:	b299      	uxth	r1, r3
 8009d26:	b909      	cbnz	r1, 8009d2c <__lo0bits+0x2a>
 8009d28:	0c1b      	lsrs	r3, r3, #16
 8009d2a:	2010      	movs	r0, #16
 8009d2c:	b2d9      	uxtb	r1, r3
 8009d2e:	b909      	cbnz	r1, 8009d34 <__lo0bits+0x32>
 8009d30:	3008      	adds	r0, #8
 8009d32:	0a1b      	lsrs	r3, r3, #8
 8009d34:	0719      	lsls	r1, r3, #28
 8009d36:	bf04      	itt	eq
 8009d38:	091b      	lsreq	r3, r3, #4
 8009d3a:	3004      	addeq	r0, #4
 8009d3c:	0799      	lsls	r1, r3, #30
 8009d3e:	bf04      	itt	eq
 8009d40:	089b      	lsreq	r3, r3, #2
 8009d42:	3002      	addeq	r0, #2
 8009d44:	07d9      	lsls	r1, r3, #31
 8009d46:	d403      	bmi.n	8009d50 <__lo0bits+0x4e>
 8009d48:	085b      	lsrs	r3, r3, #1
 8009d4a:	f100 0001 	add.w	r0, r0, #1
 8009d4e:	d003      	beq.n	8009d58 <__lo0bits+0x56>
 8009d50:	6013      	str	r3, [r2, #0]
 8009d52:	4770      	bx	lr
 8009d54:	2000      	movs	r0, #0
 8009d56:	4770      	bx	lr
 8009d58:	2020      	movs	r0, #32
 8009d5a:	4770      	bx	lr

08009d5c <__i2b>:
 8009d5c:	b510      	push	{r4, lr}
 8009d5e:	460c      	mov	r4, r1
 8009d60:	2101      	movs	r1, #1
 8009d62:	f7ff febd 	bl	8009ae0 <_Balloc>
 8009d66:	4602      	mov	r2, r0
 8009d68:	b928      	cbnz	r0, 8009d76 <__i2b+0x1a>
 8009d6a:	4b05      	ldr	r3, [pc, #20]	@ (8009d80 <__i2b+0x24>)
 8009d6c:	4805      	ldr	r0, [pc, #20]	@ (8009d84 <__i2b+0x28>)
 8009d6e:	f240 1145 	movw	r1, #325	@ 0x145
 8009d72:	f001 fdf9 	bl	800b968 <__assert_func>
 8009d76:	2301      	movs	r3, #1
 8009d78:	6144      	str	r4, [r0, #20]
 8009d7a:	6103      	str	r3, [r0, #16]
 8009d7c:	bd10      	pop	{r4, pc}
 8009d7e:	bf00      	nop
 8009d80:	0800d051 	.word	0x0800d051
 8009d84:	0800d062 	.word	0x0800d062

08009d88 <__multiply>:
 8009d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d8c:	4614      	mov	r4, r2
 8009d8e:	690a      	ldr	r2, [r1, #16]
 8009d90:	6923      	ldr	r3, [r4, #16]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	bfa8      	it	ge
 8009d96:	4623      	movge	r3, r4
 8009d98:	460f      	mov	r7, r1
 8009d9a:	bfa4      	itt	ge
 8009d9c:	460c      	movge	r4, r1
 8009d9e:	461f      	movge	r7, r3
 8009da0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009da4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009da8:	68a3      	ldr	r3, [r4, #8]
 8009daa:	6861      	ldr	r1, [r4, #4]
 8009dac:	eb0a 0609 	add.w	r6, sl, r9
 8009db0:	42b3      	cmp	r3, r6
 8009db2:	b085      	sub	sp, #20
 8009db4:	bfb8      	it	lt
 8009db6:	3101      	addlt	r1, #1
 8009db8:	f7ff fe92 	bl	8009ae0 <_Balloc>
 8009dbc:	b930      	cbnz	r0, 8009dcc <__multiply+0x44>
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	4b44      	ldr	r3, [pc, #272]	@ (8009ed4 <__multiply+0x14c>)
 8009dc2:	4845      	ldr	r0, [pc, #276]	@ (8009ed8 <__multiply+0x150>)
 8009dc4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009dc8:	f001 fdce 	bl	800b968 <__assert_func>
 8009dcc:	f100 0514 	add.w	r5, r0, #20
 8009dd0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009dd4:	462b      	mov	r3, r5
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	4543      	cmp	r3, r8
 8009dda:	d321      	bcc.n	8009e20 <__multiply+0x98>
 8009ddc:	f107 0114 	add.w	r1, r7, #20
 8009de0:	f104 0214 	add.w	r2, r4, #20
 8009de4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009de8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009dec:	9302      	str	r3, [sp, #8]
 8009dee:	1b13      	subs	r3, r2, r4
 8009df0:	3b15      	subs	r3, #21
 8009df2:	f023 0303 	bic.w	r3, r3, #3
 8009df6:	3304      	adds	r3, #4
 8009df8:	f104 0715 	add.w	r7, r4, #21
 8009dfc:	42ba      	cmp	r2, r7
 8009dfe:	bf38      	it	cc
 8009e00:	2304      	movcc	r3, #4
 8009e02:	9301      	str	r3, [sp, #4]
 8009e04:	9b02      	ldr	r3, [sp, #8]
 8009e06:	9103      	str	r1, [sp, #12]
 8009e08:	428b      	cmp	r3, r1
 8009e0a:	d80c      	bhi.n	8009e26 <__multiply+0x9e>
 8009e0c:	2e00      	cmp	r6, #0
 8009e0e:	dd03      	ble.n	8009e18 <__multiply+0x90>
 8009e10:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d05b      	beq.n	8009ed0 <__multiply+0x148>
 8009e18:	6106      	str	r6, [r0, #16]
 8009e1a:	b005      	add	sp, #20
 8009e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e20:	f843 2b04 	str.w	r2, [r3], #4
 8009e24:	e7d8      	b.n	8009dd8 <__multiply+0x50>
 8009e26:	f8b1 a000 	ldrh.w	sl, [r1]
 8009e2a:	f1ba 0f00 	cmp.w	sl, #0
 8009e2e:	d024      	beq.n	8009e7a <__multiply+0xf2>
 8009e30:	f104 0e14 	add.w	lr, r4, #20
 8009e34:	46a9      	mov	r9, r5
 8009e36:	f04f 0c00 	mov.w	ip, #0
 8009e3a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009e3e:	f8d9 3000 	ldr.w	r3, [r9]
 8009e42:	fa1f fb87 	uxth.w	fp, r7
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	fb0a 330b 	mla	r3, sl, fp, r3
 8009e4c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009e50:	f8d9 7000 	ldr.w	r7, [r9]
 8009e54:	4463      	add	r3, ip
 8009e56:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009e5a:	fb0a c70b 	mla	r7, sl, fp, ip
 8009e5e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009e62:	b29b      	uxth	r3, r3
 8009e64:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009e68:	4572      	cmp	r2, lr
 8009e6a:	f849 3b04 	str.w	r3, [r9], #4
 8009e6e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009e72:	d8e2      	bhi.n	8009e3a <__multiply+0xb2>
 8009e74:	9b01      	ldr	r3, [sp, #4]
 8009e76:	f845 c003 	str.w	ip, [r5, r3]
 8009e7a:	9b03      	ldr	r3, [sp, #12]
 8009e7c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009e80:	3104      	adds	r1, #4
 8009e82:	f1b9 0f00 	cmp.w	r9, #0
 8009e86:	d021      	beq.n	8009ecc <__multiply+0x144>
 8009e88:	682b      	ldr	r3, [r5, #0]
 8009e8a:	f104 0c14 	add.w	ip, r4, #20
 8009e8e:	46ae      	mov	lr, r5
 8009e90:	f04f 0a00 	mov.w	sl, #0
 8009e94:	f8bc b000 	ldrh.w	fp, [ip]
 8009e98:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009e9c:	fb09 770b 	mla	r7, r9, fp, r7
 8009ea0:	4457      	add	r7, sl
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009ea8:	f84e 3b04 	str.w	r3, [lr], #4
 8009eac:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009eb0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009eb4:	f8be 3000 	ldrh.w	r3, [lr]
 8009eb8:	fb09 330a 	mla	r3, r9, sl, r3
 8009ebc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009ec0:	4562      	cmp	r2, ip
 8009ec2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009ec6:	d8e5      	bhi.n	8009e94 <__multiply+0x10c>
 8009ec8:	9f01      	ldr	r7, [sp, #4]
 8009eca:	51eb      	str	r3, [r5, r7]
 8009ecc:	3504      	adds	r5, #4
 8009ece:	e799      	b.n	8009e04 <__multiply+0x7c>
 8009ed0:	3e01      	subs	r6, #1
 8009ed2:	e79b      	b.n	8009e0c <__multiply+0x84>
 8009ed4:	0800d051 	.word	0x0800d051
 8009ed8:	0800d062 	.word	0x0800d062

08009edc <__pow5mult>:
 8009edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ee0:	4615      	mov	r5, r2
 8009ee2:	f012 0203 	ands.w	r2, r2, #3
 8009ee6:	4607      	mov	r7, r0
 8009ee8:	460e      	mov	r6, r1
 8009eea:	d007      	beq.n	8009efc <__pow5mult+0x20>
 8009eec:	4c25      	ldr	r4, [pc, #148]	@ (8009f84 <__pow5mult+0xa8>)
 8009eee:	3a01      	subs	r2, #1
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009ef6:	f7ff fe55 	bl	8009ba4 <__multadd>
 8009efa:	4606      	mov	r6, r0
 8009efc:	10ad      	asrs	r5, r5, #2
 8009efe:	d03d      	beq.n	8009f7c <__pow5mult+0xa0>
 8009f00:	69fc      	ldr	r4, [r7, #28]
 8009f02:	b97c      	cbnz	r4, 8009f24 <__pow5mult+0x48>
 8009f04:	2010      	movs	r0, #16
 8009f06:	f7ff fd35 	bl	8009974 <malloc>
 8009f0a:	4602      	mov	r2, r0
 8009f0c:	61f8      	str	r0, [r7, #28]
 8009f0e:	b928      	cbnz	r0, 8009f1c <__pow5mult+0x40>
 8009f10:	4b1d      	ldr	r3, [pc, #116]	@ (8009f88 <__pow5mult+0xac>)
 8009f12:	481e      	ldr	r0, [pc, #120]	@ (8009f8c <__pow5mult+0xb0>)
 8009f14:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009f18:	f001 fd26 	bl	800b968 <__assert_func>
 8009f1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f20:	6004      	str	r4, [r0, #0]
 8009f22:	60c4      	str	r4, [r0, #12]
 8009f24:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009f28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009f2c:	b94c      	cbnz	r4, 8009f42 <__pow5mult+0x66>
 8009f2e:	f240 2171 	movw	r1, #625	@ 0x271
 8009f32:	4638      	mov	r0, r7
 8009f34:	f7ff ff12 	bl	8009d5c <__i2b>
 8009f38:	2300      	movs	r3, #0
 8009f3a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009f3e:	4604      	mov	r4, r0
 8009f40:	6003      	str	r3, [r0, #0]
 8009f42:	f04f 0900 	mov.w	r9, #0
 8009f46:	07eb      	lsls	r3, r5, #31
 8009f48:	d50a      	bpl.n	8009f60 <__pow5mult+0x84>
 8009f4a:	4631      	mov	r1, r6
 8009f4c:	4622      	mov	r2, r4
 8009f4e:	4638      	mov	r0, r7
 8009f50:	f7ff ff1a 	bl	8009d88 <__multiply>
 8009f54:	4631      	mov	r1, r6
 8009f56:	4680      	mov	r8, r0
 8009f58:	4638      	mov	r0, r7
 8009f5a:	f7ff fe01 	bl	8009b60 <_Bfree>
 8009f5e:	4646      	mov	r6, r8
 8009f60:	106d      	asrs	r5, r5, #1
 8009f62:	d00b      	beq.n	8009f7c <__pow5mult+0xa0>
 8009f64:	6820      	ldr	r0, [r4, #0]
 8009f66:	b938      	cbnz	r0, 8009f78 <__pow5mult+0x9c>
 8009f68:	4622      	mov	r2, r4
 8009f6a:	4621      	mov	r1, r4
 8009f6c:	4638      	mov	r0, r7
 8009f6e:	f7ff ff0b 	bl	8009d88 <__multiply>
 8009f72:	6020      	str	r0, [r4, #0]
 8009f74:	f8c0 9000 	str.w	r9, [r0]
 8009f78:	4604      	mov	r4, r0
 8009f7a:	e7e4      	b.n	8009f46 <__pow5mult+0x6a>
 8009f7c:	4630      	mov	r0, r6
 8009f7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f82:	bf00      	nop
 8009f84:	0800d0bc 	.word	0x0800d0bc
 8009f88:	0800cfe2 	.word	0x0800cfe2
 8009f8c:	0800d062 	.word	0x0800d062

08009f90 <__lshift>:
 8009f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f94:	460c      	mov	r4, r1
 8009f96:	6849      	ldr	r1, [r1, #4]
 8009f98:	6923      	ldr	r3, [r4, #16]
 8009f9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009f9e:	68a3      	ldr	r3, [r4, #8]
 8009fa0:	4607      	mov	r7, r0
 8009fa2:	4691      	mov	r9, r2
 8009fa4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009fa8:	f108 0601 	add.w	r6, r8, #1
 8009fac:	42b3      	cmp	r3, r6
 8009fae:	db0b      	blt.n	8009fc8 <__lshift+0x38>
 8009fb0:	4638      	mov	r0, r7
 8009fb2:	f7ff fd95 	bl	8009ae0 <_Balloc>
 8009fb6:	4605      	mov	r5, r0
 8009fb8:	b948      	cbnz	r0, 8009fce <__lshift+0x3e>
 8009fba:	4602      	mov	r2, r0
 8009fbc:	4b28      	ldr	r3, [pc, #160]	@ (800a060 <__lshift+0xd0>)
 8009fbe:	4829      	ldr	r0, [pc, #164]	@ (800a064 <__lshift+0xd4>)
 8009fc0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009fc4:	f001 fcd0 	bl	800b968 <__assert_func>
 8009fc8:	3101      	adds	r1, #1
 8009fca:	005b      	lsls	r3, r3, #1
 8009fcc:	e7ee      	b.n	8009fac <__lshift+0x1c>
 8009fce:	2300      	movs	r3, #0
 8009fd0:	f100 0114 	add.w	r1, r0, #20
 8009fd4:	f100 0210 	add.w	r2, r0, #16
 8009fd8:	4618      	mov	r0, r3
 8009fda:	4553      	cmp	r3, sl
 8009fdc:	db33      	blt.n	800a046 <__lshift+0xb6>
 8009fde:	6920      	ldr	r0, [r4, #16]
 8009fe0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009fe4:	f104 0314 	add.w	r3, r4, #20
 8009fe8:	f019 091f 	ands.w	r9, r9, #31
 8009fec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ff0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009ff4:	d02b      	beq.n	800a04e <__lshift+0xbe>
 8009ff6:	f1c9 0e20 	rsb	lr, r9, #32
 8009ffa:	468a      	mov	sl, r1
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	6818      	ldr	r0, [r3, #0]
 800a000:	fa00 f009 	lsl.w	r0, r0, r9
 800a004:	4310      	orrs	r0, r2
 800a006:	f84a 0b04 	str.w	r0, [sl], #4
 800a00a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a00e:	459c      	cmp	ip, r3
 800a010:	fa22 f20e 	lsr.w	r2, r2, lr
 800a014:	d8f3      	bhi.n	8009ffe <__lshift+0x6e>
 800a016:	ebac 0304 	sub.w	r3, ip, r4
 800a01a:	3b15      	subs	r3, #21
 800a01c:	f023 0303 	bic.w	r3, r3, #3
 800a020:	3304      	adds	r3, #4
 800a022:	f104 0015 	add.w	r0, r4, #21
 800a026:	4584      	cmp	ip, r0
 800a028:	bf38      	it	cc
 800a02a:	2304      	movcc	r3, #4
 800a02c:	50ca      	str	r2, [r1, r3]
 800a02e:	b10a      	cbz	r2, 800a034 <__lshift+0xa4>
 800a030:	f108 0602 	add.w	r6, r8, #2
 800a034:	3e01      	subs	r6, #1
 800a036:	4638      	mov	r0, r7
 800a038:	612e      	str	r6, [r5, #16]
 800a03a:	4621      	mov	r1, r4
 800a03c:	f7ff fd90 	bl	8009b60 <_Bfree>
 800a040:	4628      	mov	r0, r5
 800a042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a046:	f842 0f04 	str.w	r0, [r2, #4]!
 800a04a:	3301      	adds	r3, #1
 800a04c:	e7c5      	b.n	8009fda <__lshift+0x4a>
 800a04e:	3904      	subs	r1, #4
 800a050:	f853 2b04 	ldr.w	r2, [r3], #4
 800a054:	f841 2f04 	str.w	r2, [r1, #4]!
 800a058:	459c      	cmp	ip, r3
 800a05a:	d8f9      	bhi.n	800a050 <__lshift+0xc0>
 800a05c:	e7ea      	b.n	800a034 <__lshift+0xa4>
 800a05e:	bf00      	nop
 800a060:	0800d051 	.word	0x0800d051
 800a064:	0800d062 	.word	0x0800d062

0800a068 <__mcmp>:
 800a068:	690a      	ldr	r2, [r1, #16]
 800a06a:	4603      	mov	r3, r0
 800a06c:	6900      	ldr	r0, [r0, #16]
 800a06e:	1a80      	subs	r0, r0, r2
 800a070:	b530      	push	{r4, r5, lr}
 800a072:	d10e      	bne.n	800a092 <__mcmp+0x2a>
 800a074:	3314      	adds	r3, #20
 800a076:	3114      	adds	r1, #20
 800a078:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a07c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a080:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a084:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a088:	4295      	cmp	r5, r2
 800a08a:	d003      	beq.n	800a094 <__mcmp+0x2c>
 800a08c:	d205      	bcs.n	800a09a <__mcmp+0x32>
 800a08e:	f04f 30ff 	mov.w	r0, #4294967295
 800a092:	bd30      	pop	{r4, r5, pc}
 800a094:	42a3      	cmp	r3, r4
 800a096:	d3f3      	bcc.n	800a080 <__mcmp+0x18>
 800a098:	e7fb      	b.n	800a092 <__mcmp+0x2a>
 800a09a:	2001      	movs	r0, #1
 800a09c:	e7f9      	b.n	800a092 <__mcmp+0x2a>
	...

0800a0a0 <__mdiff>:
 800a0a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0a4:	4689      	mov	r9, r1
 800a0a6:	4606      	mov	r6, r0
 800a0a8:	4611      	mov	r1, r2
 800a0aa:	4648      	mov	r0, r9
 800a0ac:	4614      	mov	r4, r2
 800a0ae:	f7ff ffdb 	bl	800a068 <__mcmp>
 800a0b2:	1e05      	subs	r5, r0, #0
 800a0b4:	d112      	bne.n	800a0dc <__mdiff+0x3c>
 800a0b6:	4629      	mov	r1, r5
 800a0b8:	4630      	mov	r0, r6
 800a0ba:	f7ff fd11 	bl	8009ae0 <_Balloc>
 800a0be:	4602      	mov	r2, r0
 800a0c0:	b928      	cbnz	r0, 800a0ce <__mdiff+0x2e>
 800a0c2:	4b3f      	ldr	r3, [pc, #252]	@ (800a1c0 <__mdiff+0x120>)
 800a0c4:	f240 2137 	movw	r1, #567	@ 0x237
 800a0c8:	483e      	ldr	r0, [pc, #248]	@ (800a1c4 <__mdiff+0x124>)
 800a0ca:	f001 fc4d 	bl	800b968 <__assert_func>
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a0d4:	4610      	mov	r0, r2
 800a0d6:	b003      	add	sp, #12
 800a0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0dc:	bfbc      	itt	lt
 800a0de:	464b      	movlt	r3, r9
 800a0e0:	46a1      	movlt	r9, r4
 800a0e2:	4630      	mov	r0, r6
 800a0e4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a0e8:	bfba      	itte	lt
 800a0ea:	461c      	movlt	r4, r3
 800a0ec:	2501      	movlt	r5, #1
 800a0ee:	2500      	movge	r5, #0
 800a0f0:	f7ff fcf6 	bl	8009ae0 <_Balloc>
 800a0f4:	4602      	mov	r2, r0
 800a0f6:	b918      	cbnz	r0, 800a100 <__mdiff+0x60>
 800a0f8:	4b31      	ldr	r3, [pc, #196]	@ (800a1c0 <__mdiff+0x120>)
 800a0fa:	f240 2145 	movw	r1, #581	@ 0x245
 800a0fe:	e7e3      	b.n	800a0c8 <__mdiff+0x28>
 800a100:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a104:	6926      	ldr	r6, [r4, #16]
 800a106:	60c5      	str	r5, [r0, #12]
 800a108:	f109 0310 	add.w	r3, r9, #16
 800a10c:	f109 0514 	add.w	r5, r9, #20
 800a110:	f104 0e14 	add.w	lr, r4, #20
 800a114:	f100 0b14 	add.w	fp, r0, #20
 800a118:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a11c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a120:	9301      	str	r3, [sp, #4]
 800a122:	46d9      	mov	r9, fp
 800a124:	f04f 0c00 	mov.w	ip, #0
 800a128:	9b01      	ldr	r3, [sp, #4]
 800a12a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a12e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a132:	9301      	str	r3, [sp, #4]
 800a134:	fa1f f38a 	uxth.w	r3, sl
 800a138:	4619      	mov	r1, r3
 800a13a:	b283      	uxth	r3, r0
 800a13c:	1acb      	subs	r3, r1, r3
 800a13e:	0c00      	lsrs	r0, r0, #16
 800a140:	4463      	add	r3, ip
 800a142:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a146:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a150:	4576      	cmp	r6, lr
 800a152:	f849 3b04 	str.w	r3, [r9], #4
 800a156:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a15a:	d8e5      	bhi.n	800a128 <__mdiff+0x88>
 800a15c:	1b33      	subs	r3, r6, r4
 800a15e:	3b15      	subs	r3, #21
 800a160:	f023 0303 	bic.w	r3, r3, #3
 800a164:	3415      	adds	r4, #21
 800a166:	3304      	adds	r3, #4
 800a168:	42a6      	cmp	r6, r4
 800a16a:	bf38      	it	cc
 800a16c:	2304      	movcc	r3, #4
 800a16e:	441d      	add	r5, r3
 800a170:	445b      	add	r3, fp
 800a172:	461e      	mov	r6, r3
 800a174:	462c      	mov	r4, r5
 800a176:	4544      	cmp	r4, r8
 800a178:	d30e      	bcc.n	800a198 <__mdiff+0xf8>
 800a17a:	f108 0103 	add.w	r1, r8, #3
 800a17e:	1b49      	subs	r1, r1, r5
 800a180:	f021 0103 	bic.w	r1, r1, #3
 800a184:	3d03      	subs	r5, #3
 800a186:	45a8      	cmp	r8, r5
 800a188:	bf38      	it	cc
 800a18a:	2100      	movcc	r1, #0
 800a18c:	440b      	add	r3, r1
 800a18e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a192:	b191      	cbz	r1, 800a1ba <__mdiff+0x11a>
 800a194:	6117      	str	r7, [r2, #16]
 800a196:	e79d      	b.n	800a0d4 <__mdiff+0x34>
 800a198:	f854 1b04 	ldr.w	r1, [r4], #4
 800a19c:	46e6      	mov	lr, ip
 800a19e:	0c08      	lsrs	r0, r1, #16
 800a1a0:	fa1c fc81 	uxtah	ip, ip, r1
 800a1a4:	4471      	add	r1, lr
 800a1a6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a1aa:	b289      	uxth	r1, r1
 800a1ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a1b0:	f846 1b04 	str.w	r1, [r6], #4
 800a1b4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a1b8:	e7dd      	b.n	800a176 <__mdiff+0xd6>
 800a1ba:	3f01      	subs	r7, #1
 800a1bc:	e7e7      	b.n	800a18e <__mdiff+0xee>
 800a1be:	bf00      	nop
 800a1c0:	0800d051 	.word	0x0800d051
 800a1c4:	0800d062 	.word	0x0800d062

0800a1c8 <__ulp>:
 800a1c8:	b082      	sub	sp, #8
 800a1ca:	ed8d 0b00 	vstr	d0, [sp]
 800a1ce:	9a01      	ldr	r2, [sp, #4]
 800a1d0:	4b0f      	ldr	r3, [pc, #60]	@ (800a210 <__ulp+0x48>)
 800a1d2:	4013      	ands	r3, r2
 800a1d4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	dc08      	bgt.n	800a1ee <__ulp+0x26>
 800a1dc:	425b      	negs	r3, r3
 800a1de:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a1e2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a1e6:	da04      	bge.n	800a1f2 <__ulp+0x2a>
 800a1e8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a1ec:	4113      	asrs	r3, r2
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	e008      	b.n	800a204 <__ulp+0x3c>
 800a1f2:	f1a2 0314 	sub.w	r3, r2, #20
 800a1f6:	2b1e      	cmp	r3, #30
 800a1f8:	bfda      	itte	le
 800a1fa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a1fe:	40da      	lsrle	r2, r3
 800a200:	2201      	movgt	r2, #1
 800a202:	2300      	movs	r3, #0
 800a204:	4619      	mov	r1, r3
 800a206:	4610      	mov	r0, r2
 800a208:	ec41 0b10 	vmov	d0, r0, r1
 800a20c:	b002      	add	sp, #8
 800a20e:	4770      	bx	lr
 800a210:	7ff00000 	.word	0x7ff00000

0800a214 <__b2d>:
 800a214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a218:	6906      	ldr	r6, [r0, #16]
 800a21a:	f100 0814 	add.w	r8, r0, #20
 800a21e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a222:	1f37      	subs	r7, r6, #4
 800a224:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a228:	4610      	mov	r0, r2
 800a22a:	f7ff fd4b 	bl	8009cc4 <__hi0bits>
 800a22e:	f1c0 0320 	rsb	r3, r0, #32
 800a232:	280a      	cmp	r0, #10
 800a234:	600b      	str	r3, [r1, #0]
 800a236:	491b      	ldr	r1, [pc, #108]	@ (800a2a4 <__b2d+0x90>)
 800a238:	dc15      	bgt.n	800a266 <__b2d+0x52>
 800a23a:	f1c0 0c0b 	rsb	ip, r0, #11
 800a23e:	fa22 f30c 	lsr.w	r3, r2, ip
 800a242:	45b8      	cmp	r8, r7
 800a244:	ea43 0501 	orr.w	r5, r3, r1
 800a248:	bf34      	ite	cc
 800a24a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a24e:	2300      	movcs	r3, #0
 800a250:	3015      	adds	r0, #21
 800a252:	fa02 f000 	lsl.w	r0, r2, r0
 800a256:	fa23 f30c 	lsr.w	r3, r3, ip
 800a25a:	4303      	orrs	r3, r0
 800a25c:	461c      	mov	r4, r3
 800a25e:	ec45 4b10 	vmov	d0, r4, r5
 800a262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a266:	45b8      	cmp	r8, r7
 800a268:	bf3a      	itte	cc
 800a26a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a26e:	f1a6 0708 	subcc.w	r7, r6, #8
 800a272:	2300      	movcs	r3, #0
 800a274:	380b      	subs	r0, #11
 800a276:	d012      	beq.n	800a29e <__b2d+0x8a>
 800a278:	f1c0 0120 	rsb	r1, r0, #32
 800a27c:	fa23 f401 	lsr.w	r4, r3, r1
 800a280:	4082      	lsls	r2, r0
 800a282:	4322      	orrs	r2, r4
 800a284:	4547      	cmp	r7, r8
 800a286:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a28a:	bf8c      	ite	hi
 800a28c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a290:	2200      	movls	r2, #0
 800a292:	4083      	lsls	r3, r0
 800a294:	40ca      	lsrs	r2, r1
 800a296:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a29a:	4313      	orrs	r3, r2
 800a29c:	e7de      	b.n	800a25c <__b2d+0x48>
 800a29e:	ea42 0501 	orr.w	r5, r2, r1
 800a2a2:	e7db      	b.n	800a25c <__b2d+0x48>
 800a2a4:	3ff00000 	.word	0x3ff00000

0800a2a8 <__d2b>:
 800a2a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a2ac:	460f      	mov	r7, r1
 800a2ae:	2101      	movs	r1, #1
 800a2b0:	ec59 8b10 	vmov	r8, r9, d0
 800a2b4:	4616      	mov	r6, r2
 800a2b6:	f7ff fc13 	bl	8009ae0 <_Balloc>
 800a2ba:	4604      	mov	r4, r0
 800a2bc:	b930      	cbnz	r0, 800a2cc <__d2b+0x24>
 800a2be:	4602      	mov	r2, r0
 800a2c0:	4b23      	ldr	r3, [pc, #140]	@ (800a350 <__d2b+0xa8>)
 800a2c2:	4824      	ldr	r0, [pc, #144]	@ (800a354 <__d2b+0xac>)
 800a2c4:	f240 310f 	movw	r1, #783	@ 0x30f
 800a2c8:	f001 fb4e 	bl	800b968 <__assert_func>
 800a2cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a2d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a2d4:	b10d      	cbz	r5, 800a2da <__d2b+0x32>
 800a2d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a2da:	9301      	str	r3, [sp, #4]
 800a2dc:	f1b8 0300 	subs.w	r3, r8, #0
 800a2e0:	d023      	beq.n	800a32a <__d2b+0x82>
 800a2e2:	4668      	mov	r0, sp
 800a2e4:	9300      	str	r3, [sp, #0]
 800a2e6:	f7ff fd0c 	bl	8009d02 <__lo0bits>
 800a2ea:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a2ee:	b1d0      	cbz	r0, 800a326 <__d2b+0x7e>
 800a2f0:	f1c0 0320 	rsb	r3, r0, #32
 800a2f4:	fa02 f303 	lsl.w	r3, r2, r3
 800a2f8:	430b      	orrs	r3, r1
 800a2fa:	40c2      	lsrs	r2, r0
 800a2fc:	6163      	str	r3, [r4, #20]
 800a2fe:	9201      	str	r2, [sp, #4]
 800a300:	9b01      	ldr	r3, [sp, #4]
 800a302:	61a3      	str	r3, [r4, #24]
 800a304:	2b00      	cmp	r3, #0
 800a306:	bf0c      	ite	eq
 800a308:	2201      	moveq	r2, #1
 800a30a:	2202      	movne	r2, #2
 800a30c:	6122      	str	r2, [r4, #16]
 800a30e:	b1a5      	cbz	r5, 800a33a <__d2b+0x92>
 800a310:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a314:	4405      	add	r5, r0
 800a316:	603d      	str	r5, [r7, #0]
 800a318:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a31c:	6030      	str	r0, [r6, #0]
 800a31e:	4620      	mov	r0, r4
 800a320:	b003      	add	sp, #12
 800a322:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a326:	6161      	str	r1, [r4, #20]
 800a328:	e7ea      	b.n	800a300 <__d2b+0x58>
 800a32a:	a801      	add	r0, sp, #4
 800a32c:	f7ff fce9 	bl	8009d02 <__lo0bits>
 800a330:	9b01      	ldr	r3, [sp, #4]
 800a332:	6163      	str	r3, [r4, #20]
 800a334:	3020      	adds	r0, #32
 800a336:	2201      	movs	r2, #1
 800a338:	e7e8      	b.n	800a30c <__d2b+0x64>
 800a33a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a33e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a342:	6038      	str	r0, [r7, #0]
 800a344:	6918      	ldr	r0, [r3, #16]
 800a346:	f7ff fcbd 	bl	8009cc4 <__hi0bits>
 800a34a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a34e:	e7e5      	b.n	800a31c <__d2b+0x74>
 800a350:	0800d051 	.word	0x0800d051
 800a354:	0800d062 	.word	0x0800d062

0800a358 <__ratio>:
 800a358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a35c:	b085      	sub	sp, #20
 800a35e:	e9cd 1000 	strd	r1, r0, [sp]
 800a362:	a902      	add	r1, sp, #8
 800a364:	f7ff ff56 	bl	800a214 <__b2d>
 800a368:	9800      	ldr	r0, [sp, #0]
 800a36a:	a903      	add	r1, sp, #12
 800a36c:	ec55 4b10 	vmov	r4, r5, d0
 800a370:	f7ff ff50 	bl	800a214 <__b2d>
 800a374:	9b01      	ldr	r3, [sp, #4]
 800a376:	6919      	ldr	r1, [r3, #16]
 800a378:	9b00      	ldr	r3, [sp, #0]
 800a37a:	691b      	ldr	r3, [r3, #16]
 800a37c:	1ac9      	subs	r1, r1, r3
 800a37e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a382:	1a9b      	subs	r3, r3, r2
 800a384:	ec5b ab10 	vmov	sl, fp, d0
 800a388:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	bfce      	itee	gt
 800a390:	462a      	movgt	r2, r5
 800a392:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a396:	465a      	movle	r2, fp
 800a398:	462f      	mov	r7, r5
 800a39a:	46d9      	mov	r9, fp
 800a39c:	bfcc      	ite	gt
 800a39e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a3a2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a3a6:	464b      	mov	r3, r9
 800a3a8:	4652      	mov	r2, sl
 800a3aa:	4620      	mov	r0, r4
 800a3ac:	4639      	mov	r1, r7
 800a3ae:	f7f6 fa75 	bl	800089c <__aeabi_ddiv>
 800a3b2:	ec41 0b10 	vmov	d0, r0, r1
 800a3b6:	b005      	add	sp, #20
 800a3b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a3bc <__copybits>:
 800a3bc:	3901      	subs	r1, #1
 800a3be:	b570      	push	{r4, r5, r6, lr}
 800a3c0:	1149      	asrs	r1, r1, #5
 800a3c2:	6914      	ldr	r4, [r2, #16]
 800a3c4:	3101      	adds	r1, #1
 800a3c6:	f102 0314 	add.w	r3, r2, #20
 800a3ca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a3ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a3d2:	1f05      	subs	r5, r0, #4
 800a3d4:	42a3      	cmp	r3, r4
 800a3d6:	d30c      	bcc.n	800a3f2 <__copybits+0x36>
 800a3d8:	1aa3      	subs	r3, r4, r2
 800a3da:	3b11      	subs	r3, #17
 800a3dc:	f023 0303 	bic.w	r3, r3, #3
 800a3e0:	3211      	adds	r2, #17
 800a3e2:	42a2      	cmp	r2, r4
 800a3e4:	bf88      	it	hi
 800a3e6:	2300      	movhi	r3, #0
 800a3e8:	4418      	add	r0, r3
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	4288      	cmp	r0, r1
 800a3ee:	d305      	bcc.n	800a3fc <__copybits+0x40>
 800a3f0:	bd70      	pop	{r4, r5, r6, pc}
 800a3f2:	f853 6b04 	ldr.w	r6, [r3], #4
 800a3f6:	f845 6f04 	str.w	r6, [r5, #4]!
 800a3fa:	e7eb      	b.n	800a3d4 <__copybits+0x18>
 800a3fc:	f840 3b04 	str.w	r3, [r0], #4
 800a400:	e7f4      	b.n	800a3ec <__copybits+0x30>

0800a402 <__any_on>:
 800a402:	f100 0214 	add.w	r2, r0, #20
 800a406:	6900      	ldr	r0, [r0, #16]
 800a408:	114b      	asrs	r3, r1, #5
 800a40a:	4298      	cmp	r0, r3
 800a40c:	b510      	push	{r4, lr}
 800a40e:	db11      	blt.n	800a434 <__any_on+0x32>
 800a410:	dd0a      	ble.n	800a428 <__any_on+0x26>
 800a412:	f011 011f 	ands.w	r1, r1, #31
 800a416:	d007      	beq.n	800a428 <__any_on+0x26>
 800a418:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a41c:	fa24 f001 	lsr.w	r0, r4, r1
 800a420:	fa00 f101 	lsl.w	r1, r0, r1
 800a424:	428c      	cmp	r4, r1
 800a426:	d10b      	bne.n	800a440 <__any_on+0x3e>
 800a428:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a42c:	4293      	cmp	r3, r2
 800a42e:	d803      	bhi.n	800a438 <__any_on+0x36>
 800a430:	2000      	movs	r0, #0
 800a432:	bd10      	pop	{r4, pc}
 800a434:	4603      	mov	r3, r0
 800a436:	e7f7      	b.n	800a428 <__any_on+0x26>
 800a438:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a43c:	2900      	cmp	r1, #0
 800a43e:	d0f5      	beq.n	800a42c <__any_on+0x2a>
 800a440:	2001      	movs	r0, #1
 800a442:	e7f6      	b.n	800a432 <__any_on+0x30>

0800a444 <sulp>:
 800a444:	b570      	push	{r4, r5, r6, lr}
 800a446:	4604      	mov	r4, r0
 800a448:	460d      	mov	r5, r1
 800a44a:	ec45 4b10 	vmov	d0, r4, r5
 800a44e:	4616      	mov	r6, r2
 800a450:	f7ff feba 	bl	800a1c8 <__ulp>
 800a454:	ec51 0b10 	vmov	r0, r1, d0
 800a458:	b17e      	cbz	r6, 800a47a <sulp+0x36>
 800a45a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a45e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a462:	2b00      	cmp	r3, #0
 800a464:	dd09      	ble.n	800a47a <sulp+0x36>
 800a466:	051b      	lsls	r3, r3, #20
 800a468:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a46c:	2400      	movs	r4, #0
 800a46e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a472:	4622      	mov	r2, r4
 800a474:	462b      	mov	r3, r5
 800a476:	f7f6 f8e7 	bl	8000648 <__aeabi_dmul>
 800a47a:	ec41 0b10 	vmov	d0, r0, r1
 800a47e:	bd70      	pop	{r4, r5, r6, pc}

0800a480 <_strtod_l>:
 800a480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a484:	b09f      	sub	sp, #124	@ 0x7c
 800a486:	460c      	mov	r4, r1
 800a488:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a48a:	2200      	movs	r2, #0
 800a48c:	921a      	str	r2, [sp, #104]	@ 0x68
 800a48e:	9005      	str	r0, [sp, #20]
 800a490:	f04f 0a00 	mov.w	sl, #0
 800a494:	f04f 0b00 	mov.w	fp, #0
 800a498:	460a      	mov	r2, r1
 800a49a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a49c:	7811      	ldrb	r1, [r2, #0]
 800a49e:	292b      	cmp	r1, #43	@ 0x2b
 800a4a0:	d04a      	beq.n	800a538 <_strtod_l+0xb8>
 800a4a2:	d838      	bhi.n	800a516 <_strtod_l+0x96>
 800a4a4:	290d      	cmp	r1, #13
 800a4a6:	d832      	bhi.n	800a50e <_strtod_l+0x8e>
 800a4a8:	2908      	cmp	r1, #8
 800a4aa:	d832      	bhi.n	800a512 <_strtod_l+0x92>
 800a4ac:	2900      	cmp	r1, #0
 800a4ae:	d03b      	beq.n	800a528 <_strtod_l+0xa8>
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a4b4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a4b6:	782a      	ldrb	r2, [r5, #0]
 800a4b8:	2a30      	cmp	r2, #48	@ 0x30
 800a4ba:	f040 80b3 	bne.w	800a624 <_strtod_l+0x1a4>
 800a4be:	786a      	ldrb	r2, [r5, #1]
 800a4c0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a4c4:	2a58      	cmp	r2, #88	@ 0x58
 800a4c6:	d16e      	bne.n	800a5a6 <_strtod_l+0x126>
 800a4c8:	9302      	str	r3, [sp, #8]
 800a4ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4cc:	9301      	str	r3, [sp, #4]
 800a4ce:	ab1a      	add	r3, sp, #104	@ 0x68
 800a4d0:	9300      	str	r3, [sp, #0]
 800a4d2:	4a8e      	ldr	r2, [pc, #568]	@ (800a70c <_strtod_l+0x28c>)
 800a4d4:	9805      	ldr	r0, [sp, #20]
 800a4d6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a4d8:	a919      	add	r1, sp, #100	@ 0x64
 800a4da:	f001 fadf 	bl	800ba9c <__gethex>
 800a4de:	f010 060f 	ands.w	r6, r0, #15
 800a4e2:	4604      	mov	r4, r0
 800a4e4:	d005      	beq.n	800a4f2 <_strtod_l+0x72>
 800a4e6:	2e06      	cmp	r6, #6
 800a4e8:	d128      	bne.n	800a53c <_strtod_l+0xbc>
 800a4ea:	3501      	adds	r5, #1
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	9519      	str	r5, [sp, #100]	@ 0x64
 800a4f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a4f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	f040 858e 	bne.w	800b016 <_strtod_l+0xb96>
 800a4fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4fc:	b1cb      	cbz	r3, 800a532 <_strtod_l+0xb2>
 800a4fe:	4652      	mov	r2, sl
 800a500:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a504:	ec43 2b10 	vmov	d0, r2, r3
 800a508:	b01f      	add	sp, #124	@ 0x7c
 800a50a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a50e:	2920      	cmp	r1, #32
 800a510:	d1ce      	bne.n	800a4b0 <_strtod_l+0x30>
 800a512:	3201      	adds	r2, #1
 800a514:	e7c1      	b.n	800a49a <_strtod_l+0x1a>
 800a516:	292d      	cmp	r1, #45	@ 0x2d
 800a518:	d1ca      	bne.n	800a4b0 <_strtod_l+0x30>
 800a51a:	2101      	movs	r1, #1
 800a51c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a51e:	1c51      	adds	r1, r2, #1
 800a520:	9119      	str	r1, [sp, #100]	@ 0x64
 800a522:	7852      	ldrb	r2, [r2, #1]
 800a524:	2a00      	cmp	r2, #0
 800a526:	d1c5      	bne.n	800a4b4 <_strtod_l+0x34>
 800a528:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a52a:	9419      	str	r4, [sp, #100]	@ 0x64
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	f040 8570 	bne.w	800b012 <_strtod_l+0xb92>
 800a532:	4652      	mov	r2, sl
 800a534:	465b      	mov	r3, fp
 800a536:	e7e5      	b.n	800a504 <_strtod_l+0x84>
 800a538:	2100      	movs	r1, #0
 800a53a:	e7ef      	b.n	800a51c <_strtod_l+0x9c>
 800a53c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a53e:	b13a      	cbz	r2, 800a550 <_strtod_l+0xd0>
 800a540:	2135      	movs	r1, #53	@ 0x35
 800a542:	a81c      	add	r0, sp, #112	@ 0x70
 800a544:	f7ff ff3a 	bl	800a3bc <__copybits>
 800a548:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a54a:	9805      	ldr	r0, [sp, #20]
 800a54c:	f7ff fb08 	bl	8009b60 <_Bfree>
 800a550:	3e01      	subs	r6, #1
 800a552:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a554:	2e04      	cmp	r6, #4
 800a556:	d806      	bhi.n	800a566 <_strtod_l+0xe6>
 800a558:	e8df f006 	tbb	[pc, r6]
 800a55c:	201d0314 	.word	0x201d0314
 800a560:	14          	.byte	0x14
 800a561:	00          	.byte	0x00
 800a562:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a566:	05e1      	lsls	r1, r4, #23
 800a568:	bf48      	it	mi
 800a56a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a56e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a572:	0d1b      	lsrs	r3, r3, #20
 800a574:	051b      	lsls	r3, r3, #20
 800a576:	2b00      	cmp	r3, #0
 800a578:	d1bb      	bne.n	800a4f2 <_strtod_l+0x72>
 800a57a:	f7fe fb23 	bl	8008bc4 <__errno>
 800a57e:	2322      	movs	r3, #34	@ 0x22
 800a580:	6003      	str	r3, [r0, #0]
 800a582:	e7b6      	b.n	800a4f2 <_strtod_l+0x72>
 800a584:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a588:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a58c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a590:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a594:	e7e7      	b.n	800a566 <_strtod_l+0xe6>
 800a596:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a714 <_strtod_l+0x294>
 800a59a:	e7e4      	b.n	800a566 <_strtod_l+0xe6>
 800a59c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a5a0:	f04f 3aff 	mov.w	sl, #4294967295
 800a5a4:	e7df      	b.n	800a566 <_strtod_l+0xe6>
 800a5a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a5a8:	1c5a      	adds	r2, r3, #1
 800a5aa:	9219      	str	r2, [sp, #100]	@ 0x64
 800a5ac:	785b      	ldrb	r3, [r3, #1]
 800a5ae:	2b30      	cmp	r3, #48	@ 0x30
 800a5b0:	d0f9      	beq.n	800a5a6 <_strtod_l+0x126>
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d09d      	beq.n	800a4f2 <_strtod_l+0x72>
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a5bc:	930c      	str	r3, [sp, #48]	@ 0x30
 800a5be:	2300      	movs	r3, #0
 800a5c0:	9308      	str	r3, [sp, #32]
 800a5c2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a5c4:	461f      	mov	r7, r3
 800a5c6:	220a      	movs	r2, #10
 800a5c8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a5ca:	7805      	ldrb	r5, [r0, #0]
 800a5cc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a5d0:	b2d9      	uxtb	r1, r3
 800a5d2:	2909      	cmp	r1, #9
 800a5d4:	d928      	bls.n	800a628 <_strtod_l+0x1a8>
 800a5d6:	494e      	ldr	r1, [pc, #312]	@ (800a710 <_strtod_l+0x290>)
 800a5d8:	2201      	movs	r2, #1
 800a5da:	f001 f979 	bl	800b8d0 <strncmp>
 800a5de:	2800      	cmp	r0, #0
 800a5e0:	d032      	beq.n	800a648 <_strtod_l+0x1c8>
 800a5e2:	2000      	movs	r0, #0
 800a5e4:	462a      	mov	r2, r5
 800a5e6:	4681      	mov	r9, r0
 800a5e8:	463d      	mov	r5, r7
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	2a65      	cmp	r2, #101	@ 0x65
 800a5ee:	d001      	beq.n	800a5f4 <_strtod_l+0x174>
 800a5f0:	2a45      	cmp	r2, #69	@ 0x45
 800a5f2:	d114      	bne.n	800a61e <_strtod_l+0x19e>
 800a5f4:	b91d      	cbnz	r5, 800a5fe <_strtod_l+0x17e>
 800a5f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a5f8:	4302      	orrs	r2, r0
 800a5fa:	d095      	beq.n	800a528 <_strtod_l+0xa8>
 800a5fc:	2500      	movs	r5, #0
 800a5fe:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a600:	1c62      	adds	r2, r4, #1
 800a602:	9219      	str	r2, [sp, #100]	@ 0x64
 800a604:	7862      	ldrb	r2, [r4, #1]
 800a606:	2a2b      	cmp	r2, #43	@ 0x2b
 800a608:	d077      	beq.n	800a6fa <_strtod_l+0x27a>
 800a60a:	2a2d      	cmp	r2, #45	@ 0x2d
 800a60c:	d07b      	beq.n	800a706 <_strtod_l+0x286>
 800a60e:	f04f 0c00 	mov.w	ip, #0
 800a612:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a616:	2909      	cmp	r1, #9
 800a618:	f240 8082 	bls.w	800a720 <_strtod_l+0x2a0>
 800a61c:	9419      	str	r4, [sp, #100]	@ 0x64
 800a61e:	f04f 0800 	mov.w	r8, #0
 800a622:	e0a2      	b.n	800a76a <_strtod_l+0x2ea>
 800a624:	2300      	movs	r3, #0
 800a626:	e7c7      	b.n	800a5b8 <_strtod_l+0x138>
 800a628:	2f08      	cmp	r7, #8
 800a62a:	bfd5      	itete	le
 800a62c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a62e:	9908      	ldrgt	r1, [sp, #32]
 800a630:	fb02 3301 	mlale	r3, r2, r1, r3
 800a634:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a638:	f100 0001 	add.w	r0, r0, #1
 800a63c:	bfd4      	ite	le
 800a63e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a640:	9308      	strgt	r3, [sp, #32]
 800a642:	3701      	adds	r7, #1
 800a644:	9019      	str	r0, [sp, #100]	@ 0x64
 800a646:	e7bf      	b.n	800a5c8 <_strtod_l+0x148>
 800a648:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a64a:	1c5a      	adds	r2, r3, #1
 800a64c:	9219      	str	r2, [sp, #100]	@ 0x64
 800a64e:	785a      	ldrb	r2, [r3, #1]
 800a650:	b37f      	cbz	r7, 800a6b2 <_strtod_l+0x232>
 800a652:	4681      	mov	r9, r0
 800a654:	463d      	mov	r5, r7
 800a656:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a65a:	2b09      	cmp	r3, #9
 800a65c:	d912      	bls.n	800a684 <_strtod_l+0x204>
 800a65e:	2301      	movs	r3, #1
 800a660:	e7c4      	b.n	800a5ec <_strtod_l+0x16c>
 800a662:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a664:	1c5a      	adds	r2, r3, #1
 800a666:	9219      	str	r2, [sp, #100]	@ 0x64
 800a668:	785a      	ldrb	r2, [r3, #1]
 800a66a:	3001      	adds	r0, #1
 800a66c:	2a30      	cmp	r2, #48	@ 0x30
 800a66e:	d0f8      	beq.n	800a662 <_strtod_l+0x1e2>
 800a670:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a674:	2b08      	cmp	r3, #8
 800a676:	f200 84d3 	bhi.w	800b020 <_strtod_l+0xba0>
 800a67a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a67c:	930c      	str	r3, [sp, #48]	@ 0x30
 800a67e:	4681      	mov	r9, r0
 800a680:	2000      	movs	r0, #0
 800a682:	4605      	mov	r5, r0
 800a684:	3a30      	subs	r2, #48	@ 0x30
 800a686:	f100 0301 	add.w	r3, r0, #1
 800a68a:	d02a      	beq.n	800a6e2 <_strtod_l+0x262>
 800a68c:	4499      	add	r9, r3
 800a68e:	eb00 0c05 	add.w	ip, r0, r5
 800a692:	462b      	mov	r3, r5
 800a694:	210a      	movs	r1, #10
 800a696:	4563      	cmp	r3, ip
 800a698:	d10d      	bne.n	800a6b6 <_strtod_l+0x236>
 800a69a:	1c69      	adds	r1, r5, #1
 800a69c:	4401      	add	r1, r0
 800a69e:	4428      	add	r0, r5
 800a6a0:	2808      	cmp	r0, #8
 800a6a2:	dc16      	bgt.n	800a6d2 <_strtod_l+0x252>
 800a6a4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a6a6:	230a      	movs	r3, #10
 800a6a8:	fb03 2300 	mla	r3, r3, r0, r2
 800a6ac:	930a      	str	r3, [sp, #40]	@ 0x28
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	e018      	b.n	800a6e4 <_strtod_l+0x264>
 800a6b2:	4638      	mov	r0, r7
 800a6b4:	e7da      	b.n	800a66c <_strtod_l+0x1ec>
 800a6b6:	2b08      	cmp	r3, #8
 800a6b8:	f103 0301 	add.w	r3, r3, #1
 800a6bc:	dc03      	bgt.n	800a6c6 <_strtod_l+0x246>
 800a6be:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a6c0:	434e      	muls	r6, r1
 800a6c2:	960a      	str	r6, [sp, #40]	@ 0x28
 800a6c4:	e7e7      	b.n	800a696 <_strtod_l+0x216>
 800a6c6:	2b10      	cmp	r3, #16
 800a6c8:	bfde      	ittt	le
 800a6ca:	9e08      	ldrle	r6, [sp, #32]
 800a6cc:	434e      	mulle	r6, r1
 800a6ce:	9608      	strle	r6, [sp, #32]
 800a6d0:	e7e1      	b.n	800a696 <_strtod_l+0x216>
 800a6d2:	280f      	cmp	r0, #15
 800a6d4:	dceb      	bgt.n	800a6ae <_strtod_l+0x22e>
 800a6d6:	9808      	ldr	r0, [sp, #32]
 800a6d8:	230a      	movs	r3, #10
 800a6da:	fb03 2300 	mla	r3, r3, r0, r2
 800a6de:	9308      	str	r3, [sp, #32]
 800a6e0:	e7e5      	b.n	800a6ae <_strtod_l+0x22e>
 800a6e2:	4629      	mov	r1, r5
 800a6e4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a6e6:	1c50      	adds	r0, r2, #1
 800a6e8:	9019      	str	r0, [sp, #100]	@ 0x64
 800a6ea:	7852      	ldrb	r2, [r2, #1]
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	460d      	mov	r5, r1
 800a6f0:	e7b1      	b.n	800a656 <_strtod_l+0x1d6>
 800a6f2:	f04f 0900 	mov.w	r9, #0
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	e77d      	b.n	800a5f6 <_strtod_l+0x176>
 800a6fa:	f04f 0c00 	mov.w	ip, #0
 800a6fe:	1ca2      	adds	r2, r4, #2
 800a700:	9219      	str	r2, [sp, #100]	@ 0x64
 800a702:	78a2      	ldrb	r2, [r4, #2]
 800a704:	e785      	b.n	800a612 <_strtod_l+0x192>
 800a706:	f04f 0c01 	mov.w	ip, #1
 800a70a:	e7f8      	b.n	800a6fe <_strtod_l+0x27e>
 800a70c:	0800d1d0 	.word	0x0800d1d0
 800a710:	0800d1b8 	.word	0x0800d1b8
 800a714:	7ff00000 	.word	0x7ff00000
 800a718:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a71a:	1c51      	adds	r1, r2, #1
 800a71c:	9119      	str	r1, [sp, #100]	@ 0x64
 800a71e:	7852      	ldrb	r2, [r2, #1]
 800a720:	2a30      	cmp	r2, #48	@ 0x30
 800a722:	d0f9      	beq.n	800a718 <_strtod_l+0x298>
 800a724:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a728:	2908      	cmp	r1, #8
 800a72a:	f63f af78 	bhi.w	800a61e <_strtod_l+0x19e>
 800a72e:	3a30      	subs	r2, #48	@ 0x30
 800a730:	920e      	str	r2, [sp, #56]	@ 0x38
 800a732:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a734:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a736:	f04f 080a 	mov.w	r8, #10
 800a73a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a73c:	1c56      	adds	r6, r2, #1
 800a73e:	9619      	str	r6, [sp, #100]	@ 0x64
 800a740:	7852      	ldrb	r2, [r2, #1]
 800a742:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a746:	f1be 0f09 	cmp.w	lr, #9
 800a74a:	d939      	bls.n	800a7c0 <_strtod_l+0x340>
 800a74c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a74e:	1a76      	subs	r6, r6, r1
 800a750:	2e08      	cmp	r6, #8
 800a752:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a756:	dc03      	bgt.n	800a760 <_strtod_l+0x2e0>
 800a758:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a75a:	4588      	cmp	r8, r1
 800a75c:	bfa8      	it	ge
 800a75e:	4688      	movge	r8, r1
 800a760:	f1bc 0f00 	cmp.w	ip, #0
 800a764:	d001      	beq.n	800a76a <_strtod_l+0x2ea>
 800a766:	f1c8 0800 	rsb	r8, r8, #0
 800a76a:	2d00      	cmp	r5, #0
 800a76c:	d14e      	bne.n	800a80c <_strtod_l+0x38c>
 800a76e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a770:	4308      	orrs	r0, r1
 800a772:	f47f aebe 	bne.w	800a4f2 <_strtod_l+0x72>
 800a776:	2b00      	cmp	r3, #0
 800a778:	f47f aed6 	bne.w	800a528 <_strtod_l+0xa8>
 800a77c:	2a69      	cmp	r2, #105	@ 0x69
 800a77e:	d028      	beq.n	800a7d2 <_strtod_l+0x352>
 800a780:	dc25      	bgt.n	800a7ce <_strtod_l+0x34e>
 800a782:	2a49      	cmp	r2, #73	@ 0x49
 800a784:	d025      	beq.n	800a7d2 <_strtod_l+0x352>
 800a786:	2a4e      	cmp	r2, #78	@ 0x4e
 800a788:	f47f aece 	bne.w	800a528 <_strtod_l+0xa8>
 800a78c:	499b      	ldr	r1, [pc, #620]	@ (800a9fc <_strtod_l+0x57c>)
 800a78e:	a819      	add	r0, sp, #100	@ 0x64
 800a790:	f001 fba6 	bl	800bee0 <__match>
 800a794:	2800      	cmp	r0, #0
 800a796:	f43f aec7 	beq.w	800a528 <_strtod_l+0xa8>
 800a79a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a79c:	781b      	ldrb	r3, [r3, #0]
 800a79e:	2b28      	cmp	r3, #40	@ 0x28
 800a7a0:	d12e      	bne.n	800a800 <_strtod_l+0x380>
 800a7a2:	4997      	ldr	r1, [pc, #604]	@ (800aa00 <_strtod_l+0x580>)
 800a7a4:	aa1c      	add	r2, sp, #112	@ 0x70
 800a7a6:	a819      	add	r0, sp, #100	@ 0x64
 800a7a8:	f001 fbae 	bl	800bf08 <__hexnan>
 800a7ac:	2805      	cmp	r0, #5
 800a7ae:	d127      	bne.n	800a800 <_strtod_l+0x380>
 800a7b0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a7b2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a7b6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a7ba:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a7be:	e698      	b.n	800a4f2 <_strtod_l+0x72>
 800a7c0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a7c2:	fb08 2101 	mla	r1, r8, r1, r2
 800a7c6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a7ca:	920e      	str	r2, [sp, #56]	@ 0x38
 800a7cc:	e7b5      	b.n	800a73a <_strtod_l+0x2ba>
 800a7ce:	2a6e      	cmp	r2, #110	@ 0x6e
 800a7d0:	e7da      	b.n	800a788 <_strtod_l+0x308>
 800a7d2:	498c      	ldr	r1, [pc, #560]	@ (800aa04 <_strtod_l+0x584>)
 800a7d4:	a819      	add	r0, sp, #100	@ 0x64
 800a7d6:	f001 fb83 	bl	800bee0 <__match>
 800a7da:	2800      	cmp	r0, #0
 800a7dc:	f43f aea4 	beq.w	800a528 <_strtod_l+0xa8>
 800a7e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a7e2:	4989      	ldr	r1, [pc, #548]	@ (800aa08 <_strtod_l+0x588>)
 800a7e4:	3b01      	subs	r3, #1
 800a7e6:	a819      	add	r0, sp, #100	@ 0x64
 800a7e8:	9319      	str	r3, [sp, #100]	@ 0x64
 800a7ea:	f001 fb79 	bl	800bee0 <__match>
 800a7ee:	b910      	cbnz	r0, 800a7f6 <_strtod_l+0x376>
 800a7f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	9319      	str	r3, [sp, #100]	@ 0x64
 800a7f6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800aa18 <_strtod_l+0x598>
 800a7fa:	f04f 0a00 	mov.w	sl, #0
 800a7fe:	e678      	b.n	800a4f2 <_strtod_l+0x72>
 800a800:	4882      	ldr	r0, [pc, #520]	@ (800aa0c <_strtod_l+0x58c>)
 800a802:	f001 f8a9 	bl	800b958 <nan>
 800a806:	ec5b ab10 	vmov	sl, fp, d0
 800a80a:	e672      	b.n	800a4f2 <_strtod_l+0x72>
 800a80c:	eba8 0309 	sub.w	r3, r8, r9
 800a810:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a812:	9309      	str	r3, [sp, #36]	@ 0x24
 800a814:	2f00      	cmp	r7, #0
 800a816:	bf08      	it	eq
 800a818:	462f      	moveq	r7, r5
 800a81a:	2d10      	cmp	r5, #16
 800a81c:	462c      	mov	r4, r5
 800a81e:	bfa8      	it	ge
 800a820:	2410      	movge	r4, #16
 800a822:	f7f5 fe97 	bl	8000554 <__aeabi_ui2d>
 800a826:	2d09      	cmp	r5, #9
 800a828:	4682      	mov	sl, r0
 800a82a:	468b      	mov	fp, r1
 800a82c:	dc13      	bgt.n	800a856 <_strtod_l+0x3d6>
 800a82e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a830:	2b00      	cmp	r3, #0
 800a832:	f43f ae5e 	beq.w	800a4f2 <_strtod_l+0x72>
 800a836:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a838:	dd78      	ble.n	800a92c <_strtod_l+0x4ac>
 800a83a:	2b16      	cmp	r3, #22
 800a83c:	dc5f      	bgt.n	800a8fe <_strtod_l+0x47e>
 800a83e:	4974      	ldr	r1, [pc, #464]	@ (800aa10 <_strtod_l+0x590>)
 800a840:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a844:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a848:	4652      	mov	r2, sl
 800a84a:	465b      	mov	r3, fp
 800a84c:	f7f5 fefc 	bl	8000648 <__aeabi_dmul>
 800a850:	4682      	mov	sl, r0
 800a852:	468b      	mov	fp, r1
 800a854:	e64d      	b.n	800a4f2 <_strtod_l+0x72>
 800a856:	4b6e      	ldr	r3, [pc, #440]	@ (800aa10 <_strtod_l+0x590>)
 800a858:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a85c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a860:	f7f5 fef2 	bl	8000648 <__aeabi_dmul>
 800a864:	4682      	mov	sl, r0
 800a866:	9808      	ldr	r0, [sp, #32]
 800a868:	468b      	mov	fp, r1
 800a86a:	f7f5 fe73 	bl	8000554 <__aeabi_ui2d>
 800a86e:	4602      	mov	r2, r0
 800a870:	460b      	mov	r3, r1
 800a872:	4650      	mov	r0, sl
 800a874:	4659      	mov	r1, fp
 800a876:	f7f5 fd31 	bl	80002dc <__adddf3>
 800a87a:	2d0f      	cmp	r5, #15
 800a87c:	4682      	mov	sl, r0
 800a87e:	468b      	mov	fp, r1
 800a880:	ddd5      	ble.n	800a82e <_strtod_l+0x3ae>
 800a882:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a884:	1b2c      	subs	r4, r5, r4
 800a886:	441c      	add	r4, r3
 800a888:	2c00      	cmp	r4, #0
 800a88a:	f340 8096 	ble.w	800a9ba <_strtod_l+0x53a>
 800a88e:	f014 030f 	ands.w	r3, r4, #15
 800a892:	d00a      	beq.n	800a8aa <_strtod_l+0x42a>
 800a894:	495e      	ldr	r1, [pc, #376]	@ (800aa10 <_strtod_l+0x590>)
 800a896:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a89a:	4652      	mov	r2, sl
 800a89c:	465b      	mov	r3, fp
 800a89e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8a2:	f7f5 fed1 	bl	8000648 <__aeabi_dmul>
 800a8a6:	4682      	mov	sl, r0
 800a8a8:	468b      	mov	fp, r1
 800a8aa:	f034 040f 	bics.w	r4, r4, #15
 800a8ae:	d073      	beq.n	800a998 <_strtod_l+0x518>
 800a8b0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a8b4:	dd48      	ble.n	800a948 <_strtod_l+0x4c8>
 800a8b6:	2400      	movs	r4, #0
 800a8b8:	46a0      	mov	r8, r4
 800a8ba:	940a      	str	r4, [sp, #40]	@ 0x28
 800a8bc:	46a1      	mov	r9, r4
 800a8be:	9a05      	ldr	r2, [sp, #20]
 800a8c0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800aa18 <_strtod_l+0x598>
 800a8c4:	2322      	movs	r3, #34	@ 0x22
 800a8c6:	6013      	str	r3, [r2, #0]
 800a8c8:	f04f 0a00 	mov.w	sl, #0
 800a8cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	f43f ae0f 	beq.w	800a4f2 <_strtod_l+0x72>
 800a8d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a8d6:	9805      	ldr	r0, [sp, #20]
 800a8d8:	f7ff f942 	bl	8009b60 <_Bfree>
 800a8dc:	9805      	ldr	r0, [sp, #20]
 800a8de:	4649      	mov	r1, r9
 800a8e0:	f7ff f93e 	bl	8009b60 <_Bfree>
 800a8e4:	9805      	ldr	r0, [sp, #20]
 800a8e6:	4641      	mov	r1, r8
 800a8e8:	f7ff f93a 	bl	8009b60 <_Bfree>
 800a8ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a8ee:	9805      	ldr	r0, [sp, #20]
 800a8f0:	f7ff f936 	bl	8009b60 <_Bfree>
 800a8f4:	9805      	ldr	r0, [sp, #20]
 800a8f6:	4621      	mov	r1, r4
 800a8f8:	f7ff f932 	bl	8009b60 <_Bfree>
 800a8fc:	e5f9      	b.n	800a4f2 <_strtod_l+0x72>
 800a8fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a900:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a904:	4293      	cmp	r3, r2
 800a906:	dbbc      	blt.n	800a882 <_strtod_l+0x402>
 800a908:	4c41      	ldr	r4, [pc, #260]	@ (800aa10 <_strtod_l+0x590>)
 800a90a:	f1c5 050f 	rsb	r5, r5, #15
 800a90e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a912:	4652      	mov	r2, sl
 800a914:	465b      	mov	r3, fp
 800a916:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a91a:	f7f5 fe95 	bl	8000648 <__aeabi_dmul>
 800a91e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a920:	1b5d      	subs	r5, r3, r5
 800a922:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a926:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a92a:	e78f      	b.n	800a84c <_strtod_l+0x3cc>
 800a92c:	3316      	adds	r3, #22
 800a92e:	dba8      	blt.n	800a882 <_strtod_l+0x402>
 800a930:	4b37      	ldr	r3, [pc, #220]	@ (800aa10 <_strtod_l+0x590>)
 800a932:	eba9 0808 	sub.w	r8, r9, r8
 800a936:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a93a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a93e:	4650      	mov	r0, sl
 800a940:	4659      	mov	r1, fp
 800a942:	f7f5 ffab 	bl	800089c <__aeabi_ddiv>
 800a946:	e783      	b.n	800a850 <_strtod_l+0x3d0>
 800a948:	4b32      	ldr	r3, [pc, #200]	@ (800aa14 <_strtod_l+0x594>)
 800a94a:	9308      	str	r3, [sp, #32]
 800a94c:	2300      	movs	r3, #0
 800a94e:	1124      	asrs	r4, r4, #4
 800a950:	4650      	mov	r0, sl
 800a952:	4659      	mov	r1, fp
 800a954:	461e      	mov	r6, r3
 800a956:	2c01      	cmp	r4, #1
 800a958:	dc21      	bgt.n	800a99e <_strtod_l+0x51e>
 800a95a:	b10b      	cbz	r3, 800a960 <_strtod_l+0x4e0>
 800a95c:	4682      	mov	sl, r0
 800a95e:	468b      	mov	fp, r1
 800a960:	492c      	ldr	r1, [pc, #176]	@ (800aa14 <_strtod_l+0x594>)
 800a962:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a966:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a96a:	4652      	mov	r2, sl
 800a96c:	465b      	mov	r3, fp
 800a96e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a972:	f7f5 fe69 	bl	8000648 <__aeabi_dmul>
 800a976:	4b28      	ldr	r3, [pc, #160]	@ (800aa18 <_strtod_l+0x598>)
 800a978:	460a      	mov	r2, r1
 800a97a:	400b      	ands	r3, r1
 800a97c:	4927      	ldr	r1, [pc, #156]	@ (800aa1c <_strtod_l+0x59c>)
 800a97e:	428b      	cmp	r3, r1
 800a980:	4682      	mov	sl, r0
 800a982:	d898      	bhi.n	800a8b6 <_strtod_l+0x436>
 800a984:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a988:	428b      	cmp	r3, r1
 800a98a:	bf86      	itte	hi
 800a98c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800aa20 <_strtod_l+0x5a0>
 800a990:	f04f 3aff 	movhi.w	sl, #4294967295
 800a994:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a998:	2300      	movs	r3, #0
 800a99a:	9308      	str	r3, [sp, #32]
 800a99c:	e07a      	b.n	800aa94 <_strtod_l+0x614>
 800a99e:	07e2      	lsls	r2, r4, #31
 800a9a0:	d505      	bpl.n	800a9ae <_strtod_l+0x52e>
 800a9a2:	9b08      	ldr	r3, [sp, #32]
 800a9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a8:	f7f5 fe4e 	bl	8000648 <__aeabi_dmul>
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	9a08      	ldr	r2, [sp, #32]
 800a9b0:	3208      	adds	r2, #8
 800a9b2:	3601      	adds	r6, #1
 800a9b4:	1064      	asrs	r4, r4, #1
 800a9b6:	9208      	str	r2, [sp, #32]
 800a9b8:	e7cd      	b.n	800a956 <_strtod_l+0x4d6>
 800a9ba:	d0ed      	beq.n	800a998 <_strtod_l+0x518>
 800a9bc:	4264      	negs	r4, r4
 800a9be:	f014 020f 	ands.w	r2, r4, #15
 800a9c2:	d00a      	beq.n	800a9da <_strtod_l+0x55a>
 800a9c4:	4b12      	ldr	r3, [pc, #72]	@ (800aa10 <_strtod_l+0x590>)
 800a9c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a9ca:	4650      	mov	r0, sl
 800a9cc:	4659      	mov	r1, fp
 800a9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d2:	f7f5 ff63 	bl	800089c <__aeabi_ddiv>
 800a9d6:	4682      	mov	sl, r0
 800a9d8:	468b      	mov	fp, r1
 800a9da:	1124      	asrs	r4, r4, #4
 800a9dc:	d0dc      	beq.n	800a998 <_strtod_l+0x518>
 800a9de:	2c1f      	cmp	r4, #31
 800a9e0:	dd20      	ble.n	800aa24 <_strtod_l+0x5a4>
 800a9e2:	2400      	movs	r4, #0
 800a9e4:	46a0      	mov	r8, r4
 800a9e6:	940a      	str	r4, [sp, #40]	@ 0x28
 800a9e8:	46a1      	mov	r9, r4
 800a9ea:	9a05      	ldr	r2, [sp, #20]
 800a9ec:	2322      	movs	r3, #34	@ 0x22
 800a9ee:	f04f 0a00 	mov.w	sl, #0
 800a9f2:	f04f 0b00 	mov.w	fp, #0
 800a9f6:	6013      	str	r3, [r2, #0]
 800a9f8:	e768      	b.n	800a8cc <_strtod_l+0x44c>
 800a9fa:	bf00      	nop
 800a9fc:	0800cfa9 	.word	0x0800cfa9
 800aa00:	0800d1bc 	.word	0x0800d1bc
 800aa04:	0800cfa1 	.word	0x0800cfa1
 800aa08:	0800cfd8 	.word	0x0800cfd8
 800aa0c:	0800d365 	.word	0x0800d365
 800aa10:	0800d0f0 	.word	0x0800d0f0
 800aa14:	0800d0c8 	.word	0x0800d0c8
 800aa18:	7ff00000 	.word	0x7ff00000
 800aa1c:	7ca00000 	.word	0x7ca00000
 800aa20:	7fefffff 	.word	0x7fefffff
 800aa24:	f014 0310 	ands.w	r3, r4, #16
 800aa28:	bf18      	it	ne
 800aa2a:	236a      	movne	r3, #106	@ 0x6a
 800aa2c:	4ea9      	ldr	r6, [pc, #676]	@ (800acd4 <_strtod_l+0x854>)
 800aa2e:	9308      	str	r3, [sp, #32]
 800aa30:	4650      	mov	r0, sl
 800aa32:	4659      	mov	r1, fp
 800aa34:	2300      	movs	r3, #0
 800aa36:	07e2      	lsls	r2, r4, #31
 800aa38:	d504      	bpl.n	800aa44 <_strtod_l+0x5c4>
 800aa3a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aa3e:	f7f5 fe03 	bl	8000648 <__aeabi_dmul>
 800aa42:	2301      	movs	r3, #1
 800aa44:	1064      	asrs	r4, r4, #1
 800aa46:	f106 0608 	add.w	r6, r6, #8
 800aa4a:	d1f4      	bne.n	800aa36 <_strtod_l+0x5b6>
 800aa4c:	b10b      	cbz	r3, 800aa52 <_strtod_l+0x5d2>
 800aa4e:	4682      	mov	sl, r0
 800aa50:	468b      	mov	fp, r1
 800aa52:	9b08      	ldr	r3, [sp, #32]
 800aa54:	b1b3      	cbz	r3, 800aa84 <_strtod_l+0x604>
 800aa56:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800aa5a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	4659      	mov	r1, fp
 800aa62:	dd0f      	ble.n	800aa84 <_strtod_l+0x604>
 800aa64:	2b1f      	cmp	r3, #31
 800aa66:	dd55      	ble.n	800ab14 <_strtod_l+0x694>
 800aa68:	2b34      	cmp	r3, #52	@ 0x34
 800aa6a:	bfde      	ittt	le
 800aa6c:	f04f 33ff 	movle.w	r3, #4294967295
 800aa70:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800aa74:	4093      	lslle	r3, r2
 800aa76:	f04f 0a00 	mov.w	sl, #0
 800aa7a:	bfcc      	ite	gt
 800aa7c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800aa80:	ea03 0b01 	andle.w	fp, r3, r1
 800aa84:	2200      	movs	r2, #0
 800aa86:	2300      	movs	r3, #0
 800aa88:	4650      	mov	r0, sl
 800aa8a:	4659      	mov	r1, fp
 800aa8c:	f7f6 f844 	bl	8000b18 <__aeabi_dcmpeq>
 800aa90:	2800      	cmp	r0, #0
 800aa92:	d1a6      	bne.n	800a9e2 <_strtod_l+0x562>
 800aa94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa96:	9300      	str	r3, [sp, #0]
 800aa98:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800aa9a:	9805      	ldr	r0, [sp, #20]
 800aa9c:	462b      	mov	r3, r5
 800aa9e:	463a      	mov	r2, r7
 800aaa0:	f7ff f8c6 	bl	8009c30 <__s2b>
 800aaa4:	900a      	str	r0, [sp, #40]	@ 0x28
 800aaa6:	2800      	cmp	r0, #0
 800aaa8:	f43f af05 	beq.w	800a8b6 <_strtod_l+0x436>
 800aaac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aaae:	2a00      	cmp	r2, #0
 800aab0:	eba9 0308 	sub.w	r3, r9, r8
 800aab4:	bfa8      	it	ge
 800aab6:	2300      	movge	r3, #0
 800aab8:	9312      	str	r3, [sp, #72]	@ 0x48
 800aaba:	2400      	movs	r4, #0
 800aabc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800aac0:	9316      	str	r3, [sp, #88]	@ 0x58
 800aac2:	46a0      	mov	r8, r4
 800aac4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aac6:	9805      	ldr	r0, [sp, #20]
 800aac8:	6859      	ldr	r1, [r3, #4]
 800aaca:	f7ff f809 	bl	8009ae0 <_Balloc>
 800aace:	4681      	mov	r9, r0
 800aad0:	2800      	cmp	r0, #0
 800aad2:	f43f aef4 	beq.w	800a8be <_strtod_l+0x43e>
 800aad6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aad8:	691a      	ldr	r2, [r3, #16]
 800aada:	3202      	adds	r2, #2
 800aadc:	f103 010c 	add.w	r1, r3, #12
 800aae0:	0092      	lsls	r2, r2, #2
 800aae2:	300c      	adds	r0, #12
 800aae4:	f7fe f89b 	bl	8008c1e <memcpy>
 800aae8:	ec4b ab10 	vmov	d0, sl, fp
 800aaec:	9805      	ldr	r0, [sp, #20]
 800aaee:	aa1c      	add	r2, sp, #112	@ 0x70
 800aaf0:	a91b      	add	r1, sp, #108	@ 0x6c
 800aaf2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800aaf6:	f7ff fbd7 	bl	800a2a8 <__d2b>
 800aafa:	901a      	str	r0, [sp, #104]	@ 0x68
 800aafc:	2800      	cmp	r0, #0
 800aafe:	f43f aede 	beq.w	800a8be <_strtod_l+0x43e>
 800ab02:	9805      	ldr	r0, [sp, #20]
 800ab04:	2101      	movs	r1, #1
 800ab06:	f7ff f929 	bl	8009d5c <__i2b>
 800ab0a:	4680      	mov	r8, r0
 800ab0c:	b948      	cbnz	r0, 800ab22 <_strtod_l+0x6a2>
 800ab0e:	f04f 0800 	mov.w	r8, #0
 800ab12:	e6d4      	b.n	800a8be <_strtod_l+0x43e>
 800ab14:	f04f 32ff 	mov.w	r2, #4294967295
 800ab18:	fa02 f303 	lsl.w	r3, r2, r3
 800ab1c:	ea03 0a0a 	and.w	sl, r3, sl
 800ab20:	e7b0      	b.n	800aa84 <_strtod_l+0x604>
 800ab22:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ab24:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ab26:	2d00      	cmp	r5, #0
 800ab28:	bfab      	itete	ge
 800ab2a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ab2c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ab2e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ab30:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ab32:	bfac      	ite	ge
 800ab34:	18ef      	addge	r7, r5, r3
 800ab36:	1b5e      	sublt	r6, r3, r5
 800ab38:	9b08      	ldr	r3, [sp, #32]
 800ab3a:	1aed      	subs	r5, r5, r3
 800ab3c:	4415      	add	r5, r2
 800ab3e:	4b66      	ldr	r3, [pc, #408]	@ (800acd8 <_strtod_l+0x858>)
 800ab40:	3d01      	subs	r5, #1
 800ab42:	429d      	cmp	r5, r3
 800ab44:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ab48:	da50      	bge.n	800abec <_strtod_l+0x76c>
 800ab4a:	1b5b      	subs	r3, r3, r5
 800ab4c:	2b1f      	cmp	r3, #31
 800ab4e:	eba2 0203 	sub.w	r2, r2, r3
 800ab52:	f04f 0101 	mov.w	r1, #1
 800ab56:	dc3d      	bgt.n	800abd4 <_strtod_l+0x754>
 800ab58:	fa01 f303 	lsl.w	r3, r1, r3
 800ab5c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ab5e:	2300      	movs	r3, #0
 800ab60:	9310      	str	r3, [sp, #64]	@ 0x40
 800ab62:	18bd      	adds	r5, r7, r2
 800ab64:	9b08      	ldr	r3, [sp, #32]
 800ab66:	42af      	cmp	r7, r5
 800ab68:	4416      	add	r6, r2
 800ab6a:	441e      	add	r6, r3
 800ab6c:	463b      	mov	r3, r7
 800ab6e:	bfa8      	it	ge
 800ab70:	462b      	movge	r3, r5
 800ab72:	42b3      	cmp	r3, r6
 800ab74:	bfa8      	it	ge
 800ab76:	4633      	movge	r3, r6
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	bfc2      	ittt	gt
 800ab7c:	1aed      	subgt	r5, r5, r3
 800ab7e:	1af6      	subgt	r6, r6, r3
 800ab80:	1aff      	subgt	r7, r7, r3
 800ab82:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	dd16      	ble.n	800abb6 <_strtod_l+0x736>
 800ab88:	4641      	mov	r1, r8
 800ab8a:	9805      	ldr	r0, [sp, #20]
 800ab8c:	461a      	mov	r2, r3
 800ab8e:	f7ff f9a5 	bl	8009edc <__pow5mult>
 800ab92:	4680      	mov	r8, r0
 800ab94:	2800      	cmp	r0, #0
 800ab96:	d0ba      	beq.n	800ab0e <_strtod_l+0x68e>
 800ab98:	4601      	mov	r1, r0
 800ab9a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ab9c:	9805      	ldr	r0, [sp, #20]
 800ab9e:	f7ff f8f3 	bl	8009d88 <__multiply>
 800aba2:	900e      	str	r0, [sp, #56]	@ 0x38
 800aba4:	2800      	cmp	r0, #0
 800aba6:	f43f ae8a 	beq.w	800a8be <_strtod_l+0x43e>
 800abaa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800abac:	9805      	ldr	r0, [sp, #20]
 800abae:	f7fe ffd7 	bl	8009b60 <_Bfree>
 800abb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abb4:	931a      	str	r3, [sp, #104]	@ 0x68
 800abb6:	2d00      	cmp	r5, #0
 800abb8:	dc1d      	bgt.n	800abf6 <_strtod_l+0x776>
 800abba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	dd23      	ble.n	800ac08 <_strtod_l+0x788>
 800abc0:	4649      	mov	r1, r9
 800abc2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800abc4:	9805      	ldr	r0, [sp, #20]
 800abc6:	f7ff f989 	bl	8009edc <__pow5mult>
 800abca:	4681      	mov	r9, r0
 800abcc:	b9e0      	cbnz	r0, 800ac08 <_strtod_l+0x788>
 800abce:	f04f 0900 	mov.w	r9, #0
 800abd2:	e674      	b.n	800a8be <_strtod_l+0x43e>
 800abd4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800abd8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800abdc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800abe0:	35e2      	adds	r5, #226	@ 0xe2
 800abe2:	fa01 f305 	lsl.w	r3, r1, r5
 800abe6:	9310      	str	r3, [sp, #64]	@ 0x40
 800abe8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800abea:	e7ba      	b.n	800ab62 <_strtod_l+0x6e2>
 800abec:	2300      	movs	r3, #0
 800abee:	9310      	str	r3, [sp, #64]	@ 0x40
 800abf0:	2301      	movs	r3, #1
 800abf2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800abf4:	e7b5      	b.n	800ab62 <_strtod_l+0x6e2>
 800abf6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800abf8:	9805      	ldr	r0, [sp, #20]
 800abfa:	462a      	mov	r2, r5
 800abfc:	f7ff f9c8 	bl	8009f90 <__lshift>
 800ac00:	901a      	str	r0, [sp, #104]	@ 0x68
 800ac02:	2800      	cmp	r0, #0
 800ac04:	d1d9      	bne.n	800abba <_strtod_l+0x73a>
 800ac06:	e65a      	b.n	800a8be <_strtod_l+0x43e>
 800ac08:	2e00      	cmp	r6, #0
 800ac0a:	dd07      	ble.n	800ac1c <_strtod_l+0x79c>
 800ac0c:	4649      	mov	r1, r9
 800ac0e:	9805      	ldr	r0, [sp, #20]
 800ac10:	4632      	mov	r2, r6
 800ac12:	f7ff f9bd 	bl	8009f90 <__lshift>
 800ac16:	4681      	mov	r9, r0
 800ac18:	2800      	cmp	r0, #0
 800ac1a:	d0d8      	beq.n	800abce <_strtod_l+0x74e>
 800ac1c:	2f00      	cmp	r7, #0
 800ac1e:	dd08      	ble.n	800ac32 <_strtod_l+0x7b2>
 800ac20:	4641      	mov	r1, r8
 800ac22:	9805      	ldr	r0, [sp, #20]
 800ac24:	463a      	mov	r2, r7
 800ac26:	f7ff f9b3 	bl	8009f90 <__lshift>
 800ac2a:	4680      	mov	r8, r0
 800ac2c:	2800      	cmp	r0, #0
 800ac2e:	f43f ae46 	beq.w	800a8be <_strtod_l+0x43e>
 800ac32:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ac34:	9805      	ldr	r0, [sp, #20]
 800ac36:	464a      	mov	r2, r9
 800ac38:	f7ff fa32 	bl	800a0a0 <__mdiff>
 800ac3c:	4604      	mov	r4, r0
 800ac3e:	2800      	cmp	r0, #0
 800ac40:	f43f ae3d 	beq.w	800a8be <_strtod_l+0x43e>
 800ac44:	68c3      	ldr	r3, [r0, #12]
 800ac46:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ac48:	2300      	movs	r3, #0
 800ac4a:	60c3      	str	r3, [r0, #12]
 800ac4c:	4641      	mov	r1, r8
 800ac4e:	f7ff fa0b 	bl	800a068 <__mcmp>
 800ac52:	2800      	cmp	r0, #0
 800ac54:	da46      	bge.n	800ace4 <_strtod_l+0x864>
 800ac56:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac58:	ea53 030a 	orrs.w	r3, r3, sl
 800ac5c:	d16c      	bne.n	800ad38 <_strtod_l+0x8b8>
 800ac5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d168      	bne.n	800ad38 <_strtod_l+0x8b8>
 800ac66:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ac6a:	0d1b      	lsrs	r3, r3, #20
 800ac6c:	051b      	lsls	r3, r3, #20
 800ac6e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ac72:	d961      	bls.n	800ad38 <_strtod_l+0x8b8>
 800ac74:	6963      	ldr	r3, [r4, #20]
 800ac76:	b913      	cbnz	r3, 800ac7e <_strtod_l+0x7fe>
 800ac78:	6923      	ldr	r3, [r4, #16]
 800ac7a:	2b01      	cmp	r3, #1
 800ac7c:	dd5c      	ble.n	800ad38 <_strtod_l+0x8b8>
 800ac7e:	4621      	mov	r1, r4
 800ac80:	2201      	movs	r2, #1
 800ac82:	9805      	ldr	r0, [sp, #20]
 800ac84:	f7ff f984 	bl	8009f90 <__lshift>
 800ac88:	4641      	mov	r1, r8
 800ac8a:	4604      	mov	r4, r0
 800ac8c:	f7ff f9ec 	bl	800a068 <__mcmp>
 800ac90:	2800      	cmp	r0, #0
 800ac92:	dd51      	ble.n	800ad38 <_strtod_l+0x8b8>
 800ac94:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ac98:	9a08      	ldr	r2, [sp, #32]
 800ac9a:	0d1b      	lsrs	r3, r3, #20
 800ac9c:	051b      	lsls	r3, r3, #20
 800ac9e:	2a00      	cmp	r2, #0
 800aca0:	d06b      	beq.n	800ad7a <_strtod_l+0x8fa>
 800aca2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800aca6:	d868      	bhi.n	800ad7a <_strtod_l+0x8fa>
 800aca8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800acac:	f67f ae9d 	bls.w	800a9ea <_strtod_l+0x56a>
 800acb0:	4b0a      	ldr	r3, [pc, #40]	@ (800acdc <_strtod_l+0x85c>)
 800acb2:	4650      	mov	r0, sl
 800acb4:	4659      	mov	r1, fp
 800acb6:	2200      	movs	r2, #0
 800acb8:	f7f5 fcc6 	bl	8000648 <__aeabi_dmul>
 800acbc:	4b08      	ldr	r3, [pc, #32]	@ (800ace0 <_strtod_l+0x860>)
 800acbe:	400b      	ands	r3, r1
 800acc0:	4682      	mov	sl, r0
 800acc2:	468b      	mov	fp, r1
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	f47f ae05 	bne.w	800a8d4 <_strtod_l+0x454>
 800acca:	9a05      	ldr	r2, [sp, #20]
 800accc:	2322      	movs	r3, #34	@ 0x22
 800acce:	6013      	str	r3, [r2, #0]
 800acd0:	e600      	b.n	800a8d4 <_strtod_l+0x454>
 800acd2:	bf00      	nop
 800acd4:	0800d1e8 	.word	0x0800d1e8
 800acd8:	fffffc02 	.word	0xfffffc02
 800acdc:	39500000 	.word	0x39500000
 800ace0:	7ff00000 	.word	0x7ff00000
 800ace4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ace8:	d165      	bne.n	800adb6 <_strtod_l+0x936>
 800acea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800acec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800acf0:	b35a      	cbz	r2, 800ad4a <_strtod_l+0x8ca>
 800acf2:	4a9f      	ldr	r2, [pc, #636]	@ (800af70 <_strtod_l+0xaf0>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d12b      	bne.n	800ad50 <_strtod_l+0x8d0>
 800acf8:	9b08      	ldr	r3, [sp, #32]
 800acfa:	4651      	mov	r1, sl
 800acfc:	b303      	cbz	r3, 800ad40 <_strtod_l+0x8c0>
 800acfe:	4b9d      	ldr	r3, [pc, #628]	@ (800af74 <_strtod_l+0xaf4>)
 800ad00:	465a      	mov	r2, fp
 800ad02:	4013      	ands	r3, r2
 800ad04:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ad08:	f04f 32ff 	mov.w	r2, #4294967295
 800ad0c:	d81b      	bhi.n	800ad46 <_strtod_l+0x8c6>
 800ad0e:	0d1b      	lsrs	r3, r3, #20
 800ad10:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ad14:	fa02 f303 	lsl.w	r3, r2, r3
 800ad18:	4299      	cmp	r1, r3
 800ad1a:	d119      	bne.n	800ad50 <_strtod_l+0x8d0>
 800ad1c:	4b96      	ldr	r3, [pc, #600]	@ (800af78 <_strtod_l+0xaf8>)
 800ad1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad20:	429a      	cmp	r2, r3
 800ad22:	d102      	bne.n	800ad2a <_strtod_l+0x8aa>
 800ad24:	3101      	adds	r1, #1
 800ad26:	f43f adca 	beq.w	800a8be <_strtod_l+0x43e>
 800ad2a:	4b92      	ldr	r3, [pc, #584]	@ (800af74 <_strtod_l+0xaf4>)
 800ad2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad2e:	401a      	ands	r2, r3
 800ad30:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800ad34:	f04f 0a00 	mov.w	sl, #0
 800ad38:	9b08      	ldr	r3, [sp, #32]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d1b8      	bne.n	800acb0 <_strtod_l+0x830>
 800ad3e:	e5c9      	b.n	800a8d4 <_strtod_l+0x454>
 800ad40:	f04f 33ff 	mov.w	r3, #4294967295
 800ad44:	e7e8      	b.n	800ad18 <_strtod_l+0x898>
 800ad46:	4613      	mov	r3, r2
 800ad48:	e7e6      	b.n	800ad18 <_strtod_l+0x898>
 800ad4a:	ea53 030a 	orrs.w	r3, r3, sl
 800ad4e:	d0a1      	beq.n	800ac94 <_strtod_l+0x814>
 800ad50:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ad52:	b1db      	cbz	r3, 800ad8c <_strtod_l+0x90c>
 800ad54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad56:	4213      	tst	r3, r2
 800ad58:	d0ee      	beq.n	800ad38 <_strtod_l+0x8b8>
 800ad5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad5c:	9a08      	ldr	r2, [sp, #32]
 800ad5e:	4650      	mov	r0, sl
 800ad60:	4659      	mov	r1, fp
 800ad62:	b1bb      	cbz	r3, 800ad94 <_strtod_l+0x914>
 800ad64:	f7ff fb6e 	bl	800a444 <sulp>
 800ad68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ad6c:	ec53 2b10 	vmov	r2, r3, d0
 800ad70:	f7f5 fab4 	bl	80002dc <__adddf3>
 800ad74:	4682      	mov	sl, r0
 800ad76:	468b      	mov	fp, r1
 800ad78:	e7de      	b.n	800ad38 <_strtod_l+0x8b8>
 800ad7a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ad7e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ad82:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ad86:	f04f 3aff 	mov.w	sl, #4294967295
 800ad8a:	e7d5      	b.n	800ad38 <_strtod_l+0x8b8>
 800ad8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ad8e:	ea13 0f0a 	tst.w	r3, sl
 800ad92:	e7e1      	b.n	800ad58 <_strtod_l+0x8d8>
 800ad94:	f7ff fb56 	bl	800a444 <sulp>
 800ad98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ad9c:	ec53 2b10 	vmov	r2, r3, d0
 800ada0:	f7f5 fa9a 	bl	80002d8 <__aeabi_dsub>
 800ada4:	2200      	movs	r2, #0
 800ada6:	2300      	movs	r3, #0
 800ada8:	4682      	mov	sl, r0
 800adaa:	468b      	mov	fp, r1
 800adac:	f7f5 feb4 	bl	8000b18 <__aeabi_dcmpeq>
 800adb0:	2800      	cmp	r0, #0
 800adb2:	d0c1      	beq.n	800ad38 <_strtod_l+0x8b8>
 800adb4:	e619      	b.n	800a9ea <_strtod_l+0x56a>
 800adb6:	4641      	mov	r1, r8
 800adb8:	4620      	mov	r0, r4
 800adba:	f7ff facd 	bl	800a358 <__ratio>
 800adbe:	ec57 6b10 	vmov	r6, r7, d0
 800adc2:	2200      	movs	r2, #0
 800adc4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800adc8:	4630      	mov	r0, r6
 800adca:	4639      	mov	r1, r7
 800adcc:	f7f5 feb8 	bl	8000b40 <__aeabi_dcmple>
 800add0:	2800      	cmp	r0, #0
 800add2:	d06f      	beq.n	800aeb4 <_strtod_l+0xa34>
 800add4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800add6:	2b00      	cmp	r3, #0
 800add8:	d17a      	bne.n	800aed0 <_strtod_l+0xa50>
 800adda:	f1ba 0f00 	cmp.w	sl, #0
 800adde:	d158      	bne.n	800ae92 <_strtod_l+0xa12>
 800ade0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ade2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d15a      	bne.n	800aea0 <_strtod_l+0xa20>
 800adea:	4b64      	ldr	r3, [pc, #400]	@ (800af7c <_strtod_l+0xafc>)
 800adec:	2200      	movs	r2, #0
 800adee:	4630      	mov	r0, r6
 800adf0:	4639      	mov	r1, r7
 800adf2:	f7f5 fe9b 	bl	8000b2c <__aeabi_dcmplt>
 800adf6:	2800      	cmp	r0, #0
 800adf8:	d159      	bne.n	800aeae <_strtod_l+0xa2e>
 800adfa:	4630      	mov	r0, r6
 800adfc:	4639      	mov	r1, r7
 800adfe:	4b60      	ldr	r3, [pc, #384]	@ (800af80 <_strtod_l+0xb00>)
 800ae00:	2200      	movs	r2, #0
 800ae02:	f7f5 fc21 	bl	8000648 <__aeabi_dmul>
 800ae06:	4606      	mov	r6, r0
 800ae08:	460f      	mov	r7, r1
 800ae0a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ae0e:	9606      	str	r6, [sp, #24]
 800ae10:	9307      	str	r3, [sp, #28]
 800ae12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ae16:	4d57      	ldr	r5, [pc, #348]	@ (800af74 <_strtod_l+0xaf4>)
 800ae18:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ae1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae1e:	401d      	ands	r5, r3
 800ae20:	4b58      	ldr	r3, [pc, #352]	@ (800af84 <_strtod_l+0xb04>)
 800ae22:	429d      	cmp	r5, r3
 800ae24:	f040 80b2 	bne.w	800af8c <_strtod_l+0xb0c>
 800ae28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae2a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ae2e:	ec4b ab10 	vmov	d0, sl, fp
 800ae32:	f7ff f9c9 	bl	800a1c8 <__ulp>
 800ae36:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ae3a:	ec51 0b10 	vmov	r0, r1, d0
 800ae3e:	f7f5 fc03 	bl	8000648 <__aeabi_dmul>
 800ae42:	4652      	mov	r2, sl
 800ae44:	465b      	mov	r3, fp
 800ae46:	f7f5 fa49 	bl	80002dc <__adddf3>
 800ae4a:	460b      	mov	r3, r1
 800ae4c:	4949      	ldr	r1, [pc, #292]	@ (800af74 <_strtod_l+0xaf4>)
 800ae4e:	4a4e      	ldr	r2, [pc, #312]	@ (800af88 <_strtod_l+0xb08>)
 800ae50:	4019      	ands	r1, r3
 800ae52:	4291      	cmp	r1, r2
 800ae54:	4682      	mov	sl, r0
 800ae56:	d942      	bls.n	800aede <_strtod_l+0xa5e>
 800ae58:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ae5a:	4b47      	ldr	r3, [pc, #284]	@ (800af78 <_strtod_l+0xaf8>)
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d103      	bne.n	800ae68 <_strtod_l+0x9e8>
 800ae60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ae62:	3301      	adds	r3, #1
 800ae64:	f43f ad2b 	beq.w	800a8be <_strtod_l+0x43e>
 800ae68:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800af78 <_strtod_l+0xaf8>
 800ae6c:	f04f 3aff 	mov.w	sl, #4294967295
 800ae70:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ae72:	9805      	ldr	r0, [sp, #20]
 800ae74:	f7fe fe74 	bl	8009b60 <_Bfree>
 800ae78:	9805      	ldr	r0, [sp, #20]
 800ae7a:	4649      	mov	r1, r9
 800ae7c:	f7fe fe70 	bl	8009b60 <_Bfree>
 800ae80:	9805      	ldr	r0, [sp, #20]
 800ae82:	4641      	mov	r1, r8
 800ae84:	f7fe fe6c 	bl	8009b60 <_Bfree>
 800ae88:	9805      	ldr	r0, [sp, #20]
 800ae8a:	4621      	mov	r1, r4
 800ae8c:	f7fe fe68 	bl	8009b60 <_Bfree>
 800ae90:	e618      	b.n	800aac4 <_strtod_l+0x644>
 800ae92:	f1ba 0f01 	cmp.w	sl, #1
 800ae96:	d103      	bne.n	800aea0 <_strtod_l+0xa20>
 800ae98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	f43f ada5 	beq.w	800a9ea <_strtod_l+0x56a>
 800aea0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800af50 <_strtod_l+0xad0>
 800aea4:	4f35      	ldr	r7, [pc, #212]	@ (800af7c <_strtod_l+0xafc>)
 800aea6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800aeaa:	2600      	movs	r6, #0
 800aeac:	e7b1      	b.n	800ae12 <_strtod_l+0x992>
 800aeae:	4f34      	ldr	r7, [pc, #208]	@ (800af80 <_strtod_l+0xb00>)
 800aeb0:	2600      	movs	r6, #0
 800aeb2:	e7aa      	b.n	800ae0a <_strtod_l+0x98a>
 800aeb4:	4b32      	ldr	r3, [pc, #200]	@ (800af80 <_strtod_l+0xb00>)
 800aeb6:	4630      	mov	r0, r6
 800aeb8:	4639      	mov	r1, r7
 800aeba:	2200      	movs	r2, #0
 800aebc:	f7f5 fbc4 	bl	8000648 <__aeabi_dmul>
 800aec0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aec2:	4606      	mov	r6, r0
 800aec4:	460f      	mov	r7, r1
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d09f      	beq.n	800ae0a <_strtod_l+0x98a>
 800aeca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800aece:	e7a0      	b.n	800ae12 <_strtod_l+0x992>
 800aed0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800af58 <_strtod_l+0xad8>
 800aed4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800aed8:	ec57 6b17 	vmov	r6, r7, d7
 800aedc:	e799      	b.n	800ae12 <_strtod_l+0x992>
 800aede:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800aee2:	9b08      	ldr	r3, [sp, #32]
 800aee4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d1c1      	bne.n	800ae70 <_strtod_l+0x9f0>
 800aeec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aef0:	0d1b      	lsrs	r3, r3, #20
 800aef2:	051b      	lsls	r3, r3, #20
 800aef4:	429d      	cmp	r5, r3
 800aef6:	d1bb      	bne.n	800ae70 <_strtod_l+0x9f0>
 800aef8:	4630      	mov	r0, r6
 800aefa:	4639      	mov	r1, r7
 800aefc:	f7f5 ff04 	bl	8000d08 <__aeabi_d2lz>
 800af00:	f7f5 fb74 	bl	80005ec <__aeabi_l2d>
 800af04:	4602      	mov	r2, r0
 800af06:	460b      	mov	r3, r1
 800af08:	4630      	mov	r0, r6
 800af0a:	4639      	mov	r1, r7
 800af0c:	f7f5 f9e4 	bl	80002d8 <__aeabi_dsub>
 800af10:	460b      	mov	r3, r1
 800af12:	4602      	mov	r2, r0
 800af14:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800af18:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800af1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af1e:	ea46 060a 	orr.w	r6, r6, sl
 800af22:	431e      	orrs	r6, r3
 800af24:	d06f      	beq.n	800b006 <_strtod_l+0xb86>
 800af26:	a30e      	add	r3, pc, #56	@ (adr r3, 800af60 <_strtod_l+0xae0>)
 800af28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af2c:	f7f5 fdfe 	bl	8000b2c <__aeabi_dcmplt>
 800af30:	2800      	cmp	r0, #0
 800af32:	f47f accf 	bne.w	800a8d4 <_strtod_l+0x454>
 800af36:	a30c      	add	r3, pc, #48	@ (adr r3, 800af68 <_strtod_l+0xae8>)
 800af38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af40:	f7f5 fe12 	bl	8000b68 <__aeabi_dcmpgt>
 800af44:	2800      	cmp	r0, #0
 800af46:	d093      	beq.n	800ae70 <_strtod_l+0x9f0>
 800af48:	e4c4      	b.n	800a8d4 <_strtod_l+0x454>
 800af4a:	bf00      	nop
 800af4c:	f3af 8000 	nop.w
 800af50:	00000000 	.word	0x00000000
 800af54:	bff00000 	.word	0xbff00000
 800af58:	00000000 	.word	0x00000000
 800af5c:	3ff00000 	.word	0x3ff00000
 800af60:	94a03595 	.word	0x94a03595
 800af64:	3fdfffff 	.word	0x3fdfffff
 800af68:	35afe535 	.word	0x35afe535
 800af6c:	3fe00000 	.word	0x3fe00000
 800af70:	000fffff 	.word	0x000fffff
 800af74:	7ff00000 	.word	0x7ff00000
 800af78:	7fefffff 	.word	0x7fefffff
 800af7c:	3ff00000 	.word	0x3ff00000
 800af80:	3fe00000 	.word	0x3fe00000
 800af84:	7fe00000 	.word	0x7fe00000
 800af88:	7c9fffff 	.word	0x7c9fffff
 800af8c:	9b08      	ldr	r3, [sp, #32]
 800af8e:	b323      	cbz	r3, 800afda <_strtod_l+0xb5a>
 800af90:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800af94:	d821      	bhi.n	800afda <_strtod_l+0xb5a>
 800af96:	a328      	add	r3, pc, #160	@ (adr r3, 800b038 <_strtod_l+0xbb8>)
 800af98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af9c:	4630      	mov	r0, r6
 800af9e:	4639      	mov	r1, r7
 800afa0:	f7f5 fdce 	bl	8000b40 <__aeabi_dcmple>
 800afa4:	b1a0      	cbz	r0, 800afd0 <_strtod_l+0xb50>
 800afa6:	4639      	mov	r1, r7
 800afa8:	4630      	mov	r0, r6
 800afaa:	f7f5 fe25 	bl	8000bf8 <__aeabi_d2uiz>
 800afae:	2801      	cmp	r0, #1
 800afb0:	bf38      	it	cc
 800afb2:	2001      	movcc	r0, #1
 800afb4:	f7f5 face 	bl	8000554 <__aeabi_ui2d>
 800afb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800afba:	4606      	mov	r6, r0
 800afbc:	460f      	mov	r7, r1
 800afbe:	b9fb      	cbnz	r3, 800b000 <_strtod_l+0xb80>
 800afc0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800afc4:	9014      	str	r0, [sp, #80]	@ 0x50
 800afc6:	9315      	str	r3, [sp, #84]	@ 0x54
 800afc8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800afcc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800afd0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800afd2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800afd6:	1b5b      	subs	r3, r3, r5
 800afd8:	9311      	str	r3, [sp, #68]	@ 0x44
 800afda:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800afde:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800afe2:	f7ff f8f1 	bl	800a1c8 <__ulp>
 800afe6:	4650      	mov	r0, sl
 800afe8:	ec53 2b10 	vmov	r2, r3, d0
 800afec:	4659      	mov	r1, fp
 800afee:	f7f5 fb2b 	bl	8000648 <__aeabi_dmul>
 800aff2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800aff6:	f7f5 f971 	bl	80002dc <__adddf3>
 800affa:	4682      	mov	sl, r0
 800affc:	468b      	mov	fp, r1
 800affe:	e770      	b.n	800aee2 <_strtod_l+0xa62>
 800b000:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b004:	e7e0      	b.n	800afc8 <_strtod_l+0xb48>
 800b006:	a30e      	add	r3, pc, #56	@ (adr r3, 800b040 <_strtod_l+0xbc0>)
 800b008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b00c:	f7f5 fd8e 	bl	8000b2c <__aeabi_dcmplt>
 800b010:	e798      	b.n	800af44 <_strtod_l+0xac4>
 800b012:	2300      	movs	r3, #0
 800b014:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b016:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b018:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b01a:	6013      	str	r3, [r2, #0]
 800b01c:	f7ff ba6d 	b.w	800a4fa <_strtod_l+0x7a>
 800b020:	2a65      	cmp	r2, #101	@ 0x65
 800b022:	f43f ab66 	beq.w	800a6f2 <_strtod_l+0x272>
 800b026:	2a45      	cmp	r2, #69	@ 0x45
 800b028:	f43f ab63 	beq.w	800a6f2 <_strtod_l+0x272>
 800b02c:	2301      	movs	r3, #1
 800b02e:	f7ff bb9e 	b.w	800a76e <_strtod_l+0x2ee>
 800b032:	bf00      	nop
 800b034:	f3af 8000 	nop.w
 800b038:	ffc00000 	.word	0xffc00000
 800b03c:	41dfffff 	.word	0x41dfffff
 800b040:	94a03595 	.word	0x94a03595
 800b044:	3fcfffff 	.word	0x3fcfffff

0800b048 <_strtod_r>:
 800b048:	4b01      	ldr	r3, [pc, #4]	@ (800b050 <_strtod_r+0x8>)
 800b04a:	f7ff ba19 	b.w	800a480 <_strtod_l>
 800b04e:	bf00      	nop
 800b050:	2000007c 	.word	0x2000007c

0800b054 <_strtol_l.constprop.0>:
 800b054:	2b24      	cmp	r3, #36	@ 0x24
 800b056:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b05a:	4686      	mov	lr, r0
 800b05c:	4690      	mov	r8, r2
 800b05e:	d801      	bhi.n	800b064 <_strtol_l.constprop.0+0x10>
 800b060:	2b01      	cmp	r3, #1
 800b062:	d106      	bne.n	800b072 <_strtol_l.constprop.0+0x1e>
 800b064:	f7fd fdae 	bl	8008bc4 <__errno>
 800b068:	2316      	movs	r3, #22
 800b06a:	6003      	str	r3, [r0, #0]
 800b06c:	2000      	movs	r0, #0
 800b06e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b072:	4834      	ldr	r0, [pc, #208]	@ (800b144 <_strtol_l.constprop.0+0xf0>)
 800b074:	460d      	mov	r5, r1
 800b076:	462a      	mov	r2, r5
 800b078:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b07c:	5d06      	ldrb	r6, [r0, r4]
 800b07e:	f016 0608 	ands.w	r6, r6, #8
 800b082:	d1f8      	bne.n	800b076 <_strtol_l.constprop.0+0x22>
 800b084:	2c2d      	cmp	r4, #45	@ 0x2d
 800b086:	d12d      	bne.n	800b0e4 <_strtol_l.constprop.0+0x90>
 800b088:	782c      	ldrb	r4, [r5, #0]
 800b08a:	2601      	movs	r6, #1
 800b08c:	1c95      	adds	r5, r2, #2
 800b08e:	f033 0210 	bics.w	r2, r3, #16
 800b092:	d109      	bne.n	800b0a8 <_strtol_l.constprop.0+0x54>
 800b094:	2c30      	cmp	r4, #48	@ 0x30
 800b096:	d12a      	bne.n	800b0ee <_strtol_l.constprop.0+0x9a>
 800b098:	782a      	ldrb	r2, [r5, #0]
 800b09a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b09e:	2a58      	cmp	r2, #88	@ 0x58
 800b0a0:	d125      	bne.n	800b0ee <_strtol_l.constprop.0+0x9a>
 800b0a2:	786c      	ldrb	r4, [r5, #1]
 800b0a4:	2310      	movs	r3, #16
 800b0a6:	3502      	adds	r5, #2
 800b0a8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b0ac:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	fbbc f9f3 	udiv	r9, ip, r3
 800b0b6:	4610      	mov	r0, r2
 800b0b8:	fb03 ca19 	mls	sl, r3, r9, ip
 800b0bc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b0c0:	2f09      	cmp	r7, #9
 800b0c2:	d81b      	bhi.n	800b0fc <_strtol_l.constprop.0+0xa8>
 800b0c4:	463c      	mov	r4, r7
 800b0c6:	42a3      	cmp	r3, r4
 800b0c8:	dd27      	ble.n	800b11a <_strtol_l.constprop.0+0xc6>
 800b0ca:	1c57      	adds	r7, r2, #1
 800b0cc:	d007      	beq.n	800b0de <_strtol_l.constprop.0+0x8a>
 800b0ce:	4581      	cmp	r9, r0
 800b0d0:	d320      	bcc.n	800b114 <_strtol_l.constprop.0+0xc0>
 800b0d2:	d101      	bne.n	800b0d8 <_strtol_l.constprop.0+0x84>
 800b0d4:	45a2      	cmp	sl, r4
 800b0d6:	db1d      	blt.n	800b114 <_strtol_l.constprop.0+0xc0>
 800b0d8:	fb00 4003 	mla	r0, r0, r3, r4
 800b0dc:	2201      	movs	r2, #1
 800b0de:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b0e2:	e7eb      	b.n	800b0bc <_strtol_l.constprop.0+0x68>
 800b0e4:	2c2b      	cmp	r4, #43	@ 0x2b
 800b0e6:	bf04      	itt	eq
 800b0e8:	782c      	ldrbeq	r4, [r5, #0]
 800b0ea:	1c95      	addeq	r5, r2, #2
 800b0ec:	e7cf      	b.n	800b08e <_strtol_l.constprop.0+0x3a>
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d1da      	bne.n	800b0a8 <_strtol_l.constprop.0+0x54>
 800b0f2:	2c30      	cmp	r4, #48	@ 0x30
 800b0f4:	bf0c      	ite	eq
 800b0f6:	2308      	moveq	r3, #8
 800b0f8:	230a      	movne	r3, #10
 800b0fa:	e7d5      	b.n	800b0a8 <_strtol_l.constprop.0+0x54>
 800b0fc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b100:	2f19      	cmp	r7, #25
 800b102:	d801      	bhi.n	800b108 <_strtol_l.constprop.0+0xb4>
 800b104:	3c37      	subs	r4, #55	@ 0x37
 800b106:	e7de      	b.n	800b0c6 <_strtol_l.constprop.0+0x72>
 800b108:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b10c:	2f19      	cmp	r7, #25
 800b10e:	d804      	bhi.n	800b11a <_strtol_l.constprop.0+0xc6>
 800b110:	3c57      	subs	r4, #87	@ 0x57
 800b112:	e7d8      	b.n	800b0c6 <_strtol_l.constprop.0+0x72>
 800b114:	f04f 32ff 	mov.w	r2, #4294967295
 800b118:	e7e1      	b.n	800b0de <_strtol_l.constprop.0+0x8a>
 800b11a:	1c53      	adds	r3, r2, #1
 800b11c:	d108      	bne.n	800b130 <_strtol_l.constprop.0+0xdc>
 800b11e:	2322      	movs	r3, #34	@ 0x22
 800b120:	f8ce 3000 	str.w	r3, [lr]
 800b124:	4660      	mov	r0, ip
 800b126:	f1b8 0f00 	cmp.w	r8, #0
 800b12a:	d0a0      	beq.n	800b06e <_strtol_l.constprop.0+0x1a>
 800b12c:	1e69      	subs	r1, r5, #1
 800b12e:	e006      	b.n	800b13e <_strtol_l.constprop.0+0xea>
 800b130:	b106      	cbz	r6, 800b134 <_strtol_l.constprop.0+0xe0>
 800b132:	4240      	negs	r0, r0
 800b134:	f1b8 0f00 	cmp.w	r8, #0
 800b138:	d099      	beq.n	800b06e <_strtol_l.constprop.0+0x1a>
 800b13a:	2a00      	cmp	r2, #0
 800b13c:	d1f6      	bne.n	800b12c <_strtol_l.constprop.0+0xd8>
 800b13e:	f8c8 1000 	str.w	r1, [r8]
 800b142:	e794      	b.n	800b06e <_strtol_l.constprop.0+0x1a>
 800b144:	0800d211 	.word	0x0800d211

0800b148 <_strtol_r>:
 800b148:	f7ff bf84 	b.w	800b054 <_strtol_l.constprop.0>

0800b14c <__ssputs_r>:
 800b14c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b150:	688e      	ldr	r6, [r1, #8]
 800b152:	461f      	mov	r7, r3
 800b154:	42be      	cmp	r6, r7
 800b156:	680b      	ldr	r3, [r1, #0]
 800b158:	4682      	mov	sl, r0
 800b15a:	460c      	mov	r4, r1
 800b15c:	4690      	mov	r8, r2
 800b15e:	d82d      	bhi.n	800b1bc <__ssputs_r+0x70>
 800b160:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b164:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b168:	d026      	beq.n	800b1b8 <__ssputs_r+0x6c>
 800b16a:	6965      	ldr	r5, [r4, #20]
 800b16c:	6909      	ldr	r1, [r1, #16]
 800b16e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b172:	eba3 0901 	sub.w	r9, r3, r1
 800b176:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b17a:	1c7b      	adds	r3, r7, #1
 800b17c:	444b      	add	r3, r9
 800b17e:	106d      	asrs	r5, r5, #1
 800b180:	429d      	cmp	r5, r3
 800b182:	bf38      	it	cc
 800b184:	461d      	movcc	r5, r3
 800b186:	0553      	lsls	r3, r2, #21
 800b188:	d527      	bpl.n	800b1da <__ssputs_r+0x8e>
 800b18a:	4629      	mov	r1, r5
 800b18c:	f7fe fc1c 	bl	80099c8 <_malloc_r>
 800b190:	4606      	mov	r6, r0
 800b192:	b360      	cbz	r0, 800b1ee <__ssputs_r+0xa2>
 800b194:	6921      	ldr	r1, [r4, #16]
 800b196:	464a      	mov	r2, r9
 800b198:	f7fd fd41 	bl	8008c1e <memcpy>
 800b19c:	89a3      	ldrh	r3, [r4, #12]
 800b19e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b1a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1a6:	81a3      	strh	r3, [r4, #12]
 800b1a8:	6126      	str	r6, [r4, #16]
 800b1aa:	6165      	str	r5, [r4, #20]
 800b1ac:	444e      	add	r6, r9
 800b1ae:	eba5 0509 	sub.w	r5, r5, r9
 800b1b2:	6026      	str	r6, [r4, #0]
 800b1b4:	60a5      	str	r5, [r4, #8]
 800b1b6:	463e      	mov	r6, r7
 800b1b8:	42be      	cmp	r6, r7
 800b1ba:	d900      	bls.n	800b1be <__ssputs_r+0x72>
 800b1bc:	463e      	mov	r6, r7
 800b1be:	6820      	ldr	r0, [r4, #0]
 800b1c0:	4632      	mov	r2, r6
 800b1c2:	4641      	mov	r1, r8
 800b1c4:	f000 fb6a 	bl	800b89c <memmove>
 800b1c8:	68a3      	ldr	r3, [r4, #8]
 800b1ca:	1b9b      	subs	r3, r3, r6
 800b1cc:	60a3      	str	r3, [r4, #8]
 800b1ce:	6823      	ldr	r3, [r4, #0]
 800b1d0:	4433      	add	r3, r6
 800b1d2:	6023      	str	r3, [r4, #0]
 800b1d4:	2000      	movs	r0, #0
 800b1d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1da:	462a      	mov	r2, r5
 800b1dc:	f000 ff41 	bl	800c062 <_realloc_r>
 800b1e0:	4606      	mov	r6, r0
 800b1e2:	2800      	cmp	r0, #0
 800b1e4:	d1e0      	bne.n	800b1a8 <__ssputs_r+0x5c>
 800b1e6:	6921      	ldr	r1, [r4, #16]
 800b1e8:	4650      	mov	r0, sl
 800b1ea:	f7fe fb79 	bl	80098e0 <_free_r>
 800b1ee:	230c      	movs	r3, #12
 800b1f0:	f8ca 3000 	str.w	r3, [sl]
 800b1f4:	89a3      	ldrh	r3, [r4, #12]
 800b1f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1fa:	81a3      	strh	r3, [r4, #12]
 800b1fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b200:	e7e9      	b.n	800b1d6 <__ssputs_r+0x8a>
	...

0800b204 <_svfiprintf_r>:
 800b204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b208:	4698      	mov	r8, r3
 800b20a:	898b      	ldrh	r3, [r1, #12]
 800b20c:	061b      	lsls	r3, r3, #24
 800b20e:	b09d      	sub	sp, #116	@ 0x74
 800b210:	4607      	mov	r7, r0
 800b212:	460d      	mov	r5, r1
 800b214:	4614      	mov	r4, r2
 800b216:	d510      	bpl.n	800b23a <_svfiprintf_r+0x36>
 800b218:	690b      	ldr	r3, [r1, #16]
 800b21a:	b973      	cbnz	r3, 800b23a <_svfiprintf_r+0x36>
 800b21c:	2140      	movs	r1, #64	@ 0x40
 800b21e:	f7fe fbd3 	bl	80099c8 <_malloc_r>
 800b222:	6028      	str	r0, [r5, #0]
 800b224:	6128      	str	r0, [r5, #16]
 800b226:	b930      	cbnz	r0, 800b236 <_svfiprintf_r+0x32>
 800b228:	230c      	movs	r3, #12
 800b22a:	603b      	str	r3, [r7, #0]
 800b22c:	f04f 30ff 	mov.w	r0, #4294967295
 800b230:	b01d      	add	sp, #116	@ 0x74
 800b232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b236:	2340      	movs	r3, #64	@ 0x40
 800b238:	616b      	str	r3, [r5, #20]
 800b23a:	2300      	movs	r3, #0
 800b23c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b23e:	2320      	movs	r3, #32
 800b240:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b244:	f8cd 800c 	str.w	r8, [sp, #12]
 800b248:	2330      	movs	r3, #48	@ 0x30
 800b24a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b3e8 <_svfiprintf_r+0x1e4>
 800b24e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b252:	f04f 0901 	mov.w	r9, #1
 800b256:	4623      	mov	r3, r4
 800b258:	469a      	mov	sl, r3
 800b25a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b25e:	b10a      	cbz	r2, 800b264 <_svfiprintf_r+0x60>
 800b260:	2a25      	cmp	r2, #37	@ 0x25
 800b262:	d1f9      	bne.n	800b258 <_svfiprintf_r+0x54>
 800b264:	ebba 0b04 	subs.w	fp, sl, r4
 800b268:	d00b      	beq.n	800b282 <_svfiprintf_r+0x7e>
 800b26a:	465b      	mov	r3, fp
 800b26c:	4622      	mov	r2, r4
 800b26e:	4629      	mov	r1, r5
 800b270:	4638      	mov	r0, r7
 800b272:	f7ff ff6b 	bl	800b14c <__ssputs_r>
 800b276:	3001      	adds	r0, #1
 800b278:	f000 80a7 	beq.w	800b3ca <_svfiprintf_r+0x1c6>
 800b27c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b27e:	445a      	add	r2, fp
 800b280:	9209      	str	r2, [sp, #36]	@ 0x24
 800b282:	f89a 3000 	ldrb.w	r3, [sl]
 800b286:	2b00      	cmp	r3, #0
 800b288:	f000 809f 	beq.w	800b3ca <_svfiprintf_r+0x1c6>
 800b28c:	2300      	movs	r3, #0
 800b28e:	f04f 32ff 	mov.w	r2, #4294967295
 800b292:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b296:	f10a 0a01 	add.w	sl, sl, #1
 800b29a:	9304      	str	r3, [sp, #16]
 800b29c:	9307      	str	r3, [sp, #28]
 800b29e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b2a2:	931a      	str	r3, [sp, #104]	@ 0x68
 800b2a4:	4654      	mov	r4, sl
 800b2a6:	2205      	movs	r2, #5
 800b2a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2ac:	484e      	ldr	r0, [pc, #312]	@ (800b3e8 <_svfiprintf_r+0x1e4>)
 800b2ae:	f7f4 ffb7 	bl	8000220 <memchr>
 800b2b2:	9a04      	ldr	r2, [sp, #16]
 800b2b4:	b9d8      	cbnz	r0, 800b2ee <_svfiprintf_r+0xea>
 800b2b6:	06d0      	lsls	r0, r2, #27
 800b2b8:	bf44      	itt	mi
 800b2ba:	2320      	movmi	r3, #32
 800b2bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b2c0:	0711      	lsls	r1, r2, #28
 800b2c2:	bf44      	itt	mi
 800b2c4:	232b      	movmi	r3, #43	@ 0x2b
 800b2c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b2ca:	f89a 3000 	ldrb.w	r3, [sl]
 800b2ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2d0:	d015      	beq.n	800b2fe <_svfiprintf_r+0xfa>
 800b2d2:	9a07      	ldr	r2, [sp, #28]
 800b2d4:	4654      	mov	r4, sl
 800b2d6:	2000      	movs	r0, #0
 800b2d8:	f04f 0c0a 	mov.w	ip, #10
 800b2dc:	4621      	mov	r1, r4
 800b2de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2e2:	3b30      	subs	r3, #48	@ 0x30
 800b2e4:	2b09      	cmp	r3, #9
 800b2e6:	d94b      	bls.n	800b380 <_svfiprintf_r+0x17c>
 800b2e8:	b1b0      	cbz	r0, 800b318 <_svfiprintf_r+0x114>
 800b2ea:	9207      	str	r2, [sp, #28]
 800b2ec:	e014      	b.n	800b318 <_svfiprintf_r+0x114>
 800b2ee:	eba0 0308 	sub.w	r3, r0, r8
 800b2f2:	fa09 f303 	lsl.w	r3, r9, r3
 800b2f6:	4313      	orrs	r3, r2
 800b2f8:	9304      	str	r3, [sp, #16]
 800b2fa:	46a2      	mov	sl, r4
 800b2fc:	e7d2      	b.n	800b2a4 <_svfiprintf_r+0xa0>
 800b2fe:	9b03      	ldr	r3, [sp, #12]
 800b300:	1d19      	adds	r1, r3, #4
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	9103      	str	r1, [sp, #12]
 800b306:	2b00      	cmp	r3, #0
 800b308:	bfbb      	ittet	lt
 800b30a:	425b      	neglt	r3, r3
 800b30c:	f042 0202 	orrlt.w	r2, r2, #2
 800b310:	9307      	strge	r3, [sp, #28]
 800b312:	9307      	strlt	r3, [sp, #28]
 800b314:	bfb8      	it	lt
 800b316:	9204      	strlt	r2, [sp, #16]
 800b318:	7823      	ldrb	r3, [r4, #0]
 800b31a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b31c:	d10a      	bne.n	800b334 <_svfiprintf_r+0x130>
 800b31e:	7863      	ldrb	r3, [r4, #1]
 800b320:	2b2a      	cmp	r3, #42	@ 0x2a
 800b322:	d132      	bne.n	800b38a <_svfiprintf_r+0x186>
 800b324:	9b03      	ldr	r3, [sp, #12]
 800b326:	1d1a      	adds	r2, r3, #4
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	9203      	str	r2, [sp, #12]
 800b32c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b330:	3402      	adds	r4, #2
 800b332:	9305      	str	r3, [sp, #20]
 800b334:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b3f8 <_svfiprintf_r+0x1f4>
 800b338:	7821      	ldrb	r1, [r4, #0]
 800b33a:	2203      	movs	r2, #3
 800b33c:	4650      	mov	r0, sl
 800b33e:	f7f4 ff6f 	bl	8000220 <memchr>
 800b342:	b138      	cbz	r0, 800b354 <_svfiprintf_r+0x150>
 800b344:	9b04      	ldr	r3, [sp, #16]
 800b346:	eba0 000a 	sub.w	r0, r0, sl
 800b34a:	2240      	movs	r2, #64	@ 0x40
 800b34c:	4082      	lsls	r2, r0
 800b34e:	4313      	orrs	r3, r2
 800b350:	3401      	adds	r4, #1
 800b352:	9304      	str	r3, [sp, #16]
 800b354:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b358:	4824      	ldr	r0, [pc, #144]	@ (800b3ec <_svfiprintf_r+0x1e8>)
 800b35a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b35e:	2206      	movs	r2, #6
 800b360:	f7f4 ff5e 	bl	8000220 <memchr>
 800b364:	2800      	cmp	r0, #0
 800b366:	d036      	beq.n	800b3d6 <_svfiprintf_r+0x1d2>
 800b368:	4b21      	ldr	r3, [pc, #132]	@ (800b3f0 <_svfiprintf_r+0x1ec>)
 800b36a:	bb1b      	cbnz	r3, 800b3b4 <_svfiprintf_r+0x1b0>
 800b36c:	9b03      	ldr	r3, [sp, #12]
 800b36e:	3307      	adds	r3, #7
 800b370:	f023 0307 	bic.w	r3, r3, #7
 800b374:	3308      	adds	r3, #8
 800b376:	9303      	str	r3, [sp, #12]
 800b378:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b37a:	4433      	add	r3, r6
 800b37c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b37e:	e76a      	b.n	800b256 <_svfiprintf_r+0x52>
 800b380:	fb0c 3202 	mla	r2, ip, r2, r3
 800b384:	460c      	mov	r4, r1
 800b386:	2001      	movs	r0, #1
 800b388:	e7a8      	b.n	800b2dc <_svfiprintf_r+0xd8>
 800b38a:	2300      	movs	r3, #0
 800b38c:	3401      	adds	r4, #1
 800b38e:	9305      	str	r3, [sp, #20]
 800b390:	4619      	mov	r1, r3
 800b392:	f04f 0c0a 	mov.w	ip, #10
 800b396:	4620      	mov	r0, r4
 800b398:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b39c:	3a30      	subs	r2, #48	@ 0x30
 800b39e:	2a09      	cmp	r2, #9
 800b3a0:	d903      	bls.n	800b3aa <_svfiprintf_r+0x1a6>
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d0c6      	beq.n	800b334 <_svfiprintf_r+0x130>
 800b3a6:	9105      	str	r1, [sp, #20]
 800b3a8:	e7c4      	b.n	800b334 <_svfiprintf_r+0x130>
 800b3aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3ae:	4604      	mov	r4, r0
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	e7f0      	b.n	800b396 <_svfiprintf_r+0x192>
 800b3b4:	ab03      	add	r3, sp, #12
 800b3b6:	9300      	str	r3, [sp, #0]
 800b3b8:	462a      	mov	r2, r5
 800b3ba:	4b0e      	ldr	r3, [pc, #56]	@ (800b3f4 <_svfiprintf_r+0x1f0>)
 800b3bc:	a904      	add	r1, sp, #16
 800b3be:	4638      	mov	r0, r7
 800b3c0:	f7fc fb52 	bl	8007a68 <_printf_float>
 800b3c4:	1c42      	adds	r2, r0, #1
 800b3c6:	4606      	mov	r6, r0
 800b3c8:	d1d6      	bne.n	800b378 <_svfiprintf_r+0x174>
 800b3ca:	89ab      	ldrh	r3, [r5, #12]
 800b3cc:	065b      	lsls	r3, r3, #25
 800b3ce:	f53f af2d 	bmi.w	800b22c <_svfiprintf_r+0x28>
 800b3d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b3d4:	e72c      	b.n	800b230 <_svfiprintf_r+0x2c>
 800b3d6:	ab03      	add	r3, sp, #12
 800b3d8:	9300      	str	r3, [sp, #0]
 800b3da:	462a      	mov	r2, r5
 800b3dc:	4b05      	ldr	r3, [pc, #20]	@ (800b3f4 <_svfiprintf_r+0x1f0>)
 800b3de:	a904      	add	r1, sp, #16
 800b3e0:	4638      	mov	r0, r7
 800b3e2:	f7fc fdd9 	bl	8007f98 <_printf_i>
 800b3e6:	e7ed      	b.n	800b3c4 <_svfiprintf_r+0x1c0>
 800b3e8:	0800d311 	.word	0x0800d311
 800b3ec:	0800d31b 	.word	0x0800d31b
 800b3f0:	08007a69 	.word	0x08007a69
 800b3f4:	0800b14d 	.word	0x0800b14d
 800b3f8:	0800d317 	.word	0x0800d317

0800b3fc <__sfputc_r>:
 800b3fc:	6893      	ldr	r3, [r2, #8]
 800b3fe:	3b01      	subs	r3, #1
 800b400:	2b00      	cmp	r3, #0
 800b402:	b410      	push	{r4}
 800b404:	6093      	str	r3, [r2, #8]
 800b406:	da08      	bge.n	800b41a <__sfputc_r+0x1e>
 800b408:	6994      	ldr	r4, [r2, #24]
 800b40a:	42a3      	cmp	r3, r4
 800b40c:	db01      	blt.n	800b412 <__sfputc_r+0x16>
 800b40e:	290a      	cmp	r1, #10
 800b410:	d103      	bne.n	800b41a <__sfputc_r+0x1e>
 800b412:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b416:	f7fd babc 	b.w	8008992 <__swbuf_r>
 800b41a:	6813      	ldr	r3, [r2, #0]
 800b41c:	1c58      	adds	r0, r3, #1
 800b41e:	6010      	str	r0, [r2, #0]
 800b420:	7019      	strb	r1, [r3, #0]
 800b422:	4608      	mov	r0, r1
 800b424:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b428:	4770      	bx	lr

0800b42a <__sfputs_r>:
 800b42a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b42c:	4606      	mov	r6, r0
 800b42e:	460f      	mov	r7, r1
 800b430:	4614      	mov	r4, r2
 800b432:	18d5      	adds	r5, r2, r3
 800b434:	42ac      	cmp	r4, r5
 800b436:	d101      	bne.n	800b43c <__sfputs_r+0x12>
 800b438:	2000      	movs	r0, #0
 800b43a:	e007      	b.n	800b44c <__sfputs_r+0x22>
 800b43c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b440:	463a      	mov	r2, r7
 800b442:	4630      	mov	r0, r6
 800b444:	f7ff ffda 	bl	800b3fc <__sfputc_r>
 800b448:	1c43      	adds	r3, r0, #1
 800b44a:	d1f3      	bne.n	800b434 <__sfputs_r+0xa>
 800b44c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b450 <_vfiprintf_r>:
 800b450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b454:	460d      	mov	r5, r1
 800b456:	b09d      	sub	sp, #116	@ 0x74
 800b458:	4614      	mov	r4, r2
 800b45a:	4698      	mov	r8, r3
 800b45c:	4606      	mov	r6, r0
 800b45e:	b118      	cbz	r0, 800b468 <_vfiprintf_r+0x18>
 800b460:	6a03      	ldr	r3, [r0, #32]
 800b462:	b90b      	cbnz	r3, 800b468 <_vfiprintf_r+0x18>
 800b464:	f7fd f958 	bl	8008718 <__sinit>
 800b468:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b46a:	07d9      	lsls	r1, r3, #31
 800b46c:	d405      	bmi.n	800b47a <_vfiprintf_r+0x2a>
 800b46e:	89ab      	ldrh	r3, [r5, #12]
 800b470:	059a      	lsls	r2, r3, #22
 800b472:	d402      	bmi.n	800b47a <_vfiprintf_r+0x2a>
 800b474:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b476:	f7fd fbd0 	bl	8008c1a <__retarget_lock_acquire_recursive>
 800b47a:	89ab      	ldrh	r3, [r5, #12]
 800b47c:	071b      	lsls	r3, r3, #28
 800b47e:	d501      	bpl.n	800b484 <_vfiprintf_r+0x34>
 800b480:	692b      	ldr	r3, [r5, #16]
 800b482:	b99b      	cbnz	r3, 800b4ac <_vfiprintf_r+0x5c>
 800b484:	4629      	mov	r1, r5
 800b486:	4630      	mov	r0, r6
 800b488:	f7fd fac2 	bl	8008a10 <__swsetup_r>
 800b48c:	b170      	cbz	r0, 800b4ac <_vfiprintf_r+0x5c>
 800b48e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b490:	07dc      	lsls	r4, r3, #31
 800b492:	d504      	bpl.n	800b49e <_vfiprintf_r+0x4e>
 800b494:	f04f 30ff 	mov.w	r0, #4294967295
 800b498:	b01d      	add	sp, #116	@ 0x74
 800b49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b49e:	89ab      	ldrh	r3, [r5, #12]
 800b4a0:	0598      	lsls	r0, r3, #22
 800b4a2:	d4f7      	bmi.n	800b494 <_vfiprintf_r+0x44>
 800b4a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b4a6:	f7fd fbb9 	bl	8008c1c <__retarget_lock_release_recursive>
 800b4aa:	e7f3      	b.n	800b494 <_vfiprintf_r+0x44>
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4b0:	2320      	movs	r3, #32
 800b4b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b4b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4ba:	2330      	movs	r3, #48	@ 0x30
 800b4bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b66c <_vfiprintf_r+0x21c>
 800b4c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b4c4:	f04f 0901 	mov.w	r9, #1
 800b4c8:	4623      	mov	r3, r4
 800b4ca:	469a      	mov	sl, r3
 800b4cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4d0:	b10a      	cbz	r2, 800b4d6 <_vfiprintf_r+0x86>
 800b4d2:	2a25      	cmp	r2, #37	@ 0x25
 800b4d4:	d1f9      	bne.n	800b4ca <_vfiprintf_r+0x7a>
 800b4d6:	ebba 0b04 	subs.w	fp, sl, r4
 800b4da:	d00b      	beq.n	800b4f4 <_vfiprintf_r+0xa4>
 800b4dc:	465b      	mov	r3, fp
 800b4de:	4622      	mov	r2, r4
 800b4e0:	4629      	mov	r1, r5
 800b4e2:	4630      	mov	r0, r6
 800b4e4:	f7ff ffa1 	bl	800b42a <__sfputs_r>
 800b4e8:	3001      	adds	r0, #1
 800b4ea:	f000 80a7 	beq.w	800b63c <_vfiprintf_r+0x1ec>
 800b4ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b4f0:	445a      	add	r2, fp
 800b4f2:	9209      	str	r2, [sp, #36]	@ 0x24
 800b4f4:	f89a 3000 	ldrb.w	r3, [sl]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	f000 809f 	beq.w	800b63c <_vfiprintf_r+0x1ec>
 800b4fe:	2300      	movs	r3, #0
 800b500:	f04f 32ff 	mov.w	r2, #4294967295
 800b504:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b508:	f10a 0a01 	add.w	sl, sl, #1
 800b50c:	9304      	str	r3, [sp, #16]
 800b50e:	9307      	str	r3, [sp, #28]
 800b510:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b514:	931a      	str	r3, [sp, #104]	@ 0x68
 800b516:	4654      	mov	r4, sl
 800b518:	2205      	movs	r2, #5
 800b51a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b51e:	4853      	ldr	r0, [pc, #332]	@ (800b66c <_vfiprintf_r+0x21c>)
 800b520:	f7f4 fe7e 	bl	8000220 <memchr>
 800b524:	9a04      	ldr	r2, [sp, #16]
 800b526:	b9d8      	cbnz	r0, 800b560 <_vfiprintf_r+0x110>
 800b528:	06d1      	lsls	r1, r2, #27
 800b52a:	bf44      	itt	mi
 800b52c:	2320      	movmi	r3, #32
 800b52e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b532:	0713      	lsls	r3, r2, #28
 800b534:	bf44      	itt	mi
 800b536:	232b      	movmi	r3, #43	@ 0x2b
 800b538:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b53c:	f89a 3000 	ldrb.w	r3, [sl]
 800b540:	2b2a      	cmp	r3, #42	@ 0x2a
 800b542:	d015      	beq.n	800b570 <_vfiprintf_r+0x120>
 800b544:	9a07      	ldr	r2, [sp, #28]
 800b546:	4654      	mov	r4, sl
 800b548:	2000      	movs	r0, #0
 800b54a:	f04f 0c0a 	mov.w	ip, #10
 800b54e:	4621      	mov	r1, r4
 800b550:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b554:	3b30      	subs	r3, #48	@ 0x30
 800b556:	2b09      	cmp	r3, #9
 800b558:	d94b      	bls.n	800b5f2 <_vfiprintf_r+0x1a2>
 800b55a:	b1b0      	cbz	r0, 800b58a <_vfiprintf_r+0x13a>
 800b55c:	9207      	str	r2, [sp, #28]
 800b55e:	e014      	b.n	800b58a <_vfiprintf_r+0x13a>
 800b560:	eba0 0308 	sub.w	r3, r0, r8
 800b564:	fa09 f303 	lsl.w	r3, r9, r3
 800b568:	4313      	orrs	r3, r2
 800b56a:	9304      	str	r3, [sp, #16]
 800b56c:	46a2      	mov	sl, r4
 800b56e:	e7d2      	b.n	800b516 <_vfiprintf_r+0xc6>
 800b570:	9b03      	ldr	r3, [sp, #12]
 800b572:	1d19      	adds	r1, r3, #4
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	9103      	str	r1, [sp, #12]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	bfbb      	ittet	lt
 800b57c:	425b      	neglt	r3, r3
 800b57e:	f042 0202 	orrlt.w	r2, r2, #2
 800b582:	9307      	strge	r3, [sp, #28]
 800b584:	9307      	strlt	r3, [sp, #28]
 800b586:	bfb8      	it	lt
 800b588:	9204      	strlt	r2, [sp, #16]
 800b58a:	7823      	ldrb	r3, [r4, #0]
 800b58c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b58e:	d10a      	bne.n	800b5a6 <_vfiprintf_r+0x156>
 800b590:	7863      	ldrb	r3, [r4, #1]
 800b592:	2b2a      	cmp	r3, #42	@ 0x2a
 800b594:	d132      	bne.n	800b5fc <_vfiprintf_r+0x1ac>
 800b596:	9b03      	ldr	r3, [sp, #12]
 800b598:	1d1a      	adds	r2, r3, #4
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	9203      	str	r2, [sp, #12]
 800b59e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b5a2:	3402      	adds	r4, #2
 800b5a4:	9305      	str	r3, [sp, #20]
 800b5a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b67c <_vfiprintf_r+0x22c>
 800b5aa:	7821      	ldrb	r1, [r4, #0]
 800b5ac:	2203      	movs	r2, #3
 800b5ae:	4650      	mov	r0, sl
 800b5b0:	f7f4 fe36 	bl	8000220 <memchr>
 800b5b4:	b138      	cbz	r0, 800b5c6 <_vfiprintf_r+0x176>
 800b5b6:	9b04      	ldr	r3, [sp, #16]
 800b5b8:	eba0 000a 	sub.w	r0, r0, sl
 800b5bc:	2240      	movs	r2, #64	@ 0x40
 800b5be:	4082      	lsls	r2, r0
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	3401      	adds	r4, #1
 800b5c4:	9304      	str	r3, [sp, #16]
 800b5c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5ca:	4829      	ldr	r0, [pc, #164]	@ (800b670 <_vfiprintf_r+0x220>)
 800b5cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b5d0:	2206      	movs	r2, #6
 800b5d2:	f7f4 fe25 	bl	8000220 <memchr>
 800b5d6:	2800      	cmp	r0, #0
 800b5d8:	d03f      	beq.n	800b65a <_vfiprintf_r+0x20a>
 800b5da:	4b26      	ldr	r3, [pc, #152]	@ (800b674 <_vfiprintf_r+0x224>)
 800b5dc:	bb1b      	cbnz	r3, 800b626 <_vfiprintf_r+0x1d6>
 800b5de:	9b03      	ldr	r3, [sp, #12]
 800b5e0:	3307      	adds	r3, #7
 800b5e2:	f023 0307 	bic.w	r3, r3, #7
 800b5e6:	3308      	adds	r3, #8
 800b5e8:	9303      	str	r3, [sp, #12]
 800b5ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5ec:	443b      	add	r3, r7
 800b5ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5f0:	e76a      	b.n	800b4c8 <_vfiprintf_r+0x78>
 800b5f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5f6:	460c      	mov	r4, r1
 800b5f8:	2001      	movs	r0, #1
 800b5fa:	e7a8      	b.n	800b54e <_vfiprintf_r+0xfe>
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	3401      	adds	r4, #1
 800b600:	9305      	str	r3, [sp, #20]
 800b602:	4619      	mov	r1, r3
 800b604:	f04f 0c0a 	mov.w	ip, #10
 800b608:	4620      	mov	r0, r4
 800b60a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b60e:	3a30      	subs	r2, #48	@ 0x30
 800b610:	2a09      	cmp	r2, #9
 800b612:	d903      	bls.n	800b61c <_vfiprintf_r+0x1cc>
 800b614:	2b00      	cmp	r3, #0
 800b616:	d0c6      	beq.n	800b5a6 <_vfiprintf_r+0x156>
 800b618:	9105      	str	r1, [sp, #20]
 800b61a:	e7c4      	b.n	800b5a6 <_vfiprintf_r+0x156>
 800b61c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b620:	4604      	mov	r4, r0
 800b622:	2301      	movs	r3, #1
 800b624:	e7f0      	b.n	800b608 <_vfiprintf_r+0x1b8>
 800b626:	ab03      	add	r3, sp, #12
 800b628:	9300      	str	r3, [sp, #0]
 800b62a:	462a      	mov	r2, r5
 800b62c:	4b12      	ldr	r3, [pc, #72]	@ (800b678 <_vfiprintf_r+0x228>)
 800b62e:	a904      	add	r1, sp, #16
 800b630:	4630      	mov	r0, r6
 800b632:	f7fc fa19 	bl	8007a68 <_printf_float>
 800b636:	4607      	mov	r7, r0
 800b638:	1c78      	adds	r0, r7, #1
 800b63a:	d1d6      	bne.n	800b5ea <_vfiprintf_r+0x19a>
 800b63c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b63e:	07d9      	lsls	r1, r3, #31
 800b640:	d405      	bmi.n	800b64e <_vfiprintf_r+0x1fe>
 800b642:	89ab      	ldrh	r3, [r5, #12]
 800b644:	059a      	lsls	r2, r3, #22
 800b646:	d402      	bmi.n	800b64e <_vfiprintf_r+0x1fe>
 800b648:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b64a:	f7fd fae7 	bl	8008c1c <__retarget_lock_release_recursive>
 800b64e:	89ab      	ldrh	r3, [r5, #12]
 800b650:	065b      	lsls	r3, r3, #25
 800b652:	f53f af1f 	bmi.w	800b494 <_vfiprintf_r+0x44>
 800b656:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b658:	e71e      	b.n	800b498 <_vfiprintf_r+0x48>
 800b65a:	ab03      	add	r3, sp, #12
 800b65c:	9300      	str	r3, [sp, #0]
 800b65e:	462a      	mov	r2, r5
 800b660:	4b05      	ldr	r3, [pc, #20]	@ (800b678 <_vfiprintf_r+0x228>)
 800b662:	a904      	add	r1, sp, #16
 800b664:	4630      	mov	r0, r6
 800b666:	f7fc fc97 	bl	8007f98 <_printf_i>
 800b66a:	e7e4      	b.n	800b636 <_vfiprintf_r+0x1e6>
 800b66c:	0800d311 	.word	0x0800d311
 800b670:	0800d31b 	.word	0x0800d31b
 800b674:	08007a69 	.word	0x08007a69
 800b678:	0800b42b 	.word	0x0800b42b
 800b67c:	0800d317 	.word	0x0800d317

0800b680 <__sflush_r>:
 800b680:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b688:	0716      	lsls	r6, r2, #28
 800b68a:	4605      	mov	r5, r0
 800b68c:	460c      	mov	r4, r1
 800b68e:	d454      	bmi.n	800b73a <__sflush_r+0xba>
 800b690:	684b      	ldr	r3, [r1, #4]
 800b692:	2b00      	cmp	r3, #0
 800b694:	dc02      	bgt.n	800b69c <__sflush_r+0x1c>
 800b696:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b698:	2b00      	cmp	r3, #0
 800b69a:	dd48      	ble.n	800b72e <__sflush_r+0xae>
 800b69c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b69e:	2e00      	cmp	r6, #0
 800b6a0:	d045      	beq.n	800b72e <__sflush_r+0xae>
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b6a8:	682f      	ldr	r7, [r5, #0]
 800b6aa:	6a21      	ldr	r1, [r4, #32]
 800b6ac:	602b      	str	r3, [r5, #0]
 800b6ae:	d030      	beq.n	800b712 <__sflush_r+0x92>
 800b6b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b6b2:	89a3      	ldrh	r3, [r4, #12]
 800b6b4:	0759      	lsls	r1, r3, #29
 800b6b6:	d505      	bpl.n	800b6c4 <__sflush_r+0x44>
 800b6b8:	6863      	ldr	r3, [r4, #4]
 800b6ba:	1ad2      	subs	r2, r2, r3
 800b6bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b6be:	b10b      	cbz	r3, 800b6c4 <__sflush_r+0x44>
 800b6c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b6c2:	1ad2      	subs	r2, r2, r3
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b6c8:	6a21      	ldr	r1, [r4, #32]
 800b6ca:	4628      	mov	r0, r5
 800b6cc:	47b0      	blx	r6
 800b6ce:	1c43      	adds	r3, r0, #1
 800b6d0:	89a3      	ldrh	r3, [r4, #12]
 800b6d2:	d106      	bne.n	800b6e2 <__sflush_r+0x62>
 800b6d4:	6829      	ldr	r1, [r5, #0]
 800b6d6:	291d      	cmp	r1, #29
 800b6d8:	d82b      	bhi.n	800b732 <__sflush_r+0xb2>
 800b6da:	4a2a      	ldr	r2, [pc, #168]	@ (800b784 <__sflush_r+0x104>)
 800b6dc:	410a      	asrs	r2, r1
 800b6de:	07d6      	lsls	r6, r2, #31
 800b6e0:	d427      	bmi.n	800b732 <__sflush_r+0xb2>
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	6062      	str	r2, [r4, #4]
 800b6e6:	04d9      	lsls	r1, r3, #19
 800b6e8:	6922      	ldr	r2, [r4, #16]
 800b6ea:	6022      	str	r2, [r4, #0]
 800b6ec:	d504      	bpl.n	800b6f8 <__sflush_r+0x78>
 800b6ee:	1c42      	adds	r2, r0, #1
 800b6f0:	d101      	bne.n	800b6f6 <__sflush_r+0x76>
 800b6f2:	682b      	ldr	r3, [r5, #0]
 800b6f4:	b903      	cbnz	r3, 800b6f8 <__sflush_r+0x78>
 800b6f6:	6560      	str	r0, [r4, #84]	@ 0x54
 800b6f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b6fa:	602f      	str	r7, [r5, #0]
 800b6fc:	b1b9      	cbz	r1, 800b72e <__sflush_r+0xae>
 800b6fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b702:	4299      	cmp	r1, r3
 800b704:	d002      	beq.n	800b70c <__sflush_r+0x8c>
 800b706:	4628      	mov	r0, r5
 800b708:	f7fe f8ea 	bl	80098e0 <_free_r>
 800b70c:	2300      	movs	r3, #0
 800b70e:	6363      	str	r3, [r4, #52]	@ 0x34
 800b710:	e00d      	b.n	800b72e <__sflush_r+0xae>
 800b712:	2301      	movs	r3, #1
 800b714:	4628      	mov	r0, r5
 800b716:	47b0      	blx	r6
 800b718:	4602      	mov	r2, r0
 800b71a:	1c50      	adds	r0, r2, #1
 800b71c:	d1c9      	bne.n	800b6b2 <__sflush_r+0x32>
 800b71e:	682b      	ldr	r3, [r5, #0]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d0c6      	beq.n	800b6b2 <__sflush_r+0x32>
 800b724:	2b1d      	cmp	r3, #29
 800b726:	d001      	beq.n	800b72c <__sflush_r+0xac>
 800b728:	2b16      	cmp	r3, #22
 800b72a:	d11e      	bne.n	800b76a <__sflush_r+0xea>
 800b72c:	602f      	str	r7, [r5, #0]
 800b72e:	2000      	movs	r0, #0
 800b730:	e022      	b.n	800b778 <__sflush_r+0xf8>
 800b732:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b736:	b21b      	sxth	r3, r3
 800b738:	e01b      	b.n	800b772 <__sflush_r+0xf2>
 800b73a:	690f      	ldr	r7, [r1, #16]
 800b73c:	2f00      	cmp	r7, #0
 800b73e:	d0f6      	beq.n	800b72e <__sflush_r+0xae>
 800b740:	0793      	lsls	r3, r2, #30
 800b742:	680e      	ldr	r6, [r1, #0]
 800b744:	bf08      	it	eq
 800b746:	694b      	ldreq	r3, [r1, #20]
 800b748:	600f      	str	r7, [r1, #0]
 800b74a:	bf18      	it	ne
 800b74c:	2300      	movne	r3, #0
 800b74e:	eba6 0807 	sub.w	r8, r6, r7
 800b752:	608b      	str	r3, [r1, #8]
 800b754:	f1b8 0f00 	cmp.w	r8, #0
 800b758:	dde9      	ble.n	800b72e <__sflush_r+0xae>
 800b75a:	6a21      	ldr	r1, [r4, #32]
 800b75c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b75e:	4643      	mov	r3, r8
 800b760:	463a      	mov	r2, r7
 800b762:	4628      	mov	r0, r5
 800b764:	47b0      	blx	r6
 800b766:	2800      	cmp	r0, #0
 800b768:	dc08      	bgt.n	800b77c <__sflush_r+0xfc>
 800b76a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b76e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b772:	81a3      	strh	r3, [r4, #12]
 800b774:	f04f 30ff 	mov.w	r0, #4294967295
 800b778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b77c:	4407      	add	r7, r0
 800b77e:	eba8 0800 	sub.w	r8, r8, r0
 800b782:	e7e7      	b.n	800b754 <__sflush_r+0xd4>
 800b784:	dfbffffe 	.word	0xdfbffffe

0800b788 <_fflush_r>:
 800b788:	b538      	push	{r3, r4, r5, lr}
 800b78a:	690b      	ldr	r3, [r1, #16]
 800b78c:	4605      	mov	r5, r0
 800b78e:	460c      	mov	r4, r1
 800b790:	b913      	cbnz	r3, 800b798 <_fflush_r+0x10>
 800b792:	2500      	movs	r5, #0
 800b794:	4628      	mov	r0, r5
 800b796:	bd38      	pop	{r3, r4, r5, pc}
 800b798:	b118      	cbz	r0, 800b7a2 <_fflush_r+0x1a>
 800b79a:	6a03      	ldr	r3, [r0, #32]
 800b79c:	b90b      	cbnz	r3, 800b7a2 <_fflush_r+0x1a>
 800b79e:	f7fc ffbb 	bl	8008718 <__sinit>
 800b7a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d0f3      	beq.n	800b792 <_fflush_r+0xa>
 800b7aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b7ac:	07d0      	lsls	r0, r2, #31
 800b7ae:	d404      	bmi.n	800b7ba <_fflush_r+0x32>
 800b7b0:	0599      	lsls	r1, r3, #22
 800b7b2:	d402      	bmi.n	800b7ba <_fflush_r+0x32>
 800b7b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b7b6:	f7fd fa30 	bl	8008c1a <__retarget_lock_acquire_recursive>
 800b7ba:	4628      	mov	r0, r5
 800b7bc:	4621      	mov	r1, r4
 800b7be:	f7ff ff5f 	bl	800b680 <__sflush_r>
 800b7c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b7c4:	07da      	lsls	r2, r3, #31
 800b7c6:	4605      	mov	r5, r0
 800b7c8:	d4e4      	bmi.n	800b794 <_fflush_r+0xc>
 800b7ca:	89a3      	ldrh	r3, [r4, #12]
 800b7cc:	059b      	lsls	r3, r3, #22
 800b7ce:	d4e1      	bmi.n	800b794 <_fflush_r+0xc>
 800b7d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b7d2:	f7fd fa23 	bl	8008c1c <__retarget_lock_release_recursive>
 800b7d6:	e7dd      	b.n	800b794 <_fflush_r+0xc>

0800b7d8 <__swhatbuf_r>:
 800b7d8:	b570      	push	{r4, r5, r6, lr}
 800b7da:	460c      	mov	r4, r1
 800b7dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7e0:	2900      	cmp	r1, #0
 800b7e2:	b096      	sub	sp, #88	@ 0x58
 800b7e4:	4615      	mov	r5, r2
 800b7e6:	461e      	mov	r6, r3
 800b7e8:	da0d      	bge.n	800b806 <__swhatbuf_r+0x2e>
 800b7ea:	89a3      	ldrh	r3, [r4, #12]
 800b7ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b7f0:	f04f 0100 	mov.w	r1, #0
 800b7f4:	bf14      	ite	ne
 800b7f6:	2340      	movne	r3, #64	@ 0x40
 800b7f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b7fc:	2000      	movs	r0, #0
 800b7fe:	6031      	str	r1, [r6, #0]
 800b800:	602b      	str	r3, [r5, #0]
 800b802:	b016      	add	sp, #88	@ 0x58
 800b804:	bd70      	pop	{r4, r5, r6, pc}
 800b806:	466a      	mov	r2, sp
 800b808:	f000 f874 	bl	800b8f4 <_fstat_r>
 800b80c:	2800      	cmp	r0, #0
 800b80e:	dbec      	blt.n	800b7ea <__swhatbuf_r+0x12>
 800b810:	9901      	ldr	r1, [sp, #4]
 800b812:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b816:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b81a:	4259      	negs	r1, r3
 800b81c:	4159      	adcs	r1, r3
 800b81e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b822:	e7eb      	b.n	800b7fc <__swhatbuf_r+0x24>

0800b824 <__smakebuf_r>:
 800b824:	898b      	ldrh	r3, [r1, #12]
 800b826:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b828:	079d      	lsls	r5, r3, #30
 800b82a:	4606      	mov	r6, r0
 800b82c:	460c      	mov	r4, r1
 800b82e:	d507      	bpl.n	800b840 <__smakebuf_r+0x1c>
 800b830:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b834:	6023      	str	r3, [r4, #0]
 800b836:	6123      	str	r3, [r4, #16]
 800b838:	2301      	movs	r3, #1
 800b83a:	6163      	str	r3, [r4, #20]
 800b83c:	b003      	add	sp, #12
 800b83e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b840:	ab01      	add	r3, sp, #4
 800b842:	466a      	mov	r2, sp
 800b844:	f7ff ffc8 	bl	800b7d8 <__swhatbuf_r>
 800b848:	9f00      	ldr	r7, [sp, #0]
 800b84a:	4605      	mov	r5, r0
 800b84c:	4639      	mov	r1, r7
 800b84e:	4630      	mov	r0, r6
 800b850:	f7fe f8ba 	bl	80099c8 <_malloc_r>
 800b854:	b948      	cbnz	r0, 800b86a <__smakebuf_r+0x46>
 800b856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b85a:	059a      	lsls	r2, r3, #22
 800b85c:	d4ee      	bmi.n	800b83c <__smakebuf_r+0x18>
 800b85e:	f023 0303 	bic.w	r3, r3, #3
 800b862:	f043 0302 	orr.w	r3, r3, #2
 800b866:	81a3      	strh	r3, [r4, #12]
 800b868:	e7e2      	b.n	800b830 <__smakebuf_r+0xc>
 800b86a:	89a3      	ldrh	r3, [r4, #12]
 800b86c:	6020      	str	r0, [r4, #0]
 800b86e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b872:	81a3      	strh	r3, [r4, #12]
 800b874:	9b01      	ldr	r3, [sp, #4]
 800b876:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b87a:	b15b      	cbz	r3, 800b894 <__smakebuf_r+0x70>
 800b87c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b880:	4630      	mov	r0, r6
 800b882:	f000 f849 	bl	800b918 <_isatty_r>
 800b886:	b128      	cbz	r0, 800b894 <__smakebuf_r+0x70>
 800b888:	89a3      	ldrh	r3, [r4, #12]
 800b88a:	f023 0303 	bic.w	r3, r3, #3
 800b88e:	f043 0301 	orr.w	r3, r3, #1
 800b892:	81a3      	strh	r3, [r4, #12]
 800b894:	89a3      	ldrh	r3, [r4, #12]
 800b896:	431d      	orrs	r5, r3
 800b898:	81a5      	strh	r5, [r4, #12]
 800b89a:	e7cf      	b.n	800b83c <__smakebuf_r+0x18>

0800b89c <memmove>:
 800b89c:	4288      	cmp	r0, r1
 800b89e:	b510      	push	{r4, lr}
 800b8a0:	eb01 0402 	add.w	r4, r1, r2
 800b8a4:	d902      	bls.n	800b8ac <memmove+0x10>
 800b8a6:	4284      	cmp	r4, r0
 800b8a8:	4623      	mov	r3, r4
 800b8aa:	d807      	bhi.n	800b8bc <memmove+0x20>
 800b8ac:	1e43      	subs	r3, r0, #1
 800b8ae:	42a1      	cmp	r1, r4
 800b8b0:	d008      	beq.n	800b8c4 <memmove+0x28>
 800b8b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b8b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b8ba:	e7f8      	b.n	800b8ae <memmove+0x12>
 800b8bc:	4402      	add	r2, r0
 800b8be:	4601      	mov	r1, r0
 800b8c0:	428a      	cmp	r2, r1
 800b8c2:	d100      	bne.n	800b8c6 <memmove+0x2a>
 800b8c4:	bd10      	pop	{r4, pc}
 800b8c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b8ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b8ce:	e7f7      	b.n	800b8c0 <memmove+0x24>

0800b8d0 <strncmp>:
 800b8d0:	b510      	push	{r4, lr}
 800b8d2:	b16a      	cbz	r2, 800b8f0 <strncmp+0x20>
 800b8d4:	3901      	subs	r1, #1
 800b8d6:	1884      	adds	r4, r0, r2
 800b8d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8dc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	d103      	bne.n	800b8ec <strncmp+0x1c>
 800b8e4:	42a0      	cmp	r0, r4
 800b8e6:	d001      	beq.n	800b8ec <strncmp+0x1c>
 800b8e8:	2a00      	cmp	r2, #0
 800b8ea:	d1f5      	bne.n	800b8d8 <strncmp+0x8>
 800b8ec:	1ad0      	subs	r0, r2, r3
 800b8ee:	bd10      	pop	{r4, pc}
 800b8f0:	4610      	mov	r0, r2
 800b8f2:	e7fc      	b.n	800b8ee <strncmp+0x1e>

0800b8f4 <_fstat_r>:
 800b8f4:	b538      	push	{r3, r4, r5, lr}
 800b8f6:	4d07      	ldr	r5, [pc, #28]	@ (800b914 <_fstat_r+0x20>)
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	4604      	mov	r4, r0
 800b8fc:	4608      	mov	r0, r1
 800b8fe:	4611      	mov	r1, r2
 800b900:	602b      	str	r3, [r5, #0]
 800b902:	f7f6 fa4b 	bl	8001d9c <_fstat>
 800b906:	1c43      	adds	r3, r0, #1
 800b908:	d102      	bne.n	800b910 <_fstat_r+0x1c>
 800b90a:	682b      	ldr	r3, [r5, #0]
 800b90c:	b103      	cbz	r3, 800b910 <_fstat_r+0x1c>
 800b90e:	6023      	str	r3, [r4, #0]
 800b910:	bd38      	pop	{r3, r4, r5, pc}
 800b912:	bf00      	nop
 800b914:	20009e04 	.word	0x20009e04

0800b918 <_isatty_r>:
 800b918:	b538      	push	{r3, r4, r5, lr}
 800b91a:	4d06      	ldr	r5, [pc, #24]	@ (800b934 <_isatty_r+0x1c>)
 800b91c:	2300      	movs	r3, #0
 800b91e:	4604      	mov	r4, r0
 800b920:	4608      	mov	r0, r1
 800b922:	602b      	str	r3, [r5, #0]
 800b924:	f7f6 fa4a 	bl	8001dbc <_isatty>
 800b928:	1c43      	adds	r3, r0, #1
 800b92a:	d102      	bne.n	800b932 <_isatty_r+0x1a>
 800b92c:	682b      	ldr	r3, [r5, #0]
 800b92e:	b103      	cbz	r3, 800b932 <_isatty_r+0x1a>
 800b930:	6023      	str	r3, [r4, #0]
 800b932:	bd38      	pop	{r3, r4, r5, pc}
 800b934:	20009e04 	.word	0x20009e04

0800b938 <_sbrk_r>:
 800b938:	b538      	push	{r3, r4, r5, lr}
 800b93a:	4d06      	ldr	r5, [pc, #24]	@ (800b954 <_sbrk_r+0x1c>)
 800b93c:	2300      	movs	r3, #0
 800b93e:	4604      	mov	r4, r0
 800b940:	4608      	mov	r0, r1
 800b942:	602b      	str	r3, [r5, #0]
 800b944:	f7f6 fa52 	bl	8001dec <_sbrk>
 800b948:	1c43      	adds	r3, r0, #1
 800b94a:	d102      	bne.n	800b952 <_sbrk_r+0x1a>
 800b94c:	682b      	ldr	r3, [r5, #0]
 800b94e:	b103      	cbz	r3, 800b952 <_sbrk_r+0x1a>
 800b950:	6023      	str	r3, [r4, #0]
 800b952:	bd38      	pop	{r3, r4, r5, pc}
 800b954:	20009e04 	.word	0x20009e04

0800b958 <nan>:
 800b958:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b960 <nan+0x8>
 800b95c:	4770      	bx	lr
 800b95e:	bf00      	nop
 800b960:	00000000 	.word	0x00000000
 800b964:	7ff80000 	.word	0x7ff80000

0800b968 <__assert_func>:
 800b968:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b96a:	4614      	mov	r4, r2
 800b96c:	461a      	mov	r2, r3
 800b96e:	4b09      	ldr	r3, [pc, #36]	@ (800b994 <__assert_func+0x2c>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	4605      	mov	r5, r0
 800b974:	68d8      	ldr	r0, [r3, #12]
 800b976:	b954      	cbnz	r4, 800b98e <__assert_func+0x26>
 800b978:	4b07      	ldr	r3, [pc, #28]	@ (800b998 <__assert_func+0x30>)
 800b97a:	461c      	mov	r4, r3
 800b97c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b980:	9100      	str	r1, [sp, #0]
 800b982:	462b      	mov	r3, r5
 800b984:	4905      	ldr	r1, [pc, #20]	@ (800b99c <__assert_func+0x34>)
 800b986:	f000 fba7 	bl	800c0d8 <fiprintf>
 800b98a:	f000 fbb7 	bl	800c0fc <abort>
 800b98e:	4b04      	ldr	r3, [pc, #16]	@ (800b9a0 <__assert_func+0x38>)
 800b990:	e7f4      	b.n	800b97c <__assert_func+0x14>
 800b992:	bf00      	nop
 800b994:	2000002c 	.word	0x2000002c
 800b998:	0800d365 	.word	0x0800d365
 800b99c:	0800d337 	.word	0x0800d337
 800b9a0:	0800d32a 	.word	0x0800d32a

0800b9a4 <_calloc_r>:
 800b9a4:	b570      	push	{r4, r5, r6, lr}
 800b9a6:	fba1 5402 	umull	r5, r4, r1, r2
 800b9aa:	b93c      	cbnz	r4, 800b9bc <_calloc_r+0x18>
 800b9ac:	4629      	mov	r1, r5
 800b9ae:	f7fe f80b 	bl	80099c8 <_malloc_r>
 800b9b2:	4606      	mov	r6, r0
 800b9b4:	b928      	cbnz	r0, 800b9c2 <_calloc_r+0x1e>
 800b9b6:	2600      	movs	r6, #0
 800b9b8:	4630      	mov	r0, r6
 800b9ba:	bd70      	pop	{r4, r5, r6, pc}
 800b9bc:	220c      	movs	r2, #12
 800b9be:	6002      	str	r2, [r0, #0]
 800b9c0:	e7f9      	b.n	800b9b6 <_calloc_r+0x12>
 800b9c2:	462a      	mov	r2, r5
 800b9c4:	4621      	mov	r1, r4
 800b9c6:	f7fd f879 	bl	8008abc <memset>
 800b9ca:	e7f5      	b.n	800b9b8 <_calloc_r+0x14>

0800b9cc <rshift>:
 800b9cc:	6903      	ldr	r3, [r0, #16]
 800b9ce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b9d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b9d6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b9da:	f100 0414 	add.w	r4, r0, #20
 800b9de:	dd45      	ble.n	800ba6c <rshift+0xa0>
 800b9e0:	f011 011f 	ands.w	r1, r1, #31
 800b9e4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b9e8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b9ec:	d10c      	bne.n	800ba08 <rshift+0x3c>
 800b9ee:	f100 0710 	add.w	r7, r0, #16
 800b9f2:	4629      	mov	r1, r5
 800b9f4:	42b1      	cmp	r1, r6
 800b9f6:	d334      	bcc.n	800ba62 <rshift+0x96>
 800b9f8:	1a9b      	subs	r3, r3, r2
 800b9fa:	009b      	lsls	r3, r3, #2
 800b9fc:	1eea      	subs	r2, r5, #3
 800b9fe:	4296      	cmp	r6, r2
 800ba00:	bf38      	it	cc
 800ba02:	2300      	movcc	r3, #0
 800ba04:	4423      	add	r3, r4
 800ba06:	e015      	b.n	800ba34 <rshift+0x68>
 800ba08:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ba0c:	f1c1 0820 	rsb	r8, r1, #32
 800ba10:	40cf      	lsrs	r7, r1
 800ba12:	f105 0e04 	add.w	lr, r5, #4
 800ba16:	46a1      	mov	r9, r4
 800ba18:	4576      	cmp	r6, lr
 800ba1a:	46f4      	mov	ip, lr
 800ba1c:	d815      	bhi.n	800ba4a <rshift+0x7e>
 800ba1e:	1a9a      	subs	r2, r3, r2
 800ba20:	0092      	lsls	r2, r2, #2
 800ba22:	3a04      	subs	r2, #4
 800ba24:	3501      	adds	r5, #1
 800ba26:	42ae      	cmp	r6, r5
 800ba28:	bf38      	it	cc
 800ba2a:	2200      	movcc	r2, #0
 800ba2c:	18a3      	adds	r3, r4, r2
 800ba2e:	50a7      	str	r7, [r4, r2]
 800ba30:	b107      	cbz	r7, 800ba34 <rshift+0x68>
 800ba32:	3304      	adds	r3, #4
 800ba34:	1b1a      	subs	r2, r3, r4
 800ba36:	42a3      	cmp	r3, r4
 800ba38:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ba3c:	bf08      	it	eq
 800ba3e:	2300      	moveq	r3, #0
 800ba40:	6102      	str	r2, [r0, #16]
 800ba42:	bf08      	it	eq
 800ba44:	6143      	streq	r3, [r0, #20]
 800ba46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba4a:	f8dc c000 	ldr.w	ip, [ip]
 800ba4e:	fa0c fc08 	lsl.w	ip, ip, r8
 800ba52:	ea4c 0707 	orr.w	r7, ip, r7
 800ba56:	f849 7b04 	str.w	r7, [r9], #4
 800ba5a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ba5e:	40cf      	lsrs	r7, r1
 800ba60:	e7da      	b.n	800ba18 <rshift+0x4c>
 800ba62:	f851 cb04 	ldr.w	ip, [r1], #4
 800ba66:	f847 cf04 	str.w	ip, [r7, #4]!
 800ba6a:	e7c3      	b.n	800b9f4 <rshift+0x28>
 800ba6c:	4623      	mov	r3, r4
 800ba6e:	e7e1      	b.n	800ba34 <rshift+0x68>

0800ba70 <__hexdig_fun>:
 800ba70:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ba74:	2b09      	cmp	r3, #9
 800ba76:	d802      	bhi.n	800ba7e <__hexdig_fun+0xe>
 800ba78:	3820      	subs	r0, #32
 800ba7a:	b2c0      	uxtb	r0, r0
 800ba7c:	4770      	bx	lr
 800ba7e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ba82:	2b05      	cmp	r3, #5
 800ba84:	d801      	bhi.n	800ba8a <__hexdig_fun+0x1a>
 800ba86:	3847      	subs	r0, #71	@ 0x47
 800ba88:	e7f7      	b.n	800ba7a <__hexdig_fun+0xa>
 800ba8a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ba8e:	2b05      	cmp	r3, #5
 800ba90:	d801      	bhi.n	800ba96 <__hexdig_fun+0x26>
 800ba92:	3827      	subs	r0, #39	@ 0x27
 800ba94:	e7f1      	b.n	800ba7a <__hexdig_fun+0xa>
 800ba96:	2000      	movs	r0, #0
 800ba98:	4770      	bx	lr
	...

0800ba9c <__gethex>:
 800ba9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baa0:	b085      	sub	sp, #20
 800baa2:	468a      	mov	sl, r1
 800baa4:	9302      	str	r3, [sp, #8]
 800baa6:	680b      	ldr	r3, [r1, #0]
 800baa8:	9001      	str	r0, [sp, #4]
 800baaa:	4690      	mov	r8, r2
 800baac:	1c9c      	adds	r4, r3, #2
 800baae:	46a1      	mov	r9, r4
 800bab0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800bab4:	2830      	cmp	r0, #48	@ 0x30
 800bab6:	d0fa      	beq.n	800baae <__gethex+0x12>
 800bab8:	eba9 0303 	sub.w	r3, r9, r3
 800babc:	f1a3 0b02 	sub.w	fp, r3, #2
 800bac0:	f7ff ffd6 	bl	800ba70 <__hexdig_fun>
 800bac4:	4605      	mov	r5, r0
 800bac6:	2800      	cmp	r0, #0
 800bac8:	d168      	bne.n	800bb9c <__gethex+0x100>
 800baca:	49a0      	ldr	r1, [pc, #640]	@ (800bd4c <__gethex+0x2b0>)
 800bacc:	2201      	movs	r2, #1
 800bace:	4648      	mov	r0, r9
 800bad0:	f7ff fefe 	bl	800b8d0 <strncmp>
 800bad4:	4607      	mov	r7, r0
 800bad6:	2800      	cmp	r0, #0
 800bad8:	d167      	bne.n	800bbaa <__gethex+0x10e>
 800bada:	f899 0001 	ldrb.w	r0, [r9, #1]
 800bade:	4626      	mov	r6, r4
 800bae0:	f7ff ffc6 	bl	800ba70 <__hexdig_fun>
 800bae4:	2800      	cmp	r0, #0
 800bae6:	d062      	beq.n	800bbae <__gethex+0x112>
 800bae8:	4623      	mov	r3, r4
 800baea:	7818      	ldrb	r0, [r3, #0]
 800baec:	2830      	cmp	r0, #48	@ 0x30
 800baee:	4699      	mov	r9, r3
 800baf0:	f103 0301 	add.w	r3, r3, #1
 800baf4:	d0f9      	beq.n	800baea <__gethex+0x4e>
 800baf6:	f7ff ffbb 	bl	800ba70 <__hexdig_fun>
 800bafa:	fab0 f580 	clz	r5, r0
 800bafe:	096d      	lsrs	r5, r5, #5
 800bb00:	f04f 0b01 	mov.w	fp, #1
 800bb04:	464a      	mov	r2, r9
 800bb06:	4616      	mov	r6, r2
 800bb08:	3201      	adds	r2, #1
 800bb0a:	7830      	ldrb	r0, [r6, #0]
 800bb0c:	f7ff ffb0 	bl	800ba70 <__hexdig_fun>
 800bb10:	2800      	cmp	r0, #0
 800bb12:	d1f8      	bne.n	800bb06 <__gethex+0x6a>
 800bb14:	498d      	ldr	r1, [pc, #564]	@ (800bd4c <__gethex+0x2b0>)
 800bb16:	2201      	movs	r2, #1
 800bb18:	4630      	mov	r0, r6
 800bb1a:	f7ff fed9 	bl	800b8d0 <strncmp>
 800bb1e:	2800      	cmp	r0, #0
 800bb20:	d13f      	bne.n	800bba2 <__gethex+0x106>
 800bb22:	b944      	cbnz	r4, 800bb36 <__gethex+0x9a>
 800bb24:	1c74      	adds	r4, r6, #1
 800bb26:	4622      	mov	r2, r4
 800bb28:	4616      	mov	r6, r2
 800bb2a:	3201      	adds	r2, #1
 800bb2c:	7830      	ldrb	r0, [r6, #0]
 800bb2e:	f7ff ff9f 	bl	800ba70 <__hexdig_fun>
 800bb32:	2800      	cmp	r0, #0
 800bb34:	d1f8      	bne.n	800bb28 <__gethex+0x8c>
 800bb36:	1ba4      	subs	r4, r4, r6
 800bb38:	00a7      	lsls	r7, r4, #2
 800bb3a:	7833      	ldrb	r3, [r6, #0]
 800bb3c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800bb40:	2b50      	cmp	r3, #80	@ 0x50
 800bb42:	d13e      	bne.n	800bbc2 <__gethex+0x126>
 800bb44:	7873      	ldrb	r3, [r6, #1]
 800bb46:	2b2b      	cmp	r3, #43	@ 0x2b
 800bb48:	d033      	beq.n	800bbb2 <__gethex+0x116>
 800bb4a:	2b2d      	cmp	r3, #45	@ 0x2d
 800bb4c:	d034      	beq.n	800bbb8 <__gethex+0x11c>
 800bb4e:	1c71      	adds	r1, r6, #1
 800bb50:	2400      	movs	r4, #0
 800bb52:	7808      	ldrb	r0, [r1, #0]
 800bb54:	f7ff ff8c 	bl	800ba70 <__hexdig_fun>
 800bb58:	1e43      	subs	r3, r0, #1
 800bb5a:	b2db      	uxtb	r3, r3
 800bb5c:	2b18      	cmp	r3, #24
 800bb5e:	d830      	bhi.n	800bbc2 <__gethex+0x126>
 800bb60:	f1a0 0210 	sub.w	r2, r0, #16
 800bb64:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bb68:	f7ff ff82 	bl	800ba70 <__hexdig_fun>
 800bb6c:	f100 3cff 	add.w	ip, r0, #4294967295
 800bb70:	fa5f fc8c 	uxtb.w	ip, ip
 800bb74:	f1bc 0f18 	cmp.w	ip, #24
 800bb78:	f04f 030a 	mov.w	r3, #10
 800bb7c:	d91e      	bls.n	800bbbc <__gethex+0x120>
 800bb7e:	b104      	cbz	r4, 800bb82 <__gethex+0xe6>
 800bb80:	4252      	negs	r2, r2
 800bb82:	4417      	add	r7, r2
 800bb84:	f8ca 1000 	str.w	r1, [sl]
 800bb88:	b1ed      	cbz	r5, 800bbc6 <__gethex+0x12a>
 800bb8a:	f1bb 0f00 	cmp.w	fp, #0
 800bb8e:	bf0c      	ite	eq
 800bb90:	2506      	moveq	r5, #6
 800bb92:	2500      	movne	r5, #0
 800bb94:	4628      	mov	r0, r5
 800bb96:	b005      	add	sp, #20
 800bb98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb9c:	2500      	movs	r5, #0
 800bb9e:	462c      	mov	r4, r5
 800bba0:	e7b0      	b.n	800bb04 <__gethex+0x68>
 800bba2:	2c00      	cmp	r4, #0
 800bba4:	d1c7      	bne.n	800bb36 <__gethex+0x9a>
 800bba6:	4627      	mov	r7, r4
 800bba8:	e7c7      	b.n	800bb3a <__gethex+0x9e>
 800bbaa:	464e      	mov	r6, r9
 800bbac:	462f      	mov	r7, r5
 800bbae:	2501      	movs	r5, #1
 800bbb0:	e7c3      	b.n	800bb3a <__gethex+0x9e>
 800bbb2:	2400      	movs	r4, #0
 800bbb4:	1cb1      	adds	r1, r6, #2
 800bbb6:	e7cc      	b.n	800bb52 <__gethex+0xb6>
 800bbb8:	2401      	movs	r4, #1
 800bbba:	e7fb      	b.n	800bbb4 <__gethex+0x118>
 800bbbc:	fb03 0002 	mla	r0, r3, r2, r0
 800bbc0:	e7ce      	b.n	800bb60 <__gethex+0xc4>
 800bbc2:	4631      	mov	r1, r6
 800bbc4:	e7de      	b.n	800bb84 <__gethex+0xe8>
 800bbc6:	eba6 0309 	sub.w	r3, r6, r9
 800bbca:	3b01      	subs	r3, #1
 800bbcc:	4629      	mov	r1, r5
 800bbce:	2b07      	cmp	r3, #7
 800bbd0:	dc0a      	bgt.n	800bbe8 <__gethex+0x14c>
 800bbd2:	9801      	ldr	r0, [sp, #4]
 800bbd4:	f7fd ff84 	bl	8009ae0 <_Balloc>
 800bbd8:	4604      	mov	r4, r0
 800bbda:	b940      	cbnz	r0, 800bbee <__gethex+0x152>
 800bbdc:	4b5c      	ldr	r3, [pc, #368]	@ (800bd50 <__gethex+0x2b4>)
 800bbde:	4602      	mov	r2, r0
 800bbe0:	21e4      	movs	r1, #228	@ 0xe4
 800bbe2:	485c      	ldr	r0, [pc, #368]	@ (800bd54 <__gethex+0x2b8>)
 800bbe4:	f7ff fec0 	bl	800b968 <__assert_func>
 800bbe8:	3101      	adds	r1, #1
 800bbea:	105b      	asrs	r3, r3, #1
 800bbec:	e7ef      	b.n	800bbce <__gethex+0x132>
 800bbee:	f100 0a14 	add.w	sl, r0, #20
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	4655      	mov	r5, sl
 800bbf6:	469b      	mov	fp, r3
 800bbf8:	45b1      	cmp	r9, r6
 800bbfa:	d337      	bcc.n	800bc6c <__gethex+0x1d0>
 800bbfc:	f845 bb04 	str.w	fp, [r5], #4
 800bc00:	eba5 050a 	sub.w	r5, r5, sl
 800bc04:	10ad      	asrs	r5, r5, #2
 800bc06:	6125      	str	r5, [r4, #16]
 800bc08:	4658      	mov	r0, fp
 800bc0a:	f7fe f85b 	bl	8009cc4 <__hi0bits>
 800bc0e:	016d      	lsls	r5, r5, #5
 800bc10:	f8d8 6000 	ldr.w	r6, [r8]
 800bc14:	1a2d      	subs	r5, r5, r0
 800bc16:	42b5      	cmp	r5, r6
 800bc18:	dd54      	ble.n	800bcc4 <__gethex+0x228>
 800bc1a:	1bad      	subs	r5, r5, r6
 800bc1c:	4629      	mov	r1, r5
 800bc1e:	4620      	mov	r0, r4
 800bc20:	f7fe fbef 	bl	800a402 <__any_on>
 800bc24:	4681      	mov	r9, r0
 800bc26:	b178      	cbz	r0, 800bc48 <__gethex+0x1ac>
 800bc28:	1e6b      	subs	r3, r5, #1
 800bc2a:	1159      	asrs	r1, r3, #5
 800bc2c:	f003 021f 	and.w	r2, r3, #31
 800bc30:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bc34:	f04f 0901 	mov.w	r9, #1
 800bc38:	fa09 f202 	lsl.w	r2, r9, r2
 800bc3c:	420a      	tst	r2, r1
 800bc3e:	d003      	beq.n	800bc48 <__gethex+0x1ac>
 800bc40:	454b      	cmp	r3, r9
 800bc42:	dc36      	bgt.n	800bcb2 <__gethex+0x216>
 800bc44:	f04f 0902 	mov.w	r9, #2
 800bc48:	4629      	mov	r1, r5
 800bc4a:	4620      	mov	r0, r4
 800bc4c:	f7ff febe 	bl	800b9cc <rshift>
 800bc50:	442f      	add	r7, r5
 800bc52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bc56:	42bb      	cmp	r3, r7
 800bc58:	da42      	bge.n	800bce0 <__gethex+0x244>
 800bc5a:	9801      	ldr	r0, [sp, #4]
 800bc5c:	4621      	mov	r1, r4
 800bc5e:	f7fd ff7f 	bl	8009b60 <_Bfree>
 800bc62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bc64:	2300      	movs	r3, #0
 800bc66:	6013      	str	r3, [r2, #0]
 800bc68:	25a3      	movs	r5, #163	@ 0xa3
 800bc6a:	e793      	b.n	800bb94 <__gethex+0xf8>
 800bc6c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800bc70:	2a2e      	cmp	r2, #46	@ 0x2e
 800bc72:	d012      	beq.n	800bc9a <__gethex+0x1fe>
 800bc74:	2b20      	cmp	r3, #32
 800bc76:	d104      	bne.n	800bc82 <__gethex+0x1e6>
 800bc78:	f845 bb04 	str.w	fp, [r5], #4
 800bc7c:	f04f 0b00 	mov.w	fp, #0
 800bc80:	465b      	mov	r3, fp
 800bc82:	7830      	ldrb	r0, [r6, #0]
 800bc84:	9303      	str	r3, [sp, #12]
 800bc86:	f7ff fef3 	bl	800ba70 <__hexdig_fun>
 800bc8a:	9b03      	ldr	r3, [sp, #12]
 800bc8c:	f000 000f 	and.w	r0, r0, #15
 800bc90:	4098      	lsls	r0, r3
 800bc92:	ea4b 0b00 	orr.w	fp, fp, r0
 800bc96:	3304      	adds	r3, #4
 800bc98:	e7ae      	b.n	800bbf8 <__gethex+0x15c>
 800bc9a:	45b1      	cmp	r9, r6
 800bc9c:	d8ea      	bhi.n	800bc74 <__gethex+0x1d8>
 800bc9e:	492b      	ldr	r1, [pc, #172]	@ (800bd4c <__gethex+0x2b0>)
 800bca0:	9303      	str	r3, [sp, #12]
 800bca2:	2201      	movs	r2, #1
 800bca4:	4630      	mov	r0, r6
 800bca6:	f7ff fe13 	bl	800b8d0 <strncmp>
 800bcaa:	9b03      	ldr	r3, [sp, #12]
 800bcac:	2800      	cmp	r0, #0
 800bcae:	d1e1      	bne.n	800bc74 <__gethex+0x1d8>
 800bcb0:	e7a2      	b.n	800bbf8 <__gethex+0x15c>
 800bcb2:	1ea9      	subs	r1, r5, #2
 800bcb4:	4620      	mov	r0, r4
 800bcb6:	f7fe fba4 	bl	800a402 <__any_on>
 800bcba:	2800      	cmp	r0, #0
 800bcbc:	d0c2      	beq.n	800bc44 <__gethex+0x1a8>
 800bcbe:	f04f 0903 	mov.w	r9, #3
 800bcc2:	e7c1      	b.n	800bc48 <__gethex+0x1ac>
 800bcc4:	da09      	bge.n	800bcda <__gethex+0x23e>
 800bcc6:	1b75      	subs	r5, r6, r5
 800bcc8:	4621      	mov	r1, r4
 800bcca:	9801      	ldr	r0, [sp, #4]
 800bccc:	462a      	mov	r2, r5
 800bcce:	f7fe f95f 	bl	8009f90 <__lshift>
 800bcd2:	1b7f      	subs	r7, r7, r5
 800bcd4:	4604      	mov	r4, r0
 800bcd6:	f100 0a14 	add.w	sl, r0, #20
 800bcda:	f04f 0900 	mov.w	r9, #0
 800bcde:	e7b8      	b.n	800bc52 <__gethex+0x1b6>
 800bce0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bce4:	42bd      	cmp	r5, r7
 800bce6:	dd6f      	ble.n	800bdc8 <__gethex+0x32c>
 800bce8:	1bed      	subs	r5, r5, r7
 800bcea:	42ae      	cmp	r6, r5
 800bcec:	dc34      	bgt.n	800bd58 <__gethex+0x2bc>
 800bcee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bcf2:	2b02      	cmp	r3, #2
 800bcf4:	d022      	beq.n	800bd3c <__gethex+0x2a0>
 800bcf6:	2b03      	cmp	r3, #3
 800bcf8:	d024      	beq.n	800bd44 <__gethex+0x2a8>
 800bcfa:	2b01      	cmp	r3, #1
 800bcfc:	d115      	bne.n	800bd2a <__gethex+0x28e>
 800bcfe:	42ae      	cmp	r6, r5
 800bd00:	d113      	bne.n	800bd2a <__gethex+0x28e>
 800bd02:	2e01      	cmp	r6, #1
 800bd04:	d10b      	bne.n	800bd1e <__gethex+0x282>
 800bd06:	9a02      	ldr	r2, [sp, #8]
 800bd08:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bd0c:	6013      	str	r3, [r2, #0]
 800bd0e:	2301      	movs	r3, #1
 800bd10:	6123      	str	r3, [r4, #16]
 800bd12:	f8ca 3000 	str.w	r3, [sl]
 800bd16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd18:	2562      	movs	r5, #98	@ 0x62
 800bd1a:	601c      	str	r4, [r3, #0]
 800bd1c:	e73a      	b.n	800bb94 <__gethex+0xf8>
 800bd1e:	1e71      	subs	r1, r6, #1
 800bd20:	4620      	mov	r0, r4
 800bd22:	f7fe fb6e 	bl	800a402 <__any_on>
 800bd26:	2800      	cmp	r0, #0
 800bd28:	d1ed      	bne.n	800bd06 <__gethex+0x26a>
 800bd2a:	9801      	ldr	r0, [sp, #4]
 800bd2c:	4621      	mov	r1, r4
 800bd2e:	f7fd ff17 	bl	8009b60 <_Bfree>
 800bd32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bd34:	2300      	movs	r3, #0
 800bd36:	6013      	str	r3, [r2, #0]
 800bd38:	2550      	movs	r5, #80	@ 0x50
 800bd3a:	e72b      	b.n	800bb94 <__gethex+0xf8>
 800bd3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d1f3      	bne.n	800bd2a <__gethex+0x28e>
 800bd42:	e7e0      	b.n	800bd06 <__gethex+0x26a>
 800bd44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d1dd      	bne.n	800bd06 <__gethex+0x26a>
 800bd4a:	e7ee      	b.n	800bd2a <__gethex+0x28e>
 800bd4c:	0800d1b8 	.word	0x0800d1b8
 800bd50:	0800d051 	.word	0x0800d051
 800bd54:	0800d366 	.word	0x0800d366
 800bd58:	1e6f      	subs	r7, r5, #1
 800bd5a:	f1b9 0f00 	cmp.w	r9, #0
 800bd5e:	d130      	bne.n	800bdc2 <__gethex+0x326>
 800bd60:	b127      	cbz	r7, 800bd6c <__gethex+0x2d0>
 800bd62:	4639      	mov	r1, r7
 800bd64:	4620      	mov	r0, r4
 800bd66:	f7fe fb4c 	bl	800a402 <__any_on>
 800bd6a:	4681      	mov	r9, r0
 800bd6c:	117a      	asrs	r2, r7, #5
 800bd6e:	2301      	movs	r3, #1
 800bd70:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bd74:	f007 071f 	and.w	r7, r7, #31
 800bd78:	40bb      	lsls	r3, r7
 800bd7a:	4213      	tst	r3, r2
 800bd7c:	4629      	mov	r1, r5
 800bd7e:	4620      	mov	r0, r4
 800bd80:	bf18      	it	ne
 800bd82:	f049 0902 	orrne.w	r9, r9, #2
 800bd86:	f7ff fe21 	bl	800b9cc <rshift>
 800bd8a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800bd8e:	1b76      	subs	r6, r6, r5
 800bd90:	2502      	movs	r5, #2
 800bd92:	f1b9 0f00 	cmp.w	r9, #0
 800bd96:	d047      	beq.n	800be28 <__gethex+0x38c>
 800bd98:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bd9c:	2b02      	cmp	r3, #2
 800bd9e:	d015      	beq.n	800bdcc <__gethex+0x330>
 800bda0:	2b03      	cmp	r3, #3
 800bda2:	d017      	beq.n	800bdd4 <__gethex+0x338>
 800bda4:	2b01      	cmp	r3, #1
 800bda6:	d109      	bne.n	800bdbc <__gethex+0x320>
 800bda8:	f019 0f02 	tst.w	r9, #2
 800bdac:	d006      	beq.n	800bdbc <__gethex+0x320>
 800bdae:	f8da 3000 	ldr.w	r3, [sl]
 800bdb2:	ea49 0903 	orr.w	r9, r9, r3
 800bdb6:	f019 0f01 	tst.w	r9, #1
 800bdba:	d10e      	bne.n	800bdda <__gethex+0x33e>
 800bdbc:	f045 0510 	orr.w	r5, r5, #16
 800bdc0:	e032      	b.n	800be28 <__gethex+0x38c>
 800bdc2:	f04f 0901 	mov.w	r9, #1
 800bdc6:	e7d1      	b.n	800bd6c <__gethex+0x2d0>
 800bdc8:	2501      	movs	r5, #1
 800bdca:	e7e2      	b.n	800bd92 <__gethex+0x2f6>
 800bdcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bdce:	f1c3 0301 	rsb	r3, r3, #1
 800bdd2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bdd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d0f0      	beq.n	800bdbc <__gethex+0x320>
 800bdda:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bdde:	f104 0314 	add.w	r3, r4, #20
 800bde2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bde6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bdea:	f04f 0c00 	mov.w	ip, #0
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdf4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bdf8:	d01b      	beq.n	800be32 <__gethex+0x396>
 800bdfa:	3201      	adds	r2, #1
 800bdfc:	6002      	str	r2, [r0, #0]
 800bdfe:	2d02      	cmp	r5, #2
 800be00:	f104 0314 	add.w	r3, r4, #20
 800be04:	d13c      	bne.n	800be80 <__gethex+0x3e4>
 800be06:	f8d8 2000 	ldr.w	r2, [r8]
 800be0a:	3a01      	subs	r2, #1
 800be0c:	42b2      	cmp	r2, r6
 800be0e:	d109      	bne.n	800be24 <__gethex+0x388>
 800be10:	1171      	asrs	r1, r6, #5
 800be12:	2201      	movs	r2, #1
 800be14:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800be18:	f006 061f 	and.w	r6, r6, #31
 800be1c:	fa02 f606 	lsl.w	r6, r2, r6
 800be20:	421e      	tst	r6, r3
 800be22:	d13a      	bne.n	800be9a <__gethex+0x3fe>
 800be24:	f045 0520 	orr.w	r5, r5, #32
 800be28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be2a:	601c      	str	r4, [r3, #0]
 800be2c:	9b02      	ldr	r3, [sp, #8]
 800be2e:	601f      	str	r7, [r3, #0]
 800be30:	e6b0      	b.n	800bb94 <__gethex+0xf8>
 800be32:	4299      	cmp	r1, r3
 800be34:	f843 cc04 	str.w	ip, [r3, #-4]
 800be38:	d8d9      	bhi.n	800bdee <__gethex+0x352>
 800be3a:	68a3      	ldr	r3, [r4, #8]
 800be3c:	459b      	cmp	fp, r3
 800be3e:	db17      	blt.n	800be70 <__gethex+0x3d4>
 800be40:	6861      	ldr	r1, [r4, #4]
 800be42:	9801      	ldr	r0, [sp, #4]
 800be44:	3101      	adds	r1, #1
 800be46:	f7fd fe4b 	bl	8009ae0 <_Balloc>
 800be4a:	4681      	mov	r9, r0
 800be4c:	b918      	cbnz	r0, 800be56 <__gethex+0x3ba>
 800be4e:	4b1a      	ldr	r3, [pc, #104]	@ (800beb8 <__gethex+0x41c>)
 800be50:	4602      	mov	r2, r0
 800be52:	2184      	movs	r1, #132	@ 0x84
 800be54:	e6c5      	b.n	800bbe2 <__gethex+0x146>
 800be56:	6922      	ldr	r2, [r4, #16]
 800be58:	3202      	adds	r2, #2
 800be5a:	f104 010c 	add.w	r1, r4, #12
 800be5e:	0092      	lsls	r2, r2, #2
 800be60:	300c      	adds	r0, #12
 800be62:	f7fc fedc 	bl	8008c1e <memcpy>
 800be66:	4621      	mov	r1, r4
 800be68:	9801      	ldr	r0, [sp, #4]
 800be6a:	f7fd fe79 	bl	8009b60 <_Bfree>
 800be6e:	464c      	mov	r4, r9
 800be70:	6923      	ldr	r3, [r4, #16]
 800be72:	1c5a      	adds	r2, r3, #1
 800be74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800be78:	6122      	str	r2, [r4, #16]
 800be7a:	2201      	movs	r2, #1
 800be7c:	615a      	str	r2, [r3, #20]
 800be7e:	e7be      	b.n	800bdfe <__gethex+0x362>
 800be80:	6922      	ldr	r2, [r4, #16]
 800be82:	455a      	cmp	r2, fp
 800be84:	dd0b      	ble.n	800be9e <__gethex+0x402>
 800be86:	2101      	movs	r1, #1
 800be88:	4620      	mov	r0, r4
 800be8a:	f7ff fd9f 	bl	800b9cc <rshift>
 800be8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800be92:	3701      	adds	r7, #1
 800be94:	42bb      	cmp	r3, r7
 800be96:	f6ff aee0 	blt.w	800bc5a <__gethex+0x1be>
 800be9a:	2501      	movs	r5, #1
 800be9c:	e7c2      	b.n	800be24 <__gethex+0x388>
 800be9e:	f016 061f 	ands.w	r6, r6, #31
 800bea2:	d0fa      	beq.n	800be9a <__gethex+0x3fe>
 800bea4:	4453      	add	r3, sl
 800bea6:	f1c6 0620 	rsb	r6, r6, #32
 800beaa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800beae:	f7fd ff09 	bl	8009cc4 <__hi0bits>
 800beb2:	42b0      	cmp	r0, r6
 800beb4:	dbe7      	blt.n	800be86 <__gethex+0x3ea>
 800beb6:	e7f0      	b.n	800be9a <__gethex+0x3fe>
 800beb8:	0800d051 	.word	0x0800d051

0800bebc <L_shift>:
 800bebc:	f1c2 0208 	rsb	r2, r2, #8
 800bec0:	0092      	lsls	r2, r2, #2
 800bec2:	b570      	push	{r4, r5, r6, lr}
 800bec4:	f1c2 0620 	rsb	r6, r2, #32
 800bec8:	6843      	ldr	r3, [r0, #4]
 800beca:	6804      	ldr	r4, [r0, #0]
 800becc:	fa03 f506 	lsl.w	r5, r3, r6
 800bed0:	432c      	orrs	r4, r5
 800bed2:	40d3      	lsrs	r3, r2
 800bed4:	6004      	str	r4, [r0, #0]
 800bed6:	f840 3f04 	str.w	r3, [r0, #4]!
 800beda:	4288      	cmp	r0, r1
 800bedc:	d3f4      	bcc.n	800bec8 <L_shift+0xc>
 800bede:	bd70      	pop	{r4, r5, r6, pc}

0800bee0 <__match>:
 800bee0:	b530      	push	{r4, r5, lr}
 800bee2:	6803      	ldr	r3, [r0, #0]
 800bee4:	3301      	adds	r3, #1
 800bee6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800beea:	b914      	cbnz	r4, 800bef2 <__match+0x12>
 800beec:	6003      	str	r3, [r0, #0]
 800beee:	2001      	movs	r0, #1
 800bef0:	bd30      	pop	{r4, r5, pc}
 800bef2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bef6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800befa:	2d19      	cmp	r5, #25
 800befc:	bf98      	it	ls
 800befe:	3220      	addls	r2, #32
 800bf00:	42a2      	cmp	r2, r4
 800bf02:	d0f0      	beq.n	800bee6 <__match+0x6>
 800bf04:	2000      	movs	r0, #0
 800bf06:	e7f3      	b.n	800bef0 <__match+0x10>

0800bf08 <__hexnan>:
 800bf08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf0c:	680b      	ldr	r3, [r1, #0]
 800bf0e:	6801      	ldr	r1, [r0, #0]
 800bf10:	115e      	asrs	r6, r3, #5
 800bf12:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bf16:	f013 031f 	ands.w	r3, r3, #31
 800bf1a:	b087      	sub	sp, #28
 800bf1c:	bf18      	it	ne
 800bf1e:	3604      	addne	r6, #4
 800bf20:	2500      	movs	r5, #0
 800bf22:	1f37      	subs	r7, r6, #4
 800bf24:	4682      	mov	sl, r0
 800bf26:	4690      	mov	r8, r2
 800bf28:	9301      	str	r3, [sp, #4]
 800bf2a:	f846 5c04 	str.w	r5, [r6, #-4]
 800bf2e:	46b9      	mov	r9, r7
 800bf30:	463c      	mov	r4, r7
 800bf32:	9502      	str	r5, [sp, #8]
 800bf34:	46ab      	mov	fp, r5
 800bf36:	784a      	ldrb	r2, [r1, #1]
 800bf38:	1c4b      	adds	r3, r1, #1
 800bf3a:	9303      	str	r3, [sp, #12]
 800bf3c:	b342      	cbz	r2, 800bf90 <__hexnan+0x88>
 800bf3e:	4610      	mov	r0, r2
 800bf40:	9105      	str	r1, [sp, #20]
 800bf42:	9204      	str	r2, [sp, #16]
 800bf44:	f7ff fd94 	bl	800ba70 <__hexdig_fun>
 800bf48:	2800      	cmp	r0, #0
 800bf4a:	d151      	bne.n	800bff0 <__hexnan+0xe8>
 800bf4c:	9a04      	ldr	r2, [sp, #16]
 800bf4e:	9905      	ldr	r1, [sp, #20]
 800bf50:	2a20      	cmp	r2, #32
 800bf52:	d818      	bhi.n	800bf86 <__hexnan+0x7e>
 800bf54:	9b02      	ldr	r3, [sp, #8]
 800bf56:	459b      	cmp	fp, r3
 800bf58:	dd13      	ble.n	800bf82 <__hexnan+0x7a>
 800bf5a:	454c      	cmp	r4, r9
 800bf5c:	d206      	bcs.n	800bf6c <__hexnan+0x64>
 800bf5e:	2d07      	cmp	r5, #7
 800bf60:	dc04      	bgt.n	800bf6c <__hexnan+0x64>
 800bf62:	462a      	mov	r2, r5
 800bf64:	4649      	mov	r1, r9
 800bf66:	4620      	mov	r0, r4
 800bf68:	f7ff ffa8 	bl	800bebc <L_shift>
 800bf6c:	4544      	cmp	r4, r8
 800bf6e:	d952      	bls.n	800c016 <__hexnan+0x10e>
 800bf70:	2300      	movs	r3, #0
 800bf72:	f1a4 0904 	sub.w	r9, r4, #4
 800bf76:	f844 3c04 	str.w	r3, [r4, #-4]
 800bf7a:	f8cd b008 	str.w	fp, [sp, #8]
 800bf7e:	464c      	mov	r4, r9
 800bf80:	461d      	mov	r5, r3
 800bf82:	9903      	ldr	r1, [sp, #12]
 800bf84:	e7d7      	b.n	800bf36 <__hexnan+0x2e>
 800bf86:	2a29      	cmp	r2, #41	@ 0x29
 800bf88:	d157      	bne.n	800c03a <__hexnan+0x132>
 800bf8a:	3102      	adds	r1, #2
 800bf8c:	f8ca 1000 	str.w	r1, [sl]
 800bf90:	f1bb 0f00 	cmp.w	fp, #0
 800bf94:	d051      	beq.n	800c03a <__hexnan+0x132>
 800bf96:	454c      	cmp	r4, r9
 800bf98:	d206      	bcs.n	800bfa8 <__hexnan+0xa0>
 800bf9a:	2d07      	cmp	r5, #7
 800bf9c:	dc04      	bgt.n	800bfa8 <__hexnan+0xa0>
 800bf9e:	462a      	mov	r2, r5
 800bfa0:	4649      	mov	r1, r9
 800bfa2:	4620      	mov	r0, r4
 800bfa4:	f7ff ff8a 	bl	800bebc <L_shift>
 800bfa8:	4544      	cmp	r4, r8
 800bfaa:	d936      	bls.n	800c01a <__hexnan+0x112>
 800bfac:	f1a8 0204 	sub.w	r2, r8, #4
 800bfb0:	4623      	mov	r3, r4
 800bfb2:	f853 1b04 	ldr.w	r1, [r3], #4
 800bfb6:	f842 1f04 	str.w	r1, [r2, #4]!
 800bfba:	429f      	cmp	r7, r3
 800bfbc:	d2f9      	bcs.n	800bfb2 <__hexnan+0xaa>
 800bfbe:	1b3b      	subs	r3, r7, r4
 800bfc0:	f023 0303 	bic.w	r3, r3, #3
 800bfc4:	3304      	adds	r3, #4
 800bfc6:	3401      	adds	r4, #1
 800bfc8:	3e03      	subs	r6, #3
 800bfca:	42b4      	cmp	r4, r6
 800bfcc:	bf88      	it	hi
 800bfce:	2304      	movhi	r3, #4
 800bfd0:	4443      	add	r3, r8
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	f843 2b04 	str.w	r2, [r3], #4
 800bfd8:	429f      	cmp	r7, r3
 800bfda:	d2fb      	bcs.n	800bfd4 <__hexnan+0xcc>
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	b91b      	cbnz	r3, 800bfe8 <__hexnan+0xe0>
 800bfe0:	4547      	cmp	r7, r8
 800bfe2:	d128      	bne.n	800c036 <__hexnan+0x12e>
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	603b      	str	r3, [r7, #0]
 800bfe8:	2005      	movs	r0, #5
 800bfea:	b007      	add	sp, #28
 800bfec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bff0:	3501      	adds	r5, #1
 800bff2:	2d08      	cmp	r5, #8
 800bff4:	f10b 0b01 	add.w	fp, fp, #1
 800bff8:	dd06      	ble.n	800c008 <__hexnan+0x100>
 800bffa:	4544      	cmp	r4, r8
 800bffc:	d9c1      	bls.n	800bf82 <__hexnan+0x7a>
 800bffe:	2300      	movs	r3, #0
 800c000:	f844 3c04 	str.w	r3, [r4, #-4]
 800c004:	2501      	movs	r5, #1
 800c006:	3c04      	subs	r4, #4
 800c008:	6822      	ldr	r2, [r4, #0]
 800c00a:	f000 000f 	and.w	r0, r0, #15
 800c00e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c012:	6020      	str	r0, [r4, #0]
 800c014:	e7b5      	b.n	800bf82 <__hexnan+0x7a>
 800c016:	2508      	movs	r5, #8
 800c018:	e7b3      	b.n	800bf82 <__hexnan+0x7a>
 800c01a:	9b01      	ldr	r3, [sp, #4]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d0dd      	beq.n	800bfdc <__hexnan+0xd4>
 800c020:	f1c3 0320 	rsb	r3, r3, #32
 800c024:	f04f 32ff 	mov.w	r2, #4294967295
 800c028:	40da      	lsrs	r2, r3
 800c02a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c02e:	4013      	ands	r3, r2
 800c030:	f846 3c04 	str.w	r3, [r6, #-4]
 800c034:	e7d2      	b.n	800bfdc <__hexnan+0xd4>
 800c036:	3f04      	subs	r7, #4
 800c038:	e7d0      	b.n	800bfdc <__hexnan+0xd4>
 800c03a:	2004      	movs	r0, #4
 800c03c:	e7d5      	b.n	800bfea <__hexnan+0xe2>

0800c03e <__ascii_mbtowc>:
 800c03e:	b082      	sub	sp, #8
 800c040:	b901      	cbnz	r1, 800c044 <__ascii_mbtowc+0x6>
 800c042:	a901      	add	r1, sp, #4
 800c044:	b142      	cbz	r2, 800c058 <__ascii_mbtowc+0x1a>
 800c046:	b14b      	cbz	r3, 800c05c <__ascii_mbtowc+0x1e>
 800c048:	7813      	ldrb	r3, [r2, #0]
 800c04a:	600b      	str	r3, [r1, #0]
 800c04c:	7812      	ldrb	r2, [r2, #0]
 800c04e:	1e10      	subs	r0, r2, #0
 800c050:	bf18      	it	ne
 800c052:	2001      	movne	r0, #1
 800c054:	b002      	add	sp, #8
 800c056:	4770      	bx	lr
 800c058:	4610      	mov	r0, r2
 800c05a:	e7fb      	b.n	800c054 <__ascii_mbtowc+0x16>
 800c05c:	f06f 0001 	mvn.w	r0, #1
 800c060:	e7f8      	b.n	800c054 <__ascii_mbtowc+0x16>

0800c062 <_realloc_r>:
 800c062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c066:	4680      	mov	r8, r0
 800c068:	4615      	mov	r5, r2
 800c06a:	460c      	mov	r4, r1
 800c06c:	b921      	cbnz	r1, 800c078 <_realloc_r+0x16>
 800c06e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c072:	4611      	mov	r1, r2
 800c074:	f7fd bca8 	b.w	80099c8 <_malloc_r>
 800c078:	b92a      	cbnz	r2, 800c086 <_realloc_r+0x24>
 800c07a:	f7fd fc31 	bl	80098e0 <_free_r>
 800c07e:	2400      	movs	r4, #0
 800c080:	4620      	mov	r0, r4
 800c082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c086:	f000 f840 	bl	800c10a <_malloc_usable_size_r>
 800c08a:	4285      	cmp	r5, r0
 800c08c:	4606      	mov	r6, r0
 800c08e:	d802      	bhi.n	800c096 <_realloc_r+0x34>
 800c090:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c094:	d8f4      	bhi.n	800c080 <_realloc_r+0x1e>
 800c096:	4629      	mov	r1, r5
 800c098:	4640      	mov	r0, r8
 800c09a:	f7fd fc95 	bl	80099c8 <_malloc_r>
 800c09e:	4607      	mov	r7, r0
 800c0a0:	2800      	cmp	r0, #0
 800c0a2:	d0ec      	beq.n	800c07e <_realloc_r+0x1c>
 800c0a4:	42b5      	cmp	r5, r6
 800c0a6:	462a      	mov	r2, r5
 800c0a8:	4621      	mov	r1, r4
 800c0aa:	bf28      	it	cs
 800c0ac:	4632      	movcs	r2, r6
 800c0ae:	f7fc fdb6 	bl	8008c1e <memcpy>
 800c0b2:	4621      	mov	r1, r4
 800c0b4:	4640      	mov	r0, r8
 800c0b6:	f7fd fc13 	bl	80098e0 <_free_r>
 800c0ba:	463c      	mov	r4, r7
 800c0bc:	e7e0      	b.n	800c080 <_realloc_r+0x1e>

0800c0be <__ascii_wctomb>:
 800c0be:	4603      	mov	r3, r0
 800c0c0:	4608      	mov	r0, r1
 800c0c2:	b141      	cbz	r1, 800c0d6 <__ascii_wctomb+0x18>
 800c0c4:	2aff      	cmp	r2, #255	@ 0xff
 800c0c6:	d904      	bls.n	800c0d2 <__ascii_wctomb+0x14>
 800c0c8:	228a      	movs	r2, #138	@ 0x8a
 800c0ca:	601a      	str	r2, [r3, #0]
 800c0cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c0d0:	4770      	bx	lr
 800c0d2:	700a      	strb	r2, [r1, #0]
 800c0d4:	2001      	movs	r0, #1
 800c0d6:	4770      	bx	lr

0800c0d8 <fiprintf>:
 800c0d8:	b40e      	push	{r1, r2, r3}
 800c0da:	b503      	push	{r0, r1, lr}
 800c0dc:	4601      	mov	r1, r0
 800c0de:	ab03      	add	r3, sp, #12
 800c0e0:	4805      	ldr	r0, [pc, #20]	@ (800c0f8 <fiprintf+0x20>)
 800c0e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0e6:	6800      	ldr	r0, [r0, #0]
 800c0e8:	9301      	str	r3, [sp, #4]
 800c0ea:	f7ff f9b1 	bl	800b450 <_vfiprintf_r>
 800c0ee:	b002      	add	sp, #8
 800c0f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0f4:	b003      	add	sp, #12
 800c0f6:	4770      	bx	lr
 800c0f8:	2000002c 	.word	0x2000002c

0800c0fc <abort>:
 800c0fc:	b508      	push	{r3, lr}
 800c0fe:	2006      	movs	r0, #6
 800c100:	f000 f834 	bl	800c16c <raise>
 800c104:	2001      	movs	r0, #1
 800c106:	f7f5 fdf9 	bl	8001cfc <_exit>

0800c10a <_malloc_usable_size_r>:
 800c10a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c10e:	1f18      	subs	r0, r3, #4
 800c110:	2b00      	cmp	r3, #0
 800c112:	bfbc      	itt	lt
 800c114:	580b      	ldrlt	r3, [r1, r0]
 800c116:	18c0      	addlt	r0, r0, r3
 800c118:	4770      	bx	lr

0800c11a <_raise_r>:
 800c11a:	291f      	cmp	r1, #31
 800c11c:	b538      	push	{r3, r4, r5, lr}
 800c11e:	4605      	mov	r5, r0
 800c120:	460c      	mov	r4, r1
 800c122:	d904      	bls.n	800c12e <_raise_r+0x14>
 800c124:	2316      	movs	r3, #22
 800c126:	6003      	str	r3, [r0, #0]
 800c128:	f04f 30ff 	mov.w	r0, #4294967295
 800c12c:	bd38      	pop	{r3, r4, r5, pc}
 800c12e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c130:	b112      	cbz	r2, 800c138 <_raise_r+0x1e>
 800c132:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c136:	b94b      	cbnz	r3, 800c14c <_raise_r+0x32>
 800c138:	4628      	mov	r0, r5
 800c13a:	f000 f831 	bl	800c1a0 <_getpid_r>
 800c13e:	4622      	mov	r2, r4
 800c140:	4601      	mov	r1, r0
 800c142:	4628      	mov	r0, r5
 800c144:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c148:	f000 b818 	b.w	800c17c <_kill_r>
 800c14c:	2b01      	cmp	r3, #1
 800c14e:	d00a      	beq.n	800c166 <_raise_r+0x4c>
 800c150:	1c59      	adds	r1, r3, #1
 800c152:	d103      	bne.n	800c15c <_raise_r+0x42>
 800c154:	2316      	movs	r3, #22
 800c156:	6003      	str	r3, [r0, #0]
 800c158:	2001      	movs	r0, #1
 800c15a:	e7e7      	b.n	800c12c <_raise_r+0x12>
 800c15c:	2100      	movs	r1, #0
 800c15e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c162:	4620      	mov	r0, r4
 800c164:	4798      	blx	r3
 800c166:	2000      	movs	r0, #0
 800c168:	e7e0      	b.n	800c12c <_raise_r+0x12>
	...

0800c16c <raise>:
 800c16c:	4b02      	ldr	r3, [pc, #8]	@ (800c178 <raise+0xc>)
 800c16e:	4601      	mov	r1, r0
 800c170:	6818      	ldr	r0, [r3, #0]
 800c172:	f7ff bfd2 	b.w	800c11a <_raise_r>
 800c176:	bf00      	nop
 800c178:	2000002c 	.word	0x2000002c

0800c17c <_kill_r>:
 800c17c:	b538      	push	{r3, r4, r5, lr}
 800c17e:	4d07      	ldr	r5, [pc, #28]	@ (800c19c <_kill_r+0x20>)
 800c180:	2300      	movs	r3, #0
 800c182:	4604      	mov	r4, r0
 800c184:	4608      	mov	r0, r1
 800c186:	4611      	mov	r1, r2
 800c188:	602b      	str	r3, [r5, #0]
 800c18a:	f7f5 fda7 	bl	8001cdc <_kill>
 800c18e:	1c43      	adds	r3, r0, #1
 800c190:	d102      	bne.n	800c198 <_kill_r+0x1c>
 800c192:	682b      	ldr	r3, [r5, #0]
 800c194:	b103      	cbz	r3, 800c198 <_kill_r+0x1c>
 800c196:	6023      	str	r3, [r4, #0]
 800c198:	bd38      	pop	{r3, r4, r5, pc}
 800c19a:	bf00      	nop
 800c19c:	20009e04 	.word	0x20009e04

0800c1a0 <_getpid_r>:
 800c1a0:	f7f5 bd94 	b.w	8001ccc <_getpid>
 800c1a4:	0000      	movs	r0, r0
	...

0800c1a8 <log>:
 800c1a8:	b538      	push	{r3, r4, r5, lr}
 800c1aa:	ed2d 8b02 	vpush	{d8}
 800c1ae:	ec55 4b10 	vmov	r4, r5, d0
 800c1b2:	f000 f8d5 	bl	800c360 <__ieee754_log>
 800c1b6:	4622      	mov	r2, r4
 800c1b8:	462b      	mov	r3, r5
 800c1ba:	4620      	mov	r0, r4
 800c1bc:	4629      	mov	r1, r5
 800c1be:	eeb0 8a40 	vmov.f32	s16, s0
 800c1c2:	eef0 8a60 	vmov.f32	s17, s1
 800c1c6:	f7f4 fcd9 	bl	8000b7c <__aeabi_dcmpun>
 800c1ca:	b998      	cbnz	r0, 800c1f4 <log+0x4c>
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	4620      	mov	r0, r4
 800c1d2:	4629      	mov	r1, r5
 800c1d4:	f7f4 fcc8 	bl	8000b68 <__aeabi_dcmpgt>
 800c1d8:	b960      	cbnz	r0, 800c1f4 <log+0x4c>
 800c1da:	2200      	movs	r2, #0
 800c1dc:	2300      	movs	r3, #0
 800c1de:	4620      	mov	r0, r4
 800c1e0:	4629      	mov	r1, r5
 800c1e2:	f7f4 fc99 	bl	8000b18 <__aeabi_dcmpeq>
 800c1e6:	b160      	cbz	r0, 800c202 <log+0x5a>
 800c1e8:	f7fc fcec 	bl	8008bc4 <__errno>
 800c1ec:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800c218 <log+0x70>
 800c1f0:	2322      	movs	r3, #34	@ 0x22
 800c1f2:	6003      	str	r3, [r0, #0]
 800c1f4:	eeb0 0a48 	vmov.f32	s0, s16
 800c1f8:	eef0 0a68 	vmov.f32	s1, s17
 800c1fc:	ecbd 8b02 	vpop	{d8}
 800c200:	bd38      	pop	{r3, r4, r5, pc}
 800c202:	f7fc fcdf 	bl	8008bc4 <__errno>
 800c206:	ecbd 8b02 	vpop	{d8}
 800c20a:	2321      	movs	r3, #33	@ 0x21
 800c20c:	6003      	str	r3, [r0, #0]
 800c20e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c212:	4803      	ldr	r0, [pc, #12]	@ (800c220 <log+0x78>)
 800c214:	f7ff bba0 	b.w	800b958 <nan>
 800c218:	00000000 	.word	0x00000000
 800c21c:	fff00000 	.word	0xfff00000
 800c220:	0800d365 	.word	0x0800d365

0800c224 <expf>:
 800c224:	b508      	push	{r3, lr}
 800c226:	ed2d 8b02 	vpush	{d8}
 800c22a:	eef0 8a40 	vmov.f32	s17, s0
 800c22e:	f000 fa4d 	bl	800c6cc <__ieee754_expf>
 800c232:	eeb0 8a40 	vmov.f32	s16, s0
 800c236:	eeb0 0a68 	vmov.f32	s0, s17
 800c23a:	f000 f847 	bl	800c2cc <finitef>
 800c23e:	b160      	cbz	r0, 800c25a <expf+0x36>
 800c240:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 800c280 <expf+0x5c>
 800c244:	eef4 8ae7 	vcmpe.f32	s17, s15
 800c248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c24c:	dd0a      	ble.n	800c264 <expf+0x40>
 800c24e:	f7fc fcb9 	bl	8008bc4 <__errno>
 800c252:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 800c284 <expf+0x60>
 800c256:	2322      	movs	r3, #34	@ 0x22
 800c258:	6003      	str	r3, [r0, #0]
 800c25a:	eeb0 0a48 	vmov.f32	s0, s16
 800c25e:	ecbd 8b02 	vpop	{d8}
 800c262:	bd08      	pop	{r3, pc}
 800c264:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800c288 <expf+0x64>
 800c268:	eef4 8ae7 	vcmpe.f32	s17, s15
 800c26c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c270:	d5f3      	bpl.n	800c25a <expf+0x36>
 800c272:	f7fc fca7 	bl	8008bc4 <__errno>
 800c276:	2322      	movs	r3, #34	@ 0x22
 800c278:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 800c28c <expf+0x68>
 800c27c:	6003      	str	r3, [r0, #0]
 800c27e:	e7ec      	b.n	800c25a <expf+0x36>
 800c280:	42b17217 	.word	0x42b17217
 800c284:	7f800000 	.word	0x7f800000
 800c288:	c2cff1b5 	.word	0xc2cff1b5
 800c28c:	00000000 	.word	0x00000000

0800c290 <sqrtf>:
 800c290:	b508      	push	{r3, lr}
 800c292:	ed2d 8b02 	vpush	{d8}
 800c296:	eeb0 8a40 	vmov.f32	s16, s0
 800c29a:	f000 f85b 	bl	800c354 <__ieee754_sqrtf>
 800c29e:	eeb4 8a48 	vcmp.f32	s16, s16
 800c2a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2a6:	d60c      	bvs.n	800c2c2 <sqrtf+0x32>
 800c2a8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800c2c8 <sqrtf+0x38>
 800c2ac:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c2b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2b4:	d505      	bpl.n	800c2c2 <sqrtf+0x32>
 800c2b6:	f7fc fc85 	bl	8008bc4 <__errno>
 800c2ba:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c2be:	2321      	movs	r3, #33	@ 0x21
 800c2c0:	6003      	str	r3, [r0, #0]
 800c2c2:	ecbd 8b02 	vpop	{d8}
 800c2c6:	bd08      	pop	{r3, pc}
 800c2c8:	00000000 	.word	0x00000000

0800c2cc <finitef>:
 800c2cc:	ee10 3a10 	vmov	r3, s0
 800c2d0:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800c2d4:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800c2d8:	bfac      	ite	ge
 800c2da:	2000      	movge	r0, #0
 800c2dc:	2001      	movlt	r0, #1
 800c2de:	4770      	bx	lr

0800c2e0 <fminf>:
 800c2e0:	b508      	push	{r3, lr}
 800c2e2:	ed2d 8b02 	vpush	{d8}
 800c2e6:	eeb0 8a40 	vmov.f32	s16, s0
 800c2ea:	eef0 8a60 	vmov.f32	s17, s1
 800c2ee:	f000 f815 	bl	800c31c <__fpclassifyf>
 800c2f2:	b930      	cbnz	r0, 800c302 <fminf+0x22>
 800c2f4:	eeb0 8a68 	vmov.f32	s16, s17
 800c2f8:	eeb0 0a48 	vmov.f32	s0, s16
 800c2fc:	ecbd 8b02 	vpop	{d8}
 800c300:	bd08      	pop	{r3, pc}
 800c302:	eeb0 0a68 	vmov.f32	s0, s17
 800c306:	f000 f809 	bl	800c31c <__fpclassifyf>
 800c30a:	2800      	cmp	r0, #0
 800c30c:	d0f4      	beq.n	800c2f8 <fminf+0x18>
 800c30e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c316:	d5ed      	bpl.n	800c2f4 <fminf+0x14>
 800c318:	e7ee      	b.n	800c2f8 <fminf+0x18>
	...

0800c31c <__fpclassifyf>:
 800c31c:	ee10 3a10 	vmov	r3, s0
 800c320:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800c324:	d00d      	beq.n	800c342 <__fpclassifyf+0x26>
 800c326:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800c32a:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800c32e:	d30a      	bcc.n	800c346 <__fpclassifyf+0x2a>
 800c330:	4b07      	ldr	r3, [pc, #28]	@ (800c350 <__fpclassifyf+0x34>)
 800c332:	1e42      	subs	r2, r0, #1
 800c334:	429a      	cmp	r2, r3
 800c336:	d908      	bls.n	800c34a <__fpclassifyf+0x2e>
 800c338:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800c33c:	4258      	negs	r0, r3
 800c33e:	4158      	adcs	r0, r3
 800c340:	4770      	bx	lr
 800c342:	2002      	movs	r0, #2
 800c344:	4770      	bx	lr
 800c346:	2004      	movs	r0, #4
 800c348:	4770      	bx	lr
 800c34a:	2003      	movs	r0, #3
 800c34c:	4770      	bx	lr
 800c34e:	bf00      	nop
 800c350:	007ffffe 	.word	0x007ffffe

0800c354 <__ieee754_sqrtf>:
 800c354:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c358:	4770      	bx	lr
 800c35a:	0000      	movs	r0, r0
 800c35c:	0000      	movs	r0, r0
	...

0800c360 <__ieee754_log>:
 800c360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c364:	ec51 0b10 	vmov	r0, r1, d0
 800c368:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800c36c:	b087      	sub	sp, #28
 800c36e:	460d      	mov	r5, r1
 800c370:	da26      	bge.n	800c3c0 <__ieee754_log+0x60>
 800c372:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c376:	4303      	orrs	r3, r0
 800c378:	4602      	mov	r2, r0
 800c37a:	d10a      	bne.n	800c392 <__ieee754_log+0x32>
 800c37c:	49ce      	ldr	r1, [pc, #824]	@ (800c6b8 <__ieee754_log+0x358>)
 800c37e:	2200      	movs	r2, #0
 800c380:	2300      	movs	r3, #0
 800c382:	2000      	movs	r0, #0
 800c384:	f7f4 fa8a 	bl	800089c <__aeabi_ddiv>
 800c388:	ec41 0b10 	vmov	d0, r0, r1
 800c38c:	b007      	add	sp, #28
 800c38e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c392:	2900      	cmp	r1, #0
 800c394:	da05      	bge.n	800c3a2 <__ieee754_log+0x42>
 800c396:	460b      	mov	r3, r1
 800c398:	f7f3 ff9e 	bl	80002d8 <__aeabi_dsub>
 800c39c:	2200      	movs	r2, #0
 800c39e:	2300      	movs	r3, #0
 800c3a0:	e7f0      	b.n	800c384 <__ieee754_log+0x24>
 800c3a2:	4bc6      	ldr	r3, [pc, #792]	@ (800c6bc <__ieee754_log+0x35c>)
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	f7f4 f94f 	bl	8000648 <__aeabi_dmul>
 800c3aa:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800c3ae:	460d      	mov	r5, r1
 800c3b0:	4ac3      	ldr	r2, [pc, #780]	@ (800c6c0 <__ieee754_log+0x360>)
 800c3b2:	4295      	cmp	r5, r2
 800c3b4:	dd06      	ble.n	800c3c4 <__ieee754_log+0x64>
 800c3b6:	4602      	mov	r2, r0
 800c3b8:	460b      	mov	r3, r1
 800c3ba:	f7f3 ff8f 	bl	80002dc <__adddf3>
 800c3be:	e7e3      	b.n	800c388 <__ieee754_log+0x28>
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	e7f5      	b.n	800c3b0 <__ieee754_log+0x50>
 800c3c4:	152c      	asrs	r4, r5, #20
 800c3c6:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800c3ca:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800c3ce:	441c      	add	r4, r3
 800c3d0:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800c3d4:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 800c3d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c3dc:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 800c3e0:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800c3e4:	ea42 0105 	orr.w	r1, r2, r5
 800c3e8:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	4bb5      	ldr	r3, [pc, #724]	@ (800c6c4 <__ieee754_log+0x364>)
 800c3f0:	f7f3 ff72 	bl	80002d8 <__aeabi_dsub>
 800c3f4:	1cab      	adds	r3, r5, #2
 800c3f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c3fa:	2b02      	cmp	r3, #2
 800c3fc:	4682      	mov	sl, r0
 800c3fe:	468b      	mov	fp, r1
 800c400:	f04f 0200 	mov.w	r2, #0
 800c404:	dc53      	bgt.n	800c4ae <__ieee754_log+0x14e>
 800c406:	2300      	movs	r3, #0
 800c408:	f7f4 fb86 	bl	8000b18 <__aeabi_dcmpeq>
 800c40c:	b1d0      	cbz	r0, 800c444 <__ieee754_log+0xe4>
 800c40e:	2c00      	cmp	r4, #0
 800c410:	f000 8120 	beq.w	800c654 <__ieee754_log+0x2f4>
 800c414:	4620      	mov	r0, r4
 800c416:	f7f4 f8ad 	bl	8000574 <__aeabi_i2d>
 800c41a:	a391      	add	r3, pc, #580	@ (adr r3, 800c660 <__ieee754_log+0x300>)
 800c41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c420:	4606      	mov	r6, r0
 800c422:	460f      	mov	r7, r1
 800c424:	f7f4 f910 	bl	8000648 <__aeabi_dmul>
 800c428:	a38f      	add	r3, pc, #572	@ (adr r3, 800c668 <__ieee754_log+0x308>)
 800c42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c42e:	4604      	mov	r4, r0
 800c430:	460d      	mov	r5, r1
 800c432:	4630      	mov	r0, r6
 800c434:	4639      	mov	r1, r7
 800c436:	f7f4 f907 	bl	8000648 <__aeabi_dmul>
 800c43a:	4602      	mov	r2, r0
 800c43c:	460b      	mov	r3, r1
 800c43e:	4620      	mov	r0, r4
 800c440:	4629      	mov	r1, r5
 800c442:	e7ba      	b.n	800c3ba <__ieee754_log+0x5a>
 800c444:	a38a      	add	r3, pc, #552	@ (adr r3, 800c670 <__ieee754_log+0x310>)
 800c446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c44a:	4650      	mov	r0, sl
 800c44c:	4659      	mov	r1, fp
 800c44e:	f7f4 f8fb 	bl	8000648 <__aeabi_dmul>
 800c452:	4602      	mov	r2, r0
 800c454:	460b      	mov	r3, r1
 800c456:	2000      	movs	r0, #0
 800c458:	499b      	ldr	r1, [pc, #620]	@ (800c6c8 <__ieee754_log+0x368>)
 800c45a:	f7f3 ff3d 	bl	80002d8 <__aeabi_dsub>
 800c45e:	4652      	mov	r2, sl
 800c460:	4606      	mov	r6, r0
 800c462:	460f      	mov	r7, r1
 800c464:	465b      	mov	r3, fp
 800c466:	4650      	mov	r0, sl
 800c468:	4659      	mov	r1, fp
 800c46a:	f7f4 f8ed 	bl	8000648 <__aeabi_dmul>
 800c46e:	4602      	mov	r2, r0
 800c470:	460b      	mov	r3, r1
 800c472:	4630      	mov	r0, r6
 800c474:	4639      	mov	r1, r7
 800c476:	f7f4 f8e7 	bl	8000648 <__aeabi_dmul>
 800c47a:	4606      	mov	r6, r0
 800c47c:	460f      	mov	r7, r1
 800c47e:	b914      	cbnz	r4, 800c486 <__ieee754_log+0x126>
 800c480:	4632      	mov	r2, r6
 800c482:	463b      	mov	r3, r7
 800c484:	e0a0      	b.n	800c5c8 <__ieee754_log+0x268>
 800c486:	4620      	mov	r0, r4
 800c488:	f7f4 f874 	bl	8000574 <__aeabi_i2d>
 800c48c:	a374      	add	r3, pc, #464	@ (adr r3, 800c660 <__ieee754_log+0x300>)
 800c48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c492:	4680      	mov	r8, r0
 800c494:	4689      	mov	r9, r1
 800c496:	f7f4 f8d7 	bl	8000648 <__aeabi_dmul>
 800c49a:	a373      	add	r3, pc, #460	@ (adr r3, 800c668 <__ieee754_log+0x308>)
 800c49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a0:	4604      	mov	r4, r0
 800c4a2:	460d      	mov	r5, r1
 800c4a4:	4640      	mov	r0, r8
 800c4a6:	4649      	mov	r1, r9
 800c4a8:	f7f4 f8ce 	bl	8000648 <__aeabi_dmul>
 800c4ac:	e0a5      	b.n	800c5fa <__ieee754_log+0x29a>
 800c4ae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c4b2:	f7f3 ff13 	bl	80002dc <__adddf3>
 800c4b6:	4602      	mov	r2, r0
 800c4b8:	460b      	mov	r3, r1
 800c4ba:	4650      	mov	r0, sl
 800c4bc:	4659      	mov	r1, fp
 800c4be:	f7f4 f9ed 	bl	800089c <__aeabi_ddiv>
 800c4c2:	e9cd 0100 	strd	r0, r1, [sp]
 800c4c6:	4620      	mov	r0, r4
 800c4c8:	f7f4 f854 	bl	8000574 <__aeabi_i2d>
 800c4cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4d4:	4610      	mov	r0, r2
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	f7f4 f8b6 	bl	8000648 <__aeabi_dmul>
 800c4dc:	4602      	mov	r2, r0
 800c4de:	460b      	mov	r3, r1
 800c4e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c4e4:	f7f4 f8b0 	bl	8000648 <__aeabi_dmul>
 800c4e8:	a363      	add	r3, pc, #396	@ (adr r3, 800c678 <__ieee754_log+0x318>)
 800c4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ee:	4680      	mov	r8, r0
 800c4f0:	4689      	mov	r9, r1
 800c4f2:	f7f4 f8a9 	bl	8000648 <__aeabi_dmul>
 800c4f6:	a362      	add	r3, pc, #392	@ (adr r3, 800c680 <__ieee754_log+0x320>)
 800c4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4fc:	f7f3 feee 	bl	80002dc <__adddf3>
 800c500:	4642      	mov	r2, r8
 800c502:	464b      	mov	r3, r9
 800c504:	f7f4 f8a0 	bl	8000648 <__aeabi_dmul>
 800c508:	a35f      	add	r3, pc, #380	@ (adr r3, 800c688 <__ieee754_log+0x328>)
 800c50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c50e:	f7f3 fee5 	bl	80002dc <__adddf3>
 800c512:	4642      	mov	r2, r8
 800c514:	464b      	mov	r3, r9
 800c516:	f7f4 f897 	bl	8000648 <__aeabi_dmul>
 800c51a:	a35d      	add	r3, pc, #372	@ (adr r3, 800c690 <__ieee754_log+0x330>)
 800c51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c520:	f7f3 fedc 	bl	80002dc <__adddf3>
 800c524:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c528:	f7f4 f88e 	bl	8000648 <__aeabi_dmul>
 800c52c:	a35a      	add	r3, pc, #360	@ (adr r3, 800c698 <__ieee754_log+0x338>)
 800c52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c532:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c536:	4640      	mov	r0, r8
 800c538:	4649      	mov	r1, r9
 800c53a:	f7f4 f885 	bl	8000648 <__aeabi_dmul>
 800c53e:	a358      	add	r3, pc, #352	@ (adr r3, 800c6a0 <__ieee754_log+0x340>)
 800c540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c544:	f7f3 feca 	bl	80002dc <__adddf3>
 800c548:	4642      	mov	r2, r8
 800c54a:	464b      	mov	r3, r9
 800c54c:	f7f4 f87c 	bl	8000648 <__aeabi_dmul>
 800c550:	a355      	add	r3, pc, #340	@ (adr r3, 800c6a8 <__ieee754_log+0x348>)
 800c552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c556:	f7f3 fec1 	bl	80002dc <__adddf3>
 800c55a:	4642      	mov	r2, r8
 800c55c:	464b      	mov	r3, r9
 800c55e:	f7f4 f873 	bl	8000648 <__aeabi_dmul>
 800c562:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800c566:	4602      	mov	r2, r0
 800c568:	460b      	mov	r3, r1
 800c56a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800c56e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c572:	f7f3 feb3 	bl	80002dc <__adddf3>
 800c576:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800c57a:	3551      	adds	r5, #81	@ 0x51
 800c57c:	4335      	orrs	r5, r6
 800c57e:	2d00      	cmp	r5, #0
 800c580:	4680      	mov	r8, r0
 800c582:	4689      	mov	r9, r1
 800c584:	dd48      	ble.n	800c618 <__ieee754_log+0x2b8>
 800c586:	4b50      	ldr	r3, [pc, #320]	@ (800c6c8 <__ieee754_log+0x368>)
 800c588:	2200      	movs	r2, #0
 800c58a:	4650      	mov	r0, sl
 800c58c:	4659      	mov	r1, fp
 800c58e:	f7f4 f85b 	bl	8000648 <__aeabi_dmul>
 800c592:	4652      	mov	r2, sl
 800c594:	465b      	mov	r3, fp
 800c596:	f7f4 f857 	bl	8000648 <__aeabi_dmul>
 800c59a:	4602      	mov	r2, r0
 800c59c:	460b      	mov	r3, r1
 800c59e:	4606      	mov	r6, r0
 800c5a0:	460f      	mov	r7, r1
 800c5a2:	4640      	mov	r0, r8
 800c5a4:	4649      	mov	r1, r9
 800c5a6:	f7f3 fe99 	bl	80002dc <__adddf3>
 800c5aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c5ae:	f7f4 f84b 	bl	8000648 <__aeabi_dmul>
 800c5b2:	4680      	mov	r8, r0
 800c5b4:	4689      	mov	r9, r1
 800c5b6:	b964      	cbnz	r4, 800c5d2 <__ieee754_log+0x272>
 800c5b8:	4602      	mov	r2, r0
 800c5ba:	460b      	mov	r3, r1
 800c5bc:	4630      	mov	r0, r6
 800c5be:	4639      	mov	r1, r7
 800c5c0:	f7f3 fe8a 	bl	80002d8 <__aeabi_dsub>
 800c5c4:	4602      	mov	r2, r0
 800c5c6:	460b      	mov	r3, r1
 800c5c8:	4650      	mov	r0, sl
 800c5ca:	4659      	mov	r1, fp
 800c5cc:	f7f3 fe84 	bl	80002d8 <__aeabi_dsub>
 800c5d0:	e6da      	b.n	800c388 <__ieee754_log+0x28>
 800c5d2:	a323      	add	r3, pc, #140	@ (adr r3, 800c660 <__ieee754_log+0x300>)
 800c5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5dc:	f7f4 f834 	bl	8000648 <__aeabi_dmul>
 800c5e0:	a321      	add	r3, pc, #132	@ (adr r3, 800c668 <__ieee754_log+0x308>)
 800c5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e6:	4604      	mov	r4, r0
 800c5e8:	460d      	mov	r5, r1
 800c5ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5ee:	f7f4 f82b 	bl	8000648 <__aeabi_dmul>
 800c5f2:	4642      	mov	r2, r8
 800c5f4:	464b      	mov	r3, r9
 800c5f6:	f7f3 fe71 	bl	80002dc <__adddf3>
 800c5fa:	4602      	mov	r2, r0
 800c5fc:	460b      	mov	r3, r1
 800c5fe:	4630      	mov	r0, r6
 800c600:	4639      	mov	r1, r7
 800c602:	f7f3 fe69 	bl	80002d8 <__aeabi_dsub>
 800c606:	4652      	mov	r2, sl
 800c608:	465b      	mov	r3, fp
 800c60a:	f7f3 fe65 	bl	80002d8 <__aeabi_dsub>
 800c60e:	4602      	mov	r2, r0
 800c610:	460b      	mov	r3, r1
 800c612:	4620      	mov	r0, r4
 800c614:	4629      	mov	r1, r5
 800c616:	e7d9      	b.n	800c5cc <__ieee754_log+0x26c>
 800c618:	4602      	mov	r2, r0
 800c61a:	460b      	mov	r3, r1
 800c61c:	4650      	mov	r0, sl
 800c61e:	4659      	mov	r1, fp
 800c620:	f7f3 fe5a 	bl	80002d8 <__aeabi_dsub>
 800c624:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c628:	f7f4 f80e 	bl	8000648 <__aeabi_dmul>
 800c62c:	4606      	mov	r6, r0
 800c62e:	460f      	mov	r7, r1
 800c630:	2c00      	cmp	r4, #0
 800c632:	f43f af25 	beq.w	800c480 <__ieee754_log+0x120>
 800c636:	a30a      	add	r3, pc, #40	@ (adr r3, 800c660 <__ieee754_log+0x300>)
 800c638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c63c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c640:	f7f4 f802 	bl	8000648 <__aeabi_dmul>
 800c644:	a308      	add	r3, pc, #32	@ (adr r3, 800c668 <__ieee754_log+0x308>)
 800c646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c64a:	4604      	mov	r4, r0
 800c64c:	460d      	mov	r5, r1
 800c64e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c652:	e729      	b.n	800c4a8 <__ieee754_log+0x148>
 800c654:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800c6b0 <__ieee754_log+0x350>
 800c658:	e698      	b.n	800c38c <__ieee754_log+0x2c>
 800c65a:	bf00      	nop
 800c65c:	f3af 8000 	nop.w
 800c660:	fee00000 	.word	0xfee00000
 800c664:	3fe62e42 	.word	0x3fe62e42
 800c668:	35793c76 	.word	0x35793c76
 800c66c:	3dea39ef 	.word	0x3dea39ef
 800c670:	55555555 	.word	0x55555555
 800c674:	3fd55555 	.word	0x3fd55555
 800c678:	df3e5244 	.word	0xdf3e5244
 800c67c:	3fc2f112 	.word	0x3fc2f112
 800c680:	96cb03de 	.word	0x96cb03de
 800c684:	3fc74664 	.word	0x3fc74664
 800c688:	94229359 	.word	0x94229359
 800c68c:	3fd24924 	.word	0x3fd24924
 800c690:	55555593 	.word	0x55555593
 800c694:	3fe55555 	.word	0x3fe55555
 800c698:	d078c69f 	.word	0xd078c69f
 800c69c:	3fc39a09 	.word	0x3fc39a09
 800c6a0:	1d8e78af 	.word	0x1d8e78af
 800c6a4:	3fcc71c5 	.word	0x3fcc71c5
 800c6a8:	9997fa04 	.word	0x9997fa04
 800c6ac:	3fd99999 	.word	0x3fd99999
	...
 800c6b8:	c3500000 	.word	0xc3500000
 800c6bc:	43500000 	.word	0x43500000
 800c6c0:	7fefffff 	.word	0x7fefffff
 800c6c4:	3ff00000 	.word	0x3ff00000
 800c6c8:	3fe00000 	.word	0x3fe00000

0800c6cc <__ieee754_expf>:
 800c6cc:	ee10 2a10 	vmov	r2, s0
 800c6d0:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 800c6d4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c6d8:	d902      	bls.n	800c6e0 <__ieee754_expf+0x14>
 800c6da:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c6de:	4770      	bx	lr
 800c6e0:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800c6e4:	d106      	bne.n	800c6f4 <__ieee754_expf+0x28>
 800c6e6:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 800c820 <__ieee754_expf+0x154>
 800c6ea:	2900      	cmp	r1, #0
 800c6ec:	bf18      	it	ne
 800c6ee:	eeb0 0a67 	vmovne.f32	s0, s15
 800c6f2:	4770      	bx	lr
 800c6f4:	484b      	ldr	r0, [pc, #300]	@ (800c824 <__ieee754_expf+0x158>)
 800c6f6:	4282      	cmp	r2, r0
 800c6f8:	dd02      	ble.n	800c700 <__ieee754_expf+0x34>
 800c6fa:	2000      	movs	r0, #0
 800c6fc:	f000 b8d4 	b.w	800c8a8 <__math_oflowf>
 800c700:	2a00      	cmp	r2, #0
 800c702:	da05      	bge.n	800c710 <__ieee754_expf+0x44>
 800c704:	4a48      	ldr	r2, [pc, #288]	@ (800c828 <__ieee754_expf+0x15c>)
 800c706:	4293      	cmp	r3, r2
 800c708:	d902      	bls.n	800c710 <__ieee754_expf+0x44>
 800c70a:	2000      	movs	r0, #0
 800c70c:	f000 b8c6 	b.w	800c89c <__math_uflowf>
 800c710:	4a46      	ldr	r2, [pc, #280]	@ (800c82c <__ieee754_expf+0x160>)
 800c712:	4293      	cmp	r3, r2
 800c714:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800c718:	d952      	bls.n	800c7c0 <__ieee754_expf+0xf4>
 800c71a:	4a45      	ldr	r2, [pc, #276]	@ (800c830 <__ieee754_expf+0x164>)
 800c71c:	4293      	cmp	r3, r2
 800c71e:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800c722:	d834      	bhi.n	800c78e <__ieee754_expf+0xc2>
 800c724:	4b43      	ldr	r3, [pc, #268]	@ (800c834 <__ieee754_expf+0x168>)
 800c726:	4413      	add	r3, r2
 800c728:	ed93 7a00 	vldr	s14, [r3]
 800c72c:	4b42      	ldr	r3, [pc, #264]	@ (800c838 <__ieee754_expf+0x16c>)
 800c72e:	4413      	add	r3, r2
 800c730:	ee30 7a47 	vsub.f32	s14, s0, s14
 800c734:	f1c1 0201 	rsb	r2, r1, #1
 800c738:	edd3 7a00 	vldr	s15, [r3]
 800c73c:	1a52      	subs	r2, r2, r1
 800c73e:	ee37 0a67 	vsub.f32	s0, s14, s15
 800c742:	ee20 6a00 	vmul.f32	s12, s0, s0
 800c746:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 800c83c <__ieee754_expf+0x170>
 800c74a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c840 <__ieee754_expf+0x174>
 800c74e:	eee6 6a05 	vfma.f32	s13, s12, s10
 800c752:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 800c844 <__ieee754_expf+0x178>
 800c756:	eea6 5a86 	vfma.f32	s10, s13, s12
 800c75a:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800c848 <__ieee754_expf+0x17c>
 800c75e:	eee5 6a06 	vfma.f32	s13, s10, s12
 800c762:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 800c84c <__ieee754_expf+0x180>
 800c766:	eea6 5a86 	vfma.f32	s10, s13, s12
 800c76a:	eef0 6a40 	vmov.f32	s13, s0
 800c76e:	eee5 6a46 	vfms.f32	s13, s10, s12
 800c772:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800c776:	ee20 5a26 	vmul.f32	s10, s0, s13
 800c77a:	bb92      	cbnz	r2, 800c7e2 <__ieee754_expf+0x116>
 800c77c:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800c780:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800c784:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c788:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800c78c:	4770      	bx	lr
 800c78e:	4b30      	ldr	r3, [pc, #192]	@ (800c850 <__ieee754_expf+0x184>)
 800c790:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800c854 <__ieee754_expf+0x188>
 800c794:	eddf 6a30 	vldr	s13, [pc, #192]	@ 800c858 <__ieee754_expf+0x18c>
 800c798:	4413      	add	r3, r2
 800c79a:	edd3 7a00 	vldr	s15, [r3]
 800c79e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c7a2:	eeb0 7a40 	vmov.f32	s14, s0
 800c7a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c7aa:	ee17 2a90 	vmov	r2, s15
 800c7ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c7b2:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800c7b6:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800c85c <__ieee754_expf+0x190>
 800c7ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c7be:	e7be      	b.n	800c73e <__ieee754_expf+0x72>
 800c7c0:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 800c7c4:	d20b      	bcs.n	800c7de <__ieee754_expf+0x112>
 800c7c6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800c860 <__ieee754_expf+0x194>
 800c7ca:	ee70 6a26 	vadd.f32	s13, s0, s13
 800c7ce:	eef4 6ae5 	vcmpe.f32	s13, s11
 800c7d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7d6:	dd02      	ble.n	800c7de <__ieee754_expf+0x112>
 800c7d8:	ee30 0a25 	vadd.f32	s0, s0, s11
 800c7dc:	4770      	bx	lr
 800c7de:	2200      	movs	r2, #0
 800c7e0:	e7af      	b.n	800c742 <__ieee754_expf+0x76>
 800c7e2:	ee36 6a66 	vsub.f32	s12, s12, s13
 800c7e6:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 800c7ea:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800c7ee:	bfb8      	it	lt
 800c7f0:	3264      	addlt	r2, #100	@ 0x64
 800c7f2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c7f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c7fa:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800c7fe:	ee17 3a90 	vmov	r3, s15
 800c802:	bfab      	itete	ge
 800c804:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800c808:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800c80c:	ee00 3a10 	vmovge	s0, r3
 800c810:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 800c864 <__ieee754_expf+0x198>
 800c814:	bfbc      	itt	lt
 800c816:	ee00 3a10 	vmovlt	s0, r3
 800c81a:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800c81e:	4770      	bx	lr
 800c820:	00000000 	.word	0x00000000
 800c824:	42b17217 	.word	0x42b17217
 800c828:	42cff1b5 	.word	0x42cff1b5
 800c82c:	3eb17218 	.word	0x3eb17218
 800c830:	3f851591 	.word	0x3f851591
 800c834:	0800d3d0 	.word	0x0800d3d0
 800c838:	0800d3c8 	.word	0x0800d3c8
 800c83c:	3331bb4c 	.word	0x3331bb4c
 800c840:	b5ddea0e 	.word	0xb5ddea0e
 800c844:	388ab355 	.word	0x388ab355
 800c848:	bb360b61 	.word	0xbb360b61
 800c84c:	3e2aaaab 	.word	0x3e2aaaab
 800c850:	0800d3d8 	.word	0x0800d3d8
 800c854:	3fb8aa3b 	.word	0x3fb8aa3b
 800c858:	3f317180 	.word	0x3f317180
 800c85c:	3717f7d1 	.word	0x3717f7d1
 800c860:	7149f2ca 	.word	0x7149f2ca
 800c864:	0d800000 	.word	0x0d800000

0800c868 <with_errnof>:
 800c868:	b510      	push	{r4, lr}
 800c86a:	ed2d 8b02 	vpush	{d8}
 800c86e:	eeb0 8a40 	vmov.f32	s16, s0
 800c872:	4604      	mov	r4, r0
 800c874:	f7fc f9a6 	bl	8008bc4 <__errno>
 800c878:	eeb0 0a48 	vmov.f32	s0, s16
 800c87c:	ecbd 8b02 	vpop	{d8}
 800c880:	6004      	str	r4, [r0, #0]
 800c882:	bd10      	pop	{r4, pc}

0800c884 <xflowf>:
 800c884:	b130      	cbz	r0, 800c894 <xflowf+0x10>
 800c886:	eef1 7a40 	vneg.f32	s15, s0
 800c88a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c88e:	2022      	movs	r0, #34	@ 0x22
 800c890:	f7ff bfea 	b.w	800c868 <with_errnof>
 800c894:	eef0 7a40 	vmov.f32	s15, s0
 800c898:	e7f7      	b.n	800c88a <xflowf+0x6>
	...

0800c89c <__math_uflowf>:
 800c89c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c8a4 <__math_uflowf+0x8>
 800c8a0:	f7ff bff0 	b.w	800c884 <xflowf>
 800c8a4:	10000000 	.word	0x10000000

0800c8a8 <__math_oflowf>:
 800c8a8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c8b0 <__math_oflowf+0x8>
 800c8ac:	f7ff bfea 	b.w	800c884 <xflowf>
 800c8b0:	70000000 	.word	0x70000000

0800c8b4 <_init>:
 800c8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8b6:	bf00      	nop
 800c8b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8ba:	bc08      	pop	{r3}
 800c8bc:	469e      	mov	lr, r3
 800c8be:	4770      	bx	lr

0800c8c0 <_fini>:
 800c8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8c2:	bf00      	nop
 800c8c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8c6:	bc08      	pop	{r3}
 800c8c8:	469e      	mov	lr, r3
 800c8ca:	4770      	bx	lr
