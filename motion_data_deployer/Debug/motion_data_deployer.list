
motion_data_deployer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009eb0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f8  0800a040  0800a040  0000b040  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a538  0800a538  0000c21c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a538  0800a538  0000b538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a540  0800a540  0000c21c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a540  0800a540  0000b540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a544  0800a544  0000b544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800a548  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .neai         00000044  200001d8  0800a720  0000c1d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000013b8  2000021c  0800a764  0000c21c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200015d4  0800a764  0000c5d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c21c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dde5  00000000  00000000  0000c24c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f10  00000000  00000000  0001a031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca8  00000000  00000000  0001bf48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009ca  00000000  00000000  0001cbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026ff7  00000000  00000000  0001d5ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ff6f  00000000  00000000  000445b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec6b3  00000000  00000000  00054520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000087  00000000  00000000  00140bd3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004aa4  00000000  00000000  00140c5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  00145700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000021c 	.word	0x2000021c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a028 	.word	0x0800a028

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000220 	.word	0x20000220
 80001cc:	0800a028 	.word	0x0800a028

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <MPU6050_Init>:
int16_t gyro_data[3];

float Ax, Ay, Az, Gx, Gy, Gz;

void MPU6050_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af04      	add	r7, sp, #16
  uint8_t data;

  // Wake up MPU6050
  data = 0x00;
 8000fea:	2300      	movs	r3, #0
 8000fec:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_PWR_MGMT_1, 1, &data, 1, HAL_MAX_DELAY);
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff2:	9302      	str	r3, [sp, #8]
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	9301      	str	r3, [sp, #4]
 8000ff8:	1dfb      	adds	r3, r7, #7
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	226b      	movs	r2, #107	@ 0x6b
 8001000:	21d0      	movs	r1, #208	@ 0xd0
 8001002:	4803      	ldr	r0, [pc, #12]	@ (8001010 <MPU6050_Init+0x2c>)
 8001004:	f001 f86e 	bl	80020e4 <HAL_I2C_Mem_Write>
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	2000024c 	.word	0x2000024c

08001014 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(int16_t* accel_data)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af04      	add	r7, sp, #16
 800101a:	6078      	str	r0, [r7, #4]
  uint8_t buffer[6];

  HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_ACCEL_XOUT_H, 1, buffer, 6, HAL_MAX_DELAY);
 800101c:	f04f 33ff 	mov.w	r3, #4294967295
 8001020:	9302      	str	r3, [sp, #8]
 8001022:	2306      	movs	r3, #6
 8001024:	9301      	str	r3, [sp, #4]
 8001026:	f107 0308 	add.w	r3, r7, #8
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2301      	movs	r3, #1
 800102e:	223b      	movs	r2, #59	@ 0x3b
 8001030:	21d0      	movs	r1, #208	@ 0xd0
 8001032:	4831      	ldr	r0, [pc, #196]	@ (80010f8 <MPU6050_Read_Accel+0xe4>)
 8001034:	f001 f96a 	bl	800230c <HAL_I2C_Mem_Read>

  accel_data[0] = (int16_t)((buffer[0] << 8) | buffer[1]);
 8001038:	7a3b      	ldrb	r3, [r7, #8]
 800103a:	021b      	lsls	r3, r3, #8
 800103c:	b21a      	sxth	r2, r3
 800103e:	7a7b      	ldrb	r3, [r7, #9]
 8001040:	b21b      	sxth	r3, r3
 8001042:	4313      	orrs	r3, r2
 8001044:	b21a      	sxth	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	801a      	strh	r2, [r3, #0]
  accel_data[1] = (int16_t)((buffer[2] << 8) | buffer[3]);
 800104a:	7abb      	ldrb	r3, [r7, #10]
 800104c:	021b      	lsls	r3, r3, #8
 800104e:	b219      	sxth	r1, r3
 8001050:	7afb      	ldrb	r3, [r7, #11]
 8001052:	b21a      	sxth	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3302      	adds	r3, #2
 8001058:	430a      	orrs	r2, r1
 800105a:	b212      	sxth	r2, r2
 800105c:	801a      	strh	r2, [r3, #0]
  accel_data[2] = (int16_t)((buffer[4] << 8) | buffer[5]);
 800105e:	7b3b      	ldrb	r3, [r7, #12]
 8001060:	021b      	lsls	r3, r3, #8
 8001062:	b219      	sxth	r1, r3
 8001064:	7b7b      	ldrb	r3, [r7, #13]
 8001066:	b21a      	sxth	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3304      	adds	r3, #4
 800106c:	430a      	orrs	r2, r1
 800106e:	b212      	sxth	r2, r2
 8001070:	801a      	strh	r2, [r3, #0]
       0                ±2g                16384 LSB/g
       1                ±4g                 8192 LSB/g
       2                ±8g                 4096 LSB/g
       3                ±16g                2048 LSB/g */

    Ax = accel_data[0]/2048.0;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fa53 	bl	8000524 <__aeabi_i2d>
 800107e:	f04f 0200 	mov.w	r2, #0
 8001082:	4b1e      	ldr	r3, [pc, #120]	@ (80010fc <MPU6050_Read_Accel+0xe8>)
 8001084:	f7ff fbe2 	bl	800084c <__aeabi_ddiv>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	4610      	mov	r0, r2
 800108e:	4619      	mov	r1, r3
 8001090:	f7ff fdaa 	bl	8000be8 <__aeabi_d2f>
 8001094:	4603      	mov	r3, r0
 8001096:	4a1a      	ldr	r2, [pc, #104]	@ (8001100 <MPU6050_Read_Accel+0xec>)
 8001098:	6013      	str	r3, [r2, #0]
  	Ay = accel_data[1]/2048.0;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	3302      	adds	r3, #2
 800109e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fa3e 	bl	8000524 <__aeabi_i2d>
 80010a8:	f04f 0200 	mov.w	r2, #0
 80010ac:	4b13      	ldr	r3, [pc, #76]	@ (80010fc <MPU6050_Read_Accel+0xe8>)
 80010ae:	f7ff fbcd 	bl	800084c <__aeabi_ddiv>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4610      	mov	r0, r2
 80010b8:	4619      	mov	r1, r3
 80010ba:	f7ff fd95 	bl	8000be8 <__aeabi_d2f>
 80010be:	4603      	mov	r3, r0
 80010c0:	4a10      	ldr	r2, [pc, #64]	@ (8001104 <MPU6050_Read_Accel+0xf0>)
 80010c2:	6013      	str	r3, [r2, #0]
  	Az = accel_data[2]/2048.0;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3304      	adds	r3, #4
 80010c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fa29 	bl	8000524 <__aeabi_i2d>
 80010d2:	f04f 0200 	mov.w	r2, #0
 80010d6:	4b09      	ldr	r3, [pc, #36]	@ (80010fc <MPU6050_Read_Accel+0xe8>)
 80010d8:	f7ff fbb8 	bl	800084c <__aeabi_ddiv>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	4610      	mov	r0, r2
 80010e2:	4619      	mov	r1, r3
 80010e4:	f7ff fd80 	bl	8000be8 <__aeabi_d2f>
 80010e8:	4603      	mov	r3, r0
 80010ea:	4a07      	ldr	r2, [pc, #28]	@ (8001108 <MPU6050_Read_Accel+0xf4>)
 80010ec:	6013      	str	r3, [r2, #0]
}
 80010ee:	bf00      	nop
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	2000024c 	.word	0x2000024c
 80010fc:	40a00000 	.word	0x40a00000
 8001100:	20000240 	.word	0x20000240
 8001104:	20000244 	.word	0x20000244
 8001108:	20000248 	.word	0x20000248

0800110c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001112:	f000 fc03 	bl	800191c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001116:	f000 f823 	bl	8001160 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800111a:	f000 f8e3 	bl	80012e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800111e:	f000 f8b1 	bl	8001284 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001122:	f000 f86f 	bl	8001204 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init();
 8001126:	f7ff ff5d 	bl	8000fe4 <MPU6050_Init>

    enum neai_state error_code = neai_anomalydetection_init();
 800112a:	f004 faa7 	bl	800567c <neai_anomalydetection_init>
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
        if (error_code != NEAI_OK) {
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <main+0x34>
          printf("Application Init Not Done!!!");
 8001138:	4807      	ldr	r0, [pc, #28]	@ (8001158 <main+0x4c>)
 800113a:	f005 fa3b 	bl	80065b4 <iprintf>
 800113e:	e002      	b.n	8001146 <main+0x3a>
        }
        else
          printf("Application Init Done!!!");
 8001140:	4806      	ldr	r0, [pc, #24]	@ (800115c <main+0x50>)
 8001142:	f005 fa37 	bl	80065b4 <iprintf>

    HAL_Delay (1000);  // wait for 1 sec
 8001146:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800114a:	f000 fc63 	bl	8001a14 <HAL_Delay>
    Train();
 800114e:	f000 f96d 	bl	800142c <Train>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Inference();
 8001152:	f000 f99b 	bl	800148c <Inference>
 8001156:	e7fc      	b.n	8001152 <main+0x46>
 8001158:	0800a040 	.word	0x0800a040
 800115c:	0800a060 	.word	0x0800a060

08001160 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b096      	sub	sp, #88	@ 0x58
 8001164:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	2244      	movs	r2, #68	@ 0x44
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f005 fb88 	bl	8006884 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001174:	463b      	mov	r3, r7
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001182:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001186:	f001 fd43 	bl	8002c10 <HAL_PWREx_ControlVoltageScaling>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001190:	f000 f9ae 	bl	80014f0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001194:	2302      	movs	r3, #2
 8001196:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001198:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800119c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800119e:	2310      	movs	r3, #16
 80011a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a2:	2302      	movs	r3, #2
 80011a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011a6:	2302      	movs	r3, #2
 80011a8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011aa:	2301      	movs	r3, #1
 80011ac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80011ae:	230a      	movs	r3, #10
 80011b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011b2:	2307      	movs	r3, #7
 80011b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011b6:	2302      	movs	r3, #2
 80011b8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011ba:	2302      	movs	r3, #2
 80011bc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	4618      	mov	r0, r3
 80011c4:	f001 fd7a 	bl	8002cbc <HAL_RCC_OscConfig>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80011ce:	f000 f98f 	bl	80014f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d2:	230f      	movs	r3, #15
 80011d4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d6:	2303      	movs	r3, #3
 80011d8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011e6:	463b      	mov	r3, r7
 80011e8:	2104      	movs	r1, #4
 80011ea:	4618      	mov	r0, r3
 80011ec:	f002 f942 	bl	8003474 <HAL_RCC_ClockConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011f6:	f000 f97b 	bl	80014f0 <Error_Handler>
  }
}
 80011fa:	bf00      	nop
 80011fc:	3758      	adds	r7, #88	@ 0x58
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001208:	4b1b      	ldr	r3, [pc, #108]	@ (8001278 <MX_I2C1_Init+0x74>)
 800120a:	4a1c      	ldr	r2, [pc, #112]	@ (800127c <MX_I2C1_Init+0x78>)
 800120c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 800120e:	4b1a      	ldr	r3, [pc, #104]	@ (8001278 <MX_I2C1_Init+0x74>)
 8001210:	4a1b      	ldr	r2, [pc, #108]	@ (8001280 <MX_I2C1_Init+0x7c>)
 8001212:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001214:	4b18      	ldr	r3, [pc, #96]	@ (8001278 <MX_I2C1_Init+0x74>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800121a:	4b17      	ldr	r3, [pc, #92]	@ (8001278 <MX_I2C1_Init+0x74>)
 800121c:	2201      	movs	r2, #1
 800121e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001220:	4b15      	ldr	r3, [pc, #84]	@ (8001278 <MX_I2C1_Init+0x74>)
 8001222:	2200      	movs	r2, #0
 8001224:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001226:	4b14      	ldr	r3, [pc, #80]	@ (8001278 <MX_I2C1_Init+0x74>)
 8001228:	2200      	movs	r2, #0
 800122a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800122c:	4b12      	ldr	r3, [pc, #72]	@ (8001278 <MX_I2C1_Init+0x74>)
 800122e:	2200      	movs	r2, #0
 8001230:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001232:	4b11      	ldr	r3, [pc, #68]	@ (8001278 <MX_I2C1_Init+0x74>)
 8001234:	2200      	movs	r2, #0
 8001236:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001238:	4b0f      	ldr	r3, [pc, #60]	@ (8001278 <MX_I2C1_Init+0x74>)
 800123a:	2200      	movs	r2, #0
 800123c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800123e:	480e      	ldr	r0, [pc, #56]	@ (8001278 <MX_I2C1_Init+0x74>)
 8001240:	f000 feb4 	bl	8001fac <HAL_I2C_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800124a:	f000 f951 	bl	80014f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800124e:	2100      	movs	r1, #0
 8001250:	4809      	ldr	r0, [pc, #36]	@ (8001278 <MX_I2C1_Init+0x74>)
 8001252:	f001 fc37 	bl	8002ac4 <HAL_I2CEx_ConfigAnalogFilter>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800125c:	f000 f948 	bl	80014f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001260:	2100      	movs	r1, #0
 8001262:	4805      	ldr	r0, [pc, #20]	@ (8001278 <MX_I2C1_Init+0x74>)
 8001264:	f001 fc79 	bl	8002b5a <HAL_I2CEx_ConfigDigitalFilter>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800126e:	f000 f93f 	bl	80014f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	2000024c 	.word	0x2000024c
 800127c:	40005400 	.word	0x40005400
 8001280:	10d19ce4 	.word	0x10d19ce4

08001284 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001288:	4b14      	ldr	r3, [pc, #80]	@ (80012dc <MX_USART2_UART_Init+0x58>)
 800128a:	4a15      	ldr	r2, [pc, #84]	@ (80012e0 <MX_USART2_UART_Init+0x5c>)
 800128c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800128e:	4b13      	ldr	r3, [pc, #76]	@ (80012dc <MX_USART2_UART_Init+0x58>)
 8001290:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001294:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001296:	4b11      	ldr	r3, [pc, #68]	@ (80012dc <MX_USART2_UART_Init+0x58>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800129c:	4b0f      	ldr	r3, [pc, #60]	@ (80012dc <MX_USART2_UART_Init+0x58>)
 800129e:	2200      	movs	r2, #0
 80012a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012a2:	4b0e      	ldr	r3, [pc, #56]	@ (80012dc <MX_USART2_UART_Init+0x58>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012a8:	4b0c      	ldr	r3, [pc, #48]	@ (80012dc <MX_USART2_UART_Init+0x58>)
 80012aa:	220c      	movs	r2, #12
 80012ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ae:	4b0b      	ldr	r3, [pc, #44]	@ (80012dc <MX_USART2_UART_Init+0x58>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b4:	4b09      	ldr	r3, [pc, #36]	@ (80012dc <MX_USART2_UART_Init+0x58>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ba:	4b08      	ldr	r3, [pc, #32]	@ (80012dc <MX_USART2_UART_Init+0x58>)
 80012bc:	2200      	movs	r2, #0
 80012be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012c0:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <MX_USART2_UART_Init+0x58>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012c6:	4805      	ldr	r0, [pc, #20]	@ (80012dc <MX_USART2_UART_Init+0x58>)
 80012c8:	f002 ffb4 	bl	8004234 <HAL_UART_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012d2:	f000 f90d 	bl	80014f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	200002a0 	.word	0x200002a0
 80012e0:	40004400 	.word	0x40004400

080012e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08a      	sub	sp, #40	@ 0x28
 80012e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
 80012f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fa:	4b2b      	ldr	r3, [pc, #172]	@ (80013a8 <MX_GPIO_Init+0xc4>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fe:	4a2a      	ldr	r2, [pc, #168]	@ (80013a8 <MX_GPIO_Init+0xc4>)
 8001300:	f043 0304 	orr.w	r3, r3, #4
 8001304:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001306:	4b28      	ldr	r3, [pc, #160]	@ (80013a8 <MX_GPIO_Init+0xc4>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130a:	f003 0304 	and.w	r3, r3, #4
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001312:	4b25      	ldr	r3, [pc, #148]	@ (80013a8 <MX_GPIO_Init+0xc4>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001316:	4a24      	ldr	r2, [pc, #144]	@ (80013a8 <MX_GPIO_Init+0xc4>)
 8001318:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800131c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800131e:	4b22      	ldr	r3, [pc, #136]	@ (80013a8 <MX_GPIO_Init+0xc4>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	4b1f      	ldr	r3, [pc, #124]	@ (80013a8 <MX_GPIO_Init+0xc4>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132e:	4a1e      	ldr	r2, [pc, #120]	@ (80013a8 <MX_GPIO_Init+0xc4>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001336:	4b1c      	ldr	r3, [pc, #112]	@ (80013a8 <MX_GPIO_Init+0xc4>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001342:	4b19      	ldr	r3, [pc, #100]	@ (80013a8 <MX_GPIO_Init+0xc4>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001346:	4a18      	ldr	r2, [pc, #96]	@ (80013a8 <MX_GPIO_Init+0xc4>)
 8001348:	f043 0302 	orr.w	r3, r3, #2
 800134c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800134e:	4b16      	ldr	r3, [pc, #88]	@ (80013a8 <MX_GPIO_Init+0xc4>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800135a:	2200      	movs	r2, #0
 800135c:	2120      	movs	r1, #32
 800135e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001362:	f000 fe0b 	bl	8001f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001366:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800136a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800136c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001370:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001376:	f107 0314 	add.w	r3, r7, #20
 800137a:	4619      	mov	r1, r3
 800137c:	480b      	ldr	r0, [pc, #44]	@ (80013ac <MX_GPIO_Init+0xc8>)
 800137e:	f000 fc53 	bl	8001c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001382:	2320      	movs	r3, #32
 8001384:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001386:	2301      	movs	r3, #1
 8001388:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138e:	2300      	movs	r3, #0
 8001390:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001392:	f107 0314 	add.w	r3, r7, #20
 8001396:	4619      	mov	r1, r3
 8001398:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800139c:	f000 fc44 	bl	8001c28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013a0:	bf00      	nop
 80013a2:	3728      	adds	r7, #40	@ 0x28
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40021000 	.word	0x40021000
 80013ac:	48000800 	.word	0x48000800

080013b0 <fill_mpu_buffer>:

/* USER CODE BEGIN 4 */
void fill_mpu_buffer() {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
    for (int i = 0; i < DATA_INPUT_USER; i++) {
 80013b6:	2300      	movs	r3, #0
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	e025      	b.n	8001408 <fill_mpu_buffer+0x58>
      MPU6050_Read_Accel(accel_data);
 80013bc:	4816      	ldr	r0, [pc, #88]	@ (8001418 <fill_mpu_buffer+0x68>)
 80013be:	f7ff fe29 	bl	8001014 <MPU6050_Read_Accel>
      mpu_buffer[AXIS_NUMBER * i] = Ax;
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	4613      	mov	r3, r2
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	4413      	add	r3, r2
 80013ca:	4a14      	ldr	r2, [pc, #80]	@ (800141c <fill_mpu_buffer+0x6c>)
 80013cc:	6812      	ldr	r2, [r2, #0]
 80013ce:	4914      	ldr	r1, [pc, #80]	@ (8001420 <fill_mpu_buffer+0x70>)
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	440b      	add	r3, r1
 80013d4:	601a      	str	r2, [r3, #0]
      mpu_buffer[AXIS_NUMBER * i + 1] = Ay;
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	4613      	mov	r3, r2
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	4413      	add	r3, r2
 80013de:	3301      	adds	r3, #1
 80013e0:	4a10      	ldr	r2, [pc, #64]	@ (8001424 <fill_mpu_buffer+0x74>)
 80013e2:	6812      	ldr	r2, [r2, #0]
 80013e4:	490e      	ldr	r1, [pc, #56]	@ (8001420 <fill_mpu_buffer+0x70>)
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	440b      	add	r3, r1
 80013ea:	601a      	str	r2, [r3, #0]
      mpu_buffer[AXIS_NUMBER * i + 2] = Az;
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	4613      	mov	r3, r2
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	4413      	add	r3, r2
 80013f4:	3302      	adds	r3, #2
 80013f6:	4a0c      	ldr	r2, [pc, #48]	@ (8001428 <fill_mpu_buffer+0x78>)
 80013f8:	6812      	ldr	r2, [r2, #0]
 80013fa:	4909      	ldr	r1, [pc, #36]	@ (8001420 <fill_mpu_buffer+0x70>)
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	440b      	add	r3, r1
 8001400:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < DATA_INPUT_USER; i++) {
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	3301      	adds	r3, #1
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2bff      	cmp	r3, #255	@ 0xff
 800140c:	ddd6      	ble.n	80013bc <fill_mpu_buffer+0xc>
  }
}
 800140e:	bf00      	nop
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000238 	.word	0x20000238
 800141c:	20000240 	.word	0x20000240
 8001420:	20000328 	.word	0x20000328
 8001424:	20000244 	.word	0x20000244
 8001428:	20000248 	.word	0x20000248

0800142c <Train>:

void Train(void)

{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
   for (int i = 0; i < NUMBER_LEARN; i++) {
 8001432:	2300      	movs	r3, #0
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	e014      	b.n	8001462 <Train+0x36>
   fill_mpu_buffer();
 8001438:	f7ff ffba 	bl	80013b0 <fill_mpu_buffer>
   neai_anomalydetection_learn(mpu_buffer);
 800143c:	480e      	ldr	r0, [pc, #56]	@ (8001478 <Train+0x4c>)
 800143e:	f003 fdbb 	bl	8004fb8 <neai_anomalydetection_learn>
   printf("Training Cycle No: ");
 8001442:	480e      	ldr	r0, [pc, #56]	@ (800147c <Train+0x50>)
 8001444:	f005 f8b6 	bl	80065b4 <iprintf>
   printf("%d",i);
 8001448:	6879      	ldr	r1, [r7, #4]
 800144a:	480d      	ldr	r0, [pc, #52]	@ (8001480 <Train+0x54>)
 800144c:	f005 f8b2 	bl	80065b4 <iprintf>
   printf("\r\n");
 8001450:	480c      	ldr	r0, [pc, #48]	@ (8001484 <Train+0x58>)
 8001452:	f005 f917 	bl	8006684 <puts>
   HAL_Delay(200);
 8001456:	20c8      	movs	r0, #200	@ 0xc8
 8001458:	f000 fadc 	bl	8001a14 <HAL_Delay>
   for (int i = 0; i < NUMBER_LEARN; i++) {
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3301      	adds	r3, #1
 8001460:	607b      	str	r3, [r7, #4]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2b31      	cmp	r3, #49	@ 0x31
 8001466:	dde7      	ble.n	8001438 <Train+0xc>
  }
   printf("Training Done");
 8001468:	4807      	ldr	r0, [pc, #28]	@ (8001488 <Train+0x5c>)
 800146a:	f005 f8a3 	bl	80065b4 <iprintf>

}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000328 	.word	0x20000328
 800147c:	0800a07c 	.word	0x0800a07c
 8001480:	0800a090 	.word	0x0800a090
 8001484:	0800a094 	.word	0x0800a094
 8001488:	0800a098 	.word	0x0800a098

0800148c <Inference>:

void Inference(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  fill_mpu_buffer();
 8001490:	f7ff ff8e 	bl	80013b0 <fill_mpu_buffer>
  neai_anomalydetection_detect(mpu_buffer, &similarity);
 8001494:	4908      	ldr	r1, [pc, #32]	@ (80014b8 <Inference+0x2c>)
 8001496:	4809      	ldr	r0, [pc, #36]	@ (80014bc <Inference+0x30>)
 8001498:	f003 ff72 	bl	8005380 <neai_anomalydetection_detect>
  printf("Similarity Score is: ");
 800149c:	4808      	ldr	r0, [pc, #32]	@ (80014c0 <Inference+0x34>)
 800149e:	f005 f889 	bl	80065b4 <iprintf>
  printf("%d",similarity);
 80014a2:	4b05      	ldr	r3, [pc, #20]	@ (80014b8 <Inference+0x2c>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	4619      	mov	r1, r3
 80014a8:	4806      	ldr	r0, [pc, #24]	@ (80014c4 <Inference+0x38>)
 80014aa:	f005 f883 	bl	80065b4 <iprintf>
  printf("\r\n");
 80014ae:	4806      	ldr	r0, [pc, #24]	@ (80014c8 <Inference+0x3c>)
 80014b0:	f005 f8e8 	bl	8006684 <puts>
}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000f28 	.word	0x20000f28
 80014bc:	20000328 	.word	0x20000328
 80014c0:	0800a0a8 	.word	0x0800a0a8
 80014c4:	0800a090 	.word	0x0800a090
 80014c8:	0800a094 	.word	0x0800a094

080014cc <__io_putchar>:

int __io_putchar(int ch){
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, HAL_MAX_DELAY);
 80014d4:	1d39      	adds	r1, r7, #4
 80014d6:	f04f 33ff 	mov.w	r3, #4294967295
 80014da:	2201      	movs	r2, #1
 80014dc:	4803      	ldr	r0, [pc, #12]	@ (80014ec <__io_putchar+0x20>)
 80014de:	f002 fef7 	bl	80042d0 <HAL_UART_Transmit>
	return ch;
 80014e2:	687b      	ldr	r3, [r7, #4]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	200002a0 	.word	0x200002a0

080014f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014f4:	b672      	cpsid	i
}
 80014f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014f8:	bf00      	nop
 80014fa:	e7fd      	b.n	80014f8 <Error_Handler+0x8>

080014fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001502:	4b0f      	ldr	r3, [pc, #60]	@ (8001540 <HAL_MspInit+0x44>)
 8001504:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001506:	4a0e      	ldr	r2, [pc, #56]	@ (8001540 <HAL_MspInit+0x44>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	6613      	str	r3, [r2, #96]	@ 0x60
 800150e:	4b0c      	ldr	r3, [pc, #48]	@ (8001540 <HAL_MspInit+0x44>)
 8001510:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800151a:	4b09      	ldr	r3, [pc, #36]	@ (8001540 <HAL_MspInit+0x44>)
 800151c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800151e:	4a08      	ldr	r2, [pc, #32]	@ (8001540 <HAL_MspInit+0x44>)
 8001520:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001524:	6593      	str	r3, [r2, #88]	@ 0x58
 8001526:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <HAL_MspInit+0x44>)
 8001528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800152a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800152e:	603b      	str	r3, [r7, #0]
 8001530:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	40021000 	.word	0x40021000

08001544 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b0ac      	sub	sp, #176	@ 0xb0
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	2288      	movs	r2, #136	@ 0x88
 8001562:	2100      	movs	r1, #0
 8001564:	4618      	mov	r0, r3
 8001566:	f005 f98d 	bl	8006884 <memset>
  if(hi2c->Instance==I2C1)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a21      	ldr	r2, [pc, #132]	@ (80015f4 <HAL_I2C_MspInit+0xb0>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d13b      	bne.n	80015ec <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001574:	2340      	movs	r3, #64	@ 0x40
 8001576:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001578:	2300      	movs	r3, #0
 800157a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	4618      	mov	r0, r3
 8001582:	f002 f99b 	bl	80038bc <HAL_RCCEx_PeriphCLKConfig>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800158c:	f7ff ffb0 	bl	80014f0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001590:	4b19      	ldr	r3, [pc, #100]	@ (80015f8 <HAL_I2C_MspInit+0xb4>)
 8001592:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001594:	4a18      	ldr	r2, [pc, #96]	@ (80015f8 <HAL_I2C_MspInit+0xb4>)
 8001596:	f043 0302 	orr.w	r3, r3, #2
 800159a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800159c:	4b16      	ldr	r3, [pc, #88]	@ (80015f8 <HAL_I2C_MspInit+0xb4>)
 800159e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	613b      	str	r3, [r7, #16]
 80015a6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015a8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015b0:	2312      	movs	r3, #18
 80015b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015bc:	2303      	movs	r3, #3
 80015be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015c2:	2304      	movs	r3, #4
 80015c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015cc:	4619      	mov	r1, r3
 80015ce:	480b      	ldr	r0, [pc, #44]	@ (80015fc <HAL_I2C_MspInit+0xb8>)
 80015d0:	f000 fb2a 	bl	8001c28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015d4:	4b08      	ldr	r3, [pc, #32]	@ (80015f8 <HAL_I2C_MspInit+0xb4>)
 80015d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d8:	4a07      	ldr	r2, [pc, #28]	@ (80015f8 <HAL_I2C_MspInit+0xb4>)
 80015da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015de:	6593      	str	r3, [r2, #88]	@ 0x58
 80015e0:	4b05      	ldr	r3, [pc, #20]	@ (80015f8 <HAL_I2C_MspInit+0xb4>)
 80015e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80015ec:	bf00      	nop
 80015ee:	37b0      	adds	r7, #176	@ 0xb0
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40005400 	.word	0x40005400
 80015f8:	40021000 	.word	0x40021000
 80015fc:	48000400 	.word	0x48000400

08001600 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b0ac      	sub	sp, #176	@ 0xb0
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	2288      	movs	r2, #136	@ 0x88
 800161e:	2100      	movs	r1, #0
 8001620:	4618      	mov	r0, r3
 8001622:	f005 f92f 	bl	8006884 <memset>
  if(huart->Instance==USART2)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a21      	ldr	r2, [pc, #132]	@ (80016b0 <HAL_UART_MspInit+0xb0>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d13b      	bne.n	80016a8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001630:	2302      	movs	r3, #2
 8001632:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001634:	2300      	movs	r3, #0
 8001636:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4618      	mov	r0, r3
 800163e:	f002 f93d 	bl	80038bc <HAL_RCCEx_PeriphCLKConfig>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001648:	f7ff ff52 	bl	80014f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800164c:	4b19      	ldr	r3, [pc, #100]	@ (80016b4 <HAL_UART_MspInit+0xb4>)
 800164e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001650:	4a18      	ldr	r2, [pc, #96]	@ (80016b4 <HAL_UART_MspInit+0xb4>)
 8001652:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001656:	6593      	str	r3, [r2, #88]	@ 0x58
 8001658:	4b16      	ldr	r3, [pc, #88]	@ (80016b4 <HAL_UART_MspInit+0xb4>)
 800165a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800165c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001664:	4b13      	ldr	r3, [pc, #76]	@ (80016b4 <HAL_UART_MspInit+0xb4>)
 8001666:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001668:	4a12      	ldr	r2, [pc, #72]	@ (80016b4 <HAL_UART_MspInit+0xb4>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001670:	4b10      	ldr	r3, [pc, #64]	@ (80016b4 <HAL_UART_MspInit+0xb4>)
 8001672:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001674:	f003 0301 	and.w	r3, r3, #1
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800167c:	230c      	movs	r3, #12
 800167e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001682:	2302      	movs	r3, #2
 8001684:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168e:	2303      	movs	r3, #3
 8001690:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001694:	2307      	movs	r3, #7
 8001696:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800169e:	4619      	mov	r1, r3
 80016a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016a4:	f000 fac0 	bl	8001c28 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80016a8:	bf00      	nop
 80016aa:	37b0      	adds	r7, #176	@ 0xb0
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40004400 	.word	0x40004400
 80016b4:	40021000 	.word	0x40021000

080016b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016bc:	bf00      	nop
 80016be:	e7fd      	b.n	80016bc <NMI_Handler+0x4>

080016c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016c4:	bf00      	nop
 80016c6:	e7fd      	b.n	80016c4 <HardFault_Handler+0x4>

080016c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016cc:	bf00      	nop
 80016ce:	e7fd      	b.n	80016cc <MemManage_Handler+0x4>

080016d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016d4:	bf00      	nop
 80016d6:	e7fd      	b.n	80016d4 <BusFault_Handler+0x4>

080016d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016dc:	bf00      	nop
 80016de:	e7fd      	b.n	80016dc <UsageFault_Handler+0x4>

080016e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800170e:	f000 f961 	bl	80019d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}

08001716 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0
  return 1;
 800171a:	2301      	movs	r3, #1
}
 800171c:	4618      	mov	r0, r3
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <_kill>:

int _kill(int pid, int sig)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
 800172e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001730:	f005 f8fa 	bl	8006928 <__errno>
 8001734:	4603      	mov	r3, r0
 8001736:	2216      	movs	r2, #22
 8001738:	601a      	str	r2, [r3, #0]
  return -1;
 800173a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <_exit>:

void _exit (int status)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800174e:	f04f 31ff 	mov.w	r1, #4294967295
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff ffe7 	bl	8001726 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001758:	bf00      	nop
 800175a:	e7fd      	b.n	8001758 <_exit+0x12>

0800175c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	e00a      	b.n	8001784 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800176e:	f3af 8000 	nop.w
 8001772:	4601      	mov	r1, r0
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	1c5a      	adds	r2, r3, #1
 8001778:	60ba      	str	r2, [r7, #8]
 800177a:	b2ca      	uxtb	r2, r1
 800177c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	3301      	adds	r3, #1
 8001782:	617b      	str	r3, [r7, #20]
 8001784:	697a      	ldr	r2, [r7, #20]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	429a      	cmp	r2, r3
 800178a:	dbf0      	blt.n	800176e <_read+0x12>
  }

  return len;
 800178c:	687b      	ldr	r3, [r7, #4]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b086      	sub	sp, #24
 800179a:	af00      	add	r7, sp, #0
 800179c:	60f8      	str	r0, [r7, #12]
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	e009      	b.n	80017bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	1c5a      	adds	r2, r3, #1
 80017ac:	60ba      	str	r2, [r7, #8]
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff fe8b 	bl	80014cc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	3301      	adds	r3, #1
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	697a      	ldr	r2, [r7, #20]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	dbf1      	blt.n	80017a8 <_write+0x12>
  }
  return len;
 80017c4:	687b      	ldr	r3, [r7, #4]
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <_close>:

int _close(int file)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017da:	4618      	mov	r0, r3
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
 80017ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017f6:	605a      	str	r2, [r3, #4]
  return 0;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <_isatty>:

int _isatty(int file)
{
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800180e:	2301      	movs	r3, #1
}
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
	...

08001838 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001840:	4a14      	ldr	r2, [pc, #80]	@ (8001894 <_sbrk+0x5c>)
 8001842:	4b15      	ldr	r3, [pc, #84]	@ (8001898 <_sbrk+0x60>)
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800184c:	4b13      	ldr	r3, [pc, #76]	@ (800189c <_sbrk+0x64>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d102      	bne.n	800185a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001854:	4b11      	ldr	r3, [pc, #68]	@ (800189c <_sbrk+0x64>)
 8001856:	4a12      	ldr	r2, [pc, #72]	@ (80018a0 <_sbrk+0x68>)
 8001858:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800185a:	4b10      	ldr	r3, [pc, #64]	@ (800189c <_sbrk+0x64>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4413      	add	r3, r2
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	429a      	cmp	r2, r3
 8001866:	d207      	bcs.n	8001878 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001868:	f005 f85e 	bl	8006928 <__errno>
 800186c:	4603      	mov	r3, r0
 800186e:	220c      	movs	r2, #12
 8001870:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001872:	f04f 33ff 	mov.w	r3, #4294967295
 8001876:	e009      	b.n	800188c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001878:	4b08      	ldr	r3, [pc, #32]	@ (800189c <_sbrk+0x64>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800187e:	4b07      	ldr	r3, [pc, #28]	@ (800189c <_sbrk+0x64>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	4a05      	ldr	r2, [pc, #20]	@ (800189c <_sbrk+0x64>)
 8001888:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800188a:	68fb      	ldr	r3, [r7, #12]
}
 800188c:	4618      	mov	r0, r3
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20018000 	.word	0x20018000
 8001898:	00000400 	.word	0x00000400
 800189c:	20000f2c 	.word	0x20000f2c
 80018a0:	200015d8 	.word	0x200015d8

080018a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018a8:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <SystemInit+0x20>)
 80018aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018ae:	4a05      	ldr	r2, [pc, #20]	@ (80018c4 <SystemInit+0x20>)
 80018b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001900 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018cc:	f7ff ffea 	bl	80018a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018d0:	480c      	ldr	r0, [pc, #48]	@ (8001904 <LoopForever+0x6>)
  ldr r1, =_edata
 80018d2:	490d      	ldr	r1, [pc, #52]	@ (8001908 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018d4:	4a0d      	ldr	r2, [pc, #52]	@ (800190c <LoopForever+0xe>)
  movs r3, #0
 80018d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018d8:	e002      	b.n	80018e0 <LoopCopyDataInit>

080018da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018de:	3304      	adds	r3, #4

080018e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e4:	d3f9      	bcc.n	80018da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001910 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001914 <LoopForever+0x16>)
  movs r3, #0
 80018ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018ec:	e001      	b.n	80018f2 <LoopFillZerobss>

080018ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f0:	3204      	adds	r2, #4

080018f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f4:	d3fb      	bcc.n	80018ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018f6:	f005 f81d 	bl	8006934 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018fa:	f7ff fc07 	bl	800110c <main>

080018fe <LoopForever>:

LoopForever:
    b LoopForever
 80018fe:	e7fe      	b.n	80018fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001900:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001908:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800190c:	0800a548 	.word	0x0800a548
  ldr r2, =_sbss
 8001910:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 8001914:	200015d4 	.word	0x200015d4

08001918 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001918:	e7fe      	b.n	8001918 <ADC1_2_IRQHandler>
	...

0800191c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001922:	2300      	movs	r3, #0
 8001924:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001926:	4b0c      	ldr	r3, [pc, #48]	@ (8001958 <HAL_Init+0x3c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a0b      	ldr	r2, [pc, #44]	@ (8001958 <HAL_Init+0x3c>)
 800192c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001930:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001932:	2003      	movs	r0, #3
 8001934:	f000 f944 	bl	8001bc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001938:	2000      	movs	r0, #0
 800193a:	f000 f80f 	bl	800195c <HAL_InitTick>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d002      	beq.n	800194a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	71fb      	strb	r3, [r7, #7]
 8001948:	e001      	b.n	800194e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800194a:	f7ff fdd7 	bl	80014fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800194e:	79fb      	ldrb	r3, [r7, #7]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40022000 	.word	0x40022000

0800195c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001964:	2300      	movs	r3, #0
 8001966:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001968:	4b17      	ldr	r3, [pc, #92]	@ (80019c8 <HAL_InitTick+0x6c>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d023      	beq.n	80019b8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001970:	4b16      	ldr	r3, [pc, #88]	@ (80019cc <HAL_InitTick+0x70>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	4b14      	ldr	r3, [pc, #80]	@ (80019c8 <HAL_InitTick+0x6c>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	4619      	mov	r1, r3
 800197a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800197e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001982:	fbb2 f3f3 	udiv	r3, r2, r3
 8001986:	4618      	mov	r0, r3
 8001988:	f000 f941 	bl	8001c0e <HAL_SYSTICK_Config>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d10f      	bne.n	80019b2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b0f      	cmp	r3, #15
 8001996:	d809      	bhi.n	80019ac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001998:	2200      	movs	r2, #0
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	f04f 30ff 	mov.w	r0, #4294967295
 80019a0:	f000 f919 	bl	8001bd6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019a4:	4a0a      	ldr	r2, [pc, #40]	@ (80019d0 <HAL_InitTick+0x74>)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6013      	str	r3, [r2, #0]
 80019aa:	e007      	b.n	80019bc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	73fb      	strb	r3, [r7, #15]
 80019b0:	e004      	b.n	80019bc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	73fb      	strb	r3, [r7, #15]
 80019b6:	e001      	b.n	80019bc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000008 	.word	0x20000008
 80019cc:	20000000 	.word	0x20000000
 80019d0:	20000004 	.word	0x20000004

080019d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019d8:	4b06      	ldr	r3, [pc, #24]	@ (80019f4 <HAL_IncTick+0x20>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	461a      	mov	r2, r3
 80019de:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <HAL_IncTick+0x24>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4413      	add	r3, r2
 80019e4:	4a04      	ldr	r2, [pc, #16]	@ (80019f8 <HAL_IncTick+0x24>)
 80019e6:	6013      	str	r3, [r2, #0]
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	20000008 	.word	0x20000008
 80019f8:	20000f30 	.word	0x20000f30

080019fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001a00:	4b03      	ldr	r3, [pc, #12]	@ (8001a10 <HAL_GetTick+0x14>)
 8001a02:	681b      	ldr	r3, [r3, #0]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	20000f30 	.word	0x20000f30

08001a14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a1c:	f7ff ffee 	bl	80019fc <HAL_GetTick>
 8001a20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a2c:	d005      	beq.n	8001a3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a58 <HAL_Delay+0x44>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	461a      	mov	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4413      	add	r3, r2
 8001a38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a3a:	bf00      	nop
 8001a3c:	f7ff ffde 	bl	80019fc <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d8f7      	bhi.n	8001a3c <HAL_Delay+0x28>
  {
  }
}
 8001a4c:	bf00      	nop
 8001a4e:	bf00      	nop
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000008 	.word	0x20000008

08001a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a72:	68ba      	ldr	r2, [r7, #8]
 8001a74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a78:	4013      	ands	r3, r2
 8001a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a8e:	4a04      	ldr	r2, [pc, #16]	@ (8001aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	60d3      	str	r3, [r2, #12]
}
 8001a94:	bf00      	nop
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aa8:	4b04      	ldr	r3, [pc, #16]	@ (8001abc <__NVIC_GetPriorityGrouping+0x18>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	0a1b      	lsrs	r3, r3, #8
 8001aae:	f003 0307 	and.w	r3, r3, #7
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	6039      	str	r1, [r7, #0]
 8001aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	db0a      	blt.n	8001aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	b2da      	uxtb	r2, r3
 8001ad8:	490c      	ldr	r1, [pc, #48]	@ (8001b0c <__NVIC_SetPriority+0x4c>)
 8001ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ade:	0112      	lsls	r2, r2, #4
 8001ae0:	b2d2      	uxtb	r2, r2
 8001ae2:	440b      	add	r3, r1
 8001ae4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ae8:	e00a      	b.n	8001b00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	4908      	ldr	r1, [pc, #32]	@ (8001b10 <__NVIC_SetPriority+0x50>)
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	f003 030f 	and.w	r3, r3, #15
 8001af6:	3b04      	subs	r3, #4
 8001af8:	0112      	lsls	r2, r2, #4
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	440b      	add	r3, r1
 8001afe:	761a      	strb	r2, [r3, #24]
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	e000e100 	.word	0xe000e100
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b089      	sub	sp, #36	@ 0x24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	f1c3 0307 	rsb	r3, r3, #7
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	bf28      	it	cs
 8001b32:	2304      	movcs	r3, #4
 8001b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	3304      	adds	r3, #4
 8001b3a:	2b06      	cmp	r3, #6
 8001b3c:	d902      	bls.n	8001b44 <NVIC_EncodePriority+0x30>
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	3b03      	subs	r3, #3
 8001b42:	e000      	b.n	8001b46 <NVIC_EncodePriority+0x32>
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b48:	f04f 32ff 	mov.w	r2, #4294967295
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43da      	mvns	r2, r3
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	401a      	ands	r2, r3
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	fa01 f303 	lsl.w	r3, r1, r3
 8001b66:	43d9      	mvns	r1, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b6c:	4313      	orrs	r3, r2
         );
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3724      	adds	r7, #36	@ 0x24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
	...

08001b7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b8c:	d301      	bcc.n	8001b92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e00f      	b.n	8001bb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b92:	4a0a      	ldr	r2, [pc, #40]	@ (8001bbc <SysTick_Config+0x40>)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b9a:	210f      	movs	r1, #15
 8001b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba0:	f7ff ff8e 	bl	8001ac0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ba4:	4b05      	ldr	r3, [pc, #20]	@ (8001bbc <SysTick_Config+0x40>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001baa:	4b04      	ldr	r3, [pc, #16]	@ (8001bbc <SysTick_Config+0x40>)
 8001bac:	2207      	movs	r2, #7
 8001bae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	e000e010 	.word	0xe000e010

08001bc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff ff47 	bl	8001a5c <__NVIC_SetPriorityGrouping>
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b086      	sub	sp, #24
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	4603      	mov	r3, r0
 8001bde:	60b9      	str	r1, [r7, #8]
 8001be0:	607a      	str	r2, [r7, #4]
 8001be2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001be8:	f7ff ff5c 	bl	8001aa4 <__NVIC_GetPriorityGrouping>
 8001bec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	68b9      	ldr	r1, [r7, #8]
 8001bf2:	6978      	ldr	r0, [r7, #20]
 8001bf4:	f7ff ff8e 	bl	8001b14 <NVIC_EncodePriority>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bfe:	4611      	mov	r1, r2
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff ff5d 	bl	8001ac0 <__NVIC_SetPriority>
}
 8001c06:	bf00      	nop
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff ffb0 	bl	8001b7c <SysTick_Config>
 8001c1c:	4603      	mov	r3, r0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
	...

08001c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b087      	sub	sp, #28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c36:	e17f      	b.n	8001f38 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	fa01 f303 	lsl.w	r3, r1, r3
 8001c44:	4013      	ands	r3, r2
 8001c46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 8171 	beq.w	8001f32 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 0303 	and.w	r3, r3, #3
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d005      	beq.n	8001c68 <HAL_GPIO_Init+0x40>
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f003 0303 	and.w	r3, r3, #3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d130      	bne.n	8001cca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	2203      	movs	r2, #3
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	68da      	ldr	r2, [r3, #12]
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	4013      	ands	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	091b      	lsrs	r3, r3, #4
 8001cb4:	f003 0201 	and.w	r2, r3, #1
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f003 0303 	and.w	r3, r3, #3
 8001cd2:	2b03      	cmp	r3, #3
 8001cd4:	d118      	bne.n	8001d08 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001cdc:	2201      	movs	r2, #1
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	08db      	lsrs	r3, r3, #3
 8001cf2:	f003 0201 	and.w	r2, r3, #1
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 0303 	and.w	r3, r3, #3
 8001d10:	2b03      	cmp	r3, #3
 8001d12:	d017      	beq.n	8001d44 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	2203      	movs	r2, #3
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f003 0303 	and.w	r3, r3, #3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d123      	bne.n	8001d98 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	08da      	lsrs	r2, r3, #3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3208      	adds	r2, #8
 8001d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	220f      	movs	r2, #15
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	4013      	ands	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	691a      	ldr	r2, [r3, #16]
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	08da      	lsrs	r2, r3, #3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	3208      	adds	r2, #8
 8001d92:	6939      	ldr	r1, [r7, #16]
 8001d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	2203      	movs	r2, #3
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	4013      	ands	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 0203 	and.w	r2, r3, #3
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f000 80ac 	beq.w	8001f32 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dda:	4b5f      	ldr	r3, [pc, #380]	@ (8001f58 <HAL_GPIO_Init+0x330>)
 8001ddc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dde:	4a5e      	ldr	r2, [pc, #376]	@ (8001f58 <HAL_GPIO_Init+0x330>)
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001de6:	4b5c      	ldr	r3, [pc, #368]	@ (8001f58 <HAL_GPIO_Init+0x330>)
 8001de8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	60bb      	str	r3, [r7, #8]
 8001df0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001df2:	4a5a      	ldr	r2, [pc, #360]	@ (8001f5c <HAL_GPIO_Init+0x334>)
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	089b      	lsrs	r3, r3, #2
 8001df8:	3302      	adds	r3, #2
 8001dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	220f      	movs	r2, #15
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	4013      	ands	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e1c:	d025      	beq.n	8001e6a <HAL_GPIO_Init+0x242>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a4f      	ldr	r2, [pc, #316]	@ (8001f60 <HAL_GPIO_Init+0x338>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d01f      	beq.n	8001e66 <HAL_GPIO_Init+0x23e>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a4e      	ldr	r2, [pc, #312]	@ (8001f64 <HAL_GPIO_Init+0x33c>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d019      	beq.n	8001e62 <HAL_GPIO_Init+0x23a>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a4d      	ldr	r2, [pc, #308]	@ (8001f68 <HAL_GPIO_Init+0x340>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d013      	beq.n	8001e5e <HAL_GPIO_Init+0x236>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a4c      	ldr	r2, [pc, #304]	@ (8001f6c <HAL_GPIO_Init+0x344>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d00d      	beq.n	8001e5a <HAL_GPIO_Init+0x232>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a4b      	ldr	r2, [pc, #300]	@ (8001f70 <HAL_GPIO_Init+0x348>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d007      	beq.n	8001e56 <HAL_GPIO_Init+0x22e>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a4a      	ldr	r2, [pc, #296]	@ (8001f74 <HAL_GPIO_Init+0x34c>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d101      	bne.n	8001e52 <HAL_GPIO_Init+0x22a>
 8001e4e:	2306      	movs	r3, #6
 8001e50:	e00c      	b.n	8001e6c <HAL_GPIO_Init+0x244>
 8001e52:	2307      	movs	r3, #7
 8001e54:	e00a      	b.n	8001e6c <HAL_GPIO_Init+0x244>
 8001e56:	2305      	movs	r3, #5
 8001e58:	e008      	b.n	8001e6c <HAL_GPIO_Init+0x244>
 8001e5a:	2304      	movs	r3, #4
 8001e5c:	e006      	b.n	8001e6c <HAL_GPIO_Init+0x244>
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e004      	b.n	8001e6c <HAL_GPIO_Init+0x244>
 8001e62:	2302      	movs	r3, #2
 8001e64:	e002      	b.n	8001e6c <HAL_GPIO_Init+0x244>
 8001e66:	2301      	movs	r3, #1
 8001e68:	e000      	b.n	8001e6c <HAL_GPIO_Init+0x244>
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	f002 0203 	and.w	r2, r2, #3
 8001e72:	0092      	lsls	r2, r2, #2
 8001e74:	4093      	lsls	r3, r2
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e7c:	4937      	ldr	r1, [pc, #220]	@ (8001f5c <HAL_GPIO_Init+0x334>)
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	089b      	lsrs	r3, r3, #2
 8001e82:	3302      	adds	r3, #2
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e8a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f78 <HAL_GPIO_Init+0x350>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	43db      	mvns	r3, r3
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	4013      	ands	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001eae:	4a32      	ldr	r2, [pc, #200]	@ (8001f78 <HAL_GPIO_Init+0x350>)
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001eb4:	4b30      	ldr	r3, [pc, #192]	@ (8001f78 <HAL_GPIO_Init+0x350>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d003      	beq.n	8001ed8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ed8:	4a27      	ldr	r2, [pc, #156]	@ (8001f78 <HAL_GPIO_Init+0x350>)
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ede:	4b26      	ldr	r3, [pc, #152]	@ (8001f78 <HAL_GPIO_Init+0x350>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	4013      	ands	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f02:	4a1d      	ldr	r2, [pc, #116]	@ (8001f78 <HAL_GPIO_Init+0x350>)
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f08:	4b1b      	ldr	r3, [pc, #108]	@ (8001f78 <HAL_GPIO_Init+0x350>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	43db      	mvns	r3, r3
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	4013      	ands	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d003      	beq.n	8001f2c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f2c:	4a12      	ldr	r2, [pc, #72]	@ (8001f78 <HAL_GPIO_Init+0x350>)
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	3301      	adds	r3, #1
 8001f36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f47f ae78 	bne.w	8001c38 <HAL_GPIO_Init+0x10>
  }
}
 8001f48:	bf00      	nop
 8001f4a:	bf00      	nop
 8001f4c:	371c      	adds	r7, #28
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	40010000 	.word	0x40010000
 8001f60:	48000400 	.word	0x48000400
 8001f64:	48000800 	.word	0x48000800
 8001f68:	48000c00 	.word	0x48000c00
 8001f6c:	48001000 	.word	0x48001000
 8001f70:	48001400 	.word	0x48001400
 8001f74:	48001800 	.word	0x48001800
 8001f78:	40010400 	.word	0x40010400

08001f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	460b      	mov	r3, r1
 8001f86:	807b      	strh	r3, [r7, #2]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f8c:	787b      	ldrb	r3, [r7, #1]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f92:	887a      	ldrh	r2, [r7, #2]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f98:	e002      	b.n	8001fa0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f9a:	887a      	ldrh	r2, [r7, #2]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e08d      	b.n	80020da <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d106      	bne.n	8001fd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff fab6 	bl	8001544 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2224      	movs	r2, #36	@ 0x24
 8001fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0201 	bic.w	r2, r2, #1
 8001fee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ffc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800200c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d107      	bne.n	8002026 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689a      	ldr	r2, [r3, #8]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	e006      	b.n	8002034 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002032:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	2b02      	cmp	r3, #2
 800203a:	d108      	bne.n	800204e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	685a      	ldr	r2, [r3, #4]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800204a:	605a      	str	r2, [r3, #4]
 800204c:	e007      	b.n	800205e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800205c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6812      	ldr	r2, [r2, #0]
 8002068:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800206c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002070:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68da      	ldr	r2, [r3, #12]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002080:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691a      	ldr	r2, [r3, #16]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	430a      	orrs	r2, r1
 800209a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	69d9      	ldr	r1, [r3, #28]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a1a      	ldr	r2, [r3, #32]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	430a      	orrs	r2, r1
 80020aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 0201 	orr.w	r2, r2, #1
 80020ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2220      	movs	r2, #32
 80020c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
	...

080020e4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b088      	sub	sp, #32
 80020e8:	af02      	add	r7, sp, #8
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	4608      	mov	r0, r1
 80020ee:	4611      	mov	r1, r2
 80020f0:	461a      	mov	r2, r3
 80020f2:	4603      	mov	r3, r0
 80020f4:	817b      	strh	r3, [r7, #10]
 80020f6:	460b      	mov	r3, r1
 80020f8:	813b      	strh	r3, [r7, #8]
 80020fa:	4613      	mov	r3, r2
 80020fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b20      	cmp	r3, #32
 8002108:	f040 80f9 	bne.w	80022fe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800210c:	6a3b      	ldr	r3, [r7, #32]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d002      	beq.n	8002118 <HAL_I2C_Mem_Write+0x34>
 8002112:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002114:	2b00      	cmp	r3, #0
 8002116:	d105      	bne.n	8002124 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800211e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e0ed      	b.n	8002300 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800212a:	2b01      	cmp	r3, #1
 800212c:	d101      	bne.n	8002132 <HAL_I2C_Mem_Write+0x4e>
 800212e:	2302      	movs	r3, #2
 8002130:	e0e6      	b.n	8002300 <HAL_I2C_Mem_Write+0x21c>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800213a:	f7ff fc5f 	bl	80019fc <HAL_GetTick>
 800213e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	2319      	movs	r3, #25
 8002146:	2201      	movs	r2, #1
 8002148:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f000 fac3 	bl	80026d8 <I2C_WaitOnFlagUntilTimeout>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e0d1      	b.n	8002300 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2221      	movs	r2, #33	@ 0x21
 8002160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2240      	movs	r2, #64	@ 0x40
 8002168:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6a3a      	ldr	r2, [r7, #32]
 8002176:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800217c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2200      	movs	r2, #0
 8002182:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002184:	88f8      	ldrh	r0, [r7, #6]
 8002186:	893a      	ldrh	r2, [r7, #8]
 8002188:	8979      	ldrh	r1, [r7, #10]
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	9301      	str	r3, [sp, #4]
 800218e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002190:	9300      	str	r3, [sp, #0]
 8002192:	4603      	mov	r3, r0
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f000 f9d3 	bl	8002540 <I2C_RequestMemoryWrite>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d005      	beq.n	80021ac <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e0a9      	b.n	8002300 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	2bff      	cmp	r3, #255	@ 0xff
 80021b4:	d90e      	bls.n	80021d4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	22ff      	movs	r2, #255	@ 0xff
 80021ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	8979      	ldrh	r1, [r7, #10]
 80021c4:	2300      	movs	r3, #0
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f000 fc47 	bl	8002a60 <I2C_TransferConfig>
 80021d2:	e00f      	b.n	80021f4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021d8:	b29a      	uxth	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	8979      	ldrh	r1, [r7, #10]
 80021e6:	2300      	movs	r3, #0
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f000 fc36 	bl	8002a60 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f000 fac6 	bl	800278a <I2C_WaitOnTXISFlagUntilTimeout>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e07b      	b.n	8002300 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220c:	781a      	ldrb	r2, [r3, #0]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002218:	1c5a      	adds	r2, r3, #1
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002222:	b29b      	uxth	r3, r3
 8002224:	3b01      	subs	r3, #1
 8002226:	b29a      	uxth	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002230:	3b01      	subs	r3, #1
 8002232:	b29a      	uxth	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800223c:	b29b      	uxth	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d034      	beq.n	80022ac <HAL_I2C_Mem_Write+0x1c8>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002246:	2b00      	cmp	r3, #0
 8002248:	d130      	bne.n	80022ac <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002250:	2200      	movs	r2, #0
 8002252:	2180      	movs	r1, #128	@ 0x80
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f000 fa3f 	bl	80026d8 <I2C_WaitOnFlagUntilTimeout>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e04d      	b.n	8002300 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002268:	b29b      	uxth	r3, r3
 800226a:	2bff      	cmp	r3, #255	@ 0xff
 800226c:	d90e      	bls.n	800228c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	22ff      	movs	r2, #255	@ 0xff
 8002272:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002278:	b2da      	uxtb	r2, r3
 800227a:	8979      	ldrh	r1, [r7, #10]
 800227c:	2300      	movs	r3, #0
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	f000 fbeb 	bl	8002a60 <I2C_TransferConfig>
 800228a:	e00f      	b.n	80022ac <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002290:	b29a      	uxth	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800229a:	b2da      	uxtb	r2, r3
 800229c:	8979      	ldrh	r1, [r7, #10]
 800229e:	2300      	movs	r3, #0
 80022a0:	9300      	str	r3, [sp, #0]
 80022a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 fbda 	bl	8002a60 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d19e      	bne.n	80021f4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f000 faac 	bl	8002818 <I2C_WaitOnSTOPFlagUntilTimeout>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e01a      	b.n	8002300 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2220      	movs	r2, #32
 80022d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6859      	ldr	r1, [r3, #4]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002308 <HAL_I2C_Mem_Write+0x224>)
 80022de:	400b      	ands	r3, r1
 80022e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2220      	movs	r2, #32
 80022e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80022fa:	2300      	movs	r3, #0
 80022fc:	e000      	b.n	8002300 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80022fe:	2302      	movs	r3, #2
  }
}
 8002300:	4618      	mov	r0, r3
 8002302:	3718      	adds	r7, #24
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	fe00e800 	.word	0xfe00e800

0800230c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b088      	sub	sp, #32
 8002310:	af02      	add	r7, sp, #8
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	4608      	mov	r0, r1
 8002316:	4611      	mov	r1, r2
 8002318:	461a      	mov	r2, r3
 800231a:	4603      	mov	r3, r0
 800231c:	817b      	strh	r3, [r7, #10]
 800231e:	460b      	mov	r3, r1
 8002320:	813b      	strh	r3, [r7, #8]
 8002322:	4613      	mov	r3, r2
 8002324:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b20      	cmp	r3, #32
 8002330:	f040 80fd 	bne.w	800252e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002334:	6a3b      	ldr	r3, [r7, #32]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d002      	beq.n	8002340 <HAL_I2C_Mem_Read+0x34>
 800233a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800233c:	2b00      	cmp	r3, #0
 800233e:	d105      	bne.n	800234c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002346:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e0f1      	b.n	8002530 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002352:	2b01      	cmp	r3, #1
 8002354:	d101      	bne.n	800235a <HAL_I2C_Mem_Read+0x4e>
 8002356:	2302      	movs	r3, #2
 8002358:	e0ea      	b.n	8002530 <HAL_I2C_Mem_Read+0x224>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002362:	f7ff fb4b 	bl	80019fc <HAL_GetTick>
 8002366:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	2319      	movs	r3, #25
 800236e:	2201      	movs	r2, #1
 8002370:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f000 f9af 	bl	80026d8 <I2C_WaitOnFlagUntilTimeout>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e0d5      	b.n	8002530 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2222      	movs	r2, #34	@ 0x22
 8002388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2240      	movs	r2, #64	@ 0x40
 8002390:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6a3a      	ldr	r2, [r7, #32]
 800239e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80023a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023ac:	88f8      	ldrh	r0, [r7, #6]
 80023ae:	893a      	ldrh	r2, [r7, #8]
 80023b0:	8979      	ldrh	r1, [r7, #10]
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	9301      	str	r3, [sp, #4]
 80023b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	4603      	mov	r3, r0
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	f000 f913 	bl	80025e8 <I2C_RequestMemoryRead>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d005      	beq.n	80023d4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e0ad      	b.n	8002530 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023d8:	b29b      	uxth	r3, r3
 80023da:	2bff      	cmp	r3, #255	@ 0xff
 80023dc:	d90e      	bls.n	80023fc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2201      	movs	r2, #1
 80023e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	8979      	ldrh	r1, [r7, #10]
 80023ec:	4b52      	ldr	r3, [pc, #328]	@ (8002538 <HAL_I2C_Mem_Read+0x22c>)
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f000 fb33 	bl	8002a60 <I2C_TransferConfig>
 80023fa:	e00f      	b.n	800241c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002400:	b29a      	uxth	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800240a:	b2da      	uxtb	r2, r3
 800240c:	8979      	ldrh	r1, [r7, #10]
 800240e:	4b4a      	ldr	r3, [pc, #296]	@ (8002538 <HAL_I2C_Mem_Read+0x22c>)
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f000 fb22 	bl	8002a60 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002422:	2200      	movs	r2, #0
 8002424:	2104      	movs	r1, #4
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f000 f956 	bl	80026d8 <I2C_WaitOnFlagUntilTimeout>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e07c      	b.n	8002530 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002448:	1c5a      	adds	r2, r3, #1
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002452:	3b01      	subs	r3, #1
 8002454:	b29a      	uxth	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800245e:	b29b      	uxth	r3, r3
 8002460:	3b01      	subs	r3, #1
 8002462:	b29a      	uxth	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800246c:	b29b      	uxth	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d034      	beq.n	80024dc <HAL_I2C_Mem_Read+0x1d0>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002476:	2b00      	cmp	r3, #0
 8002478:	d130      	bne.n	80024dc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002480:	2200      	movs	r2, #0
 8002482:	2180      	movs	r1, #128	@ 0x80
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f000 f927 	bl	80026d8 <I2C_WaitOnFlagUntilTimeout>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e04d      	b.n	8002530 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002498:	b29b      	uxth	r3, r3
 800249a:	2bff      	cmp	r3, #255	@ 0xff
 800249c:	d90e      	bls.n	80024bc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2201      	movs	r2, #1
 80024a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	8979      	ldrh	r1, [r7, #10]
 80024ac:	2300      	movs	r3, #0
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f000 fad3 	bl	8002a60 <I2C_TransferConfig>
 80024ba:	e00f      	b.n	80024dc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ca:	b2da      	uxtb	r2, r3
 80024cc:	8979      	ldrh	r1, [r7, #10]
 80024ce:	2300      	movs	r3, #0
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 fac2 	bl	8002a60 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d19a      	bne.n	800241c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 f994 	bl	8002818 <I2C_WaitOnSTOPFlagUntilTimeout>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e01a      	b.n	8002530 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2220      	movs	r2, #32
 8002500:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6859      	ldr	r1, [r3, #4]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	4b0b      	ldr	r3, [pc, #44]	@ (800253c <HAL_I2C_Mem_Read+0x230>)
 800250e:	400b      	ands	r3, r1
 8002510:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2220      	movs	r2, #32
 8002516:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800252a:	2300      	movs	r3, #0
 800252c:	e000      	b.n	8002530 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800252e:	2302      	movs	r3, #2
  }
}
 8002530:	4618      	mov	r0, r3
 8002532:	3718      	adds	r7, #24
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	80002400 	.word	0x80002400
 800253c:	fe00e800 	.word	0xfe00e800

08002540 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af02      	add	r7, sp, #8
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	4608      	mov	r0, r1
 800254a:	4611      	mov	r1, r2
 800254c:	461a      	mov	r2, r3
 800254e:	4603      	mov	r3, r0
 8002550:	817b      	strh	r3, [r7, #10]
 8002552:	460b      	mov	r3, r1
 8002554:	813b      	strh	r3, [r7, #8]
 8002556:	4613      	mov	r3, r2
 8002558:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800255a:	88fb      	ldrh	r3, [r7, #6]
 800255c:	b2da      	uxtb	r2, r3
 800255e:	8979      	ldrh	r1, [r7, #10]
 8002560:	4b20      	ldr	r3, [pc, #128]	@ (80025e4 <I2C_RequestMemoryWrite+0xa4>)
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f000 fa79 	bl	8002a60 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800256e:	69fa      	ldr	r2, [r7, #28]
 8002570:	69b9      	ldr	r1, [r7, #24]
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 f909 	bl	800278a <I2C_WaitOnTXISFlagUntilTimeout>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e02c      	b.n	80025dc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002582:	88fb      	ldrh	r3, [r7, #6]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d105      	bne.n	8002594 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002588:	893b      	ldrh	r3, [r7, #8]
 800258a:	b2da      	uxtb	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	629a      	str	r2, [r3, #40]	@ 0x28
 8002592:	e015      	b.n	80025c0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002594:	893b      	ldrh	r3, [r7, #8]
 8002596:	0a1b      	lsrs	r3, r3, #8
 8002598:	b29b      	uxth	r3, r3
 800259a:	b2da      	uxtb	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025a2:	69fa      	ldr	r2, [r7, #28]
 80025a4:	69b9      	ldr	r1, [r7, #24]
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 f8ef 	bl	800278a <I2C_WaitOnTXISFlagUntilTimeout>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e012      	b.n	80025dc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025b6:	893b      	ldrh	r3, [r7, #8]
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	2200      	movs	r2, #0
 80025c8:	2180      	movs	r1, #128	@ 0x80
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f000 f884 	bl	80026d8 <I2C_WaitOnFlagUntilTimeout>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e000      	b.n	80025dc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	80002000 	.word	0x80002000

080025e8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af02      	add	r7, sp, #8
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	4608      	mov	r0, r1
 80025f2:	4611      	mov	r1, r2
 80025f4:	461a      	mov	r2, r3
 80025f6:	4603      	mov	r3, r0
 80025f8:	817b      	strh	r3, [r7, #10]
 80025fa:	460b      	mov	r3, r1
 80025fc:	813b      	strh	r3, [r7, #8]
 80025fe:	4613      	mov	r3, r2
 8002600:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002602:	88fb      	ldrh	r3, [r7, #6]
 8002604:	b2da      	uxtb	r2, r3
 8002606:	8979      	ldrh	r1, [r7, #10]
 8002608:	4b20      	ldr	r3, [pc, #128]	@ (800268c <I2C_RequestMemoryRead+0xa4>)
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	2300      	movs	r3, #0
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f000 fa26 	bl	8002a60 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002614:	69fa      	ldr	r2, [r7, #28]
 8002616:	69b9      	ldr	r1, [r7, #24]
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f000 f8b6 	bl	800278a <I2C_WaitOnTXISFlagUntilTimeout>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e02c      	b.n	8002682 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002628:	88fb      	ldrh	r3, [r7, #6]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d105      	bne.n	800263a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800262e:	893b      	ldrh	r3, [r7, #8]
 8002630:	b2da      	uxtb	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	629a      	str	r2, [r3, #40]	@ 0x28
 8002638:	e015      	b.n	8002666 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800263a:	893b      	ldrh	r3, [r7, #8]
 800263c:	0a1b      	lsrs	r3, r3, #8
 800263e:	b29b      	uxth	r3, r3
 8002640:	b2da      	uxtb	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002648:	69fa      	ldr	r2, [r7, #28]
 800264a:	69b9      	ldr	r1, [r7, #24]
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 f89c 	bl	800278a <I2C_WaitOnTXISFlagUntilTimeout>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e012      	b.n	8002682 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800265c:	893b      	ldrh	r3, [r7, #8]
 800265e:	b2da      	uxtb	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	2200      	movs	r2, #0
 800266e:	2140      	movs	r1, #64	@ 0x40
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 f831 	bl	80026d8 <I2C_WaitOnFlagUntilTimeout>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e000      	b.n	8002682 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	80002000 	.word	0x80002000

08002690 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d103      	bne.n	80026ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2200      	movs	r2, #0
 80026ac:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d007      	beq.n	80026cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	699a      	ldr	r2, [r3, #24]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 0201 	orr.w	r2, r2, #1
 80026ca:	619a      	str	r2, [r3, #24]
  }
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	603b      	str	r3, [r7, #0]
 80026e4:	4613      	mov	r3, r2
 80026e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026e8:	e03b      	b.n	8002762 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	6839      	ldr	r1, [r7, #0]
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f000 f8d6 	bl	80028a0 <I2C_IsErrorOccurred>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e041      	b.n	8002782 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002704:	d02d      	beq.n	8002762 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002706:	f7ff f979 	bl	80019fc <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	429a      	cmp	r2, r3
 8002714:	d302      	bcc.n	800271c <I2C_WaitOnFlagUntilTimeout+0x44>
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d122      	bne.n	8002762 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	699a      	ldr	r2, [r3, #24]
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	4013      	ands	r3, r2
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	429a      	cmp	r2, r3
 800272a:	bf0c      	ite	eq
 800272c:	2301      	moveq	r3, #1
 800272e:	2300      	movne	r3, #0
 8002730:	b2db      	uxtb	r3, r3
 8002732:	461a      	mov	r2, r3
 8002734:	79fb      	ldrb	r3, [r7, #7]
 8002736:	429a      	cmp	r2, r3
 8002738:	d113      	bne.n	8002762 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800273e:	f043 0220 	orr.w	r2, r3, #32
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2220      	movs	r2, #32
 800274a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e00f      	b.n	8002782 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	699a      	ldr	r2, [r3, #24]
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	4013      	ands	r3, r2
 800276c:	68ba      	ldr	r2, [r7, #8]
 800276e:	429a      	cmp	r2, r3
 8002770:	bf0c      	ite	eq
 8002772:	2301      	moveq	r3, #1
 8002774:	2300      	movne	r3, #0
 8002776:	b2db      	uxtb	r3, r3
 8002778:	461a      	mov	r2, r3
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	429a      	cmp	r2, r3
 800277e:	d0b4      	beq.n	80026ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b084      	sub	sp, #16
 800278e:	af00      	add	r7, sp, #0
 8002790:	60f8      	str	r0, [r7, #12]
 8002792:	60b9      	str	r1, [r7, #8]
 8002794:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002796:	e033      	b.n	8002800 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	68b9      	ldr	r1, [r7, #8]
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f000 f87f 	bl	80028a0 <I2C_IsErrorOccurred>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e031      	b.n	8002810 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b2:	d025      	beq.n	8002800 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027b4:	f7ff f922 	bl	80019fc <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	68ba      	ldr	r2, [r7, #8]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d302      	bcc.n	80027ca <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d11a      	bne.n	8002800 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d013      	beq.n	8002800 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027dc:	f043 0220 	orr.w	r2, r3, #32
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2220      	movs	r2, #32
 80027e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e007      	b.n	8002810 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b02      	cmp	r3, #2
 800280c:	d1c4      	bne.n	8002798 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002824:	e02f      	b.n	8002886 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	68b9      	ldr	r1, [r7, #8]
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f000 f838 	bl	80028a0 <I2C_IsErrorOccurred>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e02d      	b.n	8002896 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800283a:	f7ff f8df 	bl	80019fc <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	68ba      	ldr	r2, [r7, #8]
 8002846:	429a      	cmp	r2, r3
 8002848:	d302      	bcc.n	8002850 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d11a      	bne.n	8002886 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	f003 0320 	and.w	r3, r3, #32
 800285a:	2b20      	cmp	r3, #32
 800285c:	d013      	beq.n	8002886 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002862:	f043 0220 	orr.w	r2, r3, #32
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2220      	movs	r2, #32
 800286e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e007      	b.n	8002896 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	f003 0320 	and.w	r3, r3, #32
 8002890:	2b20      	cmp	r3, #32
 8002892:	d1c8      	bne.n	8002826 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
	...

080028a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b08a      	sub	sp, #40	@ 0x28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028ac:	2300      	movs	r3, #0
 80028ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80028ba:	2300      	movs	r3, #0
 80028bc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	f003 0310 	and.w	r3, r3, #16
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d068      	beq.n	800299e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2210      	movs	r2, #16
 80028d2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028d4:	e049      	b.n	800296a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028dc:	d045      	beq.n	800296a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028de:	f7ff f88d 	bl	80019fc <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	68ba      	ldr	r2, [r7, #8]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d302      	bcc.n	80028f4 <I2C_IsErrorOccurred+0x54>
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d13a      	bne.n	800296a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002906:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002912:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002916:	d121      	bne.n	800295c <I2C_IsErrorOccurred+0xbc>
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800291e:	d01d      	beq.n	800295c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002920:	7cfb      	ldrb	r3, [r7, #19]
 8002922:	2b20      	cmp	r3, #32
 8002924:	d01a      	beq.n	800295c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002934:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002936:	f7ff f861 	bl	80019fc <HAL_GetTick>
 800293a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800293c:	e00e      	b.n	800295c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800293e:	f7ff f85d 	bl	80019fc <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b19      	cmp	r3, #25
 800294a:	d907      	bls.n	800295c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800294c:	6a3b      	ldr	r3, [r7, #32]
 800294e:	f043 0320 	orr.w	r3, r3, #32
 8002952:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800295a:	e006      	b.n	800296a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	f003 0320 	and.w	r3, r3, #32
 8002966:	2b20      	cmp	r3, #32
 8002968:	d1e9      	bne.n	800293e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	f003 0320 	and.w	r3, r3, #32
 8002974:	2b20      	cmp	r3, #32
 8002976:	d003      	beq.n	8002980 <I2C_IsErrorOccurred+0xe0>
 8002978:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0aa      	beq.n	80028d6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002980:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002984:	2b00      	cmp	r3, #0
 8002986:	d103      	bne.n	8002990 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2220      	movs	r2, #32
 800298e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002990:	6a3b      	ldr	r3, [r7, #32]
 8002992:	f043 0304 	orr.w	r3, r3, #4
 8002996:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00b      	beq.n	80029c8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80029b0:	6a3b      	ldr	r3, [r7, #32]
 80029b2:	f043 0301 	orr.w	r3, r3, #1
 80029b6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00b      	beq.n	80029ea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80029d2:	6a3b      	ldr	r3, [r7, #32]
 80029d4:	f043 0308 	orr.w	r3, r3, #8
 80029d8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00b      	beq.n	8002a0c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80029f4:	6a3b      	ldr	r3, [r7, #32]
 80029f6:	f043 0302 	orr.w	r3, r3, #2
 80029fa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002a0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d01c      	beq.n	8002a4e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f7ff fe3b 	bl	8002690 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6859      	ldr	r1, [r3, #4]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	4b0d      	ldr	r3, [pc, #52]	@ (8002a5c <I2C_IsErrorOccurred+0x1bc>)
 8002a26:	400b      	ands	r3, r1
 8002a28:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a2e:	6a3b      	ldr	r3, [r7, #32]
 8002a30:	431a      	orrs	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2220      	movs	r2, #32
 8002a3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002a4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3728      	adds	r7, #40	@ 0x28
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	fe00e800 	.word	0xfe00e800

08002a60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	607b      	str	r3, [r7, #4]
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	817b      	strh	r3, [r7, #10]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a72:	897b      	ldrh	r3, [r7, #10]
 8002a74:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a78:	7a7b      	ldrb	r3, [r7, #9]
 8002a7a:	041b      	lsls	r3, r3, #16
 8002a7c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a80:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a8e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	0d5b      	lsrs	r3, r3, #21
 8002a9a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002a9e:	4b08      	ldr	r3, [pc, #32]	@ (8002ac0 <I2C_TransferConfig+0x60>)
 8002aa0:	430b      	orrs	r3, r1
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	ea02 0103 	and.w	r1, r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002ab2:	bf00      	nop
 8002ab4:	371c      	adds	r7, #28
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	03ff63ff 	.word	0x03ff63ff

08002ac4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b20      	cmp	r3, #32
 8002ad8:	d138      	bne.n	8002b4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d101      	bne.n	8002ae8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	e032      	b.n	8002b4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2224      	movs	r2, #36	@ 0x24
 8002af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 0201 	bic.w	r2, r2, #1
 8002b06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6819      	ldr	r1, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 0201 	orr.w	r2, r2, #1
 8002b36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	e000      	b.n	8002b4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b4c:	2302      	movs	r3, #2
  }
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b085      	sub	sp, #20
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
 8002b62:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b20      	cmp	r3, #32
 8002b6e:	d139      	bne.n	8002be4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d101      	bne.n	8002b7e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	e033      	b.n	8002be6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2224      	movs	r2, #36	@ 0x24
 8002b8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 0201 	bic.w	r2, r2, #1
 8002b9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002bac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	021b      	lsls	r3, r3, #8
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 0201 	orr.w	r2, r2, #1
 8002bce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002be0:	2300      	movs	r3, #0
 8002be2:	e000      	b.n	8002be6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002be4:	2302      	movs	r3, #2
  }
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
	...

08002bf4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002bf8:	4b04      	ldr	r3, [pc, #16]	@ (8002c0c <HAL_PWREx_GetVoltageRange+0x18>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	40007000 	.word	0x40007000

08002c10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c1e:	d130      	bne.n	8002c82 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c20:	4b23      	ldr	r3, [pc, #140]	@ (8002cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c2c:	d038      	beq.n	8002ca0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c2e:	4b20      	ldr	r3, [pc, #128]	@ (8002cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c36:	4a1e      	ldr	r2, [pc, #120]	@ (8002cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c38:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c3c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c3e:	4b1d      	ldr	r3, [pc, #116]	@ (8002cb4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2232      	movs	r2, #50	@ 0x32
 8002c44:	fb02 f303 	mul.w	r3, r2, r3
 8002c48:	4a1b      	ldr	r2, [pc, #108]	@ (8002cb8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4e:	0c9b      	lsrs	r3, r3, #18
 8002c50:	3301      	adds	r3, #1
 8002c52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c54:	e002      	b.n	8002c5c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c5c:	4b14      	ldr	r3, [pc, #80]	@ (8002cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c68:	d102      	bne.n	8002c70 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1f2      	bne.n	8002c56 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c70:	4b0f      	ldr	r3, [pc, #60]	@ (8002cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c7c:	d110      	bne.n	8002ca0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e00f      	b.n	8002ca2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c82:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c8e:	d007      	beq.n	8002ca0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c90:	4b07      	ldr	r3, [pc, #28]	@ (8002cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c98:	4a05      	ldr	r2, [pc, #20]	@ (8002cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c9e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	40007000 	.word	0x40007000
 8002cb4:	20000000 	.word	0x20000000
 8002cb8:	431bde83 	.word	0x431bde83

08002cbc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b088      	sub	sp, #32
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e3ca      	b.n	8003464 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cce:	4b97      	ldr	r3, [pc, #604]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f003 030c 	and.w	r3, r3, #12
 8002cd6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cd8:	4b94      	ldr	r3, [pc, #592]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f003 0303 	and.w	r3, r3, #3
 8002ce0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0310 	and.w	r3, r3, #16
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f000 80e4 	beq.w	8002eb8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d007      	beq.n	8002d06 <HAL_RCC_OscConfig+0x4a>
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	2b0c      	cmp	r3, #12
 8002cfa:	f040 808b 	bne.w	8002e14 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	f040 8087 	bne.w	8002e14 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d06:	4b89      	ldr	r3, [pc, #548]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d005      	beq.n	8002d1e <HAL_RCC_OscConfig+0x62>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e3a2      	b.n	8003464 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a1a      	ldr	r2, [r3, #32]
 8002d22:	4b82      	ldr	r3, [pc, #520]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d004      	beq.n	8002d38 <HAL_RCC_OscConfig+0x7c>
 8002d2e:	4b7f      	ldr	r3, [pc, #508]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d36:	e005      	b.n	8002d44 <HAL_RCC_OscConfig+0x88>
 8002d38:	4b7c      	ldr	r3, [pc, #496]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d3e:	091b      	lsrs	r3, r3, #4
 8002d40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d223      	bcs.n	8002d90 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f000 fd55 	bl	80037fc <RCC_SetFlashLatencyFromMSIRange>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e383      	b.n	8003464 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d5c:	4b73      	ldr	r3, [pc, #460]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a72      	ldr	r2, [pc, #456]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002d62:	f043 0308 	orr.w	r3, r3, #8
 8002d66:	6013      	str	r3, [r2, #0]
 8002d68:	4b70      	ldr	r3, [pc, #448]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	496d      	ldr	r1, [pc, #436]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d7a:	4b6c      	ldr	r3, [pc, #432]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	021b      	lsls	r3, r3, #8
 8002d88:	4968      	ldr	r1, [pc, #416]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	604b      	str	r3, [r1, #4]
 8002d8e:	e025      	b.n	8002ddc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d90:	4b66      	ldr	r3, [pc, #408]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a65      	ldr	r2, [pc, #404]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002d96:	f043 0308 	orr.w	r3, r3, #8
 8002d9a:	6013      	str	r3, [r2, #0]
 8002d9c:	4b63      	ldr	r3, [pc, #396]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	4960      	ldr	r1, [pc, #384]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dae:	4b5f      	ldr	r3, [pc, #380]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	021b      	lsls	r3, r3, #8
 8002dbc:	495b      	ldr	r1, [pc, #364]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d109      	bne.n	8002ddc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f000 fd15 	bl	80037fc <RCC_SetFlashLatencyFromMSIRange>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e343      	b.n	8003464 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ddc:	f000 fc4a 	bl	8003674 <HAL_RCC_GetSysClockFreq>
 8002de0:	4602      	mov	r2, r0
 8002de2:	4b52      	ldr	r3, [pc, #328]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	091b      	lsrs	r3, r3, #4
 8002de8:	f003 030f 	and.w	r3, r3, #15
 8002dec:	4950      	ldr	r1, [pc, #320]	@ (8002f30 <HAL_RCC_OscConfig+0x274>)
 8002dee:	5ccb      	ldrb	r3, [r1, r3]
 8002df0:	f003 031f 	and.w	r3, r3, #31
 8002df4:	fa22 f303 	lsr.w	r3, r2, r3
 8002df8:	4a4e      	ldr	r2, [pc, #312]	@ (8002f34 <HAL_RCC_OscConfig+0x278>)
 8002dfa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002dfc:	4b4e      	ldr	r3, [pc, #312]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7fe fdab 	bl	800195c <HAL_InitTick>
 8002e06:	4603      	mov	r3, r0
 8002e08:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e0a:	7bfb      	ldrb	r3, [r7, #15]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d052      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
 8002e12:	e327      	b.n	8003464 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d032      	beq.n	8002e82 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e1c:	4b43      	ldr	r3, [pc, #268]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a42      	ldr	r2, [pc, #264]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002e22:	f043 0301 	orr.w	r3, r3, #1
 8002e26:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e28:	f7fe fde8 	bl	80019fc <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e30:	f7fe fde4 	bl	80019fc <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e310      	b.n	8003464 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e42:	4b3a      	ldr	r3, [pc, #232]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0f0      	beq.n	8002e30 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e4e:	4b37      	ldr	r3, [pc, #220]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a36      	ldr	r2, [pc, #216]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002e54:	f043 0308 	orr.w	r3, r3, #8
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	4b34      	ldr	r3, [pc, #208]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	4931      	ldr	r1, [pc, #196]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e6c:	4b2f      	ldr	r3, [pc, #188]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	69db      	ldr	r3, [r3, #28]
 8002e78:	021b      	lsls	r3, r3, #8
 8002e7a:	492c      	ldr	r1, [pc, #176]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	604b      	str	r3, [r1, #4]
 8002e80:	e01a      	b.n	8002eb8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e82:	4b2a      	ldr	r3, [pc, #168]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a29      	ldr	r2, [pc, #164]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002e88:	f023 0301 	bic.w	r3, r3, #1
 8002e8c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e8e:	f7fe fdb5 	bl	80019fc <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e96:	f7fe fdb1 	bl	80019fc <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e2dd      	b.n	8003464 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ea8:	4b20      	ldr	r3, [pc, #128]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1f0      	bne.n	8002e96 <HAL_RCC_OscConfig+0x1da>
 8002eb4:	e000      	b.n	8002eb8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002eb6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d074      	beq.n	8002fae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	2b08      	cmp	r3, #8
 8002ec8:	d005      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x21a>
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	2b0c      	cmp	r3, #12
 8002ece:	d10e      	bne.n	8002eee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	2b03      	cmp	r3, #3
 8002ed4:	d10b      	bne.n	8002eee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed6:	4b15      	ldr	r3, [pc, #84]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d064      	beq.n	8002fac <HAL_RCC_OscConfig+0x2f0>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d160      	bne.n	8002fac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e2ba      	b.n	8003464 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ef6:	d106      	bne.n	8002f06 <HAL_RCC_OscConfig+0x24a>
 8002ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a0b      	ldr	r2, [pc, #44]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002efe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f02:	6013      	str	r3, [r2, #0]
 8002f04:	e026      	b.n	8002f54 <HAL_RCC_OscConfig+0x298>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f0e:	d115      	bne.n	8002f3c <HAL_RCC_OscConfig+0x280>
 8002f10:	4b06      	ldr	r3, [pc, #24]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a05      	ldr	r2, [pc, #20]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002f16:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f1a:	6013      	str	r3, [r2, #0]
 8002f1c:	4b03      	ldr	r3, [pc, #12]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a02      	ldr	r2, [pc, #8]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002f22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f26:	6013      	str	r3, [r2, #0]
 8002f28:	e014      	b.n	8002f54 <HAL_RCC_OscConfig+0x298>
 8002f2a:	bf00      	nop
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	0800a0c0 	.word	0x0800a0c0
 8002f34:	20000000 	.word	0x20000000
 8002f38:	20000004 	.word	0x20000004
 8002f3c:	4ba0      	ldr	r3, [pc, #640]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a9f      	ldr	r2, [pc, #636]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 8002f42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f46:	6013      	str	r3, [r2, #0]
 8002f48:	4b9d      	ldr	r3, [pc, #628]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a9c      	ldr	r2, [pc, #624]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 8002f4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d013      	beq.n	8002f84 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5c:	f7fe fd4e 	bl	80019fc <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f64:	f7fe fd4a 	bl	80019fc <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b64      	cmp	r3, #100	@ 0x64
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e276      	b.n	8003464 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f76:	4b92      	ldr	r3, [pc, #584]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d0f0      	beq.n	8002f64 <HAL_RCC_OscConfig+0x2a8>
 8002f82:	e014      	b.n	8002fae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f84:	f7fe fd3a 	bl	80019fc <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f8c:	f7fe fd36 	bl	80019fc <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b64      	cmp	r3, #100	@ 0x64
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e262      	b.n	8003464 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f9e:	4b88      	ldr	r3, [pc, #544]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1f0      	bne.n	8002f8c <HAL_RCC_OscConfig+0x2d0>
 8002faa:	e000      	b.n	8002fae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d060      	beq.n	800307c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	2b04      	cmp	r3, #4
 8002fbe:	d005      	beq.n	8002fcc <HAL_RCC_OscConfig+0x310>
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	2b0c      	cmp	r3, #12
 8002fc4:	d119      	bne.n	8002ffa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d116      	bne.n	8002ffa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fcc:	4b7c      	ldr	r3, [pc, #496]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d005      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x328>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e23f      	b.n	8003464 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe4:	4b76      	ldr	r3, [pc, #472]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	061b      	lsls	r3, r3, #24
 8002ff2:	4973      	ldr	r1, [pc, #460]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ff8:	e040      	b.n	800307c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d023      	beq.n	800304a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003002:	4b6f      	ldr	r3, [pc, #444]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a6e      	ldr	r2, [pc, #440]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 8003008:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800300c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300e:	f7fe fcf5 	bl	80019fc <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003016:	f7fe fcf1 	bl	80019fc <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e21d      	b.n	8003464 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003028:	4b65      	ldr	r3, [pc, #404]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0f0      	beq.n	8003016 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003034:	4b62      	ldr	r3, [pc, #392]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	061b      	lsls	r3, r3, #24
 8003042:	495f      	ldr	r1, [pc, #380]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 8003044:	4313      	orrs	r3, r2
 8003046:	604b      	str	r3, [r1, #4]
 8003048:	e018      	b.n	800307c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800304a:	4b5d      	ldr	r3, [pc, #372]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a5c      	ldr	r2, [pc, #368]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 8003050:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003054:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003056:	f7fe fcd1 	bl	80019fc <HAL_GetTick>
 800305a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800305c:	e008      	b.n	8003070 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800305e:	f7fe fccd 	bl	80019fc <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e1f9      	b.n	8003464 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003070:	4b53      	ldr	r3, [pc, #332]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1f0      	bne.n	800305e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0308 	and.w	r3, r3, #8
 8003084:	2b00      	cmp	r3, #0
 8003086:	d03c      	beq.n	8003102 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d01c      	beq.n	80030ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003090:	4b4b      	ldr	r3, [pc, #300]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 8003092:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003096:	4a4a      	ldr	r2, [pc, #296]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 8003098:	f043 0301 	orr.w	r3, r3, #1
 800309c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a0:	f7fe fcac 	bl	80019fc <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030a8:	f7fe fca8 	bl	80019fc <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e1d4      	b.n	8003464 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030ba:	4b41      	ldr	r3, [pc, #260]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 80030bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d0ef      	beq.n	80030a8 <HAL_RCC_OscConfig+0x3ec>
 80030c8:	e01b      	b.n	8003102 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030ca:	4b3d      	ldr	r3, [pc, #244]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 80030cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030d0:	4a3b      	ldr	r2, [pc, #236]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 80030d2:	f023 0301 	bic.w	r3, r3, #1
 80030d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030da:	f7fe fc8f 	bl	80019fc <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030e0:	e008      	b.n	80030f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030e2:	f7fe fc8b 	bl	80019fc <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e1b7      	b.n	8003464 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030f4:	4b32      	ldr	r3, [pc, #200]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 80030f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1ef      	bne.n	80030e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0304 	and.w	r3, r3, #4
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 80a6 	beq.w	800325c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003110:	2300      	movs	r3, #0
 8003112:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003114:	4b2a      	ldr	r3, [pc, #168]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 8003116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003118:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10d      	bne.n	800313c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003120:	4b27      	ldr	r3, [pc, #156]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 8003122:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003124:	4a26      	ldr	r2, [pc, #152]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 8003126:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800312a:	6593      	str	r3, [r2, #88]	@ 0x58
 800312c:	4b24      	ldr	r3, [pc, #144]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 800312e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003130:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003134:	60bb      	str	r3, [r7, #8]
 8003136:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003138:	2301      	movs	r3, #1
 800313a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800313c:	4b21      	ldr	r3, [pc, #132]	@ (80031c4 <HAL_RCC_OscConfig+0x508>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003144:	2b00      	cmp	r3, #0
 8003146:	d118      	bne.n	800317a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003148:	4b1e      	ldr	r3, [pc, #120]	@ (80031c4 <HAL_RCC_OscConfig+0x508>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a1d      	ldr	r2, [pc, #116]	@ (80031c4 <HAL_RCC_OscConfig+0x508>)
 800314e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003152:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003154:	f7fe fc52 	bl	80019fc <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800315a:	e008      	b.n	800316e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800315c:	f7fe fc4e 	bl	80019fc <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e17a      	b.n	8003464 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800316e:	4b15      	ldr	r3, [pc, #84]	@ (80031c4 <HAL_RCC_OscConfig+0x508>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0f0      	beq.n	800315c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d108      	bne.n	8003194 <HAL_RCC_OscConfig+0x4d8>
 8003182:	4b0f      	ldr	r3, [pc, #60]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 8003184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003188:	4a0d      	ldr	r2, [pc, #52]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 800318a:	f043 0301 	orr.w	r3, r3, #1
 800318e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003192:	e029      	b.n	80031e8 <HAL_RCC_OscConfig+0x52c>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	2b05      	cmp	r3, #5
 800319a:	d115      	bne.n	80031c8 <HAL_RCC_OscConfig+0x50c>
 800319c:	4b08      	ldr	r3, [pc, #32]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 800319e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031a2:	4a07      	ldr	r2, [pc, #28]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 80031a4:	f043 0304 	orr.w	r3, r3, #4
 80031a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031ac:	4b04      	ldr	r3, [pc, #16]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 80031ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031b2:	4a03      	ldr	r2, [pc, #12]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 80031b4:	f043 0301 	orr.w	r3, r3, #1
 80031b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031bc:	e014      	b.n	80031e8 <HAL_RCC_OscConfig+0x52c>
 80031be:	bf00      	nop
 80031c0:	40021000 	.word	0x40021000
 80031c4:	40007000 	.word	0x40007000
 80031c8:	4b9c      	ldr	r3, [pc, #624]	@ (800343c <HAL_RCC_OscConfig+0x780>)
 80031ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ce:	4a9b      	ldr	r2, [pc, #620]	@ (800343c <HAL_RCC_OscConfig+0x780>)
 80031d0:	f023 0301 	bic.w	r3, r3, #1
 80031d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031d8:	4b98      	ldr	r3, [pc, #608]	@ (800343c <HAL_RCC_OscConfig+0x780>)
 80031da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031de:	4a97      	ldr	r2, [pc, #604]	@ (800343c <HAL_RCC_OscConfig+0x780>)
 80031e0:	f023 0304 	bic.w	r3, r3, #4
 80031e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d016      	beq.n	800321e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f0:	f7fe fc04 	bl	80019fc <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031f6:	e00a      	b.n	800320e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031f8:	f7fe fc00 	bl	80019fc <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003206:	4293      	cmp	r3, r2
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e12a      	b.n	8003464 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800320e:	4b8b      	ldr	r3, [pc, #556]	@ (800343c <HAL_RCC_OscConfig+0x780>)
 8003210:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d0ed      	beq.n	80031f8 <HAL_RCC_OscConfig+0x53c>
 800321c:	e015      	b.n	800324a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321e:	f7fe fbed 	bl	80019fc <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003224:	e00a      	b.n	800323c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003226:	f7fe fbe9 	bl	80019fc <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003234:	4293      	cmp	r3, r2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e113      	b.n	8003464 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800323c:	4b7f      	ldr	r3, [pc, #508]	@ (800343c <HAL_RCC_OscConfig+0x780>)
 800323e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1ed      	bne.n	8003226 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800324a:	7ffb      	ldrb	r3, [r7, #31]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d105      	bne.n	800325c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003250:	4b7a      	ldr	r3, [pc, #488]	@ (800343c <HAL_RCC_OscConfig+0x780>)
 8003252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003254:	4a79      	ldr	r2, [pc, #484]	@ (800343c <HAL_RCC_OscConfig+0x780>)
 8003256:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800325a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 80fe 	beq.w	8003462 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800326a:	2b02      	cmp	r3, #2
 800326c:	f040 80d0 	bne.w	8003410 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003270:	4b72      	ldr	r3, [pc, #456]	@ (800343c <HAL_RCC_OscConfig+0x780>)
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	f003 0203 	and.w	r2, r3, #3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003280:	429a      	cmp	r2, r3
 8003282:	d130      	bne.n	80032e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328e:	3b01      	subs	r3, #1
 8003290:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003292:	429a      	cmp	r2, r3
 8003294:	d127      	bne.n	80032e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d11f      	bne.n	80032e6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80032b0:	2a07      	cmp	r2, #7
 80032b2:	bf14      	ite	ne
 80032b4:	2201      	movne	r2, #1
 80032b6:	2200      	moveq	r2, #0
 80032b8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d113      	bne.n	80032e6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032c8:	085b      	lsrs	r3, r3, #1
 80032ca:	3b01      	subs	r3, #1
 80032cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d109      	bne.n	80032e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032dc:	085b      	lsrs	r3, r3, #1
 80032de:	3b01      	subs	r3, #1
 80032e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d06e      	beq.n	80033c4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	2b0c      	cmp	r3, #12
 80032ea:	d069      	beq.n	80033c0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80032ec:	4b53      	ldr	r3, [pc, #332]	@ (800343c <HAL_RCC_OscConfig+0x780>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d105      	bne.n	8003304 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80032f8:	4b50      	ldr	r3, [pc, #320]	@ (800343c <HAL_RCC_OscConfig+0x780>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e0ad      	b.n	8003464 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003308:	4b4c      	ldr	r3, [pc, #304]	@ (800343c <HAL_RCC_OscConfig+0x780>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a4b      	ldr	r2, [pc, #300]	@ (800343c <HAL_RCC_OscConfig+0x780>)
 800330e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003312:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003314:	f7fe fb72 	bl	80019fc <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800331c:	f7fe fb6e 	bl	80019fc <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e09a      	b.n	8003464 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800332e:	4b43      	ldr	r3, [pc, #268]	@ (800343c <HAL_RCC_OscConfig+0x780>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1f0      	bne.n	800331c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800333a:	4b40      	ldr	r3, [pc, #256]	@ (800343c <HAL_RCC_OscConfig+0x780>)
 800333c:	68da      	ldr	r2, [r3, #12]
 800333e:	4b40      	ldr	r3, [pc, #256]	@ (8003440 <HAL_RCC_OscConfig+0x784>)
 8003340:	4013      	ands	r3, r2
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800334a:	3a01      	subs	r2, #1
 800334c:	0112      	lsls	r2, r2, #4
 800334e:	4311      	orrs	r1, r2
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003354:	0212      	lsls	r2, r2, #8
 8003356:	4311      	orrs	r1, r2
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800335c:	0852      	lsrs	r2, r2, #1
 800335e:	3a01      	subs	r2, #1
 8003360:	0552      	lsls	r2, r2, #21
 8003362:	4311      	orrs	r1, r2
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003368:	0852      	lsrs	r2, r2, #1
 800336a:	3a01      	subs	r2, #1
 800336c:	0652      	lsls	r2, r2, #25
 800336e:	4311      	orrs	r1, r2
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003374:	0912      	lsrs	r2, r2, #4
 8003376:	0452      	lsls	r2, r2, #17
 8003378:	430a      	orrs	r2, r1
 800337a:	4930      	ldr	r1, [pc, #192]	@ (800343c <HAL_RCC_OscConfig+0x780>)
 800337c:	4313      	orrs	r3, r2
 800337e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003380:	4b2e      	ldr	r3, [pc, #184]	@ (800343c <HAL_RCC_OscConfig+0x780>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a2d      	ldr	r2, [pc, #180]	@ (800343c <HAL_RCC_OscConfig+0x780>)
 8003386:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800338a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800338c:	4b2b      	ldr	r3, [pc, #172]	@ (800343c <HAL_RCC_OscConfig+0x780>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	4a2a      	ldr	r2, [pc, #168]	@ (800343c <HAL_RCC_OscConfig+0x780>)
 8003392:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003396:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003398:	f7fe fb30 	bl	80019fc <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a0:	f7fe fb2c 	bl	80019fc <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e058      	b.n	8003464 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033b2:	4b22      	ldr	r3, [pc, #136]	@ (800343c <HAL_RCC_OscConfig+0x780>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d0f0      	beq.n	80033a0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033be:	e050      	b.n	8003462 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e04f      	b.n	8003464 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033c4:	4b1d      	ldr	r3, [pc, #116]	@ (800343c <HAL_RCC_OscConfig+0x780>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d148      	bne.n	8003462 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80033d0:	4b1a      	ldr	r3, [pc, #104]	@ (800343c <HAL_RCC_OscConfig+0x780>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a19      	ldr	r2, [pc, #100]	@ (800343c <HAL_RCC_OscConfig+0x780>)
 80033d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033dc:	4b17      	ldr	r3, [pc, #92]	@ (800343c <HAL_RCC_OscConfig+0x780>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	4a16      	ldr	r2, [pc, #88]	@ (800343c <HAL_RCC_OscConfig+0x780>)
 80033e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033e8:	f7fe fb08 	bl	80019fc <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f0:	f7fe fb04 	bl	80019fc <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e030      	b.n	8003464 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003402:	4b0e      	ldr	r3, [pc, #56]	@ (800343c <HAL_RCC_OscConfig+0x780>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0f0      	beq.n	80033f0 <HAL_RCC_OscConfig+0x734>
 800340e:	e028      	b.n	8003462 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	2b0c      	cmp	r3, #12
 8003414:	d023      	beq.n	800345e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003416:	4b09      	ldr	r3, [pc, #36]	@ (800343c <HAL_RCC_OscConfig+0x780>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a08      	ldr	r2, [pc, #32]	@ (800343c <HAL_RCC_OscConfig+0x780>)
 800341c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003420:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003422:	f7fe faeb 	bl	80019fc <HAL_GetTick>
 8003426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003428:	e00c      	b.n	8003444 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800342a:	f7fe fae7 	bl	80019fc <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d905      	bls.n	8003444 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e013      	b.n	8003464 <HAL_RCC_OscConfig+0x7a8>
 800343c:	40021000 	.word	0x40021000
 8003440:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003444:	4b09      	ldr	r3, [pc, #36]	@ (800346c <HAL_RCC_OscConfig+0x7b0>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1ec      	bne.n	800342a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003450:	4b06      	ldr	r3, [pc, #24]	@ (800346c <HAL_RCC_OscConfig+0x7b0>)
 8003452:	68da      	ldr	r2, [r3, #12]
 8003454:	4905      	ldr	r1, [pc, #20]	@ (800346c <HAL_RCC_OscConfig+0x7b0>)
 8003456:	4b06      	ldr	r3, [pc, #24]	@ (8003470 <HAL_RCC_OscConfig+0x7b4>)
 8003458:	4013      	ands	r3, r2
 800345a:	60cb      	str	r3, [r1, #12]
 800345c:	e001      	b.n	8003462 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e000      	b.n	8003464 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3720      	adds	r7, #32
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	40021000 	.word	0x40021000
 8003470:	feeefffc 	.word	0xfeeefffc

08003474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e0e7      	b.n	8003658 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003488:	4b75      	ldr	r3, [pc, #468]	@ (8003660 <HAL_RCC_ClockConfig+0x1ec>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d910      	bls.n	80034b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003496:	4b72      	ldr	r3, [pc, #456]	@ (8003660 <HAL_RCC_ClockConfig+0x1ec>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f023 0207 	bic.w	r2, r3, #7
 800349e:	4970      	ldr	r1, [pc, #448]	@ (8003660 <HAL_RCC_ClockConfig+0x1ec>)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a6:	4b6e      	ldr	r3, [pc, #440]	@ (8003660 <HAL_RCC_ClockConfig+0x1ec>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d001      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e0cf      	b.n	8003658 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d010      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	4b66      	ldr	r3, [pc, #408]	@ (8003664 <HAL_RCC_ClockConfig+0x1f0>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d908      	bls.n	80034e6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034d4:	4b63      	ldr	r3, [pc, #396]	@ (8003664 <HAL_RCC_ClockConfig+0x1f0>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	4960      	ldr	r1, [pc, #384]	@ (8003664 <HAL_RCC_ClockConfig+0x1f0>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d04c      	beq.n	800358c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	2b03      	cmp	r3, #3
 80034f8:	d107      	bne.n	800350a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034fa:	4b5a      	ldr	r3, [pc, #360]	@ (8003664 <HAL_RCC_ClockConfig+0x1f0>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d121      	bne.n	800354a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e0a6      	b.n	8003658 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b02      	cmp	r3, #2
 8003510:	d107      	bne.n	8003522 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003512:	4b54      	ldr	r3, [pc, #336]	@ (8003664 <HAL_RCC_ClockConfig+0x1f0>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d115      	bne.n	800354a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e09a      	b.n	8003658 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d107      	bne.n	800353a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800352a:	4b4e      	ldr	r3, [pc, #312]	@ (8003664 <HAL_RCC_ClockConfig+0x1f0>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d109      	bne.n	800354a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e08e      	b.n	8003658 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800353a:	4b4a      	ldr	r3, [pc, #296]	@ (8003664 <HAL_RCC_ClockConfig+0x1f0>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e086      	b.n	8003658 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800354a:	4b46      	ldr	r3, [pc, #280]	@ (8003664 <HAL_RCC_ClockConfig+0x1f0>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f023 0203 	bic.w	r2, r3, #3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	4943      	ldr	r1, [pc, #268]	@ (8003664 <HAL_RCC_ClockConfig+0x1f0>)
 8003558:	4313      	orrs	r3, r2
 800355a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800355c:	f7fe fa4e 	bl	80019fc <HAL_GetTick>
 8003560:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003562:	e00a      	b.n	800357a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003564:	f7fe fa4a 	bl	80019fc <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003572:	4293      	cmp	r3, r2
 8003574:	d901      	bls.n	800357a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e06e      	b.n	8003658 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800357a:	4b3a      	ldr	r3, [pc, #232]	@ (8003664 <HAL_RCC_ClockConfig+0x1f0>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 020c 	and.w	r2, r3, #12
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	429a      	cmp	r2, r3
 800358a:	d1eb      	bne.n	8003564 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d010      	beq.n	80035ba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	4b31      	ldr	r3, [pc, #196]	@ (8003664 <HAL_RCC_ClockConfig+0x1f0>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d208      	bcs.n	80035ba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035a8:	4b2e      	ldr	r3, [pc, #184]	@ (8003664 <HAL_RCC_ClockConfig+0x1f0>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	492b      	ldr	r1, [pc, #172]	@ (8003664 <HAL_RCC_ClockConfig+0x1f0>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035ba:	4b29      	ldr	r3, [pc, #164]	@ (8003660 <HAL_RCC_ClockConfig+0x1ec>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0307 	and.w	r3, r3, #7
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d210      	bcs.n	80035ea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035c8:	4b25      	ldr	r3, [pc, #148]	@ (8003660 <HAL_RCC_ClockConfig+0x1ec>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f023 0207 	bic.w	r2, r3, #7
 80035d0:	4923      	ldr	r1, [pc, #140]	@ (8003660 <HAL_RCC_ClockConfig+0x1ec>)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d8:	4b21      	ldr	r3, [pc, #132]	@ (8003660 <HAL_RCC_ClockConfig+0x1ec>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d001      	beq.n	80035ea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e036      	b.n	8003658 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0304 	and.w	r3, r3, #4
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d008      	beq.n	8003608 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035f6:	4b1b      	ldr	r3, [pc, #108]	@ (8003664 <HAL_RCC_ClockConfig+0x1f0>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	4918      	ldr	r1, [pc, #96]	@ (8003664 <HAL_RCC_ClockConfig+0x1f0>)
 8003604:	4313      	orrs	r3, r2
 8003606:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0308 	and.w	r3, r3, #8
 8003610:	2b00      	cmp	r3, #0
 8003612:	d009      	beq.n	8003628 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003614:	4b13      	ldr	r3, [pc, #76]	@ (8003664 <HAL_RCC_ClockConfig+0x1f0>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	4910      	ldr	r1, [pc, #64]	@ (8003664 <HAL_RCC_ClockConfig+0x1f0>)
 8003624:	4313      	orrs	r3, r2
 8003626:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003628:	f000 f824 	bl	8003674 <HAL_RCC_GetSysClockFreq>
 800362c:	4602      	mov	r2, r0
 800362e:	4b0d      	ldr	r3, [pc, #52]	@ (8003664 <HAL_RCC_ClockConfig+0x1f0>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	091b      	lsrs	r3, r3, #4
 8003634:	f003 030f 	and.w	r3, r3, #15
 8003638:	490b      	ldr	r1, [pc, #44]	@ (8003668 <HAL_RCC_ClockConfig+0x1f4>)
 800363a:	5ccb      	ldrb	r3, [r1, r3]
 800363c:	f003 031f 	and.w	r3, r3, #31
 8003640:	fa22 f303 	lsr.w	r3, r2, r3
 8003644:	4a09      	ldr	r2, [pc, #36]	@ (800366c <HAL_RCC_ClockConfig+0x1f8>)
 8003646:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003648:	4b09      	ldr	r3, [pc, #36]	@ (8003670 <HAL_RCC_ClockConfig+0x1fc>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4618      	mov	r0, r3
 800364e:	f7fe f985 	bl	800195c <HAL_InitTick>
 8003652:	4603      	mov	r3, r0
 8003654:	72fb      	strb	r3, [r7, #11]

  return status;
 8003656:	7afb      	ldrb	r3, [r7, #11]
}
 8003658:	4618      	mov	r0, r3
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40022000 	.word	0x40022000
 8003664:	40021000 	.word	0x40021000
 8003668:	0800a0c0 	.word	0x0800a0c0
 800366c:	20000000 	.word	0x20000000
 8003670:	20000004 	.word	0x20000004

08003674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003674:	b480      	push	{r7}
 8003676:	b089      	sub	sp, #36	@ 0x24
 8003678:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800367a:	2300      	movs	r3, #0
 800367c:	61fb      	str	r3, [r7, #28]
 800367e:	2300      	movs	r3, #0
 8003680:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003682:	4b3e      	ldr	r3, [pc, #248]	@ (800377c <HAL_RCC_GetSysClockFreq+0x108>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f003 030c 	and.w	r3, r3, #12
 800368a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800368c:	4b3b      	ldr	r3, [pc, #236]	@ (800377c <HAL_RCC_GetSysClockFreq+0x108>)
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	f003 0303 	and.w	r3, r3, #3
 8003694:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d005      	beq.n	80036a8 <HAL_RCC_GetSysClockFreq+0x34>
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	2b0c      	cmp	r3, #12
 80036a0:	d121      	bne.n	80036e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d11e      	bne.n	80036e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80036a8:	4b34      	ldr	r3, [pc, #208]	@ (800377c <HAL_RCC_GetSysClockFreq+0x108>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0308 	and.w	r3, r3, #8
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d107      	bne.n	80036c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80036b4:	4b31      	ldr	r3, [pc, #196]	@ (800377c <HAL_RCC_GetSysClockFreq+0x108>)
 80036b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036ba:	0a1b      	lsrs	r3, r3, #8
 80036bc:	f003 030f 	and.w	r3, r3, #15
 80036c0:	61fb      	str	r3, [r7, #28]
 80036c2:	e005      	b.n	80036d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80036c4:	4b2d      	ldr	r3, [pc, #180]	@ (800377c <HAL_RCC_GetSysClockFreq+0x108>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	091b      	lsrs	r3, r3, #4
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80036d0:	4a2b      	ldr	r2, [pc, #172]	@ (8003780 <HAL_RCC_GetSysClockFreq+0x10c>)
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10d      	bne.n	80036fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036e4:	e00a      	b.n	80036fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	2b04      	cmp	r3, #4
 80036ea:	d102      	bne.n	80036f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036ec:	4b25      	ldr	r3, [pc, #148]	@ (8003784 <HAL_RCC_GetSysClockFreq+0x110>)
 80036ee:	61bb      	str	r3, [r7, #24]
 80036f0:	e004      	b.n	80036fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	2b08      	cmp	r3, #8
 80036f6:	d101      	bne.n	80036fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036f8:	4b23      	ldr	r3, [pc, #140]	@ (8003788 <HAL_RCC_GetSysClockFreq+0x114>)
 80036fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	2b0c      	cmp	r3, #12
 8003700:	d134      	bne.n	800376c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003702:	4b1e      	ldr	r3, [pc, #120]	@ (800377c <HAL_RCC_GetSysClockFreq+0x108>)
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	f003 0303 	and.w	r3, r3, #3
 800370a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2b02      	cmp	r3, #2
 8003710:	d003      	beq.n	800371a <HAL_RCC_GetSysClockFreq+0xa6>
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2b03      	cmp	r3, #3
 8003716:	d003      	beq.n	8003720 <HAL_RCC_GetSysClockFreq+0xac>
 8003718:	e005      	b.n	8003726 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800371a:	4b1a      	ldr	r3, [pc, #104]	@ (8003784 <HAL_RCC_GetSysClockFreq+0x110>)
 800371c:	617b      	str	r3, [r7, #20]
      break;
 800371e:	e005      	b.n	800372c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003720:	4b19      	ldr	r3, [pc, #100]	@ (8003788 <HAL_RCC_GetSysClockFreq+0x114>)
 8003722:	617b      	str	r3, [r7, #20]
      break;
 8003724:	e002      	b.n	800372c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	617b      	str	r3, [r7, #20]
      break;
 800372a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800372c:	4b13      	ldr	r3, [pc, #76]	@ (800377c <HAL_RCC_GetSysClockFreq+0x108>)
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	091b      	lsrs	r3, r3, #4
 8003732:	f003 0307 	and.w	r3, r3, #7
 8003736:	3301      	adds	r3, #1
 8003738:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800373a:	4b10      	ldr	r3, [pc, #64]	@ (800377c <HAL_RCC_GetSysClockFreq+0x108>)
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	0a1b      	lsrs	r3, r3, #8
 8003740:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	fb03 f202 	mul.w	r2, r3, r2
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003750:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003752:	4b0a      	ldr	r3, [pc, #40]	@ (800377c <HAL_RCC_GetSysClockFreq+0x108>)
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	0e5b      	lsrs	r3, r3, #25
 8003758:	f003 0303 	and.w	r3, r3, #3
 800375c:	3301      	adds	r3, #1
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	fbb2 f3f3 	udiv	r3, r2, r3
 800376a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800376c:	69bb      	ldr	r3, [r7, #24]
}
 800376e:	4618      	mov	r0, r3
 8003770:	3724      	adds	r7, #36	@ 0x24
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	40021000 	.word	0x40021000
 8003780:	0800a0d8 	.word	0x0800a0d8
 8003784:	00f42400 	.word	0x00f42400
 8003788:	007a1200 	.word	0x007a1200

0800378c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003790:	4b03      	ldr	r3, [pc, #12]	@ (80037a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003792:	681b      	ldr	r3, [r3, #0]
}
 8003794:	4618      	mov	r0, r3
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	20000000 	.word	0x20000000

080037a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80037a8:	f7ff fff0 	bl	800378c <HAL_RCC_GetHCLKFreq>
 80037ac:	4602      	mov	r2, r0
 80037ae:	4b06      	ldr	r3, [pc, #24]	@ (80037c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	0a1b      	lsrs	r3, r3, #8
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	4904      	ldr	r1, [pc, #16]	@ (80037cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80037ba:	5ccb      	ldrb	r3, [r1, r3]
 80037bc:	f003 031f 	and.w	r3, r3, #31
 80037c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	40021000 	.word	0x40021000
 80037cc:	0800a0d0 	.word	0x0800a0d0

080037d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80037d4:	f7ff ffda 	bl	800378c <HAL_RCC_GetHCLKFreq>
 80037d8:	4602      	mov	r2, r0
 80037da:	4b06      	ldr	r3, [pc, #24]	@ (80037f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	0adb      	lsrs	r3, r3, #11
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	4904      	ldr	r1, [pc, #16]	@ (80037f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80037e6:	5ccb      	ldrb	r3, [r1, r3]
 80037e8:	f003 031f 	and.w	r3, r3, #31
 80037ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40021000 	.word	0x40021000
 80037f8:	0800a0d0 	.word	0x0800a0d0

080037fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003804:	2300      	movs	r3, #0
 8003806:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003808:	4b2a      	ldr	r3, [pc, #168]	@ (80038b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800380a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800380c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003814:	f7ff f9ee 	bl	8002bf4 <HAL_PWREx_GetVoltageRange>
 8003818:	6178      	str	r0, [r7, #20]
 800381a:	e014      	b.n	8003846 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800381c:	4b25      	ldr	r3, [pc, #148]	@ (80038b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800381e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003820:	4a24      	ldr	r2, [pc, #144]	@ (80038b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003822:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003826:	6593      	str	r3, [r2, #88]	@ 0x58
 8003828:	4b22      	ldr	r3, [pc, #136]	@ (80038b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800382a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800382c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003830:	60fb      	str	r3, [r7, #12]
 8003832:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003834:	f7ff f9de 	bl	8002bf4 <HAL_PWREx_GetVoltageRange>
 8003838:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800383a:	4b1e      	ldr	r3, [pc, #120]	@ (80038b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800383c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800383e:	4a1d      	ldr	r2, [pc, #116]	@ (80038b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003840:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003844:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800384c:	d10b      	bne.n	8003866 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b80      	cmp	r3, #128	@ 0x80
 8003852:	d919      	bls.n	8003888 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2ba0      	cmp	r3, #160	@ 0xa0
 8003858:	d902      	bls.n	8003860 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800385a:	2302      	movs	r3, #2
 800385c:	613b      	str	r3, [r7, #16]
 800385e:	e013      	b.n	8003888 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003860:	2301      	movs	r3, #1
 8003862:	613b      	str	r3, [r7, #16]
 8003864:	e010      	b.n	8003888 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2b80      	cmp	r3, #128	@ 0x80
 800386a:	d902      	bls.n	8003872 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800386c:	2303      	movs	r3, #3
 800386e:	613b      	str	r3, [r7, #16]
 8003870:	e00a      	b.n	8003888 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b80      	cmp	r3, #128	@ 0x80
 8003876:	d102      	bne.n	800387e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003878:	2302      	movs	r3, #2
 800387a:	613b      	str	r3, [r7, #16]
 800387c:	e004      	b.n	8003888 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2b70      	cmp	r3, #112	@ 0x70
 8003882:	d101      	bne.n	8003888 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003884:	2301      	movs	r3, #1
 8003886:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003888:	4b0b      	ldr	r3, [pc, #44]	@ (80038b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f023 0207 	bic.w	r2, r3, #7
 8003890:	4909      	ldr	r1, [pc, #36]	@ (80038b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003898:	4b07      	ldr	r3, [pc, #28]	@ (80038b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0307 	and.w	r3, r3, #7
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d001      	beq.n	80038aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e000      	b.n	80038ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3718      	adds	r7, #24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	40021000 	.word	0x40021000
 80038b8:	40022000 	.word	0x40022000

080038bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038c4:	2300      	movs	r3, #0
 80038c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038c8:	2300      	movs	r3, #0
 80038ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d041      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038dc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80038e0:	d02a      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80038e2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80038e6:	d824      	bhi.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80038e8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80038ec:	d008      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80038ee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80038f2:	d81e      	bhi.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00a      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x52>
 80038f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038fc:	d010      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80038fe:	e018      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003900:	4b86      	ldr	r3, [pc, #536]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	4a85      	ldr	r2, [pc, #532]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003906:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800390a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800390c:	e015      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	3304      	adds	r3, #4
 8003912:	2100      	movs	r1, #0
 8003914:	4618      	mov	r0, r3
 8003916:	f000 fabb 	bl	8003e90 <RCCEx_PLLSAI1_Config>
 800391a:	4603      	mov	r3, r0
 800391c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800391e:	e00c      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	3320      	adds	r3, #32
 8003924:	2100      	movs	r1, #0
 8003926:	4618      	mov	r0, r3
 8003928:	f000 fba6 	bl	8004078 <RCCEx_PLLSAI2_Config>
 800392c:	4603      	mov	r3, r0
 800392e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003930:	e003      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	74fb      	strb	r3, [r7, #19]
      break;
 8003936:	e000      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003938:	bf00      	nop
    }

    if(ret == HAL_OK)
 800393a:	7cfb      	ldrb	r3, [r7, #19]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10b      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003940:	4b76      	ldr	r3, [pc, #472]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003946:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800394e:	4973      	ldr	r1, [pc, #460]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003950:	4313      	orrs	r3, r2
 8003952:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003956:	e001      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003958:	7cfb      	ldrb	r3, [r7, #19]
 800395a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d041      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800396c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003970:	d02a      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003972:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003976:	d824      	bhi.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003978:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800397c:	d008      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800397e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003982:	d81e      	bhi.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00a      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003988:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800398c:	d010      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800398e:	e018      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003990:	4b62      	ldr	r3, [pc, #392]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	4a61      	ldr	r2, [pc, #388]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003996:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800399a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800399c:	e015      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	3304      	adds	r3, #4
 80039a2:	2100      	movs	r1, #0
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 fa73 	bl	8003e90 <RCCEx_PLLSAI1_Config>
 80039aa:	4603      	mov	r3, r0
 80039ac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039ae:	e00c      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	3320      	adds	r3, #32
 80039b4:	2100      	movs	r1, #0
 80039b6:	4618      	mov	r0, r3
 80039b8:	f000 fb5e 	bl	8004078 <RCCEx_PLLSAI2_Config>
 80039bc:	4603      	mov	r3, r0
 80039be:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039c0:	e003      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	74fb      	strb	r3, [r7, #19]
      break;
 80039c6:	e000      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80039c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039ca:	7cfb      	ldrb	r3, [r7, #19]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10b      	bne.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039d0:	4b52      	ldr	r3, [pc, #328]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039d6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039de:	494f      	ldr	r1, [pc, #316]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80039e6:	e001      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e8:	7cfb      	ldrb	r3, [r7, #19]
 80039ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 80a0 	beq.w	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039fa:	2300      	movs	r3, #0
 80039fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039fe:	4b47      	ldr	r3, [pc, #284]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e000      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003a0e:	2300      	movs	r3, #0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00d      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a14:	4b41      	ldr	r3, [pc, #260]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a18:	4a40      	ldr	r2, [pc, #256]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a20:	4b3e      	ldr	r3, [pc, #248]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a28:	60bb      	str	r3, [r7, #8]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a30:	4b3b      	ldr	r3, [pc, #236]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a3a      	ldr	r2, [pc, #232]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a3c:	f7fd ffde 	bl	80019fc <HAL_GetTick>
 8003a40:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a42:	e009      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a44:	f7fd ffda 	bl	80019fc <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d902      	bls.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	74fb      	strb	r3, [r7, #19]
        break;
 8003a56:	e005      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a58:	4b31      	ldr	r3, [pc, #196]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d0ef      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003a64:	7cfb      	ldrb	r3, [r7, #19]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d15c      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a6a:	4b2c      	ldr	r3, [pc, #176]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a74:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d01f      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d019      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a88:	4b24      	ldr	r3, [pc, #144]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a92:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a94:	4b21      	ldr	r3, [pc, #132]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a9a:	4a20      	ldr	r2, [pc, #128]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aa0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003aa4:	4b1d      	ldr	r3, [pc, #116]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aaa:	4a1c      	ldr	r2, [pc, #112]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ab0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ab4:	4a19      	ldr	r2, [pc, #100]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d016      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac6:	f7fd ff99 	bl	80019fc <HAL_GetTick>
 8003aca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003acc:	e00b      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ace:	f7fd ff95 	bl	80019fc <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d902      	bls.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	74fb      	strb	r3, [r7, #19]
            break;
 8003ae4:	e006      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0ec      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003af4:	7cfb      	ldrb	r3, [r7, #19]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10c      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003afa:	4b08      	ldr	r3, [pc, #32]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b0a:	4904      	ldr	r1, [pc, #16]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003b12:	e009      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b14:	7cfb      	ldrb	r3, [r7, #19]
 8003b16:	74bb      	strb	r3, [r7, #18]
 8003b18:	e006      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003b1a:	bf00      	nop
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b24:	7cfb      	ldrb	r3, [r7, #19]
 8003b26:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b28:	7c7b      	ldrb	r3, [r7, #17]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d105      	bne.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b2e:	4b9e      	ldr	r3, [pc, #632]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b32:	4a9d      	ldr	r2, [pc, #628]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b38:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00a      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b46:	4b98      	ldr	r3, [pc, #608]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b4c:	f023 0203 	bic.w	r2, r3, #3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b54:	4994      	ldr	r1, [pc, #592]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00a      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b68:	4b8f      	ldr	r3, [pc, #572]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b6e:	f023 020c 	bic.w	r2, r3, #12
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b76:	498c      	ldr	r1, [pc, #560]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0304 	and.w	r3, r3, #4
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00a      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b8a:	4b87      	ldr	r3, [pc, #540]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b90:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b98:	4983      	ldr	r1, [pc, #524]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0308 	and.w	r3, r3, #8
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00a      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bac:	4b7e      	ldr	r3, [pc, #504]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bba:	497b      	ldr	r1, [pc, #492]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0310 	and.w	r3, r3, #16
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00a      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bce:	4b76      	ldr	r3, [pc, #472]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bd4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bdc:	4972      	ldr	r1, [pc, #456]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0320 	and.w	r3, r3, #32
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00a      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bf0:	4b6d      	ldr	r3, [pc, #436]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bf6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bfe:	496a      	ldr	r1, [pc, #424]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00a      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c12:	4b65      	ldr	r3, [pc, #404]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c18:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c20:	4961      	ldr	r1, [pc, #388]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00a      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c34:	4b5c      	ldr	r3, [pc, #368]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c3a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c42:	4959      	ldr	r1, [pc, #356]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00a      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c56:	4b54      	ldr	r3, [pc, #336]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c5c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c64:	4950      	ldr	r1, [pc, #320]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00a      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c78:	4b4b      	ldr	r3, [pc, #300]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c7e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c86:	4948      	ldr	r1, [pc, #288]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00a      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c9a:	4b43      	ldr	r3, [pc, #268]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ca0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca8:	493f      	ldr	r1, [pc, #252]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d028      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cbc:	4b3a      	ldr	r3, [pc, #232]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cc2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cca:	4937      	ldr	r1, [pc, #220]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cd6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003cda:	d106      	bne.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cdc:	4b32      	ldr	r3, [pc, #200]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	4a31      	ldr	r2, [pc, #196]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ce6:	60d3      	str	r3, [r2, #12]
 8003ce8:	e011      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003cf2:	d10c      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	3304      	adds	r3, #4
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 f8c8 	bl	8003e90 <RCCEx_PLLSAI1_Config>
 8003d00:	4603      	mov	r3, r0
 8003d02:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003d04:	7cfb      	ldrb	r3, [r7, #19]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003d0a:	7cfb      	ldrb	r3, [r7, #19]
 8003d0c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d028      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d1a:	4b23      	ldr	r3, [pc, #140]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d20:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d28:	491f      	ldr	r1, [pc, #124]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d38:	d106      	bne.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d3a:	4b1b      	ldr	r3, [pc, #108]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	4a1a      	ldr	r2, [pc, #104]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d40:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d44:	60d3      	str	r3, [r2, #12]
 8003d46:	e011      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d4c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d50:	d10c      	bne.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	3304      	adds	r3, #4
 8003d56:	2101      	movs	r1, #1
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f000 f899 	bl	8003e90 <RCCEx_PLLSAI1_Config>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d62:	7cfb      	ldrb	r3, [r7, #19]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003d68:	7cfb      	ldrb	r3, [r7, #19]
 8003d6a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d02b      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d78:	4b0b      	ldr	r3, [pc, #44]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d7e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d86:	4908      	ldr	r1, [pc, #32]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d96:	d109      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d98:	4b03      	ldr	r3, [pc, #12]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	4a02      	ldr	r2, [pc, #8]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003da2:	60d3      	str	r3, [r2, #12]
 8003da4:	e014      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003da6:	bf00      	nop
 8003da8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003db0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003db4:	d10c      	bne.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	3304      	adds	r3, #4
 8003dba:	2101      	movs	r1, #1
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 f867 	bl	8003e90 <RCCEx_PLLSAI1_Config>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003dc6:	7cfb      	ldrb	r3, [r7, #19]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d001      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003dcc:	7cfb      	ldrb	r3, [r7, #19]
 8003dce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d02f      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ddc:	4b2b      	ldr	r3, [pc, #172]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003dea:	4928      	ldr	r1, [pc, #160]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003df6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003dfa:	d10d      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	3304      	adds	r3, #4
 8003e00:	2102      	movs	r1, #2
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 f844 	bl	8003e90 <RCCEx_PLLSAI1_Config>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e0c:	7cfb      	ldrb	r3, [r7, #19]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d014      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003e12:	7cfb      	ldrb	r3, [r7, #19]
 8003e14:	74bb      	strb	r3, [r7, #18]
 8003e16:	e011      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e20:	d10c      	bne.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	3320      	adds	r3, #32
 8003e26:	2102      	movs	r1, #2
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 f925 	bl	8004078 <RCCEx_PLLSAI2_Config>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e32:	7cfb      	ldrb	r3, [r7, #19]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d001      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003e38:	7cfb      	ldrb	r3, [r7, #19]
 8003e3a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00a      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e48:	4b10      	ldr	r3, [pc, #64]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e4e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e56:	490d      	ldr	r1, [pc, #52]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00b      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e6a:	4b08      	ldr	r3, [pc, #32]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e70:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e7a:	4904      	ldr	r1, [pc, #16]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003e82:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3718      	adds	r7, #24
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	40021000 	.word	0x40021000

08003e90 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e9e:	4b75      	ldr	r3, [pc, #468]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	f003 0303 	and.w	r3, r3, #3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d018      	beq.n	8003edc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003eaa:	4b72      	ldr	r3, [pc, #456]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	f003 0203 	and.w	r2, r3, #3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d10d      	bne.n	8003ed6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
       ||
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d009      	beq.n	8003ed6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003ec2:	4b6c      	ldr	r3, [pc, #432]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	091b      	lsrs	r3, r3, #4
 8003ec8:	f003 0307 	and.w	r3, r3, #7
 8003ecc:	1c5a      	adds	r2, r3, #1
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
       ||
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d047      	beq.n	8003f66 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	73fb      	strb	r3, [r7, #15]
 8003eda:	e044      	b.n	8003f66 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2b03      	cmp	r3, #3
 8003ee2:	d018      	beq.n	8003f16 <RCCEx_PLLSAI1_Config+0x86>
 8003ee4:	2b03      	cmp	r3, #3
 8003ee6:	d825      	bhi.n	8003f34 <RCCEx_PLLSAI1_Config+0xa4>
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d002      	beq.n	8003ef2 <RCCEx_PLLSAI1_Config+0x62>
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d009      	beq.n	8003f04 <RCCEx_PLLSAI1_Config+0x74>
 8003ef0:	e020      	b.n	8003f34 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ef2:	4b60      	ldr	r3, [pc, #384]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d11d      	bne.n	8003f3a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f02:	e01a      	b.n	8003f3a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f04:	4b5b      	ldr	r3, [pc, #364]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d116      	bne.n	8003f3e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f14:	e013      	b.n	8003f3e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f16:	4b57      	ldr	r3, [pc, #348]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10f      	bne.n	8003f42 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f22:	4b54      	ldr	r3, [pc, #336]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d109      	bne.n	8003f42 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f32:	e006      	b.n	8003f42 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	73fb      	strb	r3, [r7, #15]
      break;
 8003f38:	e004      	b.n	8003f44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f3a:	bf00      	nop
 8003f3c:	e002      	b.n	8003f44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f3e:	bf00      	nop
 8003f40:	e000      	b.n	8003f44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f42:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f44:	7bfb      	ldrb	r3, [r7, #15]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10d      	bne.n	8003f66 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f4a:	4b4a      	ldr	r3, [pc, #296]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6819      	ldr	r1, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	011b      	lsls	r3, r3, #4
 8003f5e:	430b      	orrs	r3, r1
 8003f60:	4944      	ldr	r1, [pc, #272]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f66:	7bfb      	ldrb	r3, [r7, #15]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d17d      	bne.n	8004068 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003f6c:	4b41      	ldr	r3, [pc, #260]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a40      	ldr	r2, [pc, #256]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f72:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f78:	f7fd fd40 	bl	80019fc <HAL_GetTick>
 8003f7c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f7e:	e009      	b.n	8003f94 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f80:	f7fd fd3c 	bl	80019fc <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d902      	bls.n	8003f94 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	73fb      	strb	r3, [r7, #15]
        break;
 8003f92:	e005      	b.n	8003fa0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f94:	4b37      	ldr	r3, [pc, #220]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1ef      	bne.n	8003f80 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003fa0:	7bfb      	ldrb	r3, [r7, #15]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d160      	bne.n	8004068 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d111      	bne.n	8003fd0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fac:	4b31      	ldr	r3, [pc, #196]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003fb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	6892      	ldr	r2, [r2, #8]
 8003fbc:	0211      	lsls	r1, r2, #8
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	68d2      	ldr	r2, [r2, #12]
 8003fc2:	0912      	lsrs	r2, r2, #4
 8003fc4:	0452      	lsls	r2, r2, #17
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	492a      	ldr	r1, [pc, #168]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	610b      	str	r3, [r1, #16]
 8003fce:	e027      	b.n	8004020 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d112      	bne.n	8003ffc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fd6:	4b27      	ldr	r3, [pc, #156]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003fde:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	6892      	ldr	r2, [r2, #8]
 8003fe6:	0211      	lsls	r1, r2, #8
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	6912      	ldr	r2, [r2, #16]
 8003fec:	0852      	lsrs	r2, r2, #1
 8003fee:	3a01      	subs	r2, #1
 8003ff0:	0552      	lsls	r2, r2, #21
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	491f      	ldr	r1, [pc, #124]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	610b      	str	r3, [r1, #16]
 8003ffa:	e011      	b.n	8004020 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ffc:	4b1d      	ldr	r3, [pc, #116]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004004:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	6892      	ldr	r2, [r2, #8]
 800400c:	0211      	lsls	r1, r2, #8
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	6952      	ldr	r2, [r2, #20]
 8004012:	0852      	lsrs	r2, r2, #1
 8004014:	3a01      	subs	r2, #1
 8004016:	0652      	lsls	r2, r2, #25
 8004018:	430a      	orrs	r2, r1
 800401a:	4916      	ldr	r1, [pc, #88]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1e4>)
 800401c:	4313      	orrs	r3, r2
 800401e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004020:	4b14      	ldr	r3, [pc, #80]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a13      	ldr	r2, [pc, #76]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004026:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800402a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800402c:	f7fd fce6 	bl	80019fc <HAL_GetTick>
 8004030:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004032:	e009      	b.n	8004048 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004034:	f7fd fce2 	bl	80019fc <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d902      	bls.n	8004048 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	73fb      	strb	r3, [r7, #15]
          break;
 8004046:	e005      	b.n	8004054 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004048:	4b0a      	ldr	r3, [pc, #40]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1e4>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d0ef      	beq.n	8004034 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004054:	7bfb      	ldrb	r3, [r7, #15]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d106      	bne.n	8004068 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800405a:	4b06      	ldr	r3, [pc, #24]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1e4>)
 800405c:	691a      	ldr	r2, [r3, #16]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	4904      	ldr	r1, [pc, #16]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004064:	4313      	orrs	r3, r2
 8004066:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004068:	7bfb      	ldrb	r3, [r7, #15]
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	40021000 	.word	0x40021000

08004078 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004082:	2300      	movs	r3, #0
 8004084:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004086:	4b6a      	ldr	r3, [pc, #424]	@ (8004230 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	f003 0303 	and.w	r3, r3, #3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d018      	beq.n	80040c4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004092:	4b67      	ldr	r3, [pc, #412]	@ (8004230 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	f003 0203 	and.w	r2, r3, #3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d10d      	bne.n	80040be <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
       ||
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d009      	beq.n	80040be <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80040aa:	4b61      	ldr	r3, [pc, #388]	@ (8004230 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	091b      	lsrs	r3, r3, #4
 80040b0:	f003 0307 	and.w	r3, r3, #7
 80040b4:	1c5a      	adds	r2, r3, #1
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
       ||
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d047      	beq.n	800414e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	73fb      	strb	r3, [r7, #15]
 80040c2:	e044      	b.n	800414e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2b03      	cmp	r3, #3
 80040ca:	d018      	beq.n	80040fe <RCCEx_PLLSAI2_Config+0x86>
 80040cc:	2b03      	cmp	r3, #3
 80040ce:	d825      	bhi.n	800411c <RCCEx_PLLSAI2_Config+0xa4>
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d002      	beq.n	80040da <RCCEx_PLLSAI2_Config+0x62>
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d009      	beq.n	80040ec <RCCEx_PLLSAI2_Config+0x74>
 80040d8:	e020      	b.n	800411c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80040da:	4b55      	ldr	r3, [pc, #340]	@ (8004230 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d11d      	bne.n	8004122 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040ea:	e01a      	b.n	8004122 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80040ec:	4b50      	ldr	r3, [pc, #320]	@ (8004230 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d116      	bne.n	8004126 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040fc:	e013      	b.n	8004126 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80040fe:	4b4c      	ldr	r3, [pc, #304]	@ (8004230 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10f      	bne.n	800412a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800410a:	4b49      	ldr	r3, [pc, #292]	@ (8004230 <RCCEx_PLLSAI2_Config+0x1b8>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d109      	bne.n	800412a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800411a:	e006      	b.n	800412a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	73fb      	strb	r3, [r7, #15]
      break;
 8004120:	e004      	b.n	800412c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004122:	bf00      	nop
 8004124:	e002      	b.n	800412c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004126:	bf00      	nop
 8004128:	e000      	b.n	800412c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800412a:	bf00      	nop
    }

    if(status == HAL_OK)
 800412c:	7bfb      	ldrb	r3, [r7, #15]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10d      	bne.n	800414e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004132:	4b3f      	ldr	r3, [pc, #252]	@ (8004230 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6819      	ldr	r1, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	3b01      	subs	r3, #1
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	430b      	orrs	r3, r1
 8004148:	4939      	ldr	r1, [pc, #228]	@ (8004230 <RCCEx_PLLSAI2_Config+0x1b8>)
 800414a:	4313      	orrs	r3, r2
 800414c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800414e:	7bfb      	ldrb	r3, [r7, #15]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d167      	bne.n	8004224 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004154:	4b36      	ldr	r3, [pc, #216]	@ (8004230 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a35      	ldr	r2, [pc, #212]	@ (8004230 <RCCEx_PLLSAI2_Config+0x1b8>)
 800415a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800415e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004160:	f7fd fc4c 	bl	80019fc <HAL_GetTick>
 8004164:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004166:	e009      	b.n	800417c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004168:	f7fd fc48 	bl	80019fc <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b02      	cmp	r3, #2
 8004174:	d902      	bls.n	800417c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	73fb      	strb	r3, [r7, #15]
        break;
 800417a:	e005      	b.n	8004188 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800417c:	4b2c      	ldr	r3, [pc, #176]	@ (8004230 <RCCEx_PLLSAI2_Config+0x1b8>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1ef      	bne.n	8004168 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004188:	7bfb      	ldrb	r3, [r7, #15]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d14a      	bne.n	8004224 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d111      	bne.n	80041b8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004194:	4b26      	ldr	r3, [pc, #152]	@ (8004230 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800419c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6892      	ldr	r2, [r2, #8]
 80041a4:	0211      	lsls	r1, r2, #8
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	68d2      	ldr	r2, [r2, #12]
 80041aa:	0912      	lsrs	r2, r2, #4
 80041ac:	0452      	lsls	r2, r2, #17
 80041ae:	430a      	orrs	r2, r1
 80041b0:	491f      	ldr	r1, [pc, #124]	@ (8004230 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	614b      	str	r3, [r1, #20]
 80041b6:	e011      	b.n	80041dc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80041b8:	4b1d      	ldr	r3, [pc, #116]	@ (8004230 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80041c0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	6892      	ldr	r2, [r2, #8]
 80041c8:	0211      	lsls	r1, r2, #8
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	6912      	ldr	r2, [r2, #16]
 80041ce:	0852      	lsrs	r2, r2, #1
 80041d0:	3a01      	subs	r2, #1
 80041d2:	0652      	lsls	r2, r2, #25
 80041d4:	430a      	orrs	r2, r1
 80041d6:	4916      	ldr	r1, [pc, #88]	@ (8004230 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80041dc:	4b14      	ldr	r3, [pc, #80]	@ (8004230 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a13      	ldr	r2, [pc, #76]	@ (8004230 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e8:	f7fd fc08 	bl	80019fc <HAL_GetTick>
 80041ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80041ee:	e009      	b.n	8004204 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80041f0:	f7fd fc04 	bl	80019fc <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d902      	bls.n	8004204 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	73fb      	strb	r3, [r7, #15]
          break;
 8004202:	e005      	b.n	8004210 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004204:	4b0a      	ldr	r3, [pc, #40]	@ (8004230 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d0ef      	beq.n	80041f0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004210:	7bfb      	ldrb	r3, [r7, #15]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d106      	bne.n	8004224 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004216:	4b06      	ldr	r3, [pc, #24]	@ (8004230 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004218:	695a      	ldr	r2, [r3, #20]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	4904      	ldr	r1, [pc, #16]	@ (8004230 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004220:	4313      	orrs	r3, r2
 8004222:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004224:	7bfb      	ldrb	r3, [r7, #15]
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	40021000 	.word	0x40021000

08004234 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e040      	b.n	80042c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800424a:	2b00      	cmp	r3, #0
 800424c:	d106      	bne.n	800425c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7fd f9d2 	bl	8001600 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2224      	movs	r2, #36	@ 0x24
 8004260:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 0201 	bic.w	r2, r2, #1
 8004270:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004276:	2b00      	cmp	r3, #0
 8004278:	d002      	beq.n	8004280 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 fb6a 	bl	8004954 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 f8af 	bl	80043e4 <UART_SetConfig>
 8004286:	4603      	mov	r3, r0
 8004288:	2b01      	cmp	r3, #1
 800428a:	d101      	bne.n	8004290 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e01b      	b.n	80042c8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800429e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689a      	ldr	r2, [r3, #8]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0201 	orr.w	r2, r2, #1
 80042be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 fbe9 	bl	8004a98 <UART_CheckIdleState>
 80042c6:	4603      	mov	r3, r0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3708      	adds	r7, #8
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b08a      	sub	sp, #40	@ 0x28
 80042d4:	af02      	add	r7, sp, #8
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	603b      	str	r3, [r7, #0]
 80042dc:	4613      	mov	r3, r2
 80042de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042e4:	2b20      	cmp	r3, #32
 80042e6:	d177      	bne.n	80043d8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d002      	beq.n	80042f4 <HAL_UART_Transmit+0x24>
 80042ee:	88fb      	ldrh	r3, [r7, #6]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d101      	bne.n	80042f8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e070      	b.n	80043da <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2221      	movs	r2, #33	@ 0x21
 8004304:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004306:	f7fd fb79 	bl	80019fc <HAL_GetTick>
 800430a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	88fa      	ldrh	r2, [r7, #6]
 8004310:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	88fa      	ldrh	r2, [r7, #6]
 8004318:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004324:	d108      	bne.n	8004338 <HAL_UART_Transmit+0x68>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d104      	bne.n	8004338 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800432e:	2300      	movs	r3, #0
 8004330:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	61bb      	str	r3, [r7, #24]
 8004336:	e003      	b.n	8004340 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800433c:	2300      	movs	r3, #0
 800433e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004340:	e02f      	b.n	80043a2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	9300      	str	r3, [sp, #0]
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	2200      	movs	r2, #0
 800434a:	2180      	movs	r1, #128	@ 0x80
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f000 fc4b 	bl	8004be8 <UART_WaitOnFlagUntilTimeout>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d004      	beq.n	8004362 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2220      	movs	r2, #32
 800435c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e03b      	b.n	80043da <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10b      	bne.n	8004380 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	881a      	ldrh	r2, [r3, #0]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004374:	b292      	uxth	r2, r2
 8004376:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	3302      	adds	r3, #2
 800437c:	61bb      	str	r3, [r7, #24]
 800437e:	e007      	b.n	8004390 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	781a      	ldrb	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	3301      	adds	r3, #1
 800438e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004396:	b29b      	uxth	r3, r3
 8004398:	3b01      	subs	r3, #1
 800439a:	b29a      	uxth	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1c9      	bne.n	8004342 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	9300      	str	r3, [sp, #0]
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	2200      	movs	r2, #0
 80043b6:	2140      	movs	r1, #64	@ 0x40
 80043b8:	68f8      	ldr	r0, [r7, #12]
 80043ba:	f000 fc15 	bl	8004be8 <UART_WaitOnFlagUntilTimeout>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d004      	beq.n	80043ce <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2220      	movs	r2, #32
 80043c8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e005      	b.n	80043da <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2220      	movs	r2, #32
 80043d2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80043d4:	2300      	movs	r3, #0
 80043d6:	e000      	b.n	80043da <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80043d8:	2302      	movs	r3, #2
  }
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3720      	adds	r7, #32
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
	...

080043e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043e8:	b08a      	sub	sp, #40	@ 0x28
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043ee:	2300      	movs	r3, #0
 80043f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	689a      	ldr	r2, [r3, #8]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	431a      	orrs	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	431a      	orrs	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	69db      	ldr	r3, [r3, #28]
 8004408:	4313      	orrs	r3, r2
 800440a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	4ba4      	ldr	r3, [pc, #656]	@ (80046a4 <UART_SetConfig+0x2c0>)
 8004414:	4013      	ands	r3, r2
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	6812      	ldr	r2, [r2, #0]
 800441a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800441c:	430b      	orrs	r3, r1
 800441e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	68da      	ldr	r2, [r3, #12]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	430a      	orrs	r2, r1
 8004434:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a99      	ldr	r2, [pc, #612]	@ (80046a8 <UART_SetConfig+0x2c4>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d004      	beq.n	8004450 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800444c:	4313      	orrs	r3, r2
 800444e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004460:	430a      	orrs	r2, r1
 8004462:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a90      	ldr	r2, [pc, #576]	@ (80046ac <UART_SetConfig+0x2c8>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d126      	bne.n	80044bc <UART_SetConfig+0xd8>
 800446e:	4b90      	ldr	r3, [pc, #576]	@ (80046b0 <UART_SetConfig+0x2cc>)
 8004470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004474:	f003 0303 	and.w	r3, r3, #3
 8004478:	2b03      	cmp	r3, #3
 800447a:	d81b      	bhi.n	80044b4 <UART_SetConfig+0xd0>
 800447c:	a201      	add	r2, pc, #4	@ (adr r2, 8004484 <UART_SetConfig+0xa0>)
 800447e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004482:	bf00      	nop
 8004484:	08004495 	.word	0x08004495
 8004488:	080044a5 	.word	0x080044a5
 800448c:	0800449d 	.word	0x0800449d
 8004490:	080044ad 	.word	0x080044ad
 8004494:	2301      	movs	r3, #1
 8004496:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800449a:	e116      	b.n	80046ca <UART_SetConfig+0x2e6>
 800449c:	2302      	movs	r3, #2
 800449e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044a2:	e112      	b.n	80046ca <UART_SetConfig+0x2e6>
 80044a4:	2304      	movs	r3, #4
 80044a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044aa:	e10e      	b.n	80046ca <UART_SetConfig+0x2e6>
 80044ac:	2308      	movs	r3, #8
 80044ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044b2:	e10a      	b.n	80046ca <UART_SetConfig+0x2e6>
 80044b4:	2310      	movs	r3, #16
 80044b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044ba:	e106      	b.n	80046ca <UART_SetConfig+0x2e6>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a7c      	ldr	r2, [pc, #496]	@ (80046b4 <UART_SetConfig+0x2d0>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d138      	bne.n	8004538 <UART_SetConfig+0x154>
 80044c6:	4b7a      	ldr	r3, [pc, #488]	@ (80046b0 <UART_SetConfig+0x2cc>)
 80044c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044cc:	f003 030c 	and.w	r3, r3, #12
 80044d0:	2b0c      	cmp	r3, #12
 80044d2:	d82d      	bhi.n	8004530 <UART_SetConfig+0x14c>
 80044d4:	a201      	add	r2, pc, #4	@ (adr r2, 80044dc <UART_SetConfig+0xf8>)
 80044d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044da:	bf00      	nop
 80044dc:	08004511 	.word	0x08004511
 80044e0:	08004531 	.word	0x08004531
 80044e4:	08004531 	.word	0x08004531
 80044e8:	08004531 	.word	0x08004531
 80044ec:	08004521 	.word	0x08004521
 80044f0:	08004531 	.word	0x08004531
 80044f4:	08004531 	.word	0x08004531
 80044f8:	08004531 	.word	0x08004531
 80044fc:	08004519 	.word	0x08004519
 8004500:	08004531 	.word	0x08004531
 8004504:	08004531 	.word	0x08004531
 8004508:	08004531 	.word	0x08004531
 800450c:	08004529 	.word	0x08004529
 8004510:	2300      	movs	r3, #0
 8004512:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004516:	e0d8      	b.n	80046ca <UART_SetConfig+0x2e6>
 8004518:	2302      	movs	r3, #2
 800451a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800451e:	e0d4      	b.n	80046ca <UART_SetConfig+0x2e6>
 8004520:	2304      	movs	r3, #4
 8004522:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004526:	e0d0      	b.n	80046ca <UART_SetConfig+0x2e6>
 8004528:	2308      	movs	r3, #8
 800452a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800452e:	e0cc      	b.n	80046ca <UART_SetConfig+0x2e6>
 8004530:	2310      	movs	r3, #16
 8004532:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004536:	e0c8      	b.n	80046ca <UART_SetConfig+0x2e6>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a5e      	ldr	r2, [pc, #376]	@ (80046b8 <UART_SetConfig+0x2d4>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d125      	bne.n	800458e <UART_SetConfig+0x1aa>
 8004542:	4b5b      	ldr	r3, [pc, #364]	@ (80046b0 <UART_SetConfig+0x2cc>)
 8004544:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004548:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800454c:	2b30      	cmp	r3, #48	@ 0x30
 800454e:	d016      	beq.n	800457e <UART_SetConfig+0x19a>
 8004550:	2b30      	cmp	r3, #48	@ 0x30
 8004552:	d818      	bhi.n	8004586 <UART_SetConfig+0x1a2>
 8004554:	2b20      	cmp	r3, #32
 8004556:	d00a      	beq.n	800456e <UART_SetConfig+0x18a>
 8004558:	2b20      	cmp	r3, #32
 800455a:	d814      	bhi.n	8004586 <UART_SetConfig+0x1a2>
 800455c:	2b00      	cmp	r3, #0
 800455e:	d002      	beq.n	8004566 <UART_SetConfig+0x182>
 8004560:	2b10      	cmp	r3, #16
 8004562:	d008      	beq.n	8004576 <UART_SetConfig+0x192>
 8004564:	e00f      	b.n	8004586 <UART_SetConfig+0x1a2>
 8004566:	2300      	movs	r3, #0
 8004568:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800456c:	e0ad      	b.n	80046ca <UART_SetConfig+0x2e6>
 800456e:	2302      	movs	r3, #2
 8004570:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004574:	e0a9      	b.n	80046ca <UART_SetConfig+0x2e6>
 8004576:	2304      	movs	r3, #4
 8004578:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800457c:	e0a5      	b.n	80046ca <UART_SetConfig+0x2e6>
 800457e:	2308      	movs	r3, #8
 8004580:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004584:	e0a1      	b.n	80046ca <UART_SetConfig+0x2e6>
 8004586:	2310      	movs	r3, #16
 8004588:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800458c:	e09d      	b.n	80046ca <UART_SetConfig+0x2e6>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a4a      	ldr	r2, [pc, #296]	@ (80046bc <UART_SetConfig+0x2d8>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d125      	bne.n	80045e4 <UART_SetConfig+0x200>
 8004598:	4b45      	ldr	r3, [pc, #276]	@ (80046b0 <UART_SetConfig+0x2cc>)
 800459a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800459e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80045a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80045a4:	d016      	beq.n	80045d4 <UART_SetConfig+0x1f0>
 80045a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80045a8:	d818      	bhi.n	80045dc <UART_SetConfig+0x1f8>
 80045aa:	2b80      	cmp	r3, #128	@ 0x80
 80045ac:	d00a      	beq.n	80045c4 <UART_SetConfig+0x1e0>
 80045ae:	2b80      	cmp	r3, #128	@ 0x80
 80045b0:	d814      	bhi.n	80045dc <UART_SetConfig+0x1f8>
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d002      	beq.n	80045bc <UART_SetConfig+0x1d8>
 80045b6:	2b40      	cmp	r3, #64	@ 0x40
 80045b8:	d008      	beq.n	80045cc <UART_SetConfig+0x1e8>
 80045ba:	e00f      	b.n	80045dc <UART_SetConfig+0x1f8>
 80045bc:	2300      	movs	r3, #0
 80045be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045c2:	e082      	b.n	80046ca <UART_SetConfig+0x2e6>
 80045c4:	2302      	movs	r3, #2
 80045c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ca:	e07e      	b.n	80046ca <UART_SetConfig+0x2e6>
 80045cc:	2304      	movs	r3, #4
 80045ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045d2:	e07a      	b.n	80046ca <UART_SetConfig+0x2e6>
 80045d4:	2308      	movs	r3, #8
 80045d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045da:	e076      	b.n	80046ca <UART_SetConfig+0x2e6>
 80045dc:	2310      	movs	r3, #16
 80045de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045e2:	e072      	b.n	80046ca <UART_SetConfig+0x2e6>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a35      	ldr	r2, [pc, #212]	@ (80046c0 <UART_SetConfig+0x2dc>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d12a      	bne.n	8004644 <UART_SetConfig+0x260>
 80045ee:	4b30      	ldr	r3, [pc, #192]	@ (80046b0 <UART_SetConfig+0x2cc>)
 80045f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045fc:	d01a      	beq.n	8004634 <UART_SetConfig+0x250>
 80045fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004602:	d81b      	bhi.n	800463c <UART_SetConfig+0x258>
 8004604:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004608:	d00c      	beq.n	8004624 <UART_SetConfig+0x240>
 800460a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800460e:	d815      	bhi.n	800463c <UART_SetConfig+0x258>
 8004610:	2b00      	cmp	r3, #0
 8004612:	d003      	beq.n	800461c <UART_SetConfig+0x238>
 8004614:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004618:	d008      	beq.n	800462c <UART_SetConfig+0x248>
 800461a:	e00f      	b.n	800463c <UART_SetConfig+0x258>
 800461c:	2300      	movs	r3, #0
 800461e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004622:	e052      	b.n	80046ca <UART_SetConfig+0x2e6>
 8004624:	2302      	movs	r3, #2
 8004626:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800462a:	e04e      	b.n	80046ca <UART_SetConfig+0x2e6>
 800462c:	2304      	movs	r3, #4
 800462e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004632:	e04a      	b.n	80046ca <UART_SetConfig+0x2e6>
 8004634:	2308      	movs	r3, #8
 8004636:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800463a:	e046      	b.n	80046ca <UART_SetConfig+0x2e6>
 800463c:	2310      	movs	r3, #16
 800463e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004642:	e042      	b.n	80046ca <UART_SetConfig+0x2e6>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a17      	ldr	r2, [pc, #92]	@ (80046a8 <UART_SetConfig+0x2c4>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d13a      	bne.n	80046c4 <UART_SetConfig+0x2e0>
 800464e:	4b18      	ldr	r3, [pc, #96]	@ (80046b0 <UART_SetConfig+0x2cc>)
 8004650:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004654:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004658:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800465c:	d01a      	beq.n	8004694 <UART_SetConfig+0x2b0>
 800465e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004662:	d81b      	bhi.n	800469c <UART_SetConfig+0x2b8>
 8004664:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004668:	d00c      	beq.n	8004684 <UART_SetConfig+0x2a0>
 800466a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800466e:	d815      	bhi.n	800469c <UART_SetConfig+0x2b8>
 8004670:	2b00      	cmp	r3, #0
 8004672:	d003      	beq.n	800467c <UART_SetConfig+0x298>
 8004674:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004678:	d008      	beq.n	800468c <UART_SetConfig+0x2a8>
 800467a:	e00f      	b.n	800469c <UART_SetConfig+0x2b8>
 800467c:	2300      	movs	r3, #0
 800467e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004682:	e022      	b.n	80046ca <UART_SetConfig+0x2e6>
 8004684:	2302      	movs	r3, #2
 8004686:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800468a:	e01e      	b.n	80046ca <UART_SetConfig+0x2e6>
 800468c:	2304      	movs	r3, #4
 800468e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004692:	e01a      	b.n	80046ca <UART_SetConfig+0x2e6>
 8004694:	2308      	movs	r3, #8
 8004696:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800469a:	e016      	b.n	80046ca <UART_SetConfig+0x2e6>
 800469c:	2310      	movs	r3, #16
 800469e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046a2:	e012      	b.n	80046ca <UART_SetConfig+0x2e6>
 80046a4:	efff69f3 	.word	0xefff69f3
 80046a8:	40008000 	.word	0x40008000
 80046ac:	40013800 	.word	0x40013800
 80046b0:	40021000 	.word	0x40021000
 80046b4:	40004400 	.word	0x40004400
 80046b8:	40004800 	.word	0x40004800
 80046bc:	40004c00 	.word	0x40004c00
 80046c0:	40005000 	.word	0x40005000
 80046c4:	2310      	movs	r3, #16
 80046c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a9f      	ldr	r2, [pc, #636]	@ (800494c <UART_SetConfig+0x568>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d17a      	bne.n	80047ca <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80046d8:	2b08      	cmp	r3, #8
 80046da:	d824      	bhi.n	8004726 <UART_SetConfig+0x342>
 80046dc:	a201      	add	r2, pc, #4	@ (adr r2, 80046e4 <UART_SetConfig+0x300>)
 80046de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e2:	bf00      	nop
 80046e4:	08004709 	.word	0x08004709
 80046e8:	08004727 	.word	0x08004727
 80046ec:	08004711 	.word	0x08004711
 80046f0:	08004727 	.word	0x08004727
 80046f4:	08004717 	.word	0x08004717
 80046f8:	08004727 	.word	0x08004727
 80046fc:	08004727 	.word	0x08004727
 8004700:	08004727 	.word	0x08004727
 8004704:	0800471f 	.word	0x0800471f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004708:	f7ff f84c 	bl	80037a4 <HAL_RCC_GetPCLK1Freq>
 800470c:	61f8      	str	r0, [r7, #28]
        break;
 800470e:	e010      	b.n	8004732 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004710:	4b8f      	ldr	r3, [pc, #572]	@ (8004950 <UART_SetConfig+0x56c>)
 8004712:	61fb      	str	r3, [r7, #28]
        break;
 8004714:	e00d      	b.n	8004732 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004716:	f7fe ffad 	bl	8003674 <HAL_RCC_GetSysClockFreq>
 800471a:	61f8      	str	r0, [r7, #28]
        break;
 800471c:	e009      	b.n	8004732 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800471e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004722:	61fb      	str	r3, [r7, #28]
        break;
 8004724:	e005      	b.n	8004732 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004726:	2300      	movs	r3, #0
 8004728:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004730:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	2b00      	cmp	r3, #0
 8004736:	f000 80fb 	beq.w	8004930 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	4613      	mov	r3, r2
 8004740:	005b      	lsls	r3, r3, #1
 8004742:	4413      	add	r3, r2
 8004744:	69fa      	ldr	r2, [r7, #28]
 8004746:	429a      	cmp	r2, r3
 8004748:	d305      	bcc.n	8004756 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004750:	69fa      	ldr	r2, [r7, #28]
 8004752:	429a      	cmp	r2, r3
 8004754:	d903      	bls.n	800475e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800475c:	e0e8      	b.n	8004930 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	2200      	movs	r2, #0
 8004762:	461c      	mov	r4, r3
 8004764:	4615      	mov	r5, r2
 8004766:	f04f 0200 	mov.w	r2, #0
 800476a:	f04f 0300 	mov.w	r3, #0
 800476e:	022b      	lsls	r3, r5, #8
 8004770:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004774:	0222      	lsls	r2, r4, #8
 8004776:	68f9      	ldr	r1, [r7, #12]
 8004778:	6849      	ldr	r1, [r1, #4]
 800477a:	0849      	lsrs	r1, r1, #1
 800477c:	2000      	movs	r0, #0
 800477e:	4688      	mov	r8, r1
 8004780:	4681      	mov	r9, r0
 8004782:	eb12 0a08 	adds.w	sl, r2, r8
 8004786:	eb43 0b09 	adc.w	fp, r3, r9
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	603b      	str	r3, [r7, #0]
 8004792:	607a      	str	r2, [r7, #4]
 8004794:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004798:	4650      	mov	r0, sl
 800479a:	4659      	mov	r1, fp
 800479c:	f7fc fa74 	bl	8000c88 <__aeabi_uldivmod>
 80047a0:	4602      	mov	r2, r0
 80047a2:	460b      	mov	r3, r1
 80047a4:	4613      	mov	r3, r2
 80047a6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047ae:	d308      	bcc.n	80047c2 <UART_SetConfig+0x3de>
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047b6:	d204      	bcs.n	80047c2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	60da      	str	r2, [r3, #12]
 80047c0:	e0b6      	b.n	8004930 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80047c8:	e0b2      	b.n	8004930 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047d2:	d15e      	bne.n	8004892 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80047d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80047d8:	2b08      	cmp	r3, #8
 80047da:	d828      	bhi.n	800482e <UART_SetConfig+0x44a>
 80047dc:	a201      	add	r2, pc, #4	@ (adr r2, 80047e4 <UART_SetConfig+0x400>)
 80047de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e2:	bf00      	nop
 80047e4:	08004809 	.word	0x08004809
 80047e8:	08004811 	.word	0x08004811
 80047ec:	08004819 	.word	0x08004819
 80047f0:	0800482f 	.word	0x0800482f
 80047f4:	0800481f 	.word	0x0800481f
 80047f8:	0800482f 	.word	0x0800482f
 80047fc:	0800482f 	.word	0x0800482f
 8004800:	0800482f 	.word	0x0800482f
 8004804:	08004827 	.word	0x08004827
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004808:	f7fe ffcc 	bl	80037a4 <HAL_RCC_GetPCLK1Freq>
 800480c:	61f8      	str	r0, [r7, #28]
        break;
 800480e:	e014      	b.n	800483a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004810:	f7fe ffde 	bl	80037d0 <HAL_RCC_GetPCLK2Freq>
 8004814:	61f8      	str	r0, [r7, #28]
        break;
 8004816:	e010      	b.n	800483a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004818:	4b4d      	ldr	r3, [pc, #308]	@ (8004950 <UART_SetConfig+0x56c>)
 800481a:	61fb      	str	r3, [r7, #28]
        break;
 800481c:	e00d      	b.n	800483a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800481e:	f7fe ff29 	bl	8003674 <HAL_RCC_GetSysClockFreq>
 8004822:	61f8      	str	r0, [r7, #28]
        break;
 8004824:	e009      	b.n	800483a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004826:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800482a:	61fb      	str	r3, [r7, #28]
        break;
 800482c:	e005      	b.n	800483a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800482e:	2300      	movs	r3, #0
 8004830:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004838:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d077      	beq.n	8004930 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	005a      	lsls	r2, r3, #1
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	085b      	lsrs	r3, r3, #1
 800484a:	441a      	add	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	fbb2 f3f3 	udiv	r3, r2, r3
 8004854:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	2b0f      	cmp	r3, #15
 800485a:	d916      	bls.n	800488a <UART_SetConfig+0x4a6>
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004862:	d212      	bcs.n	800488a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	b29b      	uxth	r3, r3
 8004868:	f023 030f 	bic.w	r3, r3, #15
 800486c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	085b      	lsrs	r3, r3, #1
 8004872:	b29b      	uxth	r3, r3
 8004874:	f003 0307 	and.w	r3, r3, #7
 8004878:	b29a      	uxth	r2, r3
 800487a:	8afb      	ldrh	r3, [r7, #22]
 800487c:	4313      	orrs	r3, r2
 800487e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	8afa      	ldrh	r2, [r7, #22]
 8004886:	60da      	str	r2, [r3, #12]
 8004888:	e052      	b.n	8004930 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004890:	e04e      	b.n	8004930 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004892:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004896:	2b08      	cmp	r3, #8
 8004898:	d827      	bhi.n	80048ea <UART_SetConfig+0x506>
 800489a:	a201      	add	r2, pc, #4	@ (adr r2, 80048a0 <UART_SetConfig+0x4bc>)
 800489c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a0:	080048c5 	.word	0x080048c5
 80048a4:	080048cd 	.word	0x080048cd
 80048a8:	080048d5 	.word	0x080048d5
 80048ac:	080048eb 	.word	0x080048eb
 80048b0:	080048db 	.word	0x080048db
 80048b4:	080048eb 	.word	0x080048eb
 80048b8:	080048eb 	.word	0x080048eb
 80048bc:	080048eb 	.word	0x080048eb
 80048c0:	080048e3 	.word	0x080048e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048c4:	f7fe ff6e 	bl	80037a4 <HAL_RCC_GetPCLK1Freq>
 80048c8:	61f8      	str	r0, [r7, #28]
        break;
 80048ca:	e014      	b.n	80048f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048cc:	f7fe ff80 	bl	80037d0 <HAL_RCC_GetPCLK2Freq>
 80048d0:	61f8      	str	r0, [r7, #28]
        break;
 80048d2:	e010      	b.n	80048f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048d4:	4b1e      	ldr	r3, [pc, #120]	@ (8004950 <UART_SetConfig+0x56c>)
 80048d6:	61fb      	str	r3, [r7, #28]
        break;
 80048d8:	e00d      	b.n	80048f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048da:	f7fe fecb 	bl	8003674 <HAL_RCC_GetSysClockFreq>
 80048de:	61f8      	str	r0, [r7, #28]
        break;
 80048e0:	e009      	b.n	80048f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048e6:	61fb      	str	r3, [r7, #28]
        break;
 80048e8:	e005      	b.n	80048f6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80048ea:	2300      	movs	r3, #0
 80048ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80048f4:	bf00      	nop
    }

    if (pclk != 0U)
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d019      	beq.n	8004930 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	085a      	lsrs	r2, r3, #1
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	441a      	add	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	fbb2 f3f3 	udiv	r3, r2, r3
 800490e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	2b0f      	cmp	r3, #15
 8004914:	d909      	bls.n	800492a <UART_SetConfig+0x546>
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800491c:	d205      	bcs.n	800492a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	b29a      	uxth	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	60da      	str	r2, [r3, #12]
 8004928:	e002      	b.n	8004930 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800493c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004940:	4618      	mov	r0, r3
 8004942:	3728      	adds	r7, #40	@ 0x28
 8004944:	46bd      	mov	sp, r7
 8004946:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800494a:	bf00      	nop
 800494c:	40008000 	.word	0x40008000
 8004950:	00f42400 	.word	0x00f42400

08004954 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004960:	f003 0308 	and.w	r3, r3, #8
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00a      	beq.n	800497e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	430a      	orrs	r2, r1
 800497c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00a      	beq.n	80049a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	430a      	orrs	r2, r1
 800499e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00a      	beq.n	80049c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	430a      	orrs	r2, r1
 80049c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c6:	f003 0304 	and.w	r3, r3, #4
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00a      	beq.n	80049e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	430a      	orrs	r2, r1
 80049e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e8:	f003 0310 	and.w	r3, r3, #16
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00a      	beq.n	8004a06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a0a:	f003 0320 	and.w	r3, r3, #32
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00a      	beq.n	8004a28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	430a      	orrs	r2, r1
 8004a26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d01a      	beq.n	8004a6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a52:	d10a      	bne.n	8004a6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00a      	beq.n	8004a8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	605a      	str	r2, [r3, #4]
  }
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b098      	sub	sp, #96	@ 0x60
 8004a9c:	af02      	add	r7, sp, #8
 8004a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004aa8:	f7fc ffa8 	bl	80019fc <HAL_GetTick>
 8004aac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0308 	and.w	r3, r3, #8
 8004ab8:	2b08      	cmp	r3, #8
 8004aba:	d12e      	bne.n	8004b1a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004abc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f88c 	bl	8004be8 <UART_WaitOnFlagUntilTimeout>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d021      	beq.n	8004b1a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ade:	e853 3f00 	ldrex	r3, [r3]
 8004ae2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ae6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004aea:	653b      	str	r3, [r7, #80]	@ 0x50
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	461a      	mov	r2, r3
 8004af2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004af4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004af6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004afa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004afc:	e841 2300 	strex	r3, r2, [r1]
 8004b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1e6      	bne.n	8004ad6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e062      	b.n	8004be0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0304 	and.w	r3, r3, #4
 8004b24:	2b04      	cmp	r3, #4
 8004b26:	d149      	bne.n	8004bbc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b28:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b30:	2200      	movs	r2, #0
 8004b32:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f856 	bl	8004be8 <UART_WaitOnFlagUntilTimeout>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d03c      	beq.n	8004bbc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4a:	e853 3f00 	ldrex	r3, [r3]
 8004b4e:	623b      	str	r3, [r7, #32]
   return(result);
 8004b50:	6a3b      	ldr	r3, [r7, #32]
 8004b52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b60:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b62:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b64:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b68:	e841 2300 	strex	r3, r2, [r1]
 8004b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1e6      	bne.n	8004b42 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	3308      	adds	r3, #8
 8004b7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	e853 3f00 	ldrex	r3, [r3]
 8004b82:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f023 0301 	bic.w	r3, r3, #1
 8004b8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	3308      	adds	r3, #8
 8004b92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b94:	61fa      	str	r2, [r7, #28]
 8004b96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b98:	69b9      	ldr	r1, [r7, #24]
 8004b9a:	69fa      	ldr	r2, [r7, #28]
 8004b9c:	e841 2300 	strex	r3, r2, [r1]
 8004ba0:	617b      	str	r3, [r7, #20]
   return(result);
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1e5      	bne.n	8004b74 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2220      	movs	r2, #32
 8004bac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e011      	b.n	8004be0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2220      	movs	r2, #32
 8004bc6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3758      	adds	r7, #88	@ 0x58
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	603b      	str	r3, [r7, #0]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bf8:	e04f      	b.n	8004c9a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c00:	d04b      	beq.n	8004c9a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c02:	f7fc fefb 	bl	80019fc <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d302      	bcc.n	8004c18 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e04e      	b.n	8004cba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0304 	and.w	r3, r3, #4
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d037      	beq.n	8004c9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	2b80      	cmp	r3, #128	@ 0x80
 8004c2e:	d034      	beq.n	8004c9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	2b40      	cmp	r3, #64	@ 0x40
 8004c34:	d031      	beq.n	8004c9a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	69db      	ldr	r3, [r3, #28]
 8004c3c:	f003 0308 	and.w	r3, r3, #8
 8004c40:	2b08      	cmp	r3, #8
 8004c42:	d110      	bne.n	8004c66 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2208      	movs	r2, #8
 8004c4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f000 f838 	bl	8004cc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2208      	movs	r2, #8
 8004c56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e029      	b.n	8004cba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	69db      	ldr	r3, [r3, #28]
 8004c6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c74:	d111      	bne.n	8004c9a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f000 f81e 	bl	8004cc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e00f      	b.n	8004cba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	69da      	ldr	r2, [r3, #28]
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	bf0c      	ite	eq
 8004caa:	2301      	moveq	r3, #1
 8004cac:	2300      	movne	r3, #0
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	79fb      	ldrb	r3, [r7, #7]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d0a0      	beq.n	8004bfa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b095      	sub	sp, #84	@ 0x54
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cd2:	e853 3f00 	ldrex	r3, [r3]
 8004cd6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ce8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004cee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004cf0:	e841 2300 	strex	r3, r2, [r1]
 8004cf4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1e6      	bne.n	8004cca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	3308      	adds	r3, #8
 8004d02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d04:	6a3b      	ldr	r3, [r7, #32]
 8004d06:	e853 3f00 	ldrex	r3, [r3]
 8004d0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	f023 0301 	bic.w	r3, r3, #1
 8004d12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	3308      	adds	r3, #8
 8004d1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d24:	e841 2300 	strex	r3, r2, [r1]
 8004d28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1e5      	bne.n	8004cfc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d118      	bne.n	8004d6a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	e853 3f00 	ldrex	r3, [r3]
 8004d44:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	f023 0310 	bic.w	r3, r3, #16
 8004d4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	461a      	mov	r2, r3
 8004d54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d56:	61bb      	str	r3, [r7, #24]
 8004d58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5a:	6979      	ldr	r1, [r7, #20]
 8004d5c:	69ba      	ldr	r2, [r7, #24]
 8004d5e:	e841 2300 	strex	r3, r2, [r1]
 8004d62:	613b      	str	r3, [r7, #16]
   return(result);
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1e6      	bne.n	8004d38 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2220      	movs	r2, #32
 8004d6e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004d7e:	bf00      	nop
 8004d80:	3754      	adds	r7, #84	@ 0x54
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
	...

08004d8c <funchad34.constprop.0>:
 8004d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d8e:	f8df e220 	ldr.w	lr, [pc, #544]	@ 8004fb0 <funchad34.constprop.0+0x224>
 8004d92:	4980      	ldr	r1, [pc, #512]	@ (8004f94 <funchad34.constprop.0+0x208>)
 8004d94:	eddf 5a80 	vldr	s11, [pc, #512]	@ 8004f98 <funchad34.constprop.0+0x20c>
 8004d98:	4604      	mov	r4, r0
 8004d9a:	4675      	mov	r5, lr
 8004d9c:	2600      	movs	r6, #0
 8004d9e:	4b7f      	ldr	r3, [pc, #508]	@ (8004f9c <funchad34.constprop.0+0x210>)
 8004da0:	4620      	mov	r0, r4
 8004da2:	461f      	mov	r7, r3
 8004da4:	461a      	mov	r2, r3
 8004da6:	f850 cb0c 	ldr.w	ip, [r0], #12
 8004daa:	f842 cb04 	str.w	ip, [r2], #4
 8004dae:	428a      	cmp	r2, r1
 8004db0:	d1f9      	bne.n	8004da6 <funchad34.constprop.0+0x1a>
 8004db2:	ed97 6a00 	vldr	s12, [r7]
 8004db6:	4a79      	ldr	r2, [pc, #484]	@ (8004f9c <funchad34.constprop.0+0x210>)
 8004db8:	eeb0 7a46 	vmov.f32	s14, s12
 8004dbc:	ecf2 7a01 	vldmia	r2!, {s15}
 8004dc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dc8:	bf58      	it	pl
 8004dca:	eeb0 7a67 	vmovpl.f32	s14, s15
 8004dce:	4291      	cmp	r1, r2
 8004dd0:	d1f4      	bne.n	8004dbc <funchad34.constprop.0+0x30>
 8004dd2:	4a72      	ldr	r2, [pc, #456]	@ (8004f9c <funchad34.constprop.0+0x210>)
 8004dd4:	ed85 7a06 	vstr	s14, [r5, #24]
 8004dd8:	eef0 7a46 	vmov.f32	s15, s12
 8004ddc:	ecb2 7a01 	vldmia	r2!, {s14}
 8004de0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004de8:	bfd8      	it	le
 8004dea:	eef0 7a47 	vmovle.f32	s15, s14
 8004dee:	428a      	cmp	r2, r1
 8004df0:	d1f4      	bne.n	8004ddc <funchad34.constprop.0+0x50>
 8004df2:	4a6a      	ldr	r2, [pc, #424]	@ (8004f9c <funchad34.constprop.0+0x210>)
 8004df4:	eeb0 7a46 	vmov.f32	s14, s12
 8004df8:	eef0 7ae7 	vabs.f32	s15, s15
 8004dfc:	ecf2 6a01 	vldmia	r2!, {s13}
 8004e00:	eef4 6ac7 	vcmpe.f32	s13, s14
 8004e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e08:	bf58      	it	pl
 8004e0a:	eeb0 7a66 	vmovpl.f32	s14, s13
 8004e0e:	428a      	cmp	r2, r1
 8004e10:	d1f4      	bne.n	8004dfc <funchad34.constprop.0+0x70>
 8004e12:	eeb0 7ac7 	vabs.f32	s14, s14
 8004e16:	eef4 7a47 	vcmp.f32	s15, s14
 8004e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e1e:	bf48      	it	mi
 8004e20:	eef0 7a47 	vmovmi.f32	s15, s14
 8004e24:	4a5e      	ldr	r2, [pc, #376]	@ (8004fa0 <funchad34.constprop.0+0x214>)
 8004e26:	edc5 7a03 	vstr	s15, [r5, #12]
 8004e2a:	eeb0 7a46 	vmov.f32	s14, s12
 8004e2e:	ecf2 7a01 	vldmia	r2!, {s15}
 8004e32:	428a      	cmp	r2, r1
 8004e34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004e38:	d1f9      	bne.n	8004e2e <funchad34.constprop.0+0xa2>
 8004e3a:	ee27 7a25 	vmul.f32	s14, s14, s11
 8004e3e:	f8df c15c 	ldr.w	ip, [pc, #348]	@ 8004f9c <funchad34.constprop.0+0x210>
 8004e42:	ee36 6a47 	vsub.f32	s12, s12, s14
 8004e46:	2000      	movs	r0, #0
 8004e48:	2201      	movs	r2, #1
 8004e4a:	eddc 7a01 	vldr	s15, [ip, #4]
 8004e4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004e52:	1c47      	adds	r7, r0, #1
 8004e54:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004e58:	3202      	adds	r2, #2
 8004e5a:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8004e5e:	ed9c 6a02 	vldr	s12, [ip, #8]
 8004e62:	ee36 6a47 	vsub.f32	s12, s12, s14
 8004e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e6a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004e6e:	bf48      	it	mi
 8004e70:	b2b8      	uxthmi	r0, r7
 8004e72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e7a:	b292      	uxth	r2, r2
 8004e7c:	f100 0701 	add.w	r7, r0, #1
 8004e80:	bf48      	it	mi
 8004e82:	b2b8      	uxthmi	r0, r7
 8004e84:	2aff      	cmp	r2, #255	@ 0xff
 8004e86:	f10c 0c08 	add.w	ip, ip, #8
 8004e8a:	d1de      	bne.n	8004e4a <funchad34.constprop.0+0xbe>
 8004e8c:	4a45      	ldr	r2, [pc, #276]	@ (8004fa4 <funchad34.constprop.0+0x218>)
 8004e8e:	ecf2 6a01 	vldmia	r2!, {s13}
 8004e92:	ed52 7a02 	vldr	s15, [r2, #-8]
 8004e96:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8004e9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004e9e:	f100 0c01 	add.w	ip, r0, #1
 8004ea2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004ea6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eae:	bf48      	it	mi
 8004eb0:	fa1f f08c 	uxthmi.w	r0, ip
 8004eb4:	4291      	cmp	r1, r2
 8004eb6:	d1ea      	bne.n	8004e8e <funchad34.constprop.0+0x102>
 8004eb8:	ee07 0a90 	vmov	s15, r0
 8004ebc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ec0:	4622      	mov	r2, r4
 8004ec2:	ece5 7a01 	vstmia	r5!, {s15}
 8004ec6:	f852 0b0c 	ldr.w	r0, [r2], #12
 8004eca:	f843 0b04 	str.w	r0, [r3], #4
 8004ece:	428b      	cmp	r3, r1
 8004ed0:	d1f9      	bne.n	8004ec6 <funchad34.constprop.0+0x13a>
 8004ed2:	3601      	adds	r6, #1
 8004ed4:	2e03      	cmp	r6, #3
 8004ed6:	f104 0404 	add.w	r4, r4, #4
 8004eda:	f47f af60 	bne.w	8004d9e <funchad34.constprop.0+0x12>
 8004ede:	edde 7a00 	vldr	s15, [lr]
 8004ee2:	ed9f 4a31 	vldr	s8, [pc, #196]	@ 8004fa8 <funchad34.constprop.0+0x21c>
 8004ee6:	ed9e 6a01 	vldr	s12, [lr, #4]
 8004eea:	ed9e 7a02 	vldr	s14, [lr, #8]
 8004eee:	ed9e 5a07 	vldr	s10, [lr, #28]
 8004ef2:	edde 5a05 	vldr	s11, [lr, #20]
 8004ef6:	4b2d      	ldr	r3, [pc, #180]	@ (8004fac <funchad34.constprop.0+0x220>)
 8004ef8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004efc:	ee26 6a06 	vmul.f32	s12, s12, s12
 8004f00:	ee77 6a84 	vadd.f32	s13, s15, s8
 8004f04:	ee67 7a07 	vmul.f32	s15, s14, s14
 8004f08:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004f0c:	ed9e 7a03 	vldr	s14, [lr, #12]
 8004f10:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004f14:	edde 7a06 	vldr	s15, [lr, #24]
 8004f18:	eeb1 6ae6 	vsqrt.f32	s12, s13
 8004f1c:	ee27 7a07 	vmul.f32	s14, s14, s14
 8004f20:	edde 6a04 	vldr	s13, [lr, #16]
 8004f24:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004f28:	ee66 4aa6 	vmul.f32	s9, s13, s13
 8004f2c:	ee37 7a04 	vadd.f32	s14, s14, s8
 8004f30:	edde 6a08 	vldr	s13, [lr, #32]
 8004f34:	ee77 7a84 	vadd.f32	s15, s15, s8
 8004f38:	ee25 5a05 	vmul.f32	s10, s10, s10
 8004f3c:	ee37 7a24 	vadd.f32	s14, s14, s9
 8004f40:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8004f44:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8004f48:	ee77 7a85 	vadd.f32	s15, s15, s10
 8004f4c:	ee37 7a25 	vadd.f32	s14, s14, s11
 8004f50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f54:	eef1 6ac7 	vsqrt.f32	s13, s14
 8004f58:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8004f5c:	eeb4 6ac4 	vcmpe.f32	s12, s8
 8004f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f64:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8004f68:	bf48      	it	mi
 8004f6a:	eeb1 6a46 	vnegmi.f32	s12, s12
 8004f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f72:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8004f76:	bf48      	it	mi
 8004f78:	eef1 6a66 	vnegmi.f32	s13, s13
 8004f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f80:	bf48      	it	mi
 8004f82:	eeb1 7a47 	vnegmi.f32	s14, s14
 8004f86:	ed83 6a00 	vstr	s12, [r3]
 8004f8a:	edc3 6a01 	vstr	s13, [r3, #4]
 8004f8e:	ed83 7a02 	vstr	s14, [r3, #8]
 8004f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f94:	20001334 	.word	0x20001334
 8004f98:	3b800000 	.word	0x3b800000
 8004f9c:	20000f34 	.word	0x20000f34
 8004fa0:	20000f38 	.word	0x20000f38
 8004fa4:	20001330 	.word	0x20001330
 8004fa8:	00000000 	.word	0x00000000
 8004fac:	20001478 	.word	0x20001478
 8004fb0:	20001334 	.word	0x20001334
 8004fb4:	00000000 	.word	0x00000000

08004fb8 <neai_anomalydetection_learn>:
 8004fb8:	4be3      	ldr	r3, [pc, #908]	@ (8005348 <neai_anomalydetection_learn+0x390>)
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d003      	beq.n	8004fc8 <neai_anomalydetection_learn+0x10>
 8004fc0:	4be2      	ldr	r3, [pc, #904]	@ (800534c <neai_anomalydetection_learn+0x394>)
 8004fc2:	207b      	movs	r0, #123	@ 0x7b
 8004fc4:	7018      	strb	r0, [r3, #0]
 8004fc6:	4770      	bx	lr
 8004fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fcc:	ed2d 8b02 	vpush	{d8}
 8004fd0:	f7ff fedc 	bl	8004d8c <funchad34.constprop.0>
 8004fd4:	4bde      	ldr	r3, [pc, #888]	@ (8005350 <neai_anomalydetection_learn+0x398>)
 8004fd6:	681e      	ldr	r6, [r3, #0]
 8004fd8:	f106 0801 	add.w	r8, r6, #1
 8004fdc:	f1b8 0f02 	cmp.w	r8, #2
 8004fe0:	f8c3 8000 	str.w	r8, [r3]
 8004fe4:	f200 8096 	bhi.w	8005114 <neai_anomalydetection_learn+0x15c>
 8004fe8:	4fda      	ldr	r7, [pc, #872]	@ (8005354 <neai_anomalydetection_learn+0x39c>)
 8004fea:	4ddb      	ldr	r5, [pc, #876]	@ (8005358 <neai_anomalydetection_learn+0x3a0>)
 8004fec:	4cdb      	ldr	r4, [pc, #876]	@ (800535c <neai_anomalydetection_learn+0x3a4>)
 8004fee:	ed95 5a00 	vldr	s10, [r5]
 8004ff2:	ed94 7a00 	vldr	s14, [r4]
 8004ff6:	edd7 7a00 	vldr	s15, [r7]
 8004ffa:	edd5 4a01 	vldr	s9, [r5, #4]
 8004ffe:	4bd3      	ldr	r3, [pc, #844]	@ (800534c <neai_anomalydetection_learn+0x394>)
 8005000:	3602      	adds	r6, #2
 8005002:	ee67 6a07 	vmul.f32	s13, s14, s14
 8005006:	ee65 5a05 	vmul.f32	s11, s10, s10
 800500a:	ee07 6a10 	vmov	s14, r6
 800500e:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8005012:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005016:	ee77 6ac5 	vsub.f32	s13, s15, s10
 800501a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800501e:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8005022:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8005026:	ee36 6a05 	vadd.f32	s12, s12, s10
 800502a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800502e:	ee26 5a06 	vmul.f32	s10, s12, s12
 8005032:	ee76 7aa5 	vadd.f32	s15, s13, s11
 8005036:	edd4 6a01 	vldr	s13, [r4, #4]
 800503a:	ed85 6a00 	vstr	s12, [r5]
 800503e:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8005042:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8005046:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800504a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800504e:	bfa8      	it	ge
 8005050:	eeb1 4ae7 	vsqrtge.f32	s8, s15
 8005054:	ee24 5aa4 	vmul.f32	s10, s9, s9
 8005058:	edd7 7a01 	vldr	s15, [r7, #4]
 800505c:	bfb8      	it	lt
 800505e:	ed9f 4ac0 	vldrlt	s8, [pc, #768]	@ 8005360 <neai_anomalydetection_learn+0x3a8>
 8005062:	ee77 3ae4 	vsub.f32	s7, s15, s9
 8005066:	ee35 5a26 	vadd.f32	s10, s10, s13
 800506a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800506e:	eec3 5a87 	vdiv.f32	s11, s7, s14
 8005072:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8005076:	ee75 5aa4 	vadd.f32	s11, s11, s9
 800507a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800507e:	ee25 6aa5 	vmul.f32	s12, s11, s11
 8005082:	ee76 7a85 	vadd.f32	s15, s13, s10
 8005086:	ed95 5a02 	vldr	s10, [r5, #8]
 800508a:	edd7 6a02 	vldr	s13, [r7, #8]
 800508e:	ed84 4a00 	vstr	s8, [r4]
 8005092:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8005096:	ee25 6a05 	vmul.f32	s12, s10, s10
 800509a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800509e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050a2:	bfa8      	it	ge
 80050a4:	eef1 4ae7 	vsqrtge.f32	s9, s15
 80050a8:	edd4 7a02 	vldr	s15, [r4, #8]
 80050ac:	edc5 5a01 	vstr	s11, [r5, #4]
 80050b0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80050b4:	ee36 4ac5 	vsub.f32	s8, s13, s10
 80050b8:	ee77 7a86 	vadd.f32	s15, s15, s12
 80050bc:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80050c0:	ee84 6a07 	vdiv.f32	s12, s8, s14
 80050c4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80050c8:	bfb8      	it	lt
 80050ca:	eddf 4aa5 	vldrlt	s9, [pc, #660]	@ 8005360 <neai_anomalydetection_learn+0x3a8>
 80050ce:	eec6 5a87 	vdiv.f32	s11, s13, s14
 80050d2:	ee36 7a05 	vadd.f32	s14, s12, s10
 80050d6:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80050da:	ee67 6a07 	vmul.f32	s13, s14, s14
 80050de:	edc4 4a01 	vstr	s9, [r4, #4]
 80050e2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80050e6:	ed85 7a02 	vstr	s14, [r5, #8]
 80050ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80050ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050f2:	bfac      	ite	ge
 80050f4:	eef1 6ae7 	vsqrtge.f32	s13, s15
 80050f8:	eddf 6a99 	vldrlt	s13, [pc, #612]	@ 8005360 <neai_anomalydetection_learn+0x3a8>
 80050fc:	f1b8 0f09 	cmp.w	r8, #9
 8005100:	bf8c      	ite	hi
 8005102:	207f      	movhi	r0, #127	@ 0x7f
 8005104:	207e      	movls	r0, #126	@ 0x7e
 8005106:	7018      	strb	r0, [r3, #0]
 8005108:	ecbd 8b02 	vpop	{d8}
 800510c:	edc4 6a02 	vstr	s13, [r4, #8]
 8005110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005114:	4c91      	ldr	r4, [pc, #580]	@ (800535c <neai_anomalydetection_learn+0x3a4>)
 8005116:	4f8f      	ldr	r7, [pc, #572]	@ (8005354 <neai_anomalydetection_learn+0x39c>)
 8005118:	edd4 6a00 	vldr	s13, [r4]
 800511c:	4d8e      	ldr	r5, [pc, #568]	@ (8005358 <neai_anomalydetection_learn+0x3a0>)
 800511e:	ed97 7a00 	vldr	s14, [r7]
 8005122:	edd5 7a00 	vldr	s15, [r5]
 8005126:	eef5 6a40 	vcmp.f32	s13, #0.0
 800512a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800512e:	d034      	beq.n	800519a <neai_anomalydetection_learn+0x1e2>
 8005130:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005134:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8005138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800513c:	f100 80e2 	bmi.w	8005304 <neai_anomalydetection_learn+0x34c>
 8005140:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005144:	eddf 6a86 	vldr	s13, [pc, #536]	@ 8005360 <neai_anomalydetection_learn+0x3a8>
 8005148:	eef4 7ae6 	vcmpe.f32	s15, s13
 800514c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005150:	f300 80e1 	bgt.w	8005316 <neai_anomalydetection_learn+0x35e>
 8005154:	edd4 5a01 	vldr	s11, [r4, #4]
 8005158:	eef5 5a40 	vcmp.f32	s11, #0.0
 800515c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005160:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005164:	f040 80c7 	bne.w	80052f6 <neai_anomalydetection_learn+0x33e>
 8005168:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8005364 <neai_anomalydetection_learn+0x3ac>
 800516c:	edd4 5a02 	vldr	s11, [r4, #8]
 8005170:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8005174:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8005178:	ee67 7a86 	vmul.f32	s15, s15, s12
 800517c:	eef5 5a40 	vcmp.f32	s11, #0.0
 8005180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005184:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005188:	f000 80c2 	beq.w	8005310 <neai_anomalydetection_learn+0x358>
 800518c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005190:	ed95 5a02 	vldr	s10, [r5, #8]
 8005194:	eef0 7a66 	vmov.f32	s15, s13
 8005198:	e021      	b.n	80051de <neai_anomalydetection_learn+0x226>
 800519a:	edd4 5a01 	vldr	s11, [r4, #4]
 800519e:	eef5 5a40 	vcmp.f32	s11, #0.0
 80051a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051a6:	f040 808b 	bne.w	80052c0 <neai_anomalydetection_learn+0x308>
 80051aa:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 8005364 <neai_anomalydetection_learn+0x3ac>
 80051ae:	eef0 6a47 	vmov.f32	s13, s14
 80051b2:	eef0 7a47 	vmov.f32	s15, s14
 80051b6:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80051ba:	edd4 5a02 	vldr	s11, [r4, #8]
 80051be:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80051c2:	ee66 6a86 	vmul.f32	s13, s13, s12
 80051c6:	eef5 5a40 	vcmp.f32	s11, #0.0
 80051ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ce:	ee36 7a87 	vadd.f32	s14, s13, s14
 80051d2:	f000 809a 	beq.w	800530a <neai_anomalydetection_learn+0x352>
 80051d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80051da:	ed95 5a02 	vldr	s10, [r5, #8]
 80051de:	ee36 6a45 	vsub.f32	s12, s12, s10
 80051e2:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 80051e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ea:	bf48      	it	mi
 80051ec:	eeb1 6a46 	vnegmi.f32	s12, s12
 80051f0:	eec6 6a25 	vdiv.f32	s13, s12, s11
 80051f4:	eef4 6a67 	vcmp.f32	s13, s15
 80051f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051fc:	bfc8      	it	gt
 80051fe:	eef0 7a66 	vmovgt.f32	s15, s13
 8005202:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8005206:	eef0 5a08 	vmov.f32	s11, #8	@ 0x40400000  3.0
 800520a:	ee86 6aa5 	vdiv.f32	s12, s13, s11
 800520e:	4856      	ldr	r0, [pc, #344]	@ (8005368 <neai_anomalydetection_learn+0x3b0>)
 8005210:	4956      	ldr	r1, [pc, #344]	@ (800536c <neai_anomalydetection_learn+0x3b4>)
 8005212:	6803      	ldr	r3, [r0, #0]
 8005214:	4a56      	ldr	r2, [pc, #344]	@ (8005370 <neai_anomalydetection_learn+0x3b8>)
 8005216:	3301      	adds	r3, #1
 8005218:	6003      	str	r3, [r0, #0]
 800521a:	edd1 5a00 	vldr	s11, [r1]
 800521e:	ee36 7a07 	vadd.f32	s14, s12, s14
 8005222:	ee06 3a90 	vmov	s13, r3
 8005226:	ed92 6a00 	vldr	s12, [r2]
 800522a:	eeb8 5a66 	vcvt.f32.u32	s10, s13
 800522e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8005232:	ee37 7a65 	vsub.f32	s14, s14, s11
 8005236:	ee87 8a85 	vdiv.f32	s16, s15, s10
 800523a:	eec7 6a05 	vdiv.f32	s13, s14, s10
 800523e:	ee38 8a06 	vadd.f32	s16, s16, s12
 8005242:	ee76 7aa5 	vadd.f32	s15, s13, s11
 8005246:	ed82 8a00 	vstr	s16, [r2]
 800524a:	edc1 7a00 	vstr	s15, [r1]
 800524e:	2b00      	cmp	r3, #0
 8005250:	f43f aecd 	beq.w	8004fee <neai_anomalydetection_learn+0x36>
 8005254:	4b47      	ldr	r3, [pc, #284]	@ (8005374 <neai_anomalydetection_learn+0x3bc>)
 8005256:	edd3 8a00 	vldr	s17, [r3]
 800525a:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800525e:	ee17 0a90 	vmov	r0, s15
 8005262:	f7fb f971 	bl	8000548 <__aeabi_f2d>
 8005266:	ed9f 1b34 	vldr	d1, [pc, #208]	@ 8005338 <neai_anomalydetection_learn+0x380>
 800526a:	ec41 0b10 	vmov	d0, r0, r1
 800526e:	f004 fe4d 	bl	8009f0c <fmax>
 8005272:	ec51 0b10 	vmov	r0, r1, d0
 8005276:	f7fb fcb7 	bl	8000be8 <__aeabi_d2f>
 800527a:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 800527e:	ee00 0a10 	vmov	s0, r0
 8005282:	f004 fe97 	bl	8009fb4 <fminf>
 8005286:	4b3c      	ldr	r3, [pc, #240]	@ (8005378 <neai_anomalydetection_learn+0x3c0>)
 8005288:	ee68 7a28 	vmul.f32	s15, s16, s17
 800528c:	ed83 0a00 	vstr	s0, [r3]
 8005290:	ee17 0a90 	vmov	r0, s15
 8005294:	f7fb f958 	bl	8000548 <__aeabi_f2d>
 8005298:	ed9f 1b29 	vldr	d1, [pc, #164]	@ 8005340 <neai_anomalydetection_learn+0x388>
 800529c:	ec41 0b10 	vmov	d0, r0, r1
 80052a0:	f004 fe34 	bl	8009f0c <fmax>
 80052a4:	ec51 0b10 	vmov	r0, r1, d0
 80052a8:	f7fb fc9e 	bl	8000be8 <__aeabi_d2f>
 80052ac:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 8005364 <neai_anomalydetection_learn+0x3ac>
 80052b0:	ee00 0a10 	vmov	s0, r0
 80052b4:	f004 fe7e 	bl	8009fb4 <fminf>
 80052b8:	4b30      	ldr	r3, [pc, #192]	@ (800537c <neai_anomalydetection_learn+0x3c4>)
 80052ba:	ed83 0a00 	vstr	s0, [r3]
 80052be:	e696      	b.n	8004fee <neai_anomalydetection_learn+0x36>
 80052c0:	eddf 7a28 	vldr	s15, [pc, #160]	@ 8005364 <neai_anomalydetection_learn+0x3ac>
 80052c4:	ed97 6a01 	vldr	s12, [r7, #4]
 80052c8:	ed95 5a01 	vldr	s10, [r5, #4]
 80052cc:	eeb0 7a67 	vmov.f32	s14, s15
 80052d0:	ee36 6a45 	vsub.f32	s12, s12, s10
 80052d4:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 80052d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052dc:	d501      	bpl.n	80052e2 <neai_anomalydetection_learn+0x32a>
 80052de:	eeb1 6a46 	vneg.f32	s12, s12
 80052e2:	eec6 6a25 	vdiv.f32	s13, s12, s11
 80052e6:	eef4 6a67 	vcmp.f32	s13, s15
 80052ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ee:	bfc8      	it	gt
 80052f0:	eef0 7a66 	vmovgt.f32	s15, s13
 80052f4:	e75f      	b.n	80051b6 <neai_anomalydetection_learn+0x1fe>
 80052f6:	ed97 6a01 	vldr	s12, [r7, #4]
 80052fa:	ed95 5a01 	vldr	s10, [r5, #4]
 80052fe:	eef0 7a66 	vmov.f32	s15, s13
 8005302:	e7e5      	b.n	80052d0 <neai_anomalydetection_learn+0x318>
 8005304:	eeb1 7a47 	vneg.f32	s14, s14
 8005308:	e71a      	b.n	8005140 <neai_anomalydetection_learn+0x188>
 800530a:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8005364 <neai_anomalydetection_learn+0x3ac>
 800530e:	e771      	b.n	80051f4 <neai_anomalydetection_learn+0x23c>
 8005310:	eef0 7a66 	vmov.f32	s15, s13
 8005314:	e775      	b.n	8005202 <neai_anomalydetection_learn+0x24a>
 8005316:	edd4 5a01 	vldr	s11, [r4, #4]
 800531a:	ed97 6a01 	vldr	s12, [r7, #4]
 800531e:	ed95 5a01 	vldr	s10, [r5, #4]
 8005322:	eef5 5a40 	vcmp.f32	s11, #0.0
 8005326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800532a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800532e:	d1cf      	bne.n	80052d0 <neai_anomalydetection_learn+0x318>
 8005330:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8005364 <neai_anomalydetection_learn+0x3ac>
 8005334:	e7d7      	b.n	80052e6 <neai_anomalydetection_learn+0x32e>
 8005336:	bf00      	nop
 8005338:	00000000 	.word	0x00000000
 800533c:	3ff00000 	.word	0x3ff00000
 8005340:	00000000 	.word	0x00000000
 8005344:	40080000 	.word	0x40080000
 8005348:	200001e0 	.word	0x200001e0
 800534c:	200001d8 	.word	0x200001d8
 8005350:	200001dc 	.word	0x200001dc
 8005354:	20001478 	.word	0x20001478
 8005358:	20000204 	.word	0x20000204
 800535c:	20000210 	.word	0x20000210
 8005360:	00000000 	.word	0x00000000
 8005364:	42c80000 	.word	0x42c80000
 8005368:	200001e4 	.word	0x200001e4
 800536c:	200001ec 	.word	0x200001ec
 8005370:	200001e8 	.word	0x200001e8
 8005374:	200001f8 	.word	0x200001f8
 8005378:	20000200 	.word	0x20000200
 800537c:	200001fc 	.word	0x200001fc

08005380 <neai_anomalydetection_detect>:
 8005380:	b510      	push	{r4, lr}
 8005382:	ed2d 8b06 	vpush	{d8-d10}
 8005386:	4aac      	ldr	r2, [pc, #688]	@ (8005638 <neai_anomalydetection_detect+0x2b8>)
 8005388:	460c      	mov	r4, r1
 800538a:	7813      	ldrb	r3, [r2, #0]
 800538c:	21ff      	movs	r1, #255	@ 0xff
 800538e:	7021      	strb	r1, [r4, #0]
 8005390:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8005394:	2901      	cmp	r1, #1
 8005396:	d95b      	bls.n	8005450 <neai_anomalydetection_detect+0xd0>
 8005398:	2b80      	cmp	r3, #128	@ 0x80
 800539a:	d059      	beq.n	8005450 <neai_anomalydetection_detect+0xd0>
 800539c:	4ba7      	ldr	r3, [pc, #668]	@ (800563c <neai_anomalydetection_detect+0x2bc>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2b09      	cmp	r3, #9
 80053a2:	d953      	bls.n	800544c <neai_anomalydetection_detect+0xcc>
 80053a4:	f7ff fcf2 	bl	8004d8c <funchad34.constprop.0>
 80053a8:	4ba5      	ldr	r3, [pc, #660]	@ (8005640 <neai_anomalydetection_detect+0x2c0>)
 80053aa:	6818      	ldr	r0, [r3, #0]
 80053ac:	f7fb f8cc 	bl	8000548 <__aeabi_f2d>
 80053b0:	a39d      	add	r3, pc, #628	@ (adr r3, 8005628 <neai_anomalydetection_detect+0x2a8>)
 80053b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b6:	f7fb f91f 	bl	80005f8 <__aeabi_dmul>
 80053ba:	f7fb fc15 	bl	8000be8 <__aeabi_d2f>
 80053be:	eddf 7aa1 	vldr	s15, [pc, #644]	@ 8005644 <neai_anomalydetection_detect+0x2c4>
 80053c2:	ee08 0a10 	vmov	s16, r0
 80053c6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80053ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ce:	da43      	bge.n	8005458 <neai_anomalydetection_detect+0xd8>
 80053d0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80053d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053d8:	4b9b      	ldr	r3, [pc, #620]	@ (8005648 <neai_anomalydetection_detect+0x2c8>)
 80053da:	dd74      	ble.n	80054c6 <neai_anomalydetection_detect+0x146>
 80053dc:	eddf 9a9b 	vldr	s19, [pc, #620]	@ 800564c <neai_anomalydetection_detect+0x2cc>
 80053e0:	edc3 7a00 	vstr	s15, [r3]
 80053e4:	eeb0 8a67 	vmov.f32	s16, s15
 80053e8:	4b99      	ldr	r3, [pc, #612]	@ (8005650 <neai_anomalydetection_detect+0x2d0>)
 80053ea:	499a      	ldr	r1, [pc, #616]	@ (8005654 <neai_anomalydetection_detect+0x2d4>)
 80053ec:	edd3 6a00 	vldr	s13, [r3]
 80053f0:	4a99      	ldr	r2, [pc, #612]	@ (8005658 <neai_anomalydetection_detect+0x2d8>)
 80053f2:	edd1 7a00 	vldr	s15, [r1]
 80053f6:	ed92 7a00 	vldr	s14, [r2]
 80053fa:	eef5 6a40 	vcmp.f32	s13, #0.0
 80053fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005402:	d038      	beq.n	8005476 <neai_anomalydetection_detect+0xf6>
 8005404:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005408:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800540c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005410:	d501      	bpl.n	8005416 <neai_anomalydetection_detect+0x96>
 8005412:	eef1 7a67 	vneg.f32	s15, s15
 8005416:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800541a:	eddf 7a90 	vldr	s15, [pc, #576]	@ 800565c <neai_anomalydetection_detect+0x2dc>
 800541e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005426:	f300 80ec 	bgt.w	8005602 <neai_anomalydetection_detect+0x282>
 800542a:	edd3 5a01 	vldr	s11, [r3, #4]
 800542e:	eef5 5a40 	vcmp.f32	s11, #0.0
 8005432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005436:	ee77 6a27 	vadd.f32	s13, s14, s15
 800543a:	f000 80dc 	beq.w	80055f6 <neai_anomalydetection_detect+0x276>
 800543e:	ed91 6a01 	vldr	s12, [r1, #4]
 8005442:	ed92 5a01 	vldr	s10, [r2, #4]
 8005446:	eeb0 7a67 	vmov.f32	s14, s15
 800544a:	e023      	b.n	8005494 <neai_anomalydetection_detect+0x114>
 800544c:	237e      	movs	r3, #126	@ 0x7e
 800544e:	7013      	strb	r3, [r2, #0]
 8005450:	ecbd 8b06 	vpop	{d8-d10}
 8005454:	4618      	mov	r0, r3
 8005456:	bd10      	pop	{r4, pc}
 8005458:	eddf 7a81 	vldr	s15, [pc, #516]	@ 8005660 <neai_anomalydetection_detect+0x2e0>
 800545c:	4b7a      	ldr	r3, [pc, #488]	@ (8005648 <neai_anomalydetection_detect+0x2c8>)
 800545e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005466:	d928      	bls.n	80054ba <neai_anomalydetection_detect+0x13a>
 8005468:	eddf 9a7e 	vldr	s19, [pc, #504]	@ 8005664 <neai_anomalydetection_detect+0x2e4>
 800546c:	edc3 7a00 	vstr	s15, [r3]
 8005470:	eeb0 8a67 	vmov.f32	s16, s15
 8005474:	e7b8      	b.n	80053e8 <neai_anomalydetection_detect+0x68>
 8005476:	edd3 5a01 	vldr	s11, [r3, #4]
 800547a:	eef5 5a40 	vcmp.f32	s11, #0.0
 800547e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005482:	d027      	beq.n	80054d4 <neai_anomalydetection_detect+0x154>
 8005484:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8005660 <neai_anomalydetection_detect+0x2e0>
 8005488:	ed91 6a01 	vldr	s12, [r1, #4]
 800548c:	ed92 5a01 	vldr	s10, [r2, #4]
 8005490:	eef0 6a47 	vmov.f32	s13, s14
 8005494:	ee36 6a45 	vsub.f32	s12, s12, s10
 8005498:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 800549c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054a0:	d501      	bpl.n	80054a6 <neai_anomalydetection_detect+0x126>
 80054a2:	eeb1 6a46 	vneg.f32	s12, s12
 80054a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80054ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054b2:	d515      	bpl.n	80054e0 <neai_anomalydetection_detect+0x160>
 80054b4:	eeb0 7a67 	vmov.f32	s14, s15
 80054b8:	e012      	b.n	80054e0 <neai_anomalydetection_detect+0x160>
 80054ba:	eef7 9a08 	vmov.f32	s19, #120	@ 0x3fc00000  1.5
 80054be:	ee68 9a29 	vmul.f32	s19, s16, s19
 80054c2:	6018      	str	r0, [r3, #0]
 80054c4:	e790      	b.n	80053e8 <neai_anomalydetection_detect+0x68>
 80054c6:	ed93 8a00 	vldr	s16, [r3]
 80054ca:	eef7 9a08 	vmov.f32	s19, #120	@ 0x3fc00000  1.5
 80054ce:	ee68 9a29 	vmul.f32	s19, s16, s19
 80054d2:	e789      	b.n	80053e8 <neai_anomalydetection_detect+0x68>
 80054d4:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8005660 <neai_anomalydetection_detect+0x2e0>
 80054d8:	eef0 7a66 	vmov.f32	s15, s13
 80054dc:	eeb0 7a66 	vmov.f32	s14, s13
 80054e0:	ee77 8ae6 	vsub.f32	s17, s15, s13
 80054e4:	ed93 6a02 	vldr	s12, [r3, #8]
 80054e8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80054ec:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80054f0:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80054f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054f8:	ee78 8aa6 	vadd.f32	s17, s17, s13
 80054fc:	edd1 7a02 	vldr	s15, [r1, #8]
 8005500:	edd2 6a02 	vldr	s13, [r2, #8]
 8005504:	d07a      	beq.n	80055fc <neai_anomalydetection_detect+0x27c>
 8005506:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800550a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800550e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005512:	bf48      	it	mi
 8005514:	eef1 7a67 	vnegmi.f32	s15, s15
 8005518:	ee87 9a86 	vdiv.f32	s18, s15, s12
 800551c:	4b52      	ldr	r3, [pc, #328]	@ (8005668 <neai_anomalydetection_detect+0x2e8>)
 800551e:	eeb4 9a47 	vcmp.f32	s18, s14
 8005522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005526:	bfc8      	it	gt
 8005528:	eeb0 7a49 	vmovgt.f32	s14, s18
 800552c:	edd3 6a00 	vldr	s13, [r3]
 8005530:	4b4e      	ldr	r3, [pc, #312]	@ (800566c <neai_anomalydetection_detect+0x2ec>)
 8005532:	ee27 7a08 	vmul.f32	s14, s14, s16
 8005536:	eeb7 aa00 	vmov.f32	s20, #112	@ 0x3f800000  1.0
 800553a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800553e:	ed93 7a00 	vldr	s14, [r3]
 8005542:	ee77 7aca 	vsub.f32	s15, s15, s20
 8005546:	ee39 9a68 	vsub.f32	s18, s18, s17
 800554a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800554e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005552:	ee17 0a90 	vmov	r0, s15
 8005556:	f7fa fff7 	bl	8000548 <__aeabi_f2d>
 800555a:	ed9f 1b35 	vldr	d1, [pc, #212]	@ 8005630 <neai_anomalydetection_detect+0x2b0>
 800555e:	ec41 0b10 	vmov	d0, r0, r1
 8005562:	f004 fcd3 	bl	8009f0c <fmax>
 8005566:	ec51 0b10 	vmov	r0, r1, d0
 800556a:	f7fb fb3d 	bl	8000be8 <__aeabi_d2f>
 800556e:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8005572:	ee00 0a10 	vmov	s0, r0
 8005576:	f004 fd1d 	bl	8009fb4 <fminf>
 800557a:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800557e:	ee89 7a27 	vdiv.f32	s14, s18, s15
 8005582:	4b3b      	ldr	r3, [pc, #236]	@ (8005670 <neai_anomalydetection_detect+0x2f0>)
 8005584:	ed93 6a00 	vldr	s12, [r3]
 8005588:	4b3a      	ldr	r3, [pc, #232]	@ (8005674 <neai_anomalydetection_detect+0x2f4>)
 800558a:	ee37 7a28 	vadd.f32	s14, s14, s17
 800558e:	edd3 6a00 	vldr	s13, [r3]
 8005592:	ee27 7a08 	vmul.f32	s14, s14, s16
 8005596:	eec7 7a06 	vdiv.f32	s15, s14, s12
 800559a:	ee77 7aca 	vsub.f32	s15, s15, s20
 800559e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80055a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80055a6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80055aa:	ee67 7aa9 	vmul.f32	s15, s15, s19
 80055ae:	ee17 0a90 	vmov	r0, s15
 80055b2:	f7fa ffc9 	bl	8000548 <__aeabi_f2d>
 80055b6:	ed9f 1b1e 	vldr	d1, [pc, #120]	@ 8005630 <neai_anomalydetection_detect+0x2b0>
 80055ba:	ec41 0b10 	vmov	d0, r0, r1
 80055be:	f004 fca5 	bl	8009f0c <fmax>
 80055c2:	ec51 0b10 	vmov	r0, r1, d0
 80055c6:	f7fb fb0f 	bl	8000be8 <__aeabi_d2f>
 80055ca:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 80055ce:	ee00 0a10 	vmov	s0, r0
 80055d2:	f004 fcef 	bl	8009fb4 <fminf>
 80055d6:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 80055da:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80055de:	2300      	movs	r3, #0
 80055e0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80055e4:	4618      	mov	r0, r3
 80055e6:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80055ea:	ee17 2a90 	vmov	r2, s15
 80055ee:	7022      	strb	r2, [r4, #0]
 80055f0:	ecbd 8b06 	vpop	{d8-d10}
 80055f4:	bd10      	pop	{r4, pc}
 80055f6:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8005660 <neai_anomalydetection_detect+0x2e0>
 80055fa:	e75b      	b.n	80054b4 <neai_anomalydetection_detect+0x134>
 80055fc:	ed9f 9a18 	vldr	s18, [pc, #96]	@ 8005660 <neai_anomalydetection_detect+0x2e0>
 8005600:	e78c      	b.n	800551c <neai_anomalydetection_detect+0x19c>
 8005602:	edd3 5a01 	vldr	s11, [r3, #4]
 8005606:	eef5 5a40 	vcmp.f32	s11, #0.0
 800560a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800560e:	ee77 6a27 	vadd.f32	s13, s14, s15
 8005612:	d004      	beq.n	800561e <neai_anomalydetection_detect+0x29e>
 8005614:	ed91 6a01 	vldr	s12, [r1, #4]
 8005618:	ed92 5a01 	vldr	s10, [r2, #4]
 800561c:	e73a      	b.n	8005494 <neai_anomalydetection_detect+0x114>
 800561e:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8005660 <neai_anomalydetection_detect+0x2e0>
 8005622:	e742      	b.n	80054aa <neai_anomalydetection_detect+0x12a>
 8005624:	f3af 8000 	nop.w
 8005628:	33333333 	.word	0x33333333
 800562c:	40133333 	.word	0x40133333
	...
 8005638:	200001d8 	.word	0x200001d8
 800563c:	200001dc 	.word	0x200001dc
 8005640:	2000000c 	.word	0x2000000c
 8005644:	3c23d70a 	.word	0x3c23d70a
 8005648:	20001484 	.word	0x20001484
 800564c:	3c75c28f 	.word	0x3c75c28f
 8005650:	20000210 	.word	0x20000210
 8005654:	20001478 	.word	0x20001478
 8005658:	20000204 	.word	0x20000204
 800565c:	00000000 	.word	0x00000000
 8005660:	42c80000 	.word	0x42c80000
 8005664:	43160000 	.word	0x43160000
 8005668:	200001fc 	.word	0x200001fc
 800566c:	200001f0 	.word	0x200001f0
 8005670:	20000200 	.word	0x20000200
 8005674:	200001f4 	.word	0x200001f4

08005678 <_fminf>:
 8005678:	f004 bc9c 	b.w	8009fb4 <fminf>

0800567c <neai_anomalydetection_init>:
 800567c:	b538      	push	{r3, r4, r5, lr}
 800567e:	4921      	ldr	r1, [pc, #132]	@ (8005704 <neai_anomalydetection_init+0x88>)
 8005680:	4a21      	ldr	r2, [pc, #132]	@ (8005708 <neai_anomalydetection_init+0x8c>)
 8005682:	4c22      	ldr	r4, [pc, #136]	@ (800570c <neai_anomalydetection_init+0x90>)
 8005684:	4d22      	ldr	r5, [pc, #136]	@ (8005710 <neai_anomalydetection_init+0x94>)
 8005686:	4823      	ldr	r0, [pc, #140]	@ (8005714 <neai_anomalydetection_init+0x98>)
 8005688:	eddf 0a23 	vldr	s1, [pc, #140]	@ 8005718 <neai_anomalydetection_init+0x9c>
 800568c:	2300      	movs	r3, #0
 800568e:	ed2d 8b02 	vpush	{d8}
 8005692:	600b      	str	r3, [r1, #0]
 8005694:	604b      	str	r3, [r1, #4]
 8005696:	608b      	str	r3, [r1, #8]
 8005698:	4920      	ldr	r1, [pc, #128]	@ (800571c <neai_anomalydetection_init+0xa0>)
 800569a:	6023      	str	r3, [r4, #0]
 800569c:	6013      	str	r3, [r2, #0]
 800569e:	6053      	str	r3, [r2, #4]
 80056a0:	6093      	str	r3, [r2, #8]
 80056a2:	602b      	str	r3, [r5, #0]
 80056a4:	f04f 5c7e 	mov.w	ip, #1065353216	@ 0x3f800000
 80056a8:	4b1d      	ldr	r3, [pc, #116]	@ (8005720 <neai_anomalydetection_init+0xa4>)
 80056aa:	f8c1 c000 	str.w	ip, [r1]
 80056ae:	2200      	movs	r2, #0
 80056b0:	491c      	ldr	r1, [pc, #112]	@ (8005724 <neai_anomalydetection_init+0xa8>)
 80056b2:	6019      	str	r1, [r3, #0]
 80056b4:	6002      	str	r2, [r0, #0]
 80056b6:	4b1c      	ldr	r3, [pc, #112]	@ (8005728 <neai_anomalydetection_init+0xac>)
 80056b8:	481c      	ldr	r0, [pc, #112]	@ (800572c <neai_anomalydetection_init+0xb0>)
 80056ba:	4c1d      	ldr	r4, [pc, #116]	@ (8005730 <neai_anomalydetection_init+0xb4>)
 80056bc:	491d      	ldr	r1, [pc, #116]	@ (8005734 <neai_anomalydetection_init+0xb8>)
 80056be:	6019      	str	r1, [r3, #0]
 80056c0:	6004      	str	r4, [r0, #0]
 80056c2:	4b1d      	ldr	r3, [pc, #116]	@ (8005738 <neai_anomalydetection_init+0xbc>)
 80056c4:	481d      	ldr	r0, [pc, #116]	@ (800573c <neai_anomalydetection_init+0xc0>)
 80056c6:	ed9f 8a1e 	vldr	s16, [pc, #120]	@ 8005740 <neai_anomalydetection_init+0xc4>
 80056ca:	4c1e      	ldr	r4, [pc, #120]	@ (8005744 <neai_anomalydetection_init+0xc8>)
 80056cc:	491e      	ldr	r1, [pc, #120]	@ (8005748 <neai_anomalydetection_init+0xcc>)
 80056ce:	6004      	str	r4, [r0, #0]
 80056d0:	6019      	str	r1, [r3, #0]
 80056d2:	4c1e      	ldr	r4, [pc, #120]	@ (800574c <neai_anomalydetection_init+0xd0>)
 80056d4:	4b1e      	ldr	r3, [pc, #120]	@ (8005750 <neai_anomalydetection_init+0xd4>)
 80056d6:	7022      	strb	r2, [r4, #0]
 80056d8:	eeb0 0a48 	vmov.f32	s0, s16
 80056dc:	2101      	movs	r1, #1
 80056de:	7019      	strb	r1, [r3, #0]
 80056e0:	f7ff ffca 	bl	8005678 <_fminf>
 80056e4:	eeb4 0a48 	vcmp.f32	s0, s16
 80056e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056ec:	bf1c      	itt	ne
 80056ee:	2081      	movne	r0, #129	@ 0x81
 80056f0:	7020      	strbne	r0, [r4, #0]
 80056f2:	ecbd 8b02 	vpop	{d8}
 80056f6:	4b17      	ldr	r3, [pc, #92]	@ (8005754 <neai_anomalydetection_init+0xd8>)
 80056f8:	bf08      	it	eq
 80056fa:	7820      	ldrbeq	r0, [r4, #0]
 80056fc:	2200      	movs	r2, #0
 80056fe:	601a      	str	r2, [r3, #0]
 8005700:	bd38      	pop	{r3, r4, r5, pc}
 8005702:	bf00      	nop
 8005704:	20000204 	.word	0x20000204
 8005708:	20000210 	.word	0x20000210
 800570c:	200001e8 	.word	0x200001e8
 8005710:	200001ec 	.word	0x200001ec
 8005714:	200001e4 	.word	0x200001e4
 8005718:	40066666 	.word	0x40066666
 800571c:	20000200 	.word	0x20000200
 8005720:	200001fc 	.word	0x200001fc
 8005724:	40400000 	.word	0x40400000
 8005728:	20001484 	.word	0x20001484
 800572c:	200001f8 	.word	0x200001f8
 8005730:	3f4f5c29 	.word	0x3f4f5c29
 8005734:	4099999a 	.word	0x4099999a
 8005738:	200001f0 	.word	0x200001f0
 800573c:	200001f4 	.word	0x200001f4
 8005740:	3f8ccccd 	.word	0x3f8ccccd
 8005744:	3f07ae14 	.word	0x3f07ae14
 8005748:	3ef0a3d7 	.word	0x3ef0a3d7
 800574c:	200001d8 	.word	0x200001d8
 8005750:	200001e0 	.word	0x200001e0
 8005754:	200001dc 	.word	0x200001dc

08005758 <__cvt>:
 8005758:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800575c:	ec57 6b10 	vmov	r6, r7, d0
 8005760:	2f00      	cmp	r7, #0
 8005762:	460c      	mov	r4, r1
 8005764:	4619      	mov	r1, r3
 8005766:	463b      	mov	r3, r7
 8005768:	bfbb      	ittet	lt
 800576a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800576e:	461f      	movlt	r7, r3
 8005770:	2300      	movge	r3, #0
 8005772:	232d      	movlt	r3, #45	@ 0x2d
 8005774:	700b      	strb	r3, [r1, #0]
 8005776:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005778:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800577c:	4691      	mov	r9, r2
 800577e:	f023 0820 	bic.w	r8, r3, #32
 8005782:	bfbc      	itt	lt
 8005784:	4632      	movlt	r2, r6
 8005786:	4616      	movlt	r6, r2
 8005788:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800578c:	d005      	beq.n	800579a <__cvt+0x42>
 800578e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005792:	d100      	bne.n	8005796 <__cvt+0x3e>
 8005794:	3401      	adds	r4, #1
 8005796:	2102      	movs	r1, #2
 8005798:	e000      	b.n	800579c <__cvt+0x44>
 800579a:	2103      	movs	r1, #3
 800579c:	ab03      	add	r3, sp, #12
 800579e:	9301      	str	r3, [sp, #4]
 80057a0:	ab02      	add	r3, sp, #8
 80057a2:	9300      	str	r3, [sp, #0]
 80057a4:	ec47 6b10 	vmov	d0, r6, r7
 80057a8:	4653      	mov	r3, sl
 80057aa:	4622      	mov	r2, r4
 80057ac:	f001 f978 	bl	8006aa0 <_dtoa_r>
 80057b0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80057b4:	4605      	mov	r5, r0
 80057b6:	d119      	bne.n	80057ec <__cvt+0x94>
 80057b8:	f019 0f01 	tst.w	r9, #1
 80057bc:	d00e      	beq.n	80057dc <__cvt+0x84>
 80057be:	eb00 0904 	add.w	r9, r0, r4
 80057c2:	2200      	movs	r2, #0
 80057c4:	2300      	movs	r3, #0
 80057c6:	4630      	mov	r0, r6
 80057c8:	4639      	mov	r1, r7
 80057ca:	f7fb f97d 	bl	8000ac8 <__aeabi_dcmpeq>
 80057ce:	b108      	cbz	r0, 80057d4 <__cvt+0x7c>
 80057d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80057d4:	2230      	movs	r2, #48	@ 0x30
 80057d6:	9b03      	ldr	r3, [sp, #12]
 80057d8:	454b      	cmp	r3, r9
 80057da:	d31e      	bcc.n	800581a <__cvt+0xc2>
 80057dc:	9b03      	ldr	r3, [sp, #12]
 80057de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80057e0:	1b5b      	subs	r3, r3, r5
 80057e2:	4628      	mov	r0, r5
 80057e4:	6013      	str	r3, [r2, #0]
 80057e6:	b004      	add	sp, #16
 80057e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80057f0:	eb00 0904 	add.w	r9, r0, r4
 80057f4:	d1e5      	bne.n	80057c2 <__cvt+0x6a>
 80057f6:	7803      	ldrb	r3, [r0, #0]
 80057f8:	2b30      	cmp	r3, #48	@ 0x30
 80057fa:	d10a      	bne.n	8005812 <__cvt+0xba>
 80057fc:	2200      	movs	r2, #0
 80057fe:	2300      	movs	r3, #0
 8005800:	4630      	mov	r0, r6
 8005802:	4639      	mov	r1, r7
 8005804:	f7fb f960 	bl	8000ac8 <__aeabi_dcmpeq>
 8005808:	b918      	cbnz	r0, 8005812 <__cvt+0xba>
 800580a:	f1c4 0401 	rsb	r4, r4, #1
 800580e:	f8ca 4000 	str.w	r4, [sl]
 8005812:	f8da 3000 	ldr.w	r3, [sl]
 8005816:	4499      	add	r9, r3
 8005818:	e7d3      	b.n	80057c2 <__cvt+0x6a>
 800581a:	1c59      	adds	r1, r3, #1
 800581c:	9103      	str	r1, [sp, #12]
 800581e:	701a      	strb	r2, [r3, #0]
 8005820:	e7d9      	b.n	80057d6 <__cvt+0x7e>

08005822 <__exponent>:
 8005822:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005824:	2900      	cmp	r1, #0
 8005826:	bfba      	itte	lt
 8005828:	4249      	neglt	r1, r1
 800582a:	232d      	movlt	r3, #45	@ 0x2d
 800582c:	232b      	movge	r3, #43	@ 0x2b
 800582e:	2909      	cmp	r1, #9
 8005830:	7002      	strb	r2, [r0, #0]
 8005832:	7043      	strb	r3, [r0, #1]
 8005834:	dd29      	ble.n	800588a <__exponent+0x68>
 8005836:	f10d 0307 	add.w	r3, sp, #7
 800583a:	461d      	mov	r5, r3
 800583c:	270a      	movs	r7, #10
 800583e:	461a      	mov	r2, r3
 8005840:	fbb1 f6f7 	udiv	r6, r1, r7
 8005844:	fb07 1416 	mls	r4, r7, r6, r1
 8005848:	3430      	adds	r4, #48	@ 0x30
 800584a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800584e:	460c      	mov	r4, r1
 8005850:	2c63      	cmp	r4, #99	@ 0x63
 8005852:	f103 33ff 	add.w	r3, r3, #4294967295
 8005856:	4631      	mov	r1, r6
 8005858:	dcf1      	bgt.n	800583e <__exponent+0x1c>
 800585a:	3130      	adds	r1, #48	@ 0x30
 800585c:	1e94      	subs	r4, r2, #2
 800585e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005862:	1c41      	adds	r1, r0, #1
 8005864:	4623      	mov	r3, r4
 8005866:	42ab      	cmp	r3, r5
 8005868:	d30a      	bcc.n	8005880 <__exponent+0x5e>
 800586a:	f10d 0309 	add.w	r3, sp, #9
 800586e:	1a9b      	subs	r3, r3, r2
 8005870:	42ac      	cmp	r4, r5
 8005872:	bf88      	it	hi
 8005874:	2300      	movhi	r3, #0
 8005876:	3302      	adds	r3, #2
 8005878:	4403      	add	r3, r0
 800587a:	1a18      	subs	r0, r3, r0
 800587c:	b003      	add	sp, #12
 800587e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005880:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005884:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005888:	e7ed      	b.n	8005866 <__exponent+0x44>
 800588a:	2330      	movs	r3, #48	@ 0x30
 800588c:	3130      	adds	r1, #48	@ 0x30
 800588e:	7083      	strb	r3, [r0, #2]
 8005890:	70c1      	strb	r1, [r0, #3]
 8005892:	1d03      	adds	r3, r0, #4
 8005894:	e7f1      	b.n	800587a <__exponent+0x58>
	...

08005898 <_printf_float>:
 8005898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800589c:	b08d      	sub	sp, #52	@ 0x34
 800589e:	460c      	mov	r4, r1
 80058a0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80058a4:	4616      	mov	r6, r2
 80058a6:	461f      	mov	r7, r3
 80058a8:	4605      	mov	r5, r0
 80058aa:	f000 fff3 	bl	8006894 <_localeconv_r>
 80058ae:	6803      	ldr	r3, [r0, #0]
 80058b0:	9304      	str	r3, [sp, #16]
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7fa fcdc 	bl	8000270 <strlen>
 80058b8:	2300      	movs	r3, #0
 80058ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80058bc:	f8d8 3000 	ldr.w	r3, [r8]
 80058c0:	9005      	str	r0, [sp, #20]
 80058c2:	3307      	adds	r3, #7
 80058c4:	f023 0307 	bic.w	r3, r3, #7
 80058c8:	f103 0208 	add.w	r2, r3, #8
 80058cc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80058d0:	f8d4 b000 	ldr.w	fp, [r4]
 80058d4:	f8c8 2000 	str.w	r2, [r8]
 80058d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80058dc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80058e0:	9307      	str	r3, [sp, #28]
 80058e2:	f8cd 8018 	str.w	r8, [sp, #24]
 80058e6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80058ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058ee:	4b9c      	ldr	r3, [pc, #624]	@ (8005b60 <_printf_float+0x2c8>)
 80058f0:	f04f 32ff 	mov.w	r2, #4294967295
 80058f4:	f7fb f91a 	bl	8000b2c <__aeabi_dcmpun>
 80058f8:	bb70      	cbnz	r0, 8005958 <_printf_float+0xc0>
 80058fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058fe:	4b98      	ldr	r3, [pc, #608]	@ (8005b60 <_printf_float+0x2c8>)
 8005900:	f04f 32ff 	mov.w	r2, #4294967295
 8005904:	f7fb f8f4 	bl	8000af0 <__aeabi_dcmple>
 8005908:	bb30      	cbnz	r0, 8005958 <_printf_float+0xc0>
 800590a:	2200      	movs	r2, #0
 800590c:	2300      	movs	r3, #0
 800590e:	4640      	mov	r0, r8
 8005910:	4649      	mov	r1, r9
 8005912:	f7fb f8e3 	bl	8000adc <__aeabi_dcmplt>
 8005916:	b110      	cbz	r0, 800591e <_printf_float+0x86>
 8005918:	232d      	movs	r3, #45	@ 0x2d
 800591a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800591e:	4a91      	ldr	r2, [pc, #580]	@ (8005b64 <_printf_float+0x2cc>)
 8005920:	4b91      	ldr	r3, [pc, #580]	@ (8005b68 <_printf_float+0x2d0>)
 8005922:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005926:	bf94      	ite	ls
 8005928:	4690      	movls	r8, r2
 800592a:	4698      	movhi	r8, r3
 800592c:	2303      	movs	r3, #3
 800592e:	6123      	str	r3, [r4, #16]
 8005930:	f02b 0304 	bic.w	r3, fp, #4
 8005934:	6023      	str	r3, [r4, #0]
 8005936:	f04f 0900 	mov.w	r9, #0
 800593a:	9700      	str	r7, [sp, #0]
 800593c:	4633      	mov	r3, r6
 800593e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005940:	4621      	mov	r1, r4
 8005942:	4628      	mov	r0, r5
 8005944:	f000 f9d2 	bl	8005cec <_printf_common>
 8005948:	3001      	adds	r0, #1
 800594a:	f040 808d 	bne.w	8005a68 <_printf_float+0x1d0>
 800594e:	f04f 30ff 	mov.w	r0, #4294967295
 8005952:	b00d      	add	sp, #52	@ 0x34
 8005954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005958:	4642      	mov	r2, r8
 800595a:	464b      	mov	r3, r9
 800595c:	4640      	mov	r0, r8
 800595e:	4649      	mov	r1, r9
 8005960:	f7fb f8e4 	bl	8000b2c <__aeabi_dcmpun>
 8005964:	b140      	cbz	r0, 8005978 <_printf_float+0xe0>
 8005966:	464b      	mov	r3, r9
 8005968:	2b00      	cmp	r3, #0
 800596a:	bfbc      	itt	lt
 800596c:	232d      	movlt	r3, #45	@ 0x2d
 800596e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005972:	4a7e      	ldr	r2, [pc, #504]	@ (8005b6c <_printf_float+0x2d4>)
 8005974:	4b7e      	ldr	r3, [pc, #504]	@ (8005b70 <_printf_float+0x2d8>)
 8005976:	e7d4      	b.n	8005922 <_printf_float+0x8a>
 8005978:	6863      	ldr	r3, [r4, #4]
 800597a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800597e:	9206      	str	r2, [sp, #24]
 8005980:	1c5a      	adds	r2, r3, #1
 8005982:	d13b      	bne.n	80059fc <_printf_float+0x164>
 8005984:	2306      	movs	r3, #6
 8005986:	6063      	str	r3, [r4, #4]
 8005988:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800598c:	2300      	movs	r3, #0
 800598e:	6022      	str	r2, [r4, #0]
 8005990:	9303      	str	r3, [sp, #12]
 8005992:	ab0a      	add	r3, sp, #40	@ 0x28
 8005994:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005998:	ab09      	add	r3, sp, #36	@ 0x24
 800599a:	9300      	str	r3, [sp, #0]
 800599c:	6861      	ldr	r1, [r4, #4]
 800599e:	ec49 8b10 	vmov	d0, r8, r9
 80059a2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80059a6:	4628      	mov	r0, r5
 80059a8:	f7ff fed6 	bl	8005758 <__cvt>
 80059ac:	9b06      	ldr	r3, [sp, #24]
 80059ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80059b0:	2b47      	cmp	r3, #71	@ 0x47
 80059b2:	4680      	mov	r8, r0
 80059b4:	d129      	bne.n	8005a0a <_printf_float+0x172>
 80059b6:	1cc8      	adds	r0, r1, #3
 80059b8:	db02      	blt.n	80059c0 <_printf_float+0x128>
 80059ba:	6863      	ldr	r3, [r4, #4]
 80059bc:	4299      	cmp	r1, r3
 80059be:	dd41      	ble.n	8005a44 <_printf_float+0x1ac>
 80059c0:	f1aa 0a02 	sub.w	sl, sl, #2
 80059c4:	fa5f fa8a 	uxtb.w	sl, sl
 80059c8:	3901      	subs	r1, #1
 80059ca:	4652      	mov	r2, sl
 80059cc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80059d0:	9109      	str	r1, [sp, #36]	@ 0x24
 80059d2:	f7ff ff26 	bl	8005822 <__exponent>
 80059d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80059d8:	1813      	adds	r3, r2, r0
 80059da:	2a01      	cmp	r2, #1
 80059dc:	4681      	mov	r9, r0
 80059de:	6123      	str	r3, [r4, #16]
 80059e0:	dc02      	bgt.n	80059e8 <_printf_float+0x150>
 80059e2:	6822      	ldr	r2, [r4, #0]
 80059e4:	07d2      	lsls	r2, r2, #31
 80059e6:	d501      	bpl.n	80059ec <_printf_float+0x154>
 80059e8:	3301      	adds	r3, #1
 80059ea:	6123      	str	r3, [r4, #16]
 80059ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d0a2      	beq.n	800593a <_printf_float+0xa2>
 80059f4:	232d      	movs	r3, #45	@ 0x2d
 80059f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059fa:	e79e      	b.n	800593a <_printf_float+0xa2>
 80059fc:	9a06      	ldr	r2, [sp, #24]
 80059fe:	2a47      	cmp	r2, #71	@ 0x47
 8005a00:	d1c2      	bne.n	8005988 <_printf_float+0xf0>
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1c0      	bne.n	8005988 <_printf_float+0xf0>
 8005a06:	2301      	movs	r3, #1
 8005a08:	e7bd      	b.n	8005986 <_printf_float+0xee>
 8005a0a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005a0e:	d9db      	bls.n	80059c8 <_printf_float+0x130>
 8005a10:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005a14:	d118      	bne.n	8005a48 <_printf_float+0x1b0>
 8005a16:	2900      	cmp	r1, #0
 8005a18:	6863      	ldr	r3, [r4, #4]
 8005a1a:	dd0b      	ble.n	8005a34 <_printf_float+0x19c>
 8005a1c:	6121      	str	r1, [r4, #16]
 8005a1e:	b913      	cbnz	r3, 8005a26 <_printf_float+0x18e>
 8005a20:	6822      	ldr	r2, [r4, #0]
 8005a22:	07d0      	lsls	r0, r2, #31
 8005a24:	d502      	bpl.n	8005a2c <_printf_float+0x194>
 8005a26:	3301      	adds	r3, #1
 8005a28:	440b      	add	r3, r1
 8005a2a:	6123      	str	r3, [r4, #16]
 8005a2c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005a2e:	f04f 0900 	mov.w	r9, #0
 8005a32:	e7db      	b.n	80059ec <_printf_float+0x154>
 8005a34:	b913      	cbnz	r3, 8005a3c <_printf_float+0x1a4>
 8005a36:	6822      	ldr	r2, [r4, #0]
 8005a38:	07d2      	lsls	r2, r2, #31
 8005a3a:	d501      	bpl.n	8005a40 <_printf_float+0x1a8>
 8005a3c:	3302      	adds	r3, #2
 8005a3e:	e7f4      	b.n	8005a2a <_printf_float+0x192>
 8005a40:	2301      	movs	r3, #1
 8005a42:	e7f2      	b.n	8005a2a <_printf_float+0x192>
 8005a44:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005a48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a4a:	4299      	cmp	r1, r3
 8005a4c:	db05      	blt.n	8005a5a <_printf_float+0x1c2>
 8005a4e:	6823      	ldr	r3, [r4, #0]
 8005a50:	6121      	str	r1, [r4, #16]
 8005a52:	07d8      	lsls	r0, r3, #31
 8005a54:	d5ea      	bpl.n	8005a2c <_printf_float+0x194>
 8005a56:	1c4b      	adds	r3, r1, #1
 8005a58:	e7e7      	b.n	8005a2a <_printf_float+0x192>
 8005a5a:	2900      	cmp	r1, #0
 8005a5c:	bfd4      	ite	le
 8005a5e:	f1c1 0202 	rsble	r2, r1, #2
 8005a62:	2201      	movgt	r2, #1
 8005a64:	4413      	add	r3, r2
 8005a66:	e7e0      	b.n	8005a2a <_printf_float+0x192>
 8005a68:	6823      	ldr	r3, [r4, #0]
 8005a6a:	055a      	lsls	r2, r3, #21
 8005a6c:	d407      	bmi.n	8005a7e <_printf_float+0x1e6>
 8005a6e:	6923      	ldr	r3, [r4, #16]
 8005a70:	4642      	mov	r2, r8
 8005a72:	4631      	mov	r1, r6
 8005a74:	4628      	mov	r0, r5
 8005a76:	47b8      	blx	r7
 8005a78:	3001      	adds	r0, #1
 8005a7a:	d12b      	bne.n	8005ad4 <_printf_float+0x23c>
 8005a7c:	e767      	b.n	800594e <_printf_float+0xb6>
 8005a7e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005a82:	f240 80dd 	bls.w	8005c40 <_printf_float+0x3a8>
 8005a86:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	f7fb f81b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a92:	2800      	cmp	r0, #0
 8005a94:	d033      	beq.n	8005afe <_printf_float+0x266>
 8005a96:	4a37      	ldr	r2, [pc, #220]	@ (8005b74 <_printf_float+0x2dc>)
 8005a98:	2301      	movs	r3, #1
 8005a9a:	4631      	mov	r1, r6
 8005a9c:	4628      	mov	r0, r5
 8005a9e:	47b8      	blx	r7
 8005aa0:	3001      	adds	r0, #1
 8005aa2:	f43f af54 	beq.w	800594e <_printf_float+0xb6>
 8005aa6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005aaa:	4543      	cmp	r3, r8
 8005aac:	db02      	blt.n	8005ab4 <_printf_float+0x21c>
 8005aae:	6823      	ldr	r3, [r4, #0]
 8005ab0:	07d8      	lsls	r0, r3, #31
 8005ab2:	d50f      	bpl.n	8005ad4 <_printf_float+0x23c>
 8005ab4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ab8:	4631      	mov	r1, r6
 8005aba:	4628      	mov	r0, r5
 8005abc:	47b8      	blx	r7
 8005abe:	3001      	adds	r0, #1
 8005ac0:	f43f af45 	beq.w	800594e <_printf_float+0xb6>
 8005ac4:	f04f 0900 	mov.w	r9, #0
 8005ac8:	f108 38ff 	add.w	r8, r8, #4294967295
 8005acc:	f104 0a1a 	add.w	sl, r4, #26
 8005ad0:	45c8      	cmp	r8, r9
 8005ad2:	dc09      	bgt.n	8005ae8 <_printf_float+0x250>
 8005ad4:	6823      	ldr	r3, [r4, #0]
 8005ad6:	079b      	lsls	r3, r3, #30
 8005ad8:	f100 8103 	bmi.w	8005ce2 <_printf_float+0x44a>
 8005adc:	68e0      	ldr	r0, [r4, #12]
 8005ade:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ae0:	4298      	cmp	r0, r3
 8005ae2:	bfb8      	it	lt
 8005ae4:	4618      	movlt	r0, r3
 8005ae6:	e734      	b.n	8005952 <_printf_float+0xba>
 8005ae8:	2301      	movs	r3, #1
 8005aea:	4652      	mov	r2, sl
 8005aec:	4631      	mov	r1, r6
 8005aee:	4628      	mov	r0, r5
 8005af0:	47b8      	blx	r7
 8005af2:	3001      	adds	r0, #1
 8005af4:	f43f af2b 	beq.w	800594e <_printf_float+0xb6>
 8005af8:	f109 0901 	add.w	r9, r9, #1
 8005afc:	e7e8      	b.n	8005ad0 <_printf_float+0x238>
 8005afe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	dc39      	bgt.n	8005b78 <_printf_float+0x2e0>
 8005b04:	4a1b      	ldr	r2, [pc, #108]	@ (8005b74 <_printf_float+0x2dc>)
 8005b06:	2301      	movs	r3, #1
 8005b08:	4631      	mov	r1, r6
 8005b0a:	4628      	mov	r0, r5
 8005b0c:	47b8      	blx	r7
 8005b0e:	3001      	adds	r0, #1
 8005b10:	f43f af1d 	beq.w	800594e <_printf_float+0xb6>
 8005b14:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005b18:	ea59 0303 	orrs.w	r3, r9, r3
 8005b1c:	d102      	bne.n	8005b24 <_printf_float+0x28c>
 8005b1e:	6823      	ldr	r3, [r4, #0]
 8005b20:	07d9      	lsls	r1, r3, #31
 8005b22:	d5d7      	bpl.n	8005ad4 <_printf_float+0x23c>
 8005b24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b28:	4631      	mov	r1, r6
 8005b2a:	4628      	mov	r0, r5
 8005b2c:	47b8      	blx	r7
 8005b2e:	3001      	adds	r0, #1
 8005b30:	f43f af0d 	beq.w	800594e <_printf_float+0xb6>
 8005b34:	f04f 0a00 	mov.w	sl, #0
 8005b38:	f104 0b1a 	add.w	fp, r4, #26
 8005b3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b3e:	425b      	negs	r3, r3
 8005b40:	4553      	cmp	r3, sl
 8005b42:	dc01      	bgt.n	8005b48 <_printf_float+0x2b0>
 8005b44:	464b      	mov	r3, r9
 8005b46:	e793      	b.n	8005a70 <_printf_float+0x1d8>
 8005b48:	2301      	movs	r3, #1
 8005b4a:	465a      	mov	r2, fp
 8005b4c:	4631      	mov	r1, r6
 8005b4e:	4628      	mov	r0, r5
 8005b50:	47b8      	blx	r7
 8005b52:	3001      	adds	r0, #1
 8005b54:	f43f aefb 	beq.w	800594e <_printf_float+0xb6>
 8005b58:	f10a 0a01 	add.w	sl, sl, #1
 8005b5c:	e7ee      	b.n	8005b3c <_printf_float+0x2a4>
 8005b5e:	bf00      	nop
 8005b60:	7fefffff 	.word	0x7fefffff
 8005b64:	0800a108 	.word	0x0800a108
 8005b68:	0800a10c 	.word	0x0800a10c
 8005b6c:	0800a110 	.word	0x0800a110
 8005b70:	0800a114 	.word	0x0800a114
 8005b74:	0800a118 	.word	0x0800a118
 8005b78:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005b7a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005b7e:	4553      	cmp	r3, sl
 8005b80:	bfa8      	it	ge
 8005b82:	4653      	movge	r3, sl
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	4699      	mov	r9, r3
 8005b88:	dc36      	bgt.n	8005bf8 <_printf_float+0x360>
 8005b8a:	f04f 0b00 	mov.w	fp, #0
 8005b8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b92:	f104 021a 	add.w	r2, r4, #26
 8005b96:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005b98:	9306      	str	r3, [sp, #24]
 8005b9a:	eba3 0309 	sub.w	r3, r3, r9
 8005b9e:	455b      	cmp	r3, fp
 8005ba0:	dc31      	bgt.n	8005c06 <_printf_float+0x36e>
 8005ba2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ba4:	459a      	cmp	sl, r3
 8005ba6:	dc3a      	bgt.n	8005c1e <_printf_float+0x386>
 8005ba8:	6823      	ldr	r3, [r4, #0]
 8005baa:	07da      	lsls	r2, r3, #31
 8005bac:	d437      	bmi.n	8005c1e <_printf_float+0x386>
 8005bae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bb0:	ebaa 0903 	sub.w	r9, sl, r3
 8005bb4:	9b06      	ldr	r3, [sp, #24]
 8005bb6:	ebaa 0303 	sub.w	r3, sl, r3
 8005bba:	4599      	cmp	r9, r3
 8005bbc:	bfa8      	it	ge
 8005bbe:	4699      	movge	r9, r3
 8005bc0:	f1b9 0f00 	cmp.w	r9, #0
 8005bc4:	dc33      	bgt.n	8005c2e <_printf_float+0x396>
 8005bc6:	f04f 0800 	mov.w	r8, #0
 8005bca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bce:	f104 0b1a 	add.w	fp, r4, #26
 8005bd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bd4:	ebaa 0303 	sub.w	r3, sl, r3
 8005bd8:	eba3 0309 	sub.w	r3, r3, r9
 8005bdc:	4543      	cmp	r3, r8
 8005bde:	f77f af79 	ble.w	8005ad4 <_printf_float+0x23c>
 8005be2:	2301      	movs	r3, #1
 8005be4:	465a      	mov	r2, fp
 8005be6:	4631      	mov	r1, r6
 8005be8:	4628      	mov	r0, r5
 8005bea:	47b8      	blx	r7
 8005bec:	3001      	adds	r0, #1
 8005bee:	f43f aeae 	beq.w	800594e <_printf_float+0xb6>
 8005bf2:	f108 0801 	add.w	r8, r8, #1
 8005bf6:	e7ec      	b.n	8005bd2 <_printf_float+0x33a>
 8005bf8:	4642      	mov	r2, r8
 8005bfa:	4631      	mov	r1, r6
 8005bfc:	4628      	mov	r0, r5
 8005bfe:	47b8      	blx	r7
 8005c00:	3001      	adds	r0, #1
 8005c02:	d1c2      	bne.n	8005b8a <_printf_float+0x2f2>
 8005c04:	e6a3      	b.n	800594e <_printf_float+0xb6>
 8005c06:	2301      	movs	r3, #1
 8005c08:	4631      	mov	r1, r6
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	9206      	str	r2, [sp, #24]
 8005c0e:	47b8      	blx	r7
 8005c10:	3001      	adds	r0, #1
 8005c12:	f43f ae9c 	beq.w	800594e <_printf_float+0xb6>
 8005c16:	9a06      	ldr	r2, [sp, #24]
 8005c18:	f10b 0b01 	add.w	fp, fp, #1
 8005c1c:	e7bb      	b.n	8005b96 <_printf_float+0x2fe>
 8005c1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c22:	4631      	mov	r1, r6
 8005c24:	4628      	mov	r0, r5
 8005c26:	47b8      	blx	r7
 8005c28:	3001      	adds	r0, #1
 8005c2a:	d1c0      	bne.n	8005bae <_printf_float+0x316>
 8005c2c:	e68f      	b.n	800594e <_printf_float+0xb6>
 8005c2e:	9a06      	ldr	r2, [sp, #24]
 8005c30:	464b      	mov	r3, r9
 8005c32:	4442      	add	r2, r8
 8005c34:	4631      	mov	r1, r6
 8005c36:	4628      	mov	r0, r5
 8005c38:	47b8      	blx	r7
 8005c3a:	3001      	adds	r0, #1
 8005c3c:	d1c3      	bne.n	8005bc6 <_printf_float+0x32e>
 8005c3e:	e686      	b.n	800594e <_printf_float+0xb6>
 8005c40:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005c44:	f1ba 0f01 	cmp.w	sl, #1
 8005c48:	dc01      	bgt.n	8005c4e <_printf_float+0x3b6>
 8005c4a:	07db      	lsls	r3, r3, #31
 8005c4c:	d536      	bpl.n	8005cbc <_printf_float+0x424>
 8005c4e:	2301      	movs	r3, #1
 8005c50:	4642      	mov	r2, r8
 8005c52:	4631      	mov	r1, r6
 8005c54:	4628      	mov	r0, r5
 8005c56:	47b8      	blx	r7
 8005c58:	3001      	adds	r0, #1
 8005c5a:	f43f ae78 	beq.w	800594e <_printf_float+0xb6>
 8005c5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c62:	4631      	mov	r1, r6
 8005c64:	4628      	mov	r0, r5
 8005c66:	47b8      	blx	r7
 8005c68:	3001      	adds	r0, #1
 8005c6a:	f43f ae70 	beq.w	800594e <_printf_float+0xb6>
 8005c6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005c72:	2200      	movs	r2, #0
 8005c74:	2300      	movs	r3, #0
 8005c76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c7a:	f7fa ff25 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c7e:	b9c0      	cbnz	r0, 8005cb2 <_printf_float+0x41a>
 8005c80:	4653      	mov	r3, sl
 8005c82:	f108 0201 	add.w	r2, r8, #1
 8005c86:	4631      	mov	r1, r6
 8005c88:	4628      	mov	r0, r5
 8005c8a:	47b8      	blx	r7
 8005c8c:	3001      	adds	r0, #1
 8005c8e:	d10c      	bne.n	8005caa <_printf_float+0x412>
 8005c90:	e65d      	b.n	800594e <_printf_float+0xb6>
 8005c92:	2301      	movs	r3, #1
 8005c94:	465a      	mov	r2, fp
 8005c96:	4631      	mov	r1, r6
 8005c98:	4628      	mov	r0, r5
 8005c9a:	47b8      	blx	r7
 8005c9c:	3001      	adds	r0, #1
 8005c9e:	f43f ae56 	beq.w	800594e <_printf_float+0xb6>
 8005ca2:	f108 0801 	add.w	r8, r8, #1
 8005ca6:	45d0      	cmp	r8, sl
 8005ca8:	dbf3      	blt.n	8005c92 <_printf_float+0x3fa>
 8005caa:	464b      	mov	r3, r9
 8005cac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005cb0:	e6df      	b.n	8005a72 <_printf_float+0x1da>
 8005cb2:	f04f 0800 	mov.w	r8, #0
 8005cb6:	f104 0b1a 	add.w	fp, r4, #26
 8005cba:	e7f4      	b.n	8005ca6 <_printf_float+0x40e>
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	4642      	mov	r2, r8
 8005cc0:	e7e1      	b.n	8005c86 <_printf_float+0x3ee>
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	464a      	mov	r2, r9
 8005cc6:	4631      	mov	r1, r6
 8005cc8:	4628      	mov	r0, r5
 8005cca:	47b8      	blx	r7
 8005ccc:	3001      	adds	r0, #1
 8005cce:	f43f ae3e 	beq.w	800594e <_printf_float+0xb6>
 8005cd2:	f108 0801 	add.w	r8, r8, #1
 8005cd6:	68e3      	ldr	r3, [r4, #12]
 8005cd8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005cda:	1a5b      	subs	r3, r3, r1
 8005cdc:	4543      	cmp	r3, r8
 8005cde:	dcf0      	bgt.n	8005cc2 <_printf_float+0x42a>
 8005ce0:	e6fc      	b.n	8005adc <_printf_float+0x244>
 8005ce2:	f04f 0800 	mov.w	r8, #0
 8005ce6:	f104 0919 	add.w	r9, r4, #25
 8005cea:	e7f4      	b.n	8005cd6 <_printf_float+0x43e>

08005cec <_printf_common>:
 8005cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cf0:	4616      	mov	r6, r2
 8005cf2:	4698      	mov	r8, r3
 8005cf4:	688a      	ldr	r2, [r1, #8]
 8005cf6:	690b      	ldr	r3, [r1, #16]
 8005cf8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	bfb8      	it	lt
 8005d00:	4613      	movlt	r3, r2
 8005d02:	6033      	str	r3, [r6, #0]
 8005d04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005d08:	4607      	mov	r7, r0
 8005d0a:	460c      	mov	r4, r1
 8005d0c:	b10a      	cbz	r2, 8005d12 <_printf_common+0x26>
 8005d0e:	3301      	adds	r3, #1
 8005d10:	6033      	str	r3, [r6, #0]
 8005d12:	6823      	ldr	r3, [r4, #0]
 8005d14:	0699      	lsls	r1, r3, #26
 8005d16:	bf42      	ittt	mi
 8005d18:	6833      	ldrmi	r3, [r6, #0]
 8005d1a:	3302      	addmi	r3, #2
 8005d1c:	6033      	strmi	r3, [r6, #0]
 8005d1e:	6825      	ldr	r5, [r4, #0]
 8005d20:	f015 0506 	ands.w	r5, r5, #6
 8005d24:	d106      	bne.n	8005d34 <_printf_common+0x48>
 8005d26:	f104 0a19 	add.w	sl, r4, #25
 8005d2a:	68e3      	ldr	r3, [r4, #12]
 8005d2c:	6832      	ldr	r2, [r6, #0]
 8005d2e:	1a9b      	subs	r3, r3, r2
 8005d30:	42ab      	cmp	r3, r5
 8005d32:	dc26      	bgt.n	8005d82 <_printf_common+0x96>
 8005d34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005d38:	6822      	ldr	r2, [r4, #0]
 8005d3a:	3b00      	subs	r3, #0
 8005d3c:	bf18      	it	ne
 8005d3e:	2301      	movne	r3, #1
 8005d40:	0692      	lsls	r2, r2, #26
 8005d42:	d42b      	bmi.n	8005d9c <_printf_common+0xb0>
 8005d44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005d48:	4641      	mov	r1, r8
 8005d4a:	4638      	mov	r0, r7
 8005d4c:	47c8      	blx	r9
 8005d4e:	3001      	adds	r0, #1
 8005d50:	d01e      	beq.n	8005d90 <_printf_common+0xa4>
 8005d52:	6823      	ldr	r3, [r4, #0]
 8005d54:	6922      	ldr	r2, [r4, #16]
 8005d56:	f003 0306 	and.w	r3, r3, #6
 8005d5a:	2b04      	cmp	r3, #4
 8005d5c:	bf02      	ittt	eq
 8005d5e:	68e5      	ldreq	r5, [r4, #12]
 8005d60:	6833      	ldreq	r3, [r6, #0]
 8005d62:	1aed      	subeq	r5, r5, r3
 8005d64:	68a3      	ldr	r3, [r4, #8]
 8005d66:	bf0c      	ite	eq
 8005d68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d6c:	2500      	movne	r5, #0
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	bfc4      	itt	gt
 8005d72:	1a9b      	subgt	r3, r3, r2
 8005d74:	18ed      	addgt	r5, r5, r3
 8005d76:	2600      	movs	r6, #0
 8005d78:	341a      	adds	r4, #26
 8005d7a:	42b5      	cmp	r5, r6
 8005d7c:	d11a      	bne.n	8005db4 <_printf_common+0xc8>
 8005d7e:	2000      	movs	r0, #0
 8005d80:	e008      	b.n	8005d94 <_printf_common+0xa8>
 8005d82:	2301      	movs	r3, #1
 8005d84:	4652      	mov	r2, sl
 8005d86:	4641      	mov	r1, r8
 8005d88:	4638      	mov	r0, r7
 8005d8a:	47c8      	blx	r9
 8005d8c:	3001      	adds	r0, #1
 8005d8e:	d103      	bne.n	8005d98 <_printf_common+0xac>
 8005d90:	f04f 30ff 	mov.w	r0, #4294967295
 8005d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d98:	3501      	adds	r5, #1
 8005d9a:	e7c6      	b.n	8005d2a <_printf_common+0x3e>
 8005d9c:	18e1      	adds	r1, r4, r3
 8005d9e:	1c5a      	adds	r2, r3, #1
 8005da0:	2030      	movs	r0, #48	@ 0x30
 8005da2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005da6:	4422      	add	r2, r4
 8005da8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005dac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005db0:	3302      	adds	r3, #2
 8005db2:	e7c7      	b.n	8005d44 <_printf_common+0x58>
 8005db4:	2301      	movs	r3, #1
 8005db6:	4622      	mov	r2, r4
 8005db8:	4641      	mov	r1, r8
 8005dba:	4638      	mov	r0, r7
 8005dbc:	47c8      	blx	r9
 8005dbe:	3001      	adds	r0, #1
 8005dc0:	d0e6      	beq.n	8005d90 <_printf_common+0xa4>
 8005dc2:	3601      	adds	r6, #1
 8005dc4:	e7d9      	b.n	8005d7a <_printf_common+0x8e>
	...

08005dc8 <_printf_i>:
 8005dc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005dcc:	7e0f      	ldrb	r7, [r1, #24]
 8005dce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005dd0:	2f78      	cmp	r7, #120	@ 0x78
 8005dd2:	4691      	mov	r9, r2
 8005dd4:	4680      	mov	r8, r0
 8005dd6:	460c      	mov	r4, r1
 8005dd8:	469a      	mov	sl, r3
 8005dda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005dde:	d807      	bhi.n	8005df0 <_printf_i+0x28>
 8005de0:	2f62      	cmp	r7, #98	@ 0x62
 8005de2:	d80a      	bhi.n	8005dfa <_printf_i+0x32>
 8005de4:	2f00      	cmp	r7, #0
 8005de6:	f000 80d2 	beq.w	8005f8e <_printf_i+0x1c6>
 8005dea:	2f58      	cmp	r7, #88	@ 0x58
 8005dec:	f000 80b9 	beq.w	8005f62 <_printf_i+0x19a>
 8005df0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005df4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005df8:	e03a      	b.n	8005e70 <_printf_i+0xa8>
 8005dfa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005dfe:	2b15      	cmp	r3, #21
 8005e00:	d8f6      	bhi.n	8005df0 <_printf_i+0x28>
 8005e02:	a101      	add	r1, pc, #4	@ (adr r1, 8005e08 <_printf_i+0x40>)
 8005e04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e08:	08005e61 	.word	0x08005e61
 8005e0c:	08005e75 	.word	0x08005e75
 8005e10:	08005df1 	.word	0x08005df1
 8005e14:	08005df1 	.word	0x08005df1
 8005e18:	08005df1 	.word	0x08005df1
 8005e1c:	08005df1 	.word	0x08005df1
 8005e20:	08005e75 	.word	0x08005e75
 8005e24:	08005df1 	.word	0x08005df1
 8005e28:	08005df1 	.word	0x08005df1
 8005e2c:	08005df1 	.word	0x08005df1
 8005e30:	08005df1 	.word	0x08005df1
 8005e34:	08005f75 	.word	0x08005f75
 8005e38:	08005e9f 	.word	0x08005e9f
 8005e3c:	08005f2f 	.word	0x08005f2f
 8005e40:	08005df1 	.word	0x08005df1
 8005e44:	08005df1 	.word	0x08005df1
 8005e48:	08005f97 	.word	0x08005f97
 8005e4c:	08005df1 	.word	0x08005df1
 8005e50:	08005e9f 	.word	0x08005e9f
 8005e54:	08005df1 	.word	0x08005df1
 8005e58:	08005df1 	.word	0x08005df1
 8005e5c:	08005f37 	.word	0x08005f37
 8005e60:	6833      	ldr	r3, [r6, #0]
 8005e62:	1d1a      	adds	r2, r3, #4
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	6032      	str	r2, [r6, #0]
 8005e68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e70:	2301      	movs	r3, #1
 8005e72:	e09d      	b.n	8005fb0 <_printf_i+0x1e8>
 8005e74:	6833      	ldr	r3, [r6, #0]
 8005e76:	6820      	ldr	r0, [r4, #0]
 8005e78:	1d19      	adds	r1, r3, #4
 8005e7a:	6031      	str	r1, [r6, #0]
 8005e7c:	0606      	lsls	r6, r0, #24
 8005e7e:	d501      	bpl.n	8005e84 <_printf_i+0xbc>
 8005e80:	681d      	ldr	r5, [r3, #0]
 8005e82:	e003      	b.n	8005e8c <_printf_i+0xc4>
 8005e84:	0645      	lsls	r5, r0, #25
 8005e86:	d5fb      	bpl.n	8005e80 <_printf_i+0xb8>
 8005e88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e8c:	2d00      	cmp	r5, #0
 8005e8e:	da03      	bge.n	8005e98 <_printf_i+0xd0>
 8005e90:	232d      	movs	r3, #45	@ 0x2d
 8005e92:	426d      	negs	r5, r5
 8005e94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e98:	4859      	ldr	r0, [pc, #356]	@ (8006000 <_printf_i+0x238>)
 8005e9a:	230a      	movs	r3, #10
 8005e9c:	e011      	b.n	8005ec2 <_printf_i+0xfa>
 8005e9e:	6821      	ldr	r1, [r4, #0]
 8005ea0:	6833      	ldr	r3, [r6, #0]
 8005ea2:	0608      	lsls	r0, r1, #24
 8005ea4:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ea8:	d402      	bmi.n	8005eb0 <_printf_i+0xe8>
 8005eaa:	0649      	lsls	r1, r1, #25
 8005eac:	bf48      	it	mi
 8005eae:	b2ad      	uxthmi	r5, r5
 8005eb0:	2f6f      	cmp	r7, #111	@ 0x6f
 8005eb2:	4853      	ldr	r0, [pc, #332]	@ (8006000 <_printf_i+0x238>)
 8005eb4:	6033      	str	r3, [r6, #0]
 8005eb6:	bf14      	ite	ne
 8005eb8:	230a      	movne	r3, #10
 8005eba:	2308      	moveq	r3, #8
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005ec2:	6866      	ldr	r6, [r4, #4]
 8005ec4:	60a6      	str	r6, [r4, #8]
 8005ec6:	2e00      	cmp	r6, #0
 8005ec8:	bfa2      	ittt	ge
 8005eca:	6821      	ldrge	r1, [r4, #0]
 8005ecc:	f021 0104 	bicge.w	r1, r1, #4
 8005ed0:	6021      	strge	r1, [r4, #0]
 8005ed2:	b90d      	cbnz	r5, 8005ed8 <_printf_i+0x110>
 8005ed4:	2e00      	cmp	r6, #0
 8005ed6:	d04b      	beq.n	8005f70 <_printf_i+0x1a8>
 8005ed8:	4616      	mov	r6, r2
 8005eda:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ede:	fb03 5711 	mls	r7, r3, r1, r5
 8005ee2:	5dc7      	ldrb	r7, [r0, r7]
 8005ee4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ee8:	462f      	mov	r7, r5
 8005eea:	42bb      	cmp	r3, r7
 8005eec:	460d      	mov	r5, r1
 8005eee:	d9f4      	bls.n	8005eda <_printf_i+0x112>
 8005ef0:	2b08      	cmp	r3, #8
 8005ef2:	d10b      	bne.n	8005f0c <_printf_i+0x144>
 8005ef4:	6823      	ldr	r3, [r4, #0]
 8005ef6:	07df      	lsls	r7, r3, #31
 8005ef8:	d508      	bpl.n	8005f0c <_printf_i+0x144>
 8005efa:	6923      	ldr	r3, [r4, #16]
 8005efc:	6861      	ldr	r1, [r4, #4]
 8005efe:	4299      	cmp	r1, r3
 8005f00:	bfde      	ittt	le
 8005f02:	2330      	movle	r3, #48	@ 0x30
 8005f04:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f08:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f0c:	1b92      	subs	r2, r2, r6
 8005f0e:	6122      	str	r2, [r4, #16]
 8005f10:	f8cd a000 	str.w	sl, [sp]
 8005f14:	464b      	mov	r3, r9
 8005f16:	aa03      	add	r2, sp, #12
 8005f18:	4621      	mov	r1, r4
 8005f1a:	4640      	mov	r0, r8
 8005f1c:	f7ff fee6 	bl	8005cec <_printf_common>
 8005f20:	3001      	adds	r0, #1
 8005f22:	d14a      	bne.n	8005fba <_printf_i+0x1f2>
 8005f24:	f04f 30ff 	mov.w	r0, #4294967295
 8005f28:	b004      	add	sp, #16
 8005f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f2e:	6823      	ldr	r3, [r4, #0]
 8005f30:	f043 0320 	orr.w	r3, r3, #32
 8005f34:	6023      	str	r3, [r4, #0]
 8005f36:	4833      	ldr	r0, [pc, #204]	@ (8006004 <_printf_i+0x23c>)
 8005f38:	2778      	movs	r7, #120	@ 0x78
 8005f3a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005f3e:	6823      	ldr	r3, [r4, #0]
 8005f40:	6831      	ldr	r1, [r6, #0]
 8005f42:	061f      	lsls	r7, r3, #24
 8005f44:	f851 5b04 	ldr.w	r5, [r1], #4
 8005f48:	d402      	bmi.n	8005f50 <_printf_i+0x188>
 8005f4a:	065f      	lsls	r7, r3, #25
 8005f4c:	bf48      	it	mi
 8005f4e:	b2ad      	uxthmi	r5, r5
 8005f50:	6031      	str	r1, [r6, #0]
 8005f52:	07d9      	lsls	r1, r3, #31
 8005f54:	bf44      	itt	mi
 8005f56:	f043 0320 	orrmi.w	r3, r3, #32
 8005f5a:	6023      	strmi	r3, [r4, #0]
 8005f5c:	b11d      	cbz	r5, 8005f66 <_printf_i+0x19e>
 8005f5e:	2310      	movs	r3, #16
 8005f60:	e7ac      	b.n	8005ebc <_printf_i+0xf4>
 8005f62:	4827      	ldr	r0, [pc, #156]	@ (8006000 <_printf_i+0x238>)
 8005f64:	e7e9      	b.n	8005f3a <_printf_i+0x172>
 8005f66:	6823      	ldr	r3, [r4, #0]
 8005f68:	f023 0320 	bic.w	r3, r3, #32
 8005f6c:	6023      	str	r3, [r4, #0]
 8005f6e:	e7f6      	b.n	8005f5e <_printf_i+0x196>
 8005f70:	4616      	mov	r6, r2
 8005f72:	e7bd      	b.n	8005ef0 <_printf_i+0x128>
 8005f74:	6833      	ldr	r3, [r6, #0]
 8005f76:	6825      	ldr	r5, [r4, #0]
 8005f78:	6961      	ldr	r1, [r4, #20]
 8005f7a:	1d18      	adds	r0, r3, #4
 8005f7c:	6030      	str	r0, [r6, #0]
 8005f7e:	062e      	lsls	r6, r5, #24
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	d501      	bpl.n	8005f88 <_printf_i+0x1c0>
 8005f84:	6019      	str	r1, [r3, #0]
 8005f86:	e002      	b.n	8005f8e <_printf_i+0x1c6>
 8005f88:	0668      	lsls	r0, r5, #25
 8005f8a:	d5fb      	bpl.n	8005f84 <_printf_i+0x1bc>
 8005f8c:	8019      	strh	r1, [r3, #0]
 8005f8e:	2300      	movs	r3, #0
 8005f90:	6123      	str	r3, [r4, #16]
 8005f92:	4616      	mov	r6, r2
 8005f94:	e7bc      	b.n	8005f10 <_printf_i+0x148>
 8005f96:	6833      	ldr	r3, [r6, #0]
 8005f98:	1d1a      	adds	r2, r3, #4
 8005f9a:	6032      	str	r2, [r6, #0]
 8005f9c:	681e      	ldr	r6, [r3, #0]
 8005f9e:	6862      	ldr	r2, [r4, #4]
 8005fa0:	2100      	movs	r1, #0
 8005fa2:	4630      	mov	r0, r6
 8005fa4:	f7fa f914 	bl	80001d0 <memchr>
 8005fa8:	b108      	cbz	r0, 8005fae <_printf_i+0x1e6>
 8005faa:	1b80      	subs	r0, r0, r6
 8005fac:	6060      	str	r0, [r4, #4]
 8005fae:	6863      	ldr	r3, [r4, #4]
 8005fb0:	6123      	str	r3, [r4, #16]
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fb8:	e7aa      	b.n	8005f10 <_printf_i+0x148>
 8005fba:	6923      	ldr	r3, [r4, #16]
 8005fbc:	4632      	mov	r2, r6
 8005fbe:	4649      	mov	r1, r9
 8005fc0:	4640      	mov	r0, r8
 8005fc2:	47d0      	blx	sl
 8005fc4:	3001      	adds	r0, #1
 8005fc6:	d0ad      	beq.n	8005f24 <_printf_i+0x15c>
 8005fc8:	6823      	ldr	r3, [r4, #0]
 8005fca:	079b      	lsls	r3, r3, #30
 8005fcc:	d413      	bmi.n	8005ff6 <_printf_i+0x22e>
 8005fce:	68e0      	ldr	r0, [r4, #12]
 8005fd0:	9b03      	ldr	r3, [sp, #12]
 8005fd2:	4298      	cmp	r0, r3
 8005fd4:	bfb8      	it	lt
 8005fd6:	4618      	movlt	r0, r3
 8005fd8:	e7a6      	b.n	8005f28 <_printf_i+0x160>
 8005fda:	2301      	movs	r3, #1
 8005fdc:	4632      	mov	r2, r6
 8005fde:	4649      	mov	r1, r9
 8005fe0:	4640      	mov	r0, r8
 8005fe2:	47d0      	blx	sl
 8005fe4:	3001      	adds	r0, #1
 8005fe6:	d09d      	beq.n	8005f24 <_printf_i+0x15c>
 8005fe8:	3501      	adds	r5, #1
 8005fea:	68e3      	ldr	r3, [r4, #12]
 8005fec:	9903      	ldr	r1, [sp, #12]
 8005fee:	1a5b      	subs	r3, r3, r1
 8005ff0:	42ab      	cmp	r3, r5
 8005ff2:	dcf2      	bgt.n	8005fda <_printf_i+0x212>
 8005ff4:	e7eb      	b.n	8005fce <_printf_i+0x206>
 8005ff6:	2500      	movs	r5, #0
 8005ff8:	f104 0619 	add.w	r6, r4, #25
 8005ffc:	e7f5      	b.n	8005fea <_printf_i+0x222>
 8005ffe:	bf00      	nop
 8006000:	0800a11a 	.word	0x0800a11a
 8006004:	0800a12b 	.word	0x0800a12b

08006008 <_scanf_float>:
 8006008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800600c:	b087      	sub	sp, #28
 800600e:	4617      	mov	r7, r2
 8006010:	9303      	str	r3, [sp, #12]
 8006012:	688b      	ldr	r3, [r1, #8]
 8006014:	1e5a      	subs	r2, r3, #1
 8006016:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800601a:	bf81      	itttt	hi
 800601c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006020:	eb03 0b05 	addhi.w	fp, r3, r5
 8006024:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006028:	608b      	strhi	r3, [r1, #8]
 800602a:	680b      	ldr	r3, [r1, #0]
 800602c:	460a      	mov	r2, r1
 800602e:	f04f 0500 	mov.w	r5, #0
 8006032:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006036:	f842 3b1c 	str.w	r3, [r2], #28
 800603a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800603e:	4680      	mov	r8, r0
 8006040:	460c      	mov	r4, r1
 8006042:	bf98      	it	ls
 8006044:	f04f 0b00 	movls.w	fp, #0
 8006048:	9201      	str	r2, [sp, #4]
 800604a:	4616      	mov	r6, r2
 800604c:	46aa      	mov	sl, r5
 800604e:	46a9      	mov	r9, r5
 8006050:	9502      	str	r5, [sp, #8]
 8006052:	68a2      	ldr	r2, [r4, #8]
 8006054:	b152      	cbz	r2, 800606c <_scanf_float+0x64>
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	2b4e      	cmp	r3, #78	@ 0x4e
 800605c:	d864      	bhi.n	8006128 <_scanf_float+0x120>
 800605e:	2b40      	cmp	r3, #64	@ 0x40
 8006060:	d83c      	bhi.n	80060dc <_scanf_float+0xd4>
 8006062:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006066:	b2c8      	uxtb	r0, r1
 8006068:	280e      	cmp	r0, #14
 800606a:	d93a      	bls.n	80060e2 <_scanf_float+0xda>
 800606c:	f1b9 0f00 	cmp.w	r9, #0
 8006070:	d003      	beq.n	800607a <_scanf_float+0x72>
 8006072:	6823      	ldr	r3, [r4, #0]
 8006074:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006078:	6023      	str	r3, [r4, #0]
 800607a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800607e:	f1ba 0f01 	cmp.w	sl, #1
 8006082:	f200 8117 	bhi.w	80062b4 <_scanf_float+0x2ac>
 8006086:	9b01      	ldr	r3, [sp, #4]
 8006088:	429e      	cmp	r6, r3
 800608a:	f200 8108 	bhi.w	800629e <_scanf_float+0x296>
 800608e:	2001      	movs	r0, #1
 8006090:	b007      	add	sp, #28
 8006092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006096:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800609a:	2a0d      	cmp	r2, #13
 800609c:	d8e6      	bhi.n	800606c <_scanf_float+0x64>
 800609e:	a101      	add	r1, pc, #4	@ (adr r1, 80060a4 <_scanf_float+0x9c>)
 80060a0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80060a4:	080061eb 	.word	0x080061eb
 80060a8:	0800606d 	.word	0x0800606d
 80060ac:	0800606d 	.word	0x0800606d
 80060b0:	0800606d 	.word	0x0800606d
 80060b4:	0800624b 	.word	0x0800624b
 80060b8:	08006223 	.word	0x08006223
 80060bc:	0800606d 	.word	0x0800606d
 80060c0:	0800606d 	.word	0x0800606d
 80060c4:	080061f9 	.word	0x080061f9
 80060c8:	0800606d 	.word	0x0800606d
 80060cc:	0800606d 	.word	0x0800606d
 80060d0:	0800606d 	.word	0x0800606d
 80060d4:	0800606d 	.word	0x0800606d
 80060d8:	080061b1 	.word	0x080061b1
 80060dc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80060e0:	e7db      	b.n	800609a <_scanf_float+0x92>
 80060e2:	290e      	cmp	r1, #14
 80060e4:	d8c2      	bhi.n	800606c <_scanf_float+0x64>
 80060e6:	a001      	add	r0, pc, #4	@ (adr r0, 80060ec <_scanf_float+0xe4>)
 80060e8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80060ec:	080061a1 	.word	0x080061a1
 80060f0:	0800606d 	.word	0x0800606d
 80060f4:	080061a1 	.word	0x080061a1
 80060f8:	08006237 	.word	0x08006237
 80060fc:	0800606d 	.word	0x0800606d
 8006100:	08006149 	.word	0x08006149
 8006104:	08006187 	.word	0x08006187
 8006108:	08006187 	.word	0x08006187
 800610c:	08006187 	.word	0x08006187
 8006110:	08006187 	.word	0x08006187
 8006114:	08006187 	.word	0x08006187
 8006118:	08006187 	.word	0x08006187
 800611c:	08006187 	.word	0x08006187
 8006120:	08006187 	.word	0x08006187
 8006124:	08006187 	.word	0x08006187
 8006128:	2b6e      	cmp	r3, #110	@ 0x6e
 800612a:	d809      	bhi.n	8006140 <_scanf_float+0x138>
 800612c:	2b60      	cmp	r3, #96	@ 0x60
 800612e:	d8b2      	bhi.n	8006096 <_scanf_float+0x8e>
 8006130:	2b54      	cmp	r3, #84	@ 0x54
 8006132:	d07b      	beq.n	800622c <_scanf_float+0x224>
 8006134:	2b59      	cmp	r3, #89	@ 0x59
 8006136:	d199      	bne.n	800606c <_scanf_float+0x64>
 8006138:	2d07      	cmp	r5, #7
 800613a:	d197      	bne.n	800606c <_scanf_float+0x64>
 800613c:	2508      	movs	r5, #8
 800613e:	e02c      	b.n	800619a <_scanf_float+0x192>
 8006140:	2b74      	cmp	r3, #116	@ 0x74
 8006142:	d073      	beq.n	800622c <_scanf_float+0x224>
 8006144:	2b79      	cmp	r3, #121	@ 0x79
 8006146:	e7f6      	b.n	8006136 <_scanf_float+0x12e>
 8006148:	6821      	ldr	r1, [r4, #0]
 800614a:	05c8      	lsls	r0, r1, #23
 800614c:	d51b      	bpl.n	8006186 <_scanf_float+0x17e>
 800614e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006152:	6021      	str	r1, [r4, #0]
 8006154:	f109 0901 	add.w	r9, r9, #1
 8006158:	f1bb 0f00 	cmp.w	fp, #0
 800615c:	d003      	beq.n	8006166 <_scanf_float+0x15e>
 800615e:	3201      	adds	r2, #1
 8006160:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006164:	60a2      	str	r2, [r4, #8]
 8006166:	68a3      	ldr	r3, [r4, #8]
 8006168:	3b01      	subs	r3, #1
 800616a:	60a3      	str	r3, [r4, #8]
 800616c:	6923      	ldr	r3, [r4, #16]
 800616e:	3301      	adds	r3, #1
 8006170:	6123      	str	r3, [r4, #16]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	3b01      	subs	r3, #1
 8006176:	2b00      	cmp	r3, #0
 8006178:	607b      	str	r3, [r7, #4]
 800617a:	f340 8087 	ble.w	800628c <_scanf_float+0x284>
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	3301      	adds	r3, #1
 8006182:	603b      	str	r3, [r7, #0]
 8006184:	e765      	b.n	8006052 <_scanf_float+0x4a>
 8006186:	eb1a 0105 	adds.w	r1, sl, r5
 800618a:	f47f af6f 	bne.w	800606c <_scanf_float+0x64>
 800618e:	6822      	ldr	r2, [r4, #0]
 8006190:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006194:	6022      	str	r2, [r4, #0]
 8006196:	460d      	mov	r5, r1
 8006198:	468a      	mov	sl, r1
 800619a:	f806 3b01 	strb.w	r3, [r6], #1
 800619e:	e7e2      	b.n	8006166 <_scanf_float+0x15e>
 80061a0:	6822      	ldr	r2, [r4, #0]
 80061a2:	0610      	lsls	r0, r2, #24
 80061a4:	f57f af62 	bpl.w	800606c <_scanf_float+0x64>
 80061a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80061ac:	6022      	str	r2, [r4, #0]
 80061ae:	e7f4      	b.n	800619a <_scanf_float+0x192>
 80061b0:	f1ba 0f00 	cmp.w	sl, #0
 80061b4:	d10e      	bne.n	80061d4 <_scanf_float+0x1cc>
 80061b6:	f1b9 0f00 	cmp.w	r9, #0
 80061ba:	d10e      	bne.n	80061da <_scanf_float+0x1d2>
 80061bc:	6822      	ldr	r2, [r4, #0]
 80061be:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80061c2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80061c6:	d108      	bne.n	80061da <_scanf_float+0x1d2>
 80061c8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80061cc:	6022      	str	r2, [r4, #0]
 80061ce:	f04f 0a01 	mov.w	sl, #1
 80061d2:	e7e2      	b.n	800619a <_scanf_float+0x192>
 80061d4:	f1ba 0f02 	cmp.w	sl, #2
 80061d8:	d055      	beq.n	8006286 <_scanf_float+0x27e>
 80061da:	2d01      	cmp	r5, #1
 80061dc:	d002      	beq.n	80061e4 <_scanf_float+0x1dc>
 80061de:	2d04      	cmp	r5, #4
 80061e0:	f47f af44 	bne.w	800606c <_scanf_float+0x64>
 80061e4:	3501      	adds	r5, #1
 80061e6:	b2ed      	uxtb	r5, r5
 80061e8:	e7d7      	b.n	800619a <_scanf_float+0x192>
 80061ea:	f1ba 0f01 	cmp.w	sl, #1
 80061ee:	f47f af3d 	bne.w	800606c <_scanf_float+0x64>
 80061f2:	f04f 0a02 	mov.w	sl, #2
 80061f6:	e7d0      	b.n	800619a <_scanf_float+0x192>
 80061f8:	b97d      	cbnz	r5, 800621a <_scanf_float+0x212>
 80061fa:	f1b9 0f00 	cmp.w	r9, #0
 80061fe:	f47f af38 	bne.w	8006072 <_scanf_float+0x6a>
 8006202:	6822      	ldr	r2, [r4, #0]
 8006204:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006208:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800620c:	f040 8108 	bne.w	8006420 <_scanf_float+0x418>
 8006210:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006214:	6022      	str	r2, [r4, #0]
 8006216:	2501      	movs	r5, #1
 8006218:	e7bf      	b.n	800619a <_scanf_float+0x192>
 800621a:	2d03      	cmp	r5, #3
 800621c:	d0e2      	beq.n	80061e4 <_scanf_float+0x1dc>
 800621e:	2d05      	cmp	r5, #5
 8006220:	e7de      	b.n	80061e0 <_scanf_float+0x1d8>
 8006222:	2d02      	cmp	r5, #2
 8006224:	f47f af22 	bne.w	800606c <_scanf_float+0x64>
 8006228:	2503      	movs	r5, #3
 800622a:	e7b6      	b.n	800619a <_scanf_float+0x192>
 800622c:	2d06      	cmp	r5, #6
 800622e:	f47f af1d 	bne.w	800606c <_scanf_float+0x64>
 8006232:	2507      	movs	r5, #7
 8006234:	e7b1      	b.n	800619a <_scanf_float+0x192>
 8006236:	6822      	ldr	r2, [r4, #0]
 8006238:	0591      	lsls	r1, r2, #22
 800623a:	f57f af17 	bpl.w	800606c <_scanf_float+0x64>
 800623e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006242:	6022      	str	r2, [r4, #0]
 8006244:	f8cd 9008 	str.w	r9, [sp, #8]
 8006248:	e7a7      	b.n	800619a <_scanf_float+0x192>
 800624a:	6822      	ldr	r2, [r4, #0]
 800624c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006250:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006254:	d006      	beq.n	8006264 <_scanf_float+0x25c>
 8006256:	0550      	lsls	r0, r2, #21
 8006258:	f57f af08 	bpl.w	800606c <_scanf_float+0x64>
 800625c:	f1b9 0f00 	cmp.w	r9, #0
 8006260:	f000 80de 	beq.w	8006420 <_scanf_float+0x418>
 8006264:	0591      	lsls	r1, r2, #22
 8006266:	bf58      	it	pl
 8006268:	9902      	ldrpl	r1, [sp, #8]
 800626a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800626e:	bf58      	it	pl
 8006270:	eba9 0101 	subpl.w	r1, r9, r1
 8006274:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006278:	bf58      	it	pl
 800627a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800627e:	6022      	str	r2, [r4, #0]
 8006280:	f04f 0900 	mov.w	r9, #0
 8006284:	e789      	b.n	800619a <_scanf_float+0x192>
 8006286:	f04f 0a03 	mov.w	sl, #3
 800628a:	e786      	b.n	800619a <_scanf_float+0x192>
 800628c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006290:	4639      	mov	r1, r7
 8006292:	4640      	mov	r0, r8
 8006294:	4798      	blx	r3
 8006296:	2800      	cmp	r0, #0
 8006298:	f43f aedb 	beq.w	8006052 <_scanf_float+0x4a>
 800629c:	e6e6      	b.n	800606c <_scanf_float+0x64>
 800629e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80062a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80062a6:	463a      	mov	r2, r7
 80062a8:	4640      	mov	r0, r8
 80062aa:	4798      	blx	r3
 80062ac:	6923      	ldr	r3, [r4, #16]
 80062ae:	3b01      	subs	r3, #1
 80062b0:	6123      	str	r3, [r4, #16]
 80062b2:	e6e8      	b.n	8006086 <_scanf_float+0x7e>
 80062b4:	1e6b      	subs	r3, r5, #1
 80062b6:	2b06      	cmp	r3, #6
 80062b8:	d824      	bhi.n	8006304 <_scanf_float+0x2fc>
 80062ba:	2d02      	cmp	r5, #2
 80062bc:	d836      	bhi.n	800632c <_scanf_float+0x324>
 80062be:	9b01      	ldr	r3, [sp, #4]
 80062c0:	429e      	cmp	r6, r3
 80062c2:	f67f aee4 	bls.w	800608e <_scanf_float+0x86>
 80062c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80062ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80062ce:	463a      	mov	r2, r7
 80062d0:	4640      	mov	r0, r8
 80062d2:	4798      	blx	r3
 80062d4:	6923      	ldr	r3, [r4, #16]
 80062d6:	3b01      	subs	r3, #1
 80062d8:	6123      	str	r3, [r4, #16]
 80062da:	e7f0      	b.n	80062be <_scanf_float+0x2b6>
 80062dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80062e0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80062e4:	463a      	mov	r2, r7
 80062e6:	4640      	mov	r0, r8
 80062e8:	4798      	blx	r3
 80062ea:	6923      	ldr	r3, [r4, #16]
 80062ec:	3b01      	subs	r3, #1
 80062ee:	6123      	str	r3, [r4, #16]
 80062f0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80062f4:	fa5f fa8a 	uxtb.w	sl, sl
 80062f8:	f1ba 0f02 	cmp.w	sl, #2
 80062fc:	d1ee      	bne.n	80062dc <_scanf_float+0x2d4>
 80062fe:	3d03      	subs	r5, #3
 8006300:	b2ed      	uxtb	r5, r5
 8006302:	1b76      	subs	r6, r6, r5
 8006304:	6823      	ldr	r3, [r4, #0]
 8006306:	05da      	lsls	r2, r3, #23
 8006308:	d530      	bpl.n	800636c <_scanf_float+0x364>
 800630a:	055b      	lsls	r3, r3, #21
 800630c:	d511      	bpl.n	8006332 <_scanf_float+0x32a>
 800630e:	9b01      	ldr	r3, [sp, #4]
 8006310:	429e      	cmp	r6, r3
 8006312:	f67f aebc 	bls.w	800608e <_scanf_float+0x86>
 8006316:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800631a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800631e:	463a      	mov	r2, r7
 8006320:	4640      	mov	r0, r8
 8006322:	4798      	blx	r3
 8006324:	6923      	ldr	r3, [r4, #16]
 8006326:	3b01      	subs	r3, #1
 8006328:	6123      	str	r3, [r4, #16]
 800632a:	e7f0      	b.n	800630e <_scanf_float+0x306>
 800632c:	46aa      	mov	sl, r5
 800632e:	46b3      	mov	fp, r6
 8006330:	e7de      	b.n	80062f0 <_scanf_float+0x2e8>
 8006332:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006336:	6923      	ldr	r3, [r4, #16]
 8006338:	2965      	cmp	r1, #101	@ 0x65
 800633a:	f103 33ff 	add.w	r3, r3, #4294967295
 800633e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006342:	6123      	str	r3, [r4, #16]
 8006344:	d00c      	beq.n	8006360 <_scanf_float+0x358>
 8006346:	2945      	cmp	r1, #69	@ 0x45
 8006348:	d00a      	beq.n	8006360 <_scanf_float+0x358>
 800634a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800634e:	463a      	mov	r2, r7
 8006350:	4640      	mov	r0, r8
 8006352:	4798      	blx	r3
 8006354:	6923      	ldr	r3, [r4, #16]
 8006356:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800635a:	3b01      	subs	r3, #1
 800635c:	1eb5      	subs	r5, r6, #2
 800635e:	6123      	str	r3, [r4, #16]
 8006360:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006364:	463a      	mov	r2, r7
 8006366:	4640      	mov	r0, r8
 8006368:	4798      	blx	r3
 800636a:	462e      	mov	r6, r5
 800636c:	6822      	ldr	r2, [r4, #0]
 800636e:	f012 0210 	ands.w	r2, r2, #16
 8006372:	d001      	beq.n	8006378 <_scanf_float+0x370>
 8006374:	2000      	movs	r0, #0
 8006376:	e68b      	b.n	8006090 <_scanf_float+0x88>
 8006378:	7032      	strb	r2, [r6, #0]
 800637a:	6823      	ldr	r3, [r4, #0]
 800637c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006380:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006384:	d11c      	bne.n	80063c0 <_scanf_float+0x3b8>
 8006386:	9b02      	ldr	r3, [sp, #8]
 8006388:	454b      	cmp	r3, r9
 800638a:	eba3 0209 	sub.w	r2, r3, r9
 800638e:	d123      	bne.n	80063d8 <_scanf_float+0x3d0>
 8006390:	9901      	ldr	r1, [sp, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	4640      	mov	r0, r8
 8006396:	f002 fcfb 	bl	8008d90 <_strtod_r>
 800639a:	9b03      	ldr	r3, [sp, #12]
 800639c:	6821      	ldr	r1, [r4, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f011 0f02 	tst.w	r1, #2
 80063a4:	ec57 6b10 	vmov	r6, r7, d0
 80063a8:	f103 0204 	add.w	r2, r3, #4
 80063ac:	d01f      	beq.n	80063ee <_scanf_float+0x3e6>
 80063ae:	9903      	ldr	r1, [sp, #12]
 80063b0:	600a      	str	r2, [r1, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	e9c3 6700 	strd	r6, r7, [r3]
 80063b8:	68e3      	ldr	r3, [r4, #12]
 80063ba:	3301      	adds	r3, #1
 80063bc:	60e3      	str	r3, [r4, #12]
 80063be:	e7d9      	b.n	8006374 <_scanf_float+0x36c>
 80063c0:	9b04      	ldr	r3, [sp, #16]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d0e4      	beq.n	8006390 <_scanf_float+0x388>
 80063c6:	9905      	ldr	r1, [sp, #20]
 80063c8:	230a      	movs	r3, #10
 80063ca:	3101      	adds	r1, #1
 80063cc:	4640      	mov	r0, r8
 80063ce:	f002 fd5f 	bl	8008e90 <_strtol_r>
 80063d2:	9b04      	ldr	r3, [sp, #16]
 80063d4:	9e05      	ldr	r6, [sp, #20]
 80063d6:	1ac2      	subs	r2, r0, r3
 80063d8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80063dc:	429e      	cmp	r6, r3
 80063de:	bf28      	it	cs
 80063e0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80063e4:	4910      	ldr	r1, [pc, #64]	@ (8006428 <_scanf_float+0x420>)
 80063e6:	4630      	mov	r0, r6
 80063e8:	f000 f954 	bl	8006694 <siprintf>
 80063ec:	e7d0      	b.n	8006390 <_scanf_float+0x388>
 80063ee:	f011 0f04 	tst.w	r1, #4
 80063f2:	9903      	ldr	r1, [sp, #12]
 80063f4:	600a      	str	r2, [r1, #0]
 80063f6:	d1dc      	bne.n	80063b2 <_scanf_float+0x3aa>
 80063f8:	681d      	ldr	r5, [r3, #0]
 80063fa:	4632      	mov	r2, r6
 80063fc:	463b      	mov	r3, r7
 80063fe:	4630      	mov	r0, r6
 8006400:	4639      	mov	r1, r7
 8006402:	f7fa fb93 	bl	8000b2c <__aeabi_dcmpun>
 8006406:	b128      	cbz	r0, 8006414 <_scanf_float+0x40c>
 8006408:	4808      	ldr	r0, [pc, #32]	@ (800642c <_scanf_float+0x424>)
 800640a:	f000 fabb 	bl	8006984 <nanf>
 800640e:	ed85 0a00 	vstr	s0, [r5]
 8006412:	e7d1      	b.n	80063b8 <_scanf_float+0x3b0>
 8006414:	4630      	mov	r0, r6
 8006416:	4639      	mov	r1, r7
 8006418:	f7fa fbe6 	bl	8000be8 <__aeabi_d2f>
 800641c:	6028      	str	r0, [r5, #0]
 800641e:	e7cb      	b.n	80063b8 <_scanf_float+0x3b0>
 8006420:	f04f 0900 	mov.w	r9, #0
 8006424:	e629      	b.n	800607a <_scanf_float+0x72>
 8006426:	bf00      	nop
 8006428:	0800a13c 	.word	0x0800a13c
 800642c:	0800a4d5 	.word	0x0800a4d5

08006430 <std>:
 8006430:	2300      	movs	r3, #0
 8006432:	b510      	push	{r4, lr}
 8006434:	4604      	mov	r4, r0
 8006436:	e9c0 3300 	strd	r3, r3, [r0]
 800643a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800643e:	6083      	str	r3, [r0, #8]
 8006440:	8181      	strh	r1, [r0, #12]
 8006442:	6643      	str	r3, [r0, #100]	@ 0x64
 8006444:	81c2      	strh	r2, [r0, #14]
 8006446:	6183      	str	r3, [r0, #24]
 8006448:	4619      	mov	r1, r3
 800644a:	2208      	movs	r2, #8
 800644c:	305c      	adds	r0, #92	@ 0x5c
 800644e:	f000 fa19 	bl	8006884 <memset>
 8006452:	4b0d      	ldr	r3, [pc, #52]	@ (8006488 <std+0x58>)
 8006454:	6263      	str	r3, [r4, #36]	@ 0x24
 8006456:	4b0d      	ldr	r3, [pc, #52]	@ (800648c <std+0x5c>)
 8006458:	62a3      	str	r3, [r4, #40]	@ 0x28
 800645a:	4b0d      	ldr	r3, [pc, #52]	@ (8006490 <std+0x60>)
 800645c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800645e:	4b0d      	ldr	r3, [pc, #52]	@ (8006494 <std+0x64>)
 8006460:	6323      	str	r3, [r4, #48]	@ 0x30
 8006462:	4b0d      	ldr	r3, [pc, #52]	@ (8006498 <std+0x68>)
 8006464:	6224      	str	r4, [r4, #32]
 8006466:	429c      	cmp	r4, r3
 8006468:	d006      	beq.n	8006478 <std+0x48>
 800646a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800646e:	4294      	cmp	r4, r2
 8006470:	d002      	beq.n	8006478 <std+0x48>
 8006472:	33d0      	adds	r3, #208	@ 0xd0
 8006474:	429c      	cmp	r4, r3
 8006476:	d105      	bne.n	8006484 <std+0x54>
 8006478:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800647c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006480:	f000 ba7c 	b.w	800697c <__retarget_lock_init_recursive>
 8006484:	bd10      	pop	{r4, pc}
 8006486:	bf00      	nop
 8006488:	080066d5 	.word	0x080066d5
 800648c:	080066f7 	.word	0x080066f7
 8006490:	0800672f 	.word	0x0800672f
 8006494:	08006753 	.word	0x08006753
 8006498:	20001488 	.word	0x20001488

0800649c <stdio_exit_handler>:
 800649c:	4a02      	ldr	r2, [pc, #8]	@ (80064a8 <stdio_exit_handler+0xc>)
 800649e:	4903      	ldr	r1, [pc, #12]	@ (80064ac <stdio_exit_handler+0x10>)
 80064a0:	4803      	ldr	r0, [pc, #12]	@ (80064b0 <stdio_exit_handler+0x14>)
 80064a2:	f000 b869 	b.w	8006578 <_fwalk_sglue>
 80064a6:	bf00      	nop
 80064a8:	20000010 	.word	0x20000010
 80064ac:	080094d1 	.word	0x080094d1
 80064b0:	20000020 	.word	0x20000020

080064b4 <cleanup_stdio>:
 80064b4:	6841      	ldr	r1, [r0, #4]
 80064b6:	4b0c      	ldr	r3, [pc, #48]	@ (80064e8 <cleanup_stdio+0x34>)
 80064b8:	4299      	cmp	r1, r3
 80064ba:	b510      	push	{r4, lr}
 80064bc:	4604      	mov	r4, r0
 80064be:	d001      	beq.n	80064c4 <cleanup_stdio+0x10>
 80064c0:	f003 f806 	bl	80094d0 <_fflush_r>
 80064c4:	68a1      	ldr	r1, [r4, #8]
 80064c6:	4b09      	ldr	r3, [pc, #36]	@ (80064ec <cleanup_stdio+0x38>)
 80064c8:	4299      	cmp	r1, r3
 80064ca:	d002      	beq.n	80064d2 <cleanup_stdio+0x1e>
 80064cc:	4620      	mov	r0, r4
 80064ce:	f002 ffff 	bl	80094d0 <_fflush_r>
 80064d2:	68e1      	ldr	r1, [r4, #12]
 80064d4:	4b06      	ldr	r3, [pc, #24]	@ (80064f0 <cleanup_stdio+0x3c>)
 80064d6:	4299      	cmp	r1, r3
 80064d8:	d004      	beq.n	80064e4 <cleanup_stdio+0x30>
 80064da:	4620      	mov	r0, r4
 80064dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064e0:	f002 bff6 	b.w	80094d0 <_fflush_r>
 80064e4:	bd10      	pop	{r4, pc}
 80064e6:	bf00      	nop
 80064e8:	20001488 	.word	0x20001488
 80064ec:	200014f0 	.word	0x200014f0
 80064f0:	20001558 	.word	0x20001558

080064f4 <global_stdio_init.part.0>:
 80064f4:	b510      	push	{r4, lr}
 80064f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006524 <global_stdio_init.part.0+0x30>)
 80064f8:	4c0b      	ldr	r4, [pc, #44]	@ (8006528 <global_stdio_init.part.0+0x34>)
 80064fa:	4a0c      	ldr	r2, [pc, #48]	@ (800652c <global_stdio_init.part.0+0x38>)
 80064fc:	601a      	str	r2, [r3, #0]
 80064fe:	4620      	mov	r0, r4
 8006500:	2200      	movs	r2, #0
 8006502:	2104      	movs	r1, #4
 8006504:	f7ff ff94 	bl	8006430 <std>
 8006508:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800650c:	2201      	movs	r2, #1
 800650e:	2109      	movs	r1, #9
 8006510:	f7ff ff8e 	bl	8006430 <std>
 8006514:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006518:	2202      	movs	r2, #2
 800651a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800651e:	2112      	movs	r1, #18
 8006520:	f7ff bf86 	b.w	8006430 <std>
 8006524:	200015c0 	.word	0x200015c0
 8006528:	20001488 	.word	0x20001488
 800652c:	0800649d 	.word	0x0800649d

08006530 <__sfp_lock_acquire>:
 8006530:	4801      	ldr	r0, [pc, #4]	@ (8006538 <__sfp_lock_acquire+0x8>)
 8006532:	f000 ba24 	b.w	800697e <__retarget_lock_acquire_recursive>
 8006536:	bf00      	nop
 8006538:	200015c9 	.word	0x200015c9

0800653c <__sfp_lock_release>:
 800653c:	4801      	ldr	r0, [pc, #4]	@ (8006544 <__sfp_lock_release+0x8>)
 800653e:	f000 ba1f 	b.w	8006980 <__retarget_lock_release_recursive>
 8006542:	bf00      	nop
 8006544:	200015c9 	.word	0x200015c9

08006548 <__sinit>:
 8006548:	b510      	push	{r4, lr}
 800654a:	4604      	mov	r4, r0
 800654c:	f7ff fff0 	bl	8006530 <__sfp_lock_acquire>
 8006550:	6a23      	ldr	r3, [r4, #32]
 8006552:	b11b      	cbz	r3, 800655c <__sinit+0x14>
 8006554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006558:	f7ff bff0 	b.w	800653c <__sfp_lock_release>
 800655c:	4b04      	ldr	r3, [pc, #16]	@ (8006570 <__sinit+0x28>)
 800655e:	6223      	str	r3, [r4, #32]
 8006560:	4b04      	ldr	r3, [pc, #16]	@ (8006574 <__sinit+0x2c>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1f5      	bne.n	8006554 <__sinit+0xc>
 8006568:	f7ff ffc4 	bl	80064f4 <global_stdio_init.part.0>
 800656c:	e7f2      	b.n	8006554 <__sinit+0xc>
 800656e:	bf00      	nop
 8006570:	080064b5 	.word	0x080064b5
 8006574:	200015c0 	.word	0x200015c0

08006578 <_fwalk_sglue>:
 8006578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800657c:	4607      	mov	r7, r0
 800657e:	4688      	mov	r8, r1
 8006580:	4614      	mov	r4, r2
 8006582:	2600      	movs	r6, #0
 8006584:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006588:	f1b9 0901 	subs.w	r9, r9, #1
 800658c:	d505      	bpl.n	800659a <_fwalk_sglue+0x22>
 800658e:	6824      	ldr	r4, [r4, #0]
 8006590:	2c00      	cmp	r4, #0
 8006592:	d1f7      	bne.n	8006584 <_fwalk_sglue+0xc>
 8006594:	4630      	mov	r0, r6
 8006596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800659a:	89ab      	ldrh	r3, [r5, #12]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d907      	bls.n	80065b0 <_fwalk_sglue+0x38>
 80065a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80065a4:	3301      	adds	r3, #1
 80065a6:	d003      	beq.n	80065b0 <_fwalk_sglue+0x38>
 80065a8:	4629      	mov	r1, r5
 80065aa:	4638      	mov	r0, r7
 80065ac:	47c0      	blx	r8
 80065ae:	4306      	orrs	r6, r0
 80065b0:	3568      	adds	r5, #104	@ 0x68
 80065b2:	e7e9      	b.n	8006588 <_fwalk_sglue+0x10>

080065b4 <iprintf>:
 80065b4:	b40f      	push	{r0, r1, r2, r3}
 80065b6:	b507      	push	{r0, r1, r2, lr}
 80065b8:	4906      	ldr	r1, [pc, #24]	@ (80065d4 <iprintf+0x20>)
 80065ba:	ab04      	add	r3, sp, #16
 80065bc:	6808      	ldr	r0, [r1, #0]
 80065be:	f853 2b04 	ldr.w	r2, [r3], #4
 80065c2:	6881      	ldr	r1, [r0, #8]
 80065c4:	9301      	str	r3, [sp, #4]
 80065c6:	f002 fde7 	bl	8009198 <_vfiprintf_r>
 80065ca:	b003      	add	sp, #12
 80065cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80065d0:	b004      	add	sp, #16
 80065d2:	4770      	bx	lr
 80065d4:	2000001c 	.word	0x2000001c

080065d8 <_puts_r>:
 80065d8:	6a03      	ldr	r3, [r0, #32]
 80065da:	b570      	push	{r4, r5, r6, lr}
 80065dc:	6884      	ldr	r4, [r0, #8]
 80065de:	4605      	mov	r5, r0
 80065e0:	460e      	mov	r6, r1
 80065e2:	b90b      	cbnz	r3, 80065e8 <_puts_r+0x10>
 80065e4:	f7ff ffb0 	bl	8006548 <__sinit>
 80065e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80065ea:	07db      	lsls	r3, r3, #31
 80065ec:	d405      	bmi.n	80065fa <_puts_r+0x22>
 80065ee:	89a3      	ldrh	r3, [r4, #12]
 80065f0:	0598      	lsls	r0, r3, #22
 80065f2:	d402      	bmi.n	80065fa <_puts_r+0x22>
 80065f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065f6:	f000 f9c2 	bl	800697e <__retarget_lock_acquire_recursive>
 80065fa:	89a3      	ldrh	r3, [r4, #12]
 80065fc:	0719      	lsls	r1, r3, #28
 80065fe:	d502      	bpl.n	8006606 <_puts_r+0x2e>
 8006600:	6923      	ldr	r3, [r4, #16]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d135      	bne.n	8006672 <_puts_r+0x9a>
 8006606:	4621      	mov	r1, r4
 8006608:	4628      	mov	r0, r5
 800660a:	f000 f8e5 	bl	80067d8 <__swsetup_r>
 800660e:	b380      	cbz	r0, 8006672 <_puts_r+0x9a>
 8006610:	f04f 35ff 	mov.w	r5, #4294967295
 8006614:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006616:	07da      	lsls	r2, r3, #31
 8006618:	d405      	bmi.n	8006626 <_puts_r+0x4e>
 800661a:	89a3      	ldrh	r3, [r4, #12]
 800661c:	059b      	lsls	r3, r3, #22
 800661e:	d402      	bmi.n	8006626 <_puts_r+0x4e>
 8006620:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006622:	f000 f9ad 	bl	8006980 <__retarget_lock_release_recursive>
 8006626:	4628      	mov	r0, r5
 8006628:	bd70      	pop	{r4, r5, r6, pc}
 800662a:	2b00      	cmp	r3, #0
 800662c:	da04      	bge.n	8006638 <_puts_r+0x60>
 800662e:	69a2      	ldr	r2, [r4, #24]
 8006630:	429a      	cmp	r2, r3
 8006632:	dc17      	bgt.n	8006664 <_puts_r+0x8c>
 8006634:	290a      	cmp	r1, #10
 8006636:	d015      	beq.n	8006664 <_puts_r+0x8c>
 8006638:	6823      	ldr	r3, [r4, #0]
 800663a:	1c5a      	adds	r2, r3, #1
 800663c:	6022      	str	r2, [r4, #0]
 800663e:	7019      	strb	r1, [r3, #0]
 8006640:	68a3      	ldr	r3, [r4, #8]
 8006642:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006646:	3b01      	subs	r3, #1
 8006648:	60a3      	str	r3, [r4, #8]
 800664a:	2900      	cmp	r1, #0
 800664c:	d1ed      	bne.n	800662a <_puts_r+0x52>
 800664e:	2b00      	cmp	r3, #0
 8006650:	da11      	bge.n	8006676 <_puts_r+0x9e>
 8006652:	4622      	mov	r2, r4
 8006654:	210a      	movs	r1, #10
 8006656:	4628      	mov	r0, r5
 8006658:	f000 f87f 	bl	800675a <__swbuf_r>
 800665c:	3001      	adds	r0, #1
 800665e:	d0d7      	beq.n	8006610 <_puts_r+0x38>
 8006660:	250a      	movs	r5, #10
 8006662:	e7d7      	b.n	8006614 <_puts_r+0x3c>
 8006664:	4622      	mov	r2, r4
 8006666:	4628      	mov	r0, r5
 8006668:	f000 f877 	bl	800675a <__swbuf_r>
 800666c:	3001      	adds	r0, #1
 800666e:	d1e7      	bne.n	8006640 <_puts_r+0x68>
 8006670:	e7ce      	b.n	8006610 <_puts_r+0x38>
 8006672:	3e01      	subs	r6, #1
 8006674:	e7e4      	b.n	8006640 <_puts_r+0x68>
 8006676:	6823      	ldr	r3, [r4, #0]
 8006678:	1c5a      	adds	r2, r3, #1
 800667a:	6022      	str	r2, [r4, #0]
 800667c:	220a      	movs	r2, #10
 800667e:	701a      	strb	r2, [r3, #0]
 8006680:	e7ee      	b.n	8006660 <_puts_r+0x88>
	...

08006684 <puts>:
 8006684:	4b02      	ldr	r3, [pc, #8]	@ (8006690 <puts+0xc>)
 8006686:	4601      	mov	r1, r0
 8006688:	6818      	ldr	r0, [r3, #0]
 800668a:	f7ff bfa5 	b.w	80065d8 <_puts_r>
 800668e:	bf00      	nop
 8006690:	2000001c 	.word	0x2000001c

08006694 <siprintf>:
 8006694:	b40e      	push	{r1, r2, r3}
 8006696:	b500      	push	{lr}
 8006698:	b09c      	sub	sp, #112	@ 0x70
 800669a:	ab1d      	add	r3, sp, #116	@ 0x74
 800669c:	9002      	str	r0, [sp, #8]
 800669e:	9006      	str	r0, [sp, #24]
 80066a0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80066a4:	4809      	ldr	r0, [pc, #36]	@ (80066cc <siprintf+0x38>)
 80066a6:	9107      	str	r1, [sp, #28]
 80066a8:	9104      	str	r1, [sp, #16]
 80066aa:	4909      	ldr	r1, [pc, #36]	@ (80066d0 <siprintf+0x3c>)
 80066ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80066b0:	9105      	str	r1, [sp, #20]
 80066b2:	6800      	ldr	r0, [r0, #0]
 80066b4:	9301      	str	r3, [sp, #4]
 80066b6:	a902      	add	r1, sp, #8
 80066b8:	f002 fc48 	bl	8008f4c <_svfiprintf_r>
 80066bc:	9b02      	ldr	r3, [sp, #8]
 80066be:	2200      	movs	r2, #0
 80066c0:	701a      	strb	r2, [r3, #0]
 80066c2:	b01c      	add	sp, #112	@ 0x70
 80066c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80066c8:	b003      	add	sp, #12
 80066ca:	4770      	bx	lr
 80066cc:	2000001c 	.word	0x2000001c
 80066d0:	ffff0208 	.word	0xffff0208

080066d4 <__sread>:
 80066d4:	b510      	push	{r4, lr}
 80066d6:	460c      	mov	r4, r1
 80066d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066dc:	f000 f900 	bl	80068e0 <_read_r>
 80066e0:	2800      	cmp	r0, #0
 80066e2:	bfab      	itete	ge
 80066e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80066e6:	89a3      	ldrhlt	r3, [r4, #12]
 80066e8:	181b      	addge	r3, r3, r0
 80066ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80066ee:	bfac      	ite	ge
 80066f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80066f2:	81a3      	strhlt	r3, [r4, #12]
 80066f4:	bd10      	pop	{r4, pc}

080066f6 <__swrite>:
 80066f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066fa:	461f      	mov	r7, r3
 80066fc:	898b      	ldrh	r3, [r1, #12]
 80066fe:	05db      	lsls	r3, r3, #23
 8006700:	4605      	mov	r5, r0
 8006702:	460c      	mov	r4, r1
 8006704:	4616      	mov	r6, r2
 8006706:	d505      	bpl.n	8006714 <__swrite+0x1e>
 8006708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800670c:	2302      	movs	r3, #2
 800670e:	2200      	movs	r2, #0
 8006710:	f000 f8d4 	bl	80068bc <_lseek_r>
 8006714:	89a3      	ldrh	r3, [r4, #12]
 8006716:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800671a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800671e:	81a3      	strh	r3, [r4, #12]
 8006720:	4632      	mov	r2, r6
 8006722:	463b      	mov	r3, r7
 8006724:	4628      	mov	r0, r5
 8006726:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800672a:	f000 b8eb 	b.w	8006904 <_write_r>

0800672e <__sseek>:
 800672e:	b510      	push	{r4, lr}
 8006730:	460c      	mov	r4, r1
 8006732:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006736:	f000 f8c1 	bl	80068bc <_lseek_r>
 800673a:	1c43      	adds	r3, r0, #1
 800673c:	89a3      	ldrh	r3, [r4, #12]
 800673e:	bf15      	itete	ne
 8006740:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006742:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006746:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800674a:	81a3      	strheq	r3, [r4, #12]
 800674c:	bf18      	it	ne
 800674e:	81a3      	strhne	r3, [r4, #12]
 8006750:	bd10      	pop	{r4, pc}

08006752 <__sclose>:
 8006752:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006756:	f000 b8a1 	b.w	800689c <_close_r>

0800675a <__swbuf_r>:
 800675a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800675c:	460e      	mov	r6, r1
 800675e:	4614      	mov	r4, r2
 8006760:	4605      	mov	r5, r0
 8006762:	b118      	cbz	r0, 800676c <__swbuf_r+0x12>
 8006764:	6a03      	ldr	r3, [r0, #32]
 8006766:	b90b      	cbnz	r3, 800676c <__swbuf_r+0x12>
 8006768:	f7ff feee 	bl	8006548 <__sinit>
 800676c:	69a3      	ldr	r3, [r4, #24]
 800676e:	60a3      	str	r3, [r4, #8]
 8006770:	89a3      	ldrh	r3, [r4, #12]
 8006772:	071a      	lsls	r2, r3, #28
 8006774:	d501      	bpl.n	800677a <__swbuf_r+0x20>
 8006776:	6923      	ldr	r3, [r4, #16]
 8006778:	b943      	cbnz	r3, 800678c <__swbuf_r+0x32>
 800677a:	4621      	mov	r1, r4
 800677c:	4628      	mov	r0, r5
 800677e:	f000 f82b 	bl	80067d8 <__swsetup_r>
 8006782:	b118      	cbz	r0, 800678c <__swbuf_r+0x32>
 8006784:	f04f 37ff 	mov.w	r7, #4294967295
 8006788:	4638      	mov	r0, r7
 800678a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800678c:	6823      	ldr	r3, [r4, #0]
 800678e:	6922      	ldr	r2, [r4, #16]
 8006790:	1a98      	subs	r0, r3, r2
 8006792:	6963      	ldr	r3, [r4, #20]
 8006794:	b2f6      	uxtb	r6, r6
 8006796:	4283      	cmp	r3, r0
 8006798:	4637      	mov	r7, r6
 800679a:	dc05      	bgt.n	80067a8 <__swbuf_r+0x4e>
 800679c:	4621      	mov	r1, r4
 800679e:	4628      	mov	r0, r5
 80067a0:	f002 fe96 	bl	80094d0 <_fflush_r>
 80067a4:	2800      	cmp	r0, #0
 80067a6:	d1ed      	bne.n	8006784 <__swbuf_r+0x2a>
 80067a8:	68a3      	ldr	r3, [r4, #8]
 80067aa:	3b01      	subs	r3, #1
 80067ac:	60a3      	str	r3, [r4, #8]
 80067ae:	6823      	ldr	r3, [r4, #0]
 80067b0:	1c5a      	adds	r2, r3, #1
 80067b2:	6022      	str	r2, [r4, #0]
 80067b4:	701e      	strb	r6, [r3, #0]
 80067b6:	6962      	ldr	r2, [r4, #20]
 80067b8:	1c43      	adds	r3, r0, #1
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d004      	beq.n	80067c8 <__swbuf_r+0x6e>
 80067be:	89a3      	ldrh	r3, [r4, #12]
 80067c0:	07db      	lsls	r3, r3, #31
 80067c2:	d5e1      	bpl.n	8006788 <__swbuf_r+0x2e>
 80067c4:	2e0a      	cmp	r6, #10
 80067c6:	d1df      	bne.n	8006788 <__swbuf_r+0x2e>
 80067c8:	4621      	mov	r1, r4
 80067ca:	4628      	mov	r0, r5
 80067cc:	f002 fe80 	bl	80094d0 <_fflush_r>
 80067d0:	2800      	cmp	r0, #0
 80067d2:	d0d9      	beq.n	8006788 <__swbuf_r+0x2e>
 80067d4:	e7d6      	b.n	8006784 <__swbuf_r+0x2a>
	...

080067d8 <__swsetup_r>:
 80067d8:	b538      	push	{r3, r4, r5, lr}
 80067da:	4b29      	ldr	r3, [pc, #164]	@ (8006880 <__swsetup_r+0xa8>)
 80067dc:	4605      	mov	r5, r0
 80067de:	6818      	ldr	r0, [r3, #0]
 80067e0:	460c      	mov	r4, r1
 80067e2:	b118      	cbz	r0, 80067ec <__swsetup_r+0x14>
 80067e4:	6a03      	ldr	r3, [r0, #32]
 80067e6:	b90b      	cbnz	r3, 80067ec <__swsetup_r+0x14>
 80067e8:	f7ff feae 	bl	8006548 <__sinit>
 80067ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067f0:	0719      	lsls	r1, r3, #28
 80067f2:	d422      	bmi.n	800683a <__swsetup_r+0x62>
 80067f4:	06da      	lsls	r2, r3, #27
 80067f6:	d407      	bmi.n	8006808 <__swsetup_r+0x30>
 80067f8:	2209      	movs	r2, #9
 80067fa:	602a      	str	r2, [r5, #0]
 80067fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006800:	81a3      	strh	r3, [r4, #12]
 8006802:	f04f 30ff 	mov.w	r0, #4294967295
 8006806:	e033      	b.n	8006870 <__swsetup_r+0x98>
 8006808:	0758      	lsls	r0, r3, #29
 800680a:	d512      	bpl.n	8006832 <__swsetup_r+0x5a>
 800680c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800680e:	b141      	cbz	r1, 8006822 <__swsetup_r+0x4a>
 8006810:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006814:	4299      	cmp	r1, r3
 8006816:	d002      	beq.n	800681e <__swsetup_r+0x46>
 8006818:	4628      	mov	r0, r5
 800681a:	f000 ff05 	bl	8007628 <_free_r>
 800681e:	2300      	movs	r3, #0
 8006820:	6363      	str	r3, [r4, #52]	@ 0x34
 8006822:	89a3      	ldrh	r3, [r4, #12]
 8006824:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006828:	81a3      	strh	r3, [r4, #12]
 800682a:	2300      	movs	r3, #0
 800682c:	6063      	str	r3, [r4, #4]
 800682e:	6923      	ldr	r3, [r4, #16]
 8006830:	6023      	str	r3, [r4, #0]
 8006832:	89a3      	ldrh	r3, [r4, #12]
 8006834:	f043 0308 	orr.w	r3, r3, #8
 8006838:	81a3      	strh	r3, [r4, #12]
 800683a:	6923      	ldr	r3, [r4, #16]
 800683c:	b94b      	cbnz	r3, 8006852 <__swsetup_r+0x7a>
 800683e:	89a3      	ldrh	r3, [r4, #12]
 8006840:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006844:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006848:	d003      	beq.n	8006852 <__swsetup_r+0x7a>
 800684a:	4621      	mov	r1, r4
 800684c:	4628      	mov	r0, r5
 800684e:	f002 fe8d 	bl	800956c <__smakebuf_r>
 8006852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006856:	f013 0201 	ands.w	r2, r3, #1
 800685a:	d00a      	beq.n	8006872 <__swsetup_r+0x9a>
 800685c:	2200      	movs	r2, #0
 800685e:	60a2      	str	r2, [r4, #8]
 8006860:	6962      	ldr	r2, [r4, #20]
 8006862:	4252      	negs	r2, r2
 8006864:	61a2      	str	r2, [r4, #24]
 8006866:	6922      	ldr	r2, [r4, #16]
 8006868:	b942      	cbnz	r2, 800687c <__swsetup_r+0xa4>
 800686a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800686e:	d1c5      	bne.n	80067fc <__swsetup_r+0x24>
 8006870:	bd38      	pop	{r3, r4, r5, pc}
 8006872:	0799      	lsls	r1, r3, #30
 8006874:	bf58      	it	pl
 8006876:	6962      	ldrpl	r2, [r4, #20]
 8006878:	60a2      	str	r2, [r4, #8]
 800687a:	e7f4      	b.n	8006866 <__swsetup_r+0x8e>
 800687c:	2000      	movs	r0, #0
 800687e:	e7f7      	b.n	8006870 <__swsetup_r+0x98>
 8006880:	2000001c 	.word	0x2000001c

08006884 <memset>:
 8006884:	4402      	add	r2, r0
 8006886:	4603      	mov	r3, r0
 8006888:	4293      	cmp	r3, r2
 800688a:	d100      	bne.n	800688e <memset+0xa>
 800688c:	4770      	bx	lr
 800688e:	f803 1b01 	strb.w	r1, [r3], #1
 8006892:	e7f9      	b.n	8006888 <memset+0x4>

08006894 <_localeconv_r>:
 8006894:	4800      	ldr	r0, [pc, #0]	@ (8006898 <_localeconv_r+0x4>)
 8006896:	4770      	bx	lr
 8006898:	2000015c 	.word	0x2000015c

0800689c <_close_r>:
 800689c:	b538      	push	{r3, r4, r5, lr}
 800689e:	4d06      	ldr	r5, [pc, #24]	@ (80068b8 <_close_r+0x1c>)
 80068a0:	2300      	movs	r3, #0
 80068a2:	4604      	mov	r4, r0
 80068a4:	4608      	mov	r0, r1
 80068a6:	602b      	str	r3, [r5, #0]
 80068a8:	f7fa ff91 	bl	80017ce <_close>
 80068ac:	1c43      	adds	r3, r0, #1
 80068ae:	d102      	bne.n	80068b6 <_close_r+0x1a>
 80068b0:	682b      	ldr	r3, [r5, #0]
 80068b2:	b103      	cbz	r3, 80068b6 <_close_r+0x1a>
 80068b4:	6023      	str	r3, [r4, #0]
 80068b6:	bd38      	pop	{r3, r4, r5, pc}
 80068b8:	200015c4 	.word	0x200015c4

080068bc <_lseek_r>:
 80068bc:	b538      	push	{r3, r4, r5, lr}
 80068be:	4d07      	ldr	r5, [pc, #28]	@ (80068dc <_lseek_r+0x20>)
 80068c0:	4604      	mov	r4, r0
 80068c2:	4608      	mov	r0, r1
 80068c4:	4611      	mov	r1, r2
 80068c6:	2200      	movs	r2, #0
 80068c8:	602a      	str	r2, [r5, #0]
 80068ca:	461a      	mov	r2, r3
 80068cc:	f7fa ffa6 	bl	800181c <_lseek>
 80068d0:	1c43      	adds	r3, r0, #1
 80068d2:	d102      	bne.n	80068da <_lseek_r+0x1e>
 80068d4:	682b      	ldr	r3, [r5, #0]
 80068d6:	b103      	cbz	r3, 80068da <_lseek_r+0x1e>
 80068d8:	6023      	str	r3, [r4, #0]
 80068da:	bd38      	pop	{r3, r4, r5, pc}
 80068dc:	200015c4 	.word	0x200015c4

080068e0 <_read_r>:
 80068e0:	b538      	push	{r3, r4, r5, lr}
 80068e2:	4d07      	ldr	r5, [pc, #28]	@ (8006900 <_read_r+0x20>)
 80068e4:	4604      	mov	r4, r0
 80068e6:	4608      	mov	r0, r1
 80068e8:	4611      	mov	r1, r2
 80068ea:	2200      	movs	r2, #0
 80068ec:	602a      	str	r2, [r5, #0]
 80068ee:	461a      	mov	r2, r3
 80068f0:	f7fa ff34 	bl	800175c <_read>
 80068f4:	1c43      	adds	r3, r0, #1
 80068f6:	d102      	bne.n	80068fe <_read_r+0x1e>
 80068f8:	682b      	ldr	r3, [r5, #0]
 80068fa:	b103      	cbz	r3, 80068fe <_read_r+0x1e>
 80068fc:	6023      	str	r3, [r4, #0]
 80068fe:	bd38      	pop	{r3, r4, r5, pc}
 8006900:	200015c4 	.word	0x200015c4

08006904 <_write_r>:
 8006904:	b538      	push	{r3, r4, r5, lr}
 8006906:	4d07      	ldr	r5, [pc, #28]	@ (8006924 <_write_r+0x20>)
 8006908:	4604      	mov	r4, r0
 800690a:	4608      	mov	r0, r1
 800690c:	4611      	mov	r1, r2
 800690e:	2200      	movs	r2, #0
 8006910:	602a      	str	r2, [r5, #0]
 8006912:	461a      	mov	r2, r3
 8006914:	f7fa ff3f 	bl	8001796 <_write>
 8006918:	1c43      	adds	r3, r0, #1
 800691a:	d102      	bne.n	8006922 <_write_r+0x1e>
 800691c:	682b      	ldr	r3, [r5, #0]
 800691e:	b103      	cbz	r3, 8006922 <_write_r+0x1e>
 8006920:	6023      	str	r3, [r4, #0]
 8006922:	bd38      	pop	{r3, r4, r5, pc}
 8006924:	200015c4 	.word	0x200015c4

08006928 <__errno>:
 8006928:	4b01      	ldr	r3, [pc, #4]	@ (8006930 <__errno+0x8>)
 800692a:	6818      	ldr	r0, [r3, #0]
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	2000001c 	.word	0x2000001c

08006934 <__libc_init_array>:
 8006934:	b570      	push	{r4, r5, r6, lr}
 8006936:	4d0d      	ldr	r5, [pc, #52]	@ (800696c <__libc_init_array+0x38>)
 8006938:	4c0d      	ldr	r4, [pc, #52]	@ (8006970 <__libc_init_array+0x3c>)
 800693a:	1b64      	subs	r4, r4, r5
 800693c:	10a4      	asrs	r4, r4, #2
 800693e:	2600      	movs	r6, #0
 8006940:	42a6      	cmp	r6, r4
 8006942:	d109      	bne.n	8006958 <__libc_init_array+0x24>
 8006944:	4d0b      	ldr	r5, [pc, #44]	@ (8006974 <__libc_init_array+0x40>)
 8006946:	4c0c      	ldr	r4, [pc, #48]	@ (8006978 <__libc_init_array+0x44>)
 8006948:	f003 fb6e 	bl	800a028 <_init>
 800694c:	1b64      	subs	r4, r4, r5
 800694e:	10a4      	asrs	r4, r4, #2
 8006950:	2600      	movs	r6, #0
 8006952:	42a6      	cmp	r6, r4
 8006954:	d105      	bne.n	8006962 <__libc_init_array+0x2e>
 8006956:	bd70      	pop	{r4, r5, r6, pc}
 8006958:	f855 3b04 	ldr.w	r3, [r5], #4
 800695c:	4798      	blx	r3
 800695e:	3601      	adds	r6, #1
 8006960:	e7ee      	b.n	8006940 <__libc_init_array+0xc>
 8006962:	f855 3b04 	ldr.w	r3, [r5], #4
 8006966:	4798      	blx	r3
 8006968:	3601      	adds	r6, #1
 800696a:	e7f2      	b.n	8006952 <__libc_init_array+0x1e>
 800696c:	0800a540 	.word	0x0800a540
 8006970:	0800a540 	.word	0x0800a540
 8006974:	0800a540 	.word	0x0800a540
 8006978:	0800a544 	.word	0x0800a544

0800697c <__retarget_lock_init_recursive>:
 800697c:	4770      	bx	lr

0800697e <__retarget_lock_acquire_recursive>:
 800697e:	4770      	bx	lr

08006980 <__retarget_lock_release_recursive>:
 8006980:	4770      	bx	lr
	...

08006984 <nanf>:
 8006984:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800698c <nanf+0x8>
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	7fc00000 	.word	0x7fc00000

08006990 <quorem>:
 8006990:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006994:	6903      	ldr	r3, [r0, #16]
 8006996:	690c      	ldr	r4, [r1, #16]
 8006998:	42a3      	cmp	r3, r4
 800699a:	4607      	mov	r7, r0
 800699c:	db7e      	blt.n	8006a9c <quorem+0x10c>
 800699e:	3c01      	subs	r4, #1
 80069a0:	f101 0814 	add.w	r8, r1, #20
 80069a4:	00a3      	lsls	r3, r4, #2
 80069a6:	f100 0514 	add.w	r5, r0, #20
 80069aa:	9300      	str	r3, [sp, #0]
 80069ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069b0:	9301      	str	r3, [sp, #4]
 80069b2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80069b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069ba:	3301      	adds	r3, #1
 80069bc:	429a      	cmp	r2, r3
 80069be:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80069c2:	fbb2 f6f3 	udiv	r6, r2, r3
 80069c6:	d32e      	bcc.n	8006a26 <quorem+0x96>
 80069c8:	f04f 0a00 	mov.w	sl, #0
 80069cc:	46c4      	mov	ip, r8
 80069ce:	46ae      	mov	lr, r5
 80069d0:	46d3      	mov	fp, sl
 80069d2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80069d6:	b298      	uxth	r0, r3
 80069d8:	fb06 a000 	mla	r0, r6, r0, sl
 80069dc:	0c02      	lsrs	r2, r0, #16
 80069de:	0c1b      	lsrs	r3, r3, #16
 80069e0:	fb06 2303 	mla	r3, r6, r3, r2
 80069e4:	f8de 2000 	ldr.w	r2, [lr]
 80069e8:	b280      	uxth	r0, r0
 80069ea:	b292      	uxth	r2, r2
 80069ec:	1a12      	subs	r2, r2, r0
 80069ee:	445a      	add	r2, fp
 80069f0:	f8de 0000 	ldr.w	r0, [lr]
 80069f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80069fe:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006a02:	b292      	uxth	r2, r2
 8006a04:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006a08:	45e1      	cmp	r9, ip
 8006a0a:	f84e 2b04 	str.w	r2, [lr], #4
 8006a0e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006a12:	d2de      	bcs.n	80069d2 <quorem+0x42>
 8006a14:	9b00      	ldr	r3, [sp, #0]
 8006a16:	58eb      	ldr	r3, [r5, r3]
 8006a18:	b92b      	cbnz	r3, 8006a26 <quorem+0x96>
 8006a1a:	9b01      	ldr	r3, [sp, #4]
 8006a1c:	3b04      	subs	r3, #4
 8006a1e:	429d      	cmp	r5, r3
 8006a20:	461a      	mov	r2, r3
 8006a22:	d32f      	bcc.n	8006a84 <quorem+0xf4>
 8006a24:	613c      	str	r4, [r7, #16]
 8006a26:	4638      	mov	r0, r7
 8006a28:	f001 f9c2 	bl	8007db0 <__mcmp>
 8006a2c:	2800      	cmp	r0, #0
 8006a2e:	db25      	blt.n	8006a7c <quorem+0xec>
 8006a30:	4629      	mov	r1, r5
 8006a32:	2000      	movs	r0, #0
 8006a34:	f858 2b04 	ldr.w	r2, [r8], #4
 8006a38:	f8d1 c000 	ldr.w	ip, [r1]
 8006a3c:	fa1f fe82 	uxth.w	lr, r2
 8006a40:	fa1f f38c 	uxth.w	r3, ip
 8006a44:	eba3 030e 	sub.w	r3, r3, lr
 8006a48:	4403      	add	r3, r0
 8006a4a:	0c12      	lsrs	r2, r2, #16
 8006a4c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006a50:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a5a:	45c1      	cmp	r9, r8
 8006a5c:	f841 3b04 	str.w	r3, [r1], #4
 8006a60:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006a64:	d2e6      	bcs.n	8006a34 <quorem+0xa4>
 8006a66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a6e:	b922      	cbnz	r2, 8006a7a <quorem+0xea>
 8006a70:	3b04      	subs	r3, #4
 8006a72:	429d      	cmp	r5, r3
 8006a74:	461a      	mov	r2, r3
 8006a76:	d30b      	bcc.n	8006a90 <quorem+0x100>
 8006a78:	613c      	str	r4, [r7, #16]
 8006a7a:	3601      	adds	r6, #1
 8006a7c:	4630      	mov	r0, r6
 8006a7e:	b003      	add	sp, #12
 8006a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a84:	6812      	ldr	r2, [r2, #0]
 8006a86:	3b04      	subs	r3, #4
 8006a88:	2a00      	cmp	r2, #0
 8006a8a:	d1cb      	bne.n	8006a24 <quorem+0x94>
 8006a8c:	3c01      	subs	r4, #1
 8006a8e:	e7c6      	b.n	8006a1e <quorem+0x8e>
 8006a90:	6812      	ldr	r2, [r2, #0]
 8006a92:	3b04      	subs	r3, #4
 8006a94:	2a00      	cmp	r2, #0
 8006a96:	d1ef      	bne.n	8006a78 <quorem+0xe8>
 8006a98:	3c01      	subs	r4, #1
 8006a9a:	e7ea      	b.n	8006a72 <quorem+0xe2>
 8006a9c:	2000      	movs	r0, #0
 8006a9e:	e7ee      	b.n	8006a7e <quorem+0xee>

08006aa0 <_dtoa_r>:
 8006aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa4:	69c7      	ldr	r7, [r0, #28]
 8006aa6:	b099      	sub	sp, #100	@ 0x64
 8006aa8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006aac:	ec55 4b10 	vmov	r4, r5, d0
 8006ab0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006ab2:	9109      	str	r1, [sp, #36]	@ 0x24
 8006ab4:	4683      	mov	fp, r0
 8006ab6:	920e      	str	r2, [sp, #56]	@ 0x38
 8006ab8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006aba:	b97f      	cbnz	r7, 8006adc <_dtoa_r+0x3c>
 8006abc:	2010      	movs	r0, #16
 8006abe:	f000 fdfd 	bl	80076bc <malloc>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	f8cb 001c 	str.w	r0, [fp, #28]
 8006ac8:	b920      	cbnz	r0, 8006ad4 <_dtoa_r+0x34>
 8006aca:	4ba7      	ldr	r3, [pc, #668]	@ (8006d68 <_dtoa_r+0x2c8>)
 8006acc:	21ef      	movs	r1, #239	@ 0xef
 8006ace:	48a7      	ldr	r0, [pc, #668]	@ (8006d6c <_dtoa_r+0x2cc>)
 8006ad0:	f002 fdfe 	bl	80096d0 <__assert_func>
 8006ad4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006ad8:	6007      	str	r7, [r0, #0]
 8006ada:	60c7      	str	r7, [r0, #12]
 8006adc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006ae0:	6819      	ldr	r1, [r3, #0]
 8006ae2:	b159      	cbz	r1, 8006afc <_dtoa_r+0x5c>
 8006ae4:	685a      	ldr	r2, [r3, #4]
 8006ae6:	604a      	str	r2, [r1, #4]
 8006ae8:	2301      	movs	r3, #1
 8006aea:	4093      	lsls	r3, r2
 8006aec:	608b      	str	r3, [r1, #8]
 8006aee:	4658      	mov	r0, fp
 8006af0:	f000 feda 	bl	80078a8 <_Bfree>
 8006af4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006af8:	2200      	movs	r2, #0
 8006afa:	601a      	str	r2, [r3, #0]
 8006afc:	1e2b      	subs	r3, r5, #0
 8006afe:	bfb9      	ittee	lt
 8006b00:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006b04:	9303      	strlt	r3, [sp, #12]
 8006b06:	2300      	movge	r3, #0
 8006b08:	6033      	strge	r3, [r6, #0]
 8006b0a:	9f03      	ldr	r7, [sp, #12]
 8006b0c:	4b98      	ldr	r3, [pc, #608]	@ (8006d70 <_dtoa_r+0x2d0>)
 8006b0e:	bfbc      	itt	lt
 8006b10:	2201      	movlt	r2, #1
 8006b12:	6032      	strlt	r2, [r6, #0]
 8006b14:	43bb      	bics	r3, r7
 8006b16:	d112      	bne.n	8006b3e <_dtoa_r+0x9e>
 8006b18:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006b1a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006b1e:	6013      	str	r3, [r2, #0]
 8006b20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006b24:	4323      	orrs	r3, r4
 8006b26:	f000 854d 	beq.w	80075c4 <_dtoa_r+0xb24>
 8006b2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006b2c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006d84 <_dtoa_r+0x2e4>
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f000 854f 	beq.w	80075d4 <_dtoa_r+0xb34>
 8006b36:	f10a 0303 	add.w	r3, sl, #3
 8006b3a:	f000 bd49 	b.w	80075d0 <_dtoa_r+0xb30>
 8006b3e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006b42:	2200      	movs	r2, #0
 8006b44:	ec51 0b17 	vmov	r0, r1, d7
 8006b48:	2300      	movs	r3, #0
 8006b4a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006b4e:	f7f9 ffbb 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b52:	4680      	mov	r8, r0
 8006b54:	b158      	cbz	r0, 8006b6e <_dtoa_r+0xce>
 8006b56:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006b58:	2301      	movs	r3, #1
 8006b5a:	6013      	str	r3, [r2, #0]
 8006b5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006b5e:	b113      	cbz	r3, 8006b66 <_dtoa_r+0xc6>
 8006b60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006b62:	4b84      	ldr	r3, [pc, #528]	@ (8006d74 <_dtoa_r+0x2d4>)
 8006b64:	6013      	str	r3, [r2, #0]
 8006b66:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006d88 <_dtoa_r+0x2e8>
 8006b6a:	f000 bd33 	b.w	80075d4 <_dtoa_r+0xb34>
 8006b6e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006b72:	aa16      	add	r2, sp, #88	@ 0x58
 8006b74:	a917      	add	r1, sp, #92	@ 0x5c
 8006b76:	4658      	mov	r0, fp
 8006b78:	f001 fa3a 	bl	8007ff0 <__d2b>
 8006b7c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006b80:	4681      	mov	r9, r0
 8006b82:	2e00      	cmp	r6, #0
 8006b84:	d077      	beq.n	8006c76 <_dtoa_r+0x1d6>
 8006b86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b88:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006b8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b94:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006b98:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006b9c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	4b74      	ldr	r3, [pc, #464]	@ (8006d78 <_dtoa_r+0x2d8>)
 8006ba6:	f7f9 fb6f 	bl	8000288 <__aeabi_dsub>
 8006baa:	a369      	add	r3, pc, #420	@ (adr r3, 8006d50 <_dtoa_r+0x2b0>)
 8006bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb0:	f7f9 fd22 	bl	80005f8 <__aeabi_dmul>
 8006bb4:	a368      	add	r3, pc, #416	@ (adr r3, 8006d58 <_dtoa_r+0x2b8>)
 8006bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bba:	f7f9 fb67 	bl	800028c <__adddf3>
 8006bbe:	4604      	mov	r4, r0
 8006bc0:	4630      	mov	r0, r6
 8006bc2:	460d      	mov	r5, r1
 8006bc4:	f7f9 fcae 	bl	8000524 <__aeabi_i2d>
 8006bc8:	a365      	add	r3, pc, #404	@ (adr r3, 8006d60 <_dtoa_r+0x2c0>)
 8006bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bce:	f7f9 fd13 	bl	80005f8 <__aeabi_dmul>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	4620      	mov	r0, r4
 8006bd8:	4629      	mov	r1, r5
 8006bda:	f7f9 fb57 	bl	800028c <__adddf3>
 8006bde:	4604      	mov	r4, r0
 8006be0:	460d      	mov	r5, r1
 8006be2:	f7f9 ffb9 	bl	8000b58 <__aeabi_d2iz>
 8006be6:	2200      	movs	r2, #0
 8006be8:	4607      	mov	r7, r0
 8006bea:	2300      	movs	r3, #0
 8006bec:	4620      	mov	r0, r4
 8006bee:	4629      	mov	r1, r5
 8006bf0:	f7f9 ff74 	bl	8000adc <__aeabi_dcmplt>
 8006bf4:	b140      	cbz	r0, 8006c08 <_dtoa_r+0x168>
 8006bf6:	4638      	mov	r0, r7
 8006bf8:	f7f9 fc94 	bl	8000524 <__aeabi_i2d>
 8006bfc:	4622      	mov	r2, r4
 8006bfe:	462b      	mov	r3, r5
 8006c00:	f7f9 ff62 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c04:	b900      	cbnz	r0, 8006c08 <_dtoa_r+0x168>
 8006c06:	3f01      	subs	r7, #1
 8006c08:	2f16      	cmp	r7, #22
 8006c0a:	d851      	bhi.n	8006cb0 <_dtoa_r+0x210>
 8006c0c:	4b5b      	ldr	r3, [pc, #364]	@ (8006d7c <_dtoa_r+0x2dc>)
 8006c0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c1a:	f7f9 ff5f 	bl	8000adc <__aeabi_dcmplt>
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	d048      	beq.n	8006cb4 <_dtoa_r+0x214>
 8006c22:	3f01      	subs	r7, #1
 8006c24:	2300      	movs	r3, #0
 8006c26:	9312      	str	r3, [sp, #72]	@ 0x48
 8006c28:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006c2a:	1b9b      	subs	r3, r3, r6
 8006c2c:	1e5a      	subs	r2, r3, #1
 8006c2e:	bf44      	itt	mi
 8006c30:	f1c3 0801 	rsbmi	r8, r3, #1
 8006c34:	2300      	movmi	r3, #0
 8006c36:	9208      	str	r2, [sp, #32]
 8006c38:	bf54      	ite	pl
 8006c3a:	f04f 0800 	movpl.w	r8, #0
 8006c3e:	9308      	strmi	r3, [sp, #32]
 8006c40:	2f00      	cmp	r7, #0
 8006c42:	db39      	blt.n	8006cb8 <_dtoa_r+0x218>
 8006c44:	9b08      	ldr	r3, [sp, #32]
 8006c46:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006c48:	443b      	add	r3, r7
 8006c4a:	9308      	str	r3, [sp, #32]
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c52:	2b09      	cmp	r3, #9
 8006c54:	d864      	bhi.n	8006d20 <_dtoa_r+0x280>
 8006c56:	2b05      	cmp	r3, #5
 8006c58:	bfc4      	itt	gt
 8006c5a:	3b04      	subgt	r3, #4
 8006c5c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006c5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c60:	f1a3 0302 	sub.w	r3, r3, #2
 8006c64:	bfcc      	ite	gt
 8006c66:	2400      	movgt	r4, #0
 8006c68:	2401      	movle	r4, #1
 8006c6a:	2b03      	cmp	r3, #3
 8006c6c:	d863      	bhi.n	8006d36 <_dtoa_r+0x296>
 8006c6e:	e8df f003 	tbb	[pc, r3]
 8006c72:	372a      	.short	0x372a
 8006c74:	5535      	.short	0x5535
 8006c76:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006c7a:	441e      	add	r6, r3
 8006c7c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006c80:	2b20      	cmp	r3, #32
 8006c82:	bfc1      	itttt	gt
 8006c84:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006c88:	409f      	lslgt	r7, r3
 8006c8a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006c8e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006c92:	bfd6      	itet	le
 8006c94:	f1c3 0320 	rsble	r3, r3, #32
 8006c98:	ea47 0003 	orrgt.w	r0, r7, r3
 8006c9c:	fa04 f003 	lslle.w	r0, r4, r3
 8006ca0:	f7f9 fc30 	bl	8000504 <__aeabi_ui2d>
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006caa:	3e01      	subs	r6, #1
 8006cac:	9214      	str	r2, [sp, #80]	@ 0x50
 8006cae:	e777      	b.n	8006ba0 <_dtoa_r+0x100>
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e7b8      	b.n	8006c26 <_dtoa_r+0x186>
 8006cb4:	9012      	str	r0, [sp, #72]	@ 0x48
 8006cb6:	e7b7      	b.n	8006c28 <_dtoa_r+0x188>
 8006cb8:	427b      	negs	r3, r7
 8006cba:	930a      	str	r3, [sp, #40]	@ 0x28
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	eba8 0807 	sub.w	r8, r8, r7
 8006cc2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006cc4:	e7c4      	b.n	8006c50 <_dtoa_r+0x1b0>
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006cca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	dc35      	bgt.n	8006d3c <_dtoa_r+0x29c>
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	9300      	str	r3, [sp, #0]
 8006cd4:	9307      	str	r3, [sp, #28]
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	920e      	str	r2, [sp, #56]	@ 0x38
 8006cda:	e00b      	b.n	8006cf4 <_dtoa_r+0x254>
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e7f3      	b.n	8006cc8 <_dtoa_r+0x228>
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ce4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ce6:	18fb      	adds	r3, r7, r3
 8006ce8:	9300      	str	r3, [sp, #0]
 8006cea:	3301      	adds	r3, #1
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	9307      	str	r3, [sp, #28]
 8006cf0:	bfb8      	it	lt
 8006cf2:	2301      	movlt	r3, #1
 8006cf4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006cf8:	2100      	movs	r1, #0
 8006cfa:	2204      	movs	r2, #4
 8006cfc:	f102 0514 	add.w	r5, r2, #20
 8006d00:	429d      	cmp	r5, r3
 8006d02:	d91f      	bls.n	8006d44 <_dtoa_r+0x2a4>
 8006d04:	6041      	str	r1, [r0, #4]
 8006d06:	4658      	mov	r0, fp
 8006d08:	f000 fd8e 	bl	8007828 <_Balloc>
 8006d0c:	4682      	mov	sl, r0
 8006d0e:	2800      	cmp	r0, #0
 8006d10:	d13c      	bne.n	8006d8c <_dtoa_r+0x2ec>
 8006d12:	4b1b      	ldr	r3, [pc, #108]	@ (8006d80 <_dtoa_r+0x2e0>)
 8006d14:	4602      	mov	r2, r0
 8006d16:	f240 11af 	movw	r1, #431	@ 0x1af
 8006d1a:	e6d8      	b.n	8006ace <_dtoa_r+0x2e>
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e7e0      	b.n	8006ce2 <_dtoa_r+0x242>
 8006d20:	2401      	movs	r4, #1
 8006d22:	2300      	movs	r3, #0
 8006d24:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d26:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006d28:	f04f 33ff 	mov.w	r3, #4294967295
 8006d2c:	9300      	str	r3, [sp, #0]
 8006d2e:	9307      	str	r3, [sp, #28]
 8006d30:	2200      	movs	r2, #0
 8006d32:	2312      	movs	r3, #18
 8006d34:	e7d0      	b.n	8006cd8 <_dtoa_r+0x238>
 8006d36:	2301      	movs	r3, #1
 8006d38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d3a:	e7f5      	b.n	8006d28 <_dtoa_r+0x288>
 8006d3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d3e:	9300      	str	r3, [sp, #0]
 8006d40:	9307      	str	r3, [sp, #28]
 8006d42:	e7d7      	b.n	8006cf4 <_dtoa_r+0x254>
 8006d44:	3101      	adds	r1, #1
 8006d46:	0052      	lsls	r2, r2, #1
 8006d48:	e7d8      	b.n	8006cfc <_dtoa_r+0x25c>
 8006d4a:	bf00      	nop
 8006d4c:	f3af 8000 	nop.w
 8006d50:	636f4361 	.word	0x636f4361
 8006d54:	3fd287a7 	.word	0x3fd287a7
 8006d58:	8b60c8b3 	.word	0x8b60c8b3
 8006d5c:	3fc68a28 	.word	0x3fc68a28
 8006d60:	509f79fb 	.word	0x509f79fb
 8006d64:	3fd34413 	.word	0x3fd34413
 8006d68:	0800a14e 	.word	0x0800a14e
 8006d6c:	0800a165 	.word	0x0800a165
 8006d70:	7ff00000 	.word	0x7ff00000
 8006d74:	0800a119 	.word	0x0800a119
 8006d78:	3ff80000 	.word	0x3ff80000
 8006d7c:	0800a260 	.word	0x0800a260
 8006d80:	0800a1bd 	.word	0x0800a1bd
 8006d84:	0800a14a 	.word	0x0800a14a
 8006d88:	0800a118 	.word	0x0800a118
 8006d8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006d90:	6018      	str	r0, [r3, #0]
 8006d92:	9b07      	ldr	r3, [sp, #28]
 8006d94:	2b0e      	cmp	r3, #14
 8006d96:	f200 80a4 	bhi.w	8006ee2 <_dtoa_r+0x442>
 8006d9a:	2c00      	cmp	r4, #0
 8006d9c:	f000 80a1 	beq.w	8006ee2 <_dtoa_r+0x442>
 8006da0:	2f00      	cmp	r7, #0
 8006da2:	dd33      	ble.n	8006e0c <_dtoa_r+0x36c>
 8006da4:	4bad      	ldr	r3, [pc, #692]	@ (800705c <_dtoa_r+0x5bc>)
 8006da6:	f007 020f 	and.w	r2, r7, #15
 8006daa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006dae:	ed93 7b00 	vldr	d7, [r3]
 8006db2:	05f8      	lsls	r0, r7, #23
 8006db4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006db8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006dbc:	d516      	bpl.n	8006dec <_dtoa_r+0x34c>
 8006dbe:	4ba8      	ldr	r3, [pc, #672]	@ (8007060 <_dtoa_r+0x5c0>)
 8006dc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006dc4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006dc8:	f7f9 fd40 	bl	800084c <__aeabi_ddiv>
 8006dcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dd0:	f004 040f 	and.w	r4, r4, #15
 8006dd4:	2603      	movs	r6, #3
 8006dd6:	4da2      	ldr	r5, [pc, #648]	@ (8007060 <_dtoa_r+0x5c0>)
 8006dd8:	b954      	cbnz	r4, 8006df0 <_dtoa_r+0x350>
 8006dda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006de2:	f7f9 fd33 	bl	800084c <__aeabi_ddiv>
 8006de6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dea:	e028      	b.n	8006e3e <_dtoa_r+0x39e>
 8006dec:	2602      	movs	r6, #2
 8006dee:	e7f2      	b.n	8006dd6 <_dtoa_r+0x336>
 8006df0:	07e1      	lsls	r1, r4, #31
 8006df2:	d508      	bpl.n	8006e06 <_dtoa_r+0x366>
 8006df4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006df8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006dfc:	f7f9 fbfc 	bl	80005f8 <__aeabi_dmul>
 8006e00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e04:	3601      	adds	r6, #1
 8006e06:	1064      	asrs	r4, r4, #1
 8006e08:	3508      	adds	r5, #8
 8006e0a:	e7e5      	b.n	8006dd8 <_dtoa_r+0x338>
 8006e0c:	f000 80d2 	beq.w	8006fb4 <_dtoa_r+0x514>
 8006e10:	427c      	negs	r4, r7
 8006e12:	4b92      	ldr	r3, [pc, #584]	@ (800705c <_dtoa_r+0x5bc>)
 8006e14:	4d92      	ldr	r5, [pc, #584]	@ (8007060 <_dtoa_r+0x5c0>)
 8006e16:	f004 020f 	and.w	r2, r4, #15
 8006e1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e22:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e26:	f7f9 fbe7 	bl	80005f8 <__aeabi_dmul>
 8006e2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e2e:	1124      	asrs	r4, r4, #4
 8006e30:	2300      	movs	r3, #0
 8006e32:	2602      	movs	r6, #2
 8006e34:	2c00      	cmp	r4, #0
 8006e36:	f040 80b2 	bne.w	8006f9e <_dtoa_r+0x4fe>
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1d3      	bne.n	8006de6 <_dtoa_r+0x346>
 8006e3e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006e40:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	f000 80b7 	beq.w	8006fb8 <_dtoa_r+0x518>
 8006e4a:	4b86      	ldr	r3, [pc, #536]	@ (8007064 <_dtoa_r+0x5c4>)
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	4620      	mov	r0, r4
 8006e50:	4629      	mov	r1, r5
 8006e52:	f7f9 fe43 	bl	8000adc <__aeabi_dcmplt>
 8006e56:	2800      	cmp	r0, #0
 8006e58:	f000 80ae 	beq.w	8006fb8 <_dtoa_r+0x518>
 8006e5c:	9b07      	ldr	r3, [sp, #28]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	f000 80aa 	beq.w	8006fb8 <_dtoa_r+0x518>
 8006e64:	9b00      	ldr	r3, [sp, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	dd37      	ble.n	8006eda <_dtoa_r+0x43a>
 8006e6a:	1e7b      	subs	r3, r7, #1
 8006e6c:	9304      	str	r3, [sp, #16]
 8006e6e:	4620      	mov	r0, r4
 8006e70:	4b7d      	ldr	r3, [pc, #500]	@ (8007068 <_dtoa_r+0x5c8>)
 8006e72:	2200      	movs	r2, #0
 8006e74:	4629      	mov	r1, r5
 8006e76:	f7f9 fbbf 	bl	80005f8 <__aeabi_dmul>
 8006e7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e7e:	9c00      	ldr	r4, [sp, #0]
 8006e80:	3601      	adds	r6, #1
 8006e82:	4630      	mov	r0, r6
 8006e84:	f7f9 fb4e 	bl	8000524 <__aeabi_i2d>
 8006e88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e8c:	f7f9 fbb4 	bl	80005f8 <__aeabi_dmul>
 8006e90:	4b76      	ldr	r3, [pc, #472]	@ (800706c <_dtoa_r+0x5cc>)
 8006e92:	2200      	movs	r2, #0
 8006e94:	f7f9 f9fa 	bl	800028c <__adddf3>
 8006e98:	4605      	mov	r5, r0
 8006e9a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006e9e:	2c00      	cmp	r4, #0
 8006ea0:	f040 808d 	bne.w	8006fbe <_dtoa_r+0x51e>
 8006ea4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ea8:	4b71      	ldr	r3, [pc, #452]	@ (8007070 <_dtoa_r+0x5d0>)
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f7f9 f9ec 	bl	8000288 <__aeabi_dsub>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006eb8:	462a      	mov	r2, r5
 8006eba:	4633      	mov	r3, r6
 8006ebc:	f7f9 fe2c 	bl	8000b18 <__aeabi_dcmpgt>
 8006ec0:	2800      	cmp	r0, #0
 8006ec2:	f040 828b 	bne.w	80073dc <_dtoa_r+0x93c>
 8006ec6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006eca:	462a      	mov	r2, r5
 8006ecc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006ed0:	f7f9 fe04 	bl	8000adc <__aeabi_dcmplt>
 8006ed4:	2800      	cmp	r0, #0
 8006ed6:	f040 8128 	bne.w	800712a <_dtoa_r+0x68a>
 8006eda:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006ede:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006ee2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f2c0 815a 	blt.w	800719e <_dtoa_r+0x6fe>
 8006eea:	2f0e      	cmp	r7, #14
 8006eec:	f300 8157 	bgt.w	800719e <_dtoa_r+0x6fe>
 8006ef0:	4b5a      	ldr	r3, [pc, #360]	@ (800705c <_dtoa_r+0x5bc>)
 8006ef2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006ef6:	ed93 7b00 	vldr	d7, [r3]
 8006efa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	ed8d 7b00 	vstr	d7, [sp]
 8006f02:	da03      	bge.n	8006f0c <_dtoa_r+0x46c>
 8006f04:	9b07      	ldr	r3, [sp, #28]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	f340 8101 	ble.w	800710e <_dtoa_r+0x66e>
 8006f0c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006f10:	4656      	mov	r6, sl
 8006f12:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f16:	4620      	mov	r0, r4
 8006f18:	4629      	mov	r1, r5
 8006f1a:	f7f9 fc97 	bl	800084c <__aeabi_ddiv>
 8006f1e:	f7f9 fe1b 	bl	8000b58 <__aeabi_d2iz>
 8006f22:	4680      	mov	r8, r0
 8006f24:	f7f9 fafe 	bl	8000524 <__aeabi_i2d>
 8006f28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f2c:	f7f9 fb64 	bl	80005f8 <__aeabi_dmul>
 8006f30:	4602      	mov	r2, r0
 8006f32:	460b      	mov	r3, r1
 8006f34:	4620      	mov	r0, r4
 8006f36:	4629      	mov	r1, r5
 8006f38:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006f3c:	f7f9 f9a4 	bl	8000288 <__aeabi_dsub>
 8006f40:	f806 4b01 	strb.w	r4, [r6], #1
 8006f44:	9d07      	ldr	r5, [sp, #28]
 8006f46:	eba6 040a 	sub.w	r4, r6, sl
 8006f4a:	42a5      	cmp	r5, r4
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	460b      	mov	r3, r1
 8006f50:	f040 8117 	bne.w	8007182 <_dtoa_r+0x6e2>
 8006f54:	f7f9 f99a 	bl	800028c <__adddf3>
 8006f58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f5c:	4604      	mov	r4, r0
 8006f5e:	460d      	mov	r5, r1
 8006f60:	f7f9 fdda 	bl	8000b18 <__aeabi_dcmpgt>
 8006f64:	2800      	cmp	r0, #0
 8006f66:	f040 80f9 	bne.w	800715c <_dtoa_r+0x6bc>
 8006f6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f6e:	4620      	mov	r0, r4
 8006f70:	4629      	mov	r1, r5
 8006f72:	f7f9 fda9 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f76:	b118      	cbz	r0, 8006f80 <_dtoa_r+0x4e0>
 8006f78:	f018 0f01 	tst.w	r8, #1
 8006f7c:	f040 80ee 	bne.w	800715c <_dtoa_r+0x6bc>
 8006f80:	4649      	mov	r1, r9
 8006f82:	4658      	mov	r0, fp
 8006f84:	f000 fc90 	bl	80078a8 <_Bfree>
 8006f88:	2300      	movs	r3, #0
 8006f8a:	7033      	strb	r3, [r6, #0]
 8006f8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006f8e:	3701      	adds	r7, #1
 8006f90:	601f      	str	r7, [r3, #0]
 8006f92:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f000 831d 	beq.w	80075d4 <_dtoa_r+0xb34>
 8006f9a:	601e      	str	r6, [r3, #0]
 8006f9c:	e31a      	b.n	80075d4 <_dtoa_r+0xb34>
 8006f9e:	07e2      	lsls	r2, r4, #31
 8006fa0:	d505      	bpl.n	8006fae <_dtoa_r+0x50e>
 8006fa2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006fa6:	f7f9 fb27 	bl	80005f8 <__aeabi_dmul>
 8006faa:	3601      	adds	r6, #1
 8006fac:	2301      	movs	r3, #1
 8006fae:	1064      	asrs	r4, r4, #1
 8006fb0:	3508      	adds	r5, #8
 8006fb2:	e73f      	b.n	8006e34 <_dtoa_r+0x394>
 8006fb4:	2602      	movs	r6, #2
 8006fb6:	e742      	b.n	8006e3e <_dtoa_r+0x39e>
 8006fb8:	9c07      	ldr	r4, [sp, #28]
 8006fba:	9704      	str	r7, [sp, #16]
 8006fbc:	e761      	b.n	8006e82 <_dtoa_r+0x3e2>
 8006fbe:	4b27      	ldr	r3, [pc, #156]	@ (800705c <_dtoa_r+0x5bc>)
 8006fc0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006fc2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006fc6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006fca:	4454      	add	r4, sl
 8006fcc:	2900      	cmp	r1, #0
 8006fce:	d053      	beq.n	8007078 <_dtoa_r+0x5d8>
 8006fd0:	4928      	ldr	r1, [pc, #160]	@ (8007074 <_dtoa_r+0x5d4>)
 8006fd2:	2000      	movs	r0, #0
 8006fd4:	f7f9 fc3a 	bl	800084c <__aeabi_ddiv>
 8006fd8:	4633      	mov	r3, r6
 8006fda:	462a      	mov	r2, r5
 8006fdc:	f7f9 f954 	bl	8000288 <__aeabi_dsub>
 8006fe0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006fe4:	4656      	mov	r6, sl
 8006fe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fea:	f7f9 fdb5 	bl	8000b58 <__aeabi_d2iz>
 8006fee:	4605      	mov	r5, r0
 8006ff0:	f7f9 fa98 	bl	8000524 <__aeabi_i2d>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ffc:	f7f9 f944 	bl	8000288 <__aeabi_dsub>
 8007000:	3530      	adds	r5, #48	@ 0x30
 8007002:	4602      	mov	r2, r0
 8007004:	460b      	mov	r3, r1
 8007006:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800700a:	f806 5b01 	strb.w	r5, [r6], #1
 800700e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007012:	f7f9 fd63 	bl	8000adc <__aeabi_dcmplt>
 8007016:	2800      	cmp	r0, #0
 8007018:	d171      	bne.n	80070fe <_dtoa_r+0x65e>
 800701a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800701e:	4911      	ldr	r1, [pc, #68]	@ (8007064 <_dtoa_r+0x5c4>)
 8007020:	2000      	movs	r0, #0
 8007022:	f7f9 f931 	bl	8000288 <__aeabi_dsub>
 8007026:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800702a:	f7f9 fd57 	bl	8000adc <__aeabi_dcmplt>
 800702e:	2800      	cmp	r0, #0
 8007030:	f040 8095 	bne.w	800715e <_dtoa_r+0x6be>
 8007034:	42a6      	cmp	r6, r4
 8007036:	f43f af50 	beq.w	8006eda <_dtoa_r+0x43a>
 800703a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800703e:	4b0a      	ldr	r3, [pc, #40]	@ (8007068 <_dtoa_r+0x5c8>)
 8007040:	2200      	movs	r2, #0
 8007042:	f7f9 fad9 	bl	80005f8 <__aeabi_dmul>
 8007046:	4b08      	ldr	r3, [pc, #32]	@ (8007068 <_dtoa_r+0x5c8>)
 8007048:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800704c:	2200      	movs	r2, #0
 800704e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007052:	f7f9 fad1 	bl	80005f8 <__aeabi_dmul>
 8007056:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800705a:	e7c4      	b.n	8006fe6 <_dtoa_r+0x546>
 800705c:	0800a260 	.word	0x0800a260
 8007060:	0800a238 	.word	0x0800a238
 8007064:	3ff00000 	.word	0x3ff00000
 8007068:	40240000 	.word	0x40240000
 800706c:	401c0000 	.word	0x401c0000
 8007070:	40140000 	.word	0x40140000
 8007074:	3fe00000 	.word	0x3fe00000
 8007078:	4631      	mov	r1, r6
 800707a:	4628      	mov	r0, r5
 800707c:	f7f9 fabc 	bl	80005f8 <__aeabi_dmul>
 8007080:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007084:	9415      	str	r4, [sp, #84]	@ 0x54
 8007086:	4656      	mov	r6, sl
 8007088:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800708c:	f7f9 fd64 	bl	8000b58 <__aeabi_d2iz>
 8007090:	4605      	mov	r5, r0
 8007092:	f7f9 fa47 	bl	8000524 <__aeabi_i2d>
 8007096:	4602      	mov	r2, r0
 8007098:	460b      	mov	r3, r1
 800709a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800709e:	f7f9 f8f3 	bl	8000288 <__aeabi_dsub>
 80070a2:	3530      	adds	r5, #48	@ 0x30
 80070a4:	f806 5b01 	strb.w	r5, [r6], #1
 80070a8:	4602      	mov	r2, r0
 80070aa:	460b      	mov	r3, r1
 80070ac:	42a6      	cmp	r6, r4
 80070ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80070b2:	f04f 0200 	mov.w	r2, #0
 80070b6:	d124      	bne.n	8007102 <_dtoa_r+0x662>
 80070b8:	4bac      	ldr	r3, [pc, #688]	@ (800736c <_dtoa_r+0x8cc>)
 80070ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80070be:	f7f9 f8e5 	bl	800028c <__adddf3>
 80070c2:	4602      	mov	r2, r0
 80070c4:	460b      	mov	r3, r1
 80070c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070ca:	f7f9 fd25 	bl	8000b18 <__aeabi_dcmpgt>
 80070ce:	2800      	cmp	r0, #0
 80070d0:	d145      	bne.n	800715e <_dtoa_r+0x6be>
 80070d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80070d6:	49a5      	ldr	r1, [pc, #660]	@ (800736c <_dtoa_r+0x8cc>)
 80070d8:	2000      	movs	r0, #0
 80070da:	f7f9 f8d5 	bl	8000288 <__aeabi_dsub>
 80070de:	4602      	mov	r2, r0
 80070e0:	460b      	mov	r3, r1
 80070e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070e6:	f7f9 fcf9 	bl	8000adc <__aeabi_dcmplt>
 80070ea:	2800      	cmp	r0, #0
 80070ec:	f43f aef5 	beq.w	8006eda <_dtoa_r+0x43a>
 80070f0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80070f2:	1e73      	subs	r3, r6, #1
 80070f4:	9315      	str	r3, [sp, #84]	@ 0x54
 80070f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80070fa:	2b30      	cmp	r3, #48	@ 0x30
 80070fc:	d0f8      	beq.n	80070f0 <_dtoa_r+0x650>
 80070fe:	9f04      	ldr	r7, [sp, #16]
 8007100:	e73e      	b.n	8006f80 <_dtoa_r+0x4e0>
 8007102:	4b9b      	ldr	r3, [pc, #620]	@ (8007370 <_dtoa_r+0x8d0>)
 8007104:	f7f9 fa78 	bl	80005f8 <__aeabi_dmul>
 8007108:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800710c:	e7bc      	b.n	8007088 <_dtoa_r+0x5e8>
 800710e:	d10c      	bne.n	800712a <_dtoa_r+0x68a>
 8007110:	4b98      	ldr	r3, [pc, #608]	@ (8007374 <_dtoa_r+0x8d4>)
 8007112:	2200      	movs	r2, #0
 8007114:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007118:	f7f9 fa6e 	bl	80005f8 <__aeabi_dmul>
 800711c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007120:	f7f9 fcf0 	bl	8000b04 <__aeabi_dcmpge>
 8007124:	2800      	cmp	r0, #0
 8007126:	f000 8157 	beq.w	80073d8 <_dtoa_r+0x938>
 800712a:	2400      	movs	r4, #0
 800712c:	4625      	mov	r5, r4
 800712e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007130:	43db      	mvns	r3, r3
 8007132:	9304      	str	r3, [sp, #16]
 8007134:	4656      	mov	r6, sl
 8007136:	2700      	movs	r7, #0
 8007138:	4621      	mov	r1, r4
 800713a:	4658      	mov	r0, fp
 800713c:	f000 fbb4 	bl	80078a8 <_Bfree>
 8007140:	2d00      	cmp	r5, #0
 8007142:	d0dc      	beq.n	80070fe <_dtoa_r+0x65e>
 8007144:	b12f      	cbz	r7, 8007152 <_dtoa_r+0x6b2>
 8007146:	42af      	cmp	r7, r5
 8007148:	d003      	beq.n	8007152 <_dtoa_r+0x6b2>
 800714a:	4639      	mov	r1, r7
 800714c:	4658      	mov	r0, fp
 800714e:	f000 fbab 	bl	80078a8 <_Bfree>
 8007152:	4629      	mov	r1, r5
 8007154:	4658      	mov	r0, fp
 8007156:	f000 fba7 	bl	80078a8 <_Bfree>
 800715a:	e7d0      	b.n	80070fe <_dtoa_r+0x65e>
 800715c:	9704      	str	r7, [sp, #16]
 800715e:	4633      	mov	r3, r6
 8007160:	461e      	mov	r6, r3
 8007162:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007166:	2a39      	cmp	r2, #57	@ 0x39
 8007168:	d107      	bne.n	800717a <_dtoa_r+0x6da>
 800716a:	459a      	cmp	sl, r3
 800716c:	d1f8      	bne.n	8007160 <_dtoa_r+0x6c0>
 800716e:	9a04      	ldr	r2, [sp, #16]
 8007170:	3201      	adds	r2, #1
 8007172:	9204      	str	r2, [sp, #16]
 8007174:	2230      	movs	r2, #48	@ 0x30
 8007176:	f88a 2000 	strb.w	r2, [sl]
 800717a:	781a      	ldrb	r2, [r3, #0]
 800717c:	3201      	adds	r2, #1
 800717e:	701a      	strb	r2, [r3, #0]
 8007180:	e7bd      	b.n	80070fe <_dtoa_r+0x65e>
 8007182:	4b7b      	ldr	r3, [pc, #492]	@ (8007370 <_dtoa_r+0x8d0>)
 8007184:	2200      	movs	r2, #0
 8007186:	f7f9 fa37 	bl	80005f8 <__aeabi_dmul>
 800718a:	2200      	movs	r2, #0
 800718c:	2300      	movs	r3, #0
 800718e:	4604      	mov	r4, r0
 8007190:	460d      	mov	r5, r1
 8007192:	f7f9 fc99 	bl	8000ac8 <__aeabi_dcmpeq>
 8007196:	2800      	cmp	r0, #0
 8007198:	f43f aebb 	beq.w	8006f12 <_dtoa_r+0x472>
 800719c:	e6f0      	b.n	8006f80 <_dtoa_r+0x4e0>
 800719e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80071a0:	2a00      	cmp	r2, #0
 80071a2:	f000 80db 	beq.w	800735c <_dtoa_r+0x8bc>
 80071a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071a8:	2a01      	cmp	r2, #1
 80071aa:	f300 80bf 	bgt.w	800732c <_dtoa_r+0x88c>
 80071ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80071b0:	2a00      	cmp	r2, #0
 80071b2:	f000 80b7 	beq.w	8007324 <_dtoa_r+0x884>
 80071b6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80071ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80071bc:	4646      	mov	r6, r8
 80071be:	9a08      	ldr	r2, [sp, #32]
 80071c0:	2101      	movs	r1, #1
 80071c2:	441a      	add	r2, r3
 80071c4:	4658      	mov	r0, fp
 80071c6:	4498      	add	r8, r3
 80071c8:	9208      	str	r2, [sp, #32]
 80071ca:	f000 fc6b 	bl	8007aa4 <__i2b>
 80071ce:	4605      	mov	r5, r0
 80071d0:	b15e      	cbz	r6, 80071ea <_dtoa_r+0x74a>
 80071d2:	9b08      	ldr	r3, [sp, #32]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	dd08      	ble.n	80071ea <_dtoa_r+0x74a>
 80071d8:	42b3      	cmp	r3, r6
 80071da:	9a08      	ldr	r2, [sp, #32]
 80071dc:	bfa8      	it	ge
 80071de:	4633      	movge	r3, r6
 80071e0:	eba8 0803 	sub.w	r8, r8, r3
 80071e4:	1af6      	subs	r6, r6, r3
 80071e6:	1ad3      	subs	r3, r2, r3
 80071e8:	9308      	str	r3, [sp, #32]
 80071ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071ec:	b1f3      	cbz	r3, 800722c <_dtoa_r+0x78c>
 80071ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	f000 80b7 	beq.w	8007364 <_dtoa_r+0x8c4>
 80071f6:	b18c      	cbz	r4, 800721c <_dtoa_r+0x77c>
 80071f8:	4629      	mov	r1, r5
 80071fa:	4622      	mov	r2, r4
 80071fc:	4658      	mov	r0, fp
 80071fe:	f000 fd11 	bl	8007c24 <__pow5mult>
 8007202:	464a      	mov	r2, r9
 8007204:	4601      	mov	r1, r0
 8007206:	4605      	mov	r5, r0
 8007208:	4658      	mov	r0, fp
 800720a:	f000 fc61 	bl	8007ad0 <__multiply>
 800720e:	4649      	mov	r1, r9
 8007210:	9004      	str	r0, [sp, #16]
 8007212:	4658      	mov	r0, fp
 8007214:	f000 fb48 	bl	80078a8 <_Bfree>
 8007218:	9b04      	ldr	r3, [sp, #16]
 800721a:	4699      	mov	r9, r3
 800721c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800721e:	1b1a      	subs	r2, r3, r4
 8007220:	d004      	beq.n	800722c <_dtoa_r+0x78c>
 8007222:	4649      	mov	r1, r9
 8007224:	4658      	mov	r0, fp
 8007226:	f000 fcfd 	bl	8007c24 <__pow5mult>
 800722a:	4681      	mov	r9, r0
 800722c:	2101      	movs	r1, #1
 800722e:	4658      	mov	r0, fp
 8007230:	f000 fc38 	bl	8007aa4 <__i2b>
 8007234:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007236:	4604      	mov	r4, r0
 8007238:	2b00      	cmp	r3, #0
 800723a:	f000 81cf 	beq.w	80075dc <_dtoa_r+0xb3c>
 800723e:	461a      	mov	r2, r3
 8007240:	4601      	mov	r1, r0
 8007242:	4658      	mov	r0, fp
 8007244:	f000 fcee 	bl	8007c24 <__pow5mult>
 8007248:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800724a:	2b01      	cmp	r3, #1
 800724c:	4604      	mov	r4, r0
 800724e:	f300 8095 	bgt.w	800737c <_dtoa_r+0x8dc>
 8007252:	9b02      	ldr	r3, [sp, #8]
 8007254:	2b00      	cmp	r3, #0
 8007256:	f040 8087 	bne.w	8007368 <_dtoa_r+0x8c8>
 800725a:	9b03      	ldr	r3, [sp, #12]
 800725c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007260:	2b00      	cmp	r3, #0
 8007262:	f040 8089 	bne.w	8007378 <_dtoa_r+0x8d8>
 8007266:	9b03      	ldr	r3, [sp, #12]
 8007268:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800726c:	0d1b      	lsrs	r3, r3, #20
 800726e:	051b      	lsls	r3, r3, #20
 8007270:	b12b      	cbz	r3, 800727e <_dtoa_r+0x7de>
 8007272:	9b08      	ldr	r3, [sp, #32]
 8007274:	3301      	adds	r3, #1
 8007276:	9308      	str	r3, [sp, #32]
 8007278:	f108 0801 	add.w	r8, r8, #1
 800727c:	2301      	movs	r3, #1
 800727e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007280:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007282:	2b00      	cmp	r3, #0
 8007284:	f000 81b0 	beq.w	80075e8 <_dtoa_r+0xb48>
 8007288:	6923      	ldr	r3, [r4, #16]
 800728a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800728e:	6918      	ldr	r0, [r3, #16]
 8007290:	f000 fbbc 	bl	8007a0c <__hi0bits>
 8007294:	f1c0 0020 	rsb	r0, r0, #32
 8007298:	9b08      	ldr	r3, [sp, #32]
 800729a:	4418      	add	r0, r3
 800729c:	f010 001f 	ands.w	r0, r0, #31
 80072a0:	d077      	beq.n	8007392 <_dtoa_r+0x8f2>
 80072a2:	f1c0 0320 	rsb	r3, r0, #32
 80072a6:	2b04      	cmp	r3, #4
 80072a8:	dd6b      	ble.n	8007382 <_dtoa_r+0x8e2>
 80072aa:	9b08      	ldr	r3, [sp, #32]
 80072ac:	f1c0 001c 	rsb	r0, r0, #28
 80072b0:	4403      	add	r3, r0
 80072b2:	4480      	add	r8, r0
 80072b4:	4406      	add	r6, r0
 80072b6:	9308      	str	r3, [sp, #32]
 80072b8:	f1b8 0f00 	cmp.w	r8, #0
 80072bc:	dd05      	ble.n	80072ca <_dtoa_r+0x82a>
 80072be:	4649      	mov	r1, r9
 80072c0:	4642      	mov	r2, r8
 80072c2:	4658      	mov	r0, fp
 80072c4:	f000 fd08 	bl	8007cd8 <__lshift>
 80072c8:	4681      	mov	r9, r0
 80072ca:	9b08      	ldr	r3, [sp, #32]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	dd05      	ble.n	80072dc <_dtoa_r+0x83c>
 80072d0:	4621      	mov	r1, r4
 80072d2:	461a      	mov	r2, r3
 80072d4:	4658      	mov	r0, fp
 80072d6:	f000 fcff 	bl	8007cd8 <__lshift>
 80072da:	4604      	mov	r4, r0
 80072dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d059      	beq.n	8007396 <_dtoa_r+0x8f6>
 80072e2:	4621      	mov	r1, r4
 80072e4:	4648      	mov	r0, r9
 80072e6:	f000 fd63 	bl	8007db0 <__mcmp>
 80072ea:	2800      	cmp	r0, #0
 80072ec:	da53      	bge.n	8007396 <_dtoa_r+0x8f6>
 80072ee:	1e7b      	subs	r3, r7, #1
 80072f0:	9304      	str	r3, [sp, #16]
 80072f2:	4649      	mov	r1, r9
 80072f4:	2300      	movs	r3, #0
 80072f6:	220a      	movs	r2, #10
 80072f8:	4658      	mov	r0, fp
 80072fa:	f000 faf7 	bl	80078ec <__multadd>
 80072fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007300:	4681      	mov	r9, r0
 8007302:	2b00      	cmp	r3, #0
 8007304:	f000 8172 	beq.w	80075ec <_dtoa_r+0xb4c>
 8007308:	2300      	movs	r3, #0
 800730a:	4629      	mov	r1, r5
 800730c:	220a      	movs	r2, #10
 800730e:	4658      	mov	r0, fp
 8007310:	f000 faec 	bl	80078ec <__multadd>
 8007314:	9b00      	ldr	r3, [sp, #0]
 8007316:	2b00      	cmp	r3, #0
 8007318:	4605      	mov	r5, r0
 800731a:	dc67      	bgt.n	80073ec <_dtoa_r+0x94c>
 800731c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800731e:	2b02      	cmp	r3, #2
 8007320:	dc41      	bgt.n	80073a6 <_dtoa_r+0x906>
 8007322:	e063      	b.n	80073ec <_dtoa_r+0x94c>
 8007324:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007326:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800732a:	e746      	b.n	80071ba <_dtoa_r+0x71a>
 800732c:	9b07      	ldr	r3, [sp, #28]
 800732e:	1e5c      	subs	r4, r3, #1
 8007330:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007332:	42a3      	cmp	r3, r4
 8007334:	bfbf      	itttt	lt
 8007336:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007338:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800733a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800733c:	1ae3      	sublt	r3, r4, r3
 800733e:	bfb4      	ite	lt
 8007340:	18d2      	addlt	r2, r2, r3
 8007342:	1b1c      	subge	r4, r3, r4
 8007344:	9b07      	ldr	r3, [sp, #28]
 8007346:	bfbc      	itt	lt
 8007348:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800734a:	2400      	movlt	r4, #0
 800734c:	2b00      	cmp	r3, #0
 800734e:	bfb5      	itete	lt
 8007350:	eba8 0603 	sublt.w	r6, r8, r3
 8007354:	9b07      	ldrge	r3, [sp, #28]
 8007356:	2300      	movlt	r3, #0
 8007358:	4646      	movge	r6, r8
 800735a:	e730      	b.n	80071be <_dtoa_r+0x71e>
 800735c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800735e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007360:	4646      	mov	r6, r8
 8007362:	e735      	b.n	80071d0 <_dtoa_r+0x730>
 8007364:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007366:	e75c      	b.n	8007222 <_dtoa_r+0x782>
 8007368:	2300      	movs	r3, #0
 800736a:	e788      	b.n	800727e <_dtoa_r+0x7de>
 800736c:	3fe00000 	.word	0x3fe00000
 8007370:	40240000 	.word	0x40240000
 8007374:	40140000 	.word	0x40140000
 8007378:	9b02      	ldr	r3, [sp, #8]
 800737a:	e780      	b.n	800727e <_dtoa_r+0x7de>
 800737c:	2300      	movs	r3, #0
 800737e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007380:	e782      	b.n	8007288 <_dtoa_r+0x7e8>
 8007382:	d099      	beq.n	80072b8 <_dtoa_r+0x818>
 8007384:	9a08      	ldr	r2, [sp, #32]
 8007386:	331c      	adds	r3, #28
 8007388:	441a      	add	r2, r3
 800738a:	4498      	add	r8, r3
 800738c:	441e      	add	r6, r3
 800738e:	9208      	str	r2, [sp, #32]
 8007390:	e792      	b.n	80072b8 <_dtoa_r+0x818>
 8007392:	4603      	mov	r3, r0
 8007394:	e7f6      	b.n	8007384 <_dtoa_r+0x8e4>
 8007396:	9b07      	ldr	r3, [sp, #28]
 8007398:	9704      	str	r7, [sp, #16]
 800739a:	2b00      	cmp	r3, #0
 800739c:	dc20      	bgt.n	80073e0 <_dtoa_r+0x940>
 800739e:	9300      	str	r3, [sp, #0]
 80073a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073a2:	2b02      	cmp	r3, #2
 80073a4:	dd1e      	ble.n	80073e4 <_dtoa_r+0x944>
 80073a6:	9b00      	ldr	r3, [sp, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	f47f aec0 	bne.w	800712e <_dtoa_r+0x68e>
 80073ae:	4621      	mov	r1, r4
 80073b0:	2205      	movs	r2, #5
 80073b2:	4658      	mov	r0, fp
 80073b4:	f000 fa9a 	bl	80078ec <__multadd>
 80073b8:	4601      	mov	r1, r0
 80073ba:	4604      	mov	r4, r0
 80073bc:	4648      	mov	r0, r9
 80073be:	f000 fcf7 	bl	8007db0 <__mcmp>
 80073c2:	2800      	cmp	r0, #0
 80073c4:	f77f aeb3 	ble.w	800712e <_dtoa_r+0x68e>
 80073c8:	4656      	mov	r6, sl
 80073ca:	2331      	movs	r3, #49	@ 0x31
 80073cc:	f806 3b01 	strb.w	r3, [r6], #1
 80073d0:	9b04      	ldr	r3, [sp, #16]
 80073d2:	3301      	adds	r3, #1
 80073d4:	9304      	str	r3, [sp, #16]
 80073d6:	e6ae      	b.n	8007136 <_dtoa_r+0x696>
 80073d8:	9c07      	ldr	r4, [sp, #28]
 80073da:	9704      	str	r7, [sp, #16]
 80073dc:	4625      	mov	r5, r4
 80073de:	e7f3      	b.n	80073c8 <_dtoa_r+0x928>
 80073e0:	9b07      	ldr	r3, [sp, #28]
 80073e2:	9300      	str	r3, [sp, #0]
 80073e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	f000 8104 	beq.w	80075f4 <_dtoa_r+0xb54>
 80073ec:	2e00      	cmp	r6, #0
 80073ee:	dd05      	ble.n	80073fc <_dtoa_r+0x95c>
 80073f0:	4629      	mov	r1, r5
 80073f2:	4632      	mov	r2, r6
 80073f4:	4658      	mov	r0, fp
 80073f6:	f000 fc6f 	bl	8007cd8 <__lshift>
 80073fa:	4605      	mov	r5, r0
 80073fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d05a      	beq.n	80074b8 <_dtoa_r+0xa18>
 8007402:	6869      	ldr	r1, [r5, #4]
 8007404:	4658      	mov	r0, fp
 8007406:	f000 fa0f 	bl	8007828 <_Balloc>
 800740a:	4606      	mov	r6, r0
 800740c:	b928      	cbnz	r0, 800741a <_dtoa_r+0x97a>
 800740e:	4b84      	ldr	r3, [pc, #528]	@ (8007620 <_dtoa_r+0xb80>)
 8007410:	4602      	mov	r2, r0
 8007412:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007416:	f7ff bb5a 	b.w	8006ace <_dtoa_r+0x2e>
 800741a:	692a      	ldr	r2, [r5, #16]
 800741c:	3202      	adds	r2, #2
 800741e:	0092      	lsls	r2, r2, #2
 8007420:	f105 010c 	add.w	r1, r5, #12
 8007424:	300c      	adds	r0, #12
 8007426:	f002 f93b 	bl	80096a0 <memcpy>
 800742a:	2201      	movs	r2, #1
 800742c:	4631      	mov	r1, r6
 800742e:	4658      	mov	r0, fp
 8007430:	f000 fc52 	bl	8007cd8 <__lshift>
 8007434:	f10a 0301 	add.w	r3, sl, #1
 8007438:	9307      	str	r3, [sp, #28]
 800743a:	9b00      	ldr	r3, [sp, #0]
 800743c:	4453      	add	r3, sl
 800743e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007440:	9b02      	ldr	r3, [sp, #8]
 8007442:	f003 0301 	and.w	r3, r3, #1
 8007446:	462f      	mov	r7, r5
 8007448:	930a      	str	r3, [sp, #40]	@ 0x28
 800744a:	4605      	mov	r5, r0
 800744c:	9b07      	ldr	r3, [sp, #28]
 800744e:	4621      	mov	r1, r4
 8007450:	3b01      	subs	r3, #1
 8007452:	4648      	mov	r0, r9
 8007454:	9300      	str	r3, [sp, #0]
 8007456:	f7ff fa9b 	bl	8006990 <quorem>
 800745a:	4639      	mov	r1, r7
 800745c:	9002      	str	r0, [sp, #8]
 800745e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007462:	4648      	mov	r0, r9
 8007464:	f000 fca4 	bl	8007db0 <__mcmp>
 8007468:	462a      	mov	r2, r5
 800746a:	9008      	str	r0, [sp, #32]
 800746c:	4621      	mov	r1, r4
 800746e:	4658      	mov	r0, fp
 8007470:	f000 fcba 	bl	8007de8 <__mdiff>
 8007474:	68c2      	ldr	r2, [r0, #12]
 8007476:	4606      	mov	r6, r0
 8007478:	bb02      	cbnz	r2, 80074bc <_dtoa_r+0xa1c>
 800747a:	4601      	mov	r1, r0
 800747c:	4648      	mov	r0, r9
 800747e:	f000 fc97 	bl	8007db0 <__mcmp>
 8007482:	4602      	mov	r2, r0
 8007484:	4631      	mov	r1, r6
 8007486:	4658      	mov	r0, fp
 8007488:	920e      	str	r2, [sp, #56]	@ 0x38
 800748a:	f000 fa0d 	bl	80078a8 <_Bfree>
 800748e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007490:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007492:	9e07      	ldr	r6, [sp, #28]
 8007494:	ea43 0102 	orr.w	r1, r3, r2
 8007498:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800749a:	4319      	orrs	r1, r3
 800749c:	d110      	bne.n	80074c0 <_dtoa_r+0xa20>
 800749e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80074a2:	d029      	beq.n	80074f8 <_dtoa_r+0xa58>
 80074a4:	9b08      	ldr	r3, [sp, #32]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	dd02      	ble.n	80074b0 <_dtoa_r+0xa10>
 80074aa:	9b02      	ldr	r3, [sp, #8]
 80074ac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80074b0:	9b00      	ldr	r3, [sp, #0]
 80074b2:	f883 8000 	strb.w	r8, [r3]
 80074b6:	e63f      	b.n	8007138 <_dtoa_r+0x698>
 80074b8:	4628      	mov	r0, r5
 80074ba:	e7bb      	b.n	8007434 <_dtoa_r+0x994>
 80074bc:	2201      	movs	r2, #1
 80074be:	e7e1      	b.n	8007484 <_dtoa_r+0x9e4>
 80074c0:	9b08      	ldr	r3, [sp, #32]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	db04      	blt.n	80074d0 <_dtoa_r+0xa30>
 80074c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80074c8:	430b      	orrs	r3, r1
 80074ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80074cc:	430b      	orrs	r3, r1
 80074ce:	d120      	bne.n	8007512 <_dtoa_r+0xa72>
 80074d0:	2a00      	cmp	r2, #0
 80074d2:	dded      	ble.n	80074b0 <_dtoa_r+0xa10>
 80074d4:	4649      	mov	r1, r9
 80074d6:	2201      	movs	r2, #1
 80074d8:	4658      	mov	r0, fp
 80074da:	f000 fbfd 	bl	8007cd8 <__lshift>
 80074de:	4621      	mov	r1, r4
 80074e0:	4681      	mov	r9, r0
 80074e2:	f000 fc65 	bl	8007db0 <__mcmp>
 80074e6:	2800      	cmp	r0, #0
 80074e8:	dc03      	bgt.n	80074f2 <_dtoa_r+0xa52>
 80074ea:	d1e1      	bne.n	80074b0 <_dtoa_r+0xa10>
 80074ec:	f018 0f01 	tst.w	r8, #1
 80074f0:	d0de      	beq.n	80074b0 <_dtoa_r+0xa10>
 80074f2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80074f6:	d1d8      	bne.n	80074aa <_dtoa_r+0xa0a>
 80074f8:	9a00      	ldr	r2, [sp, #0]
 80074fa:	2339      	movs	r3, #57	@ 0x39
 80074fc:	7013      	strb	r3, [r2, #0]
 80074fe:	4633      	mov	r3, r6
 8007500:	461e      	mov	r6, r3
 8007502:	3b01      	subs	r3, #1
 8007504:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007508:	2a39      	cmp	r2, #57	@ 0x39
 800750a:	d052      	beq.n	80075b2 <_dtoa_r+0xb12>
 800750c:	3201      	adds	r2, #1
 800750e:	701a      	strb	r2, [r3, #0]
 8007510:	e612      	b.n	8007138 <_dtoa_r+0x698>
 8007512:	2a00      	cmp	r2, #0
 8007514:	dd07      	ble.n	8007526 <_dtoa_r+0xa86>
 8007516:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800751a:	d0ed      	beq.n	80074f8 <_dtoa_r+0xa58>
 800751c:	9a00      	ldr	r2, [sp, #0]
 800751e:	f108 0301 	add.w	r3, r8, #1
 8007522:	7013      	strb	r3, [r2, #0]
 8007524:	e608      	b.n	8007138 <_dtoa_r+0x698>
 8007526:	9b07      	ldr	r3, [sp, #28]
 8007528:	9a07      	ldr	r2, [sp, #28]
 800752a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800752e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007530:	4293      	cmp	r3, r2
 8007532:	d028      	beq.n	8007586 <_dtoa_r+0xae6>
 8007534:	4649      	mov	r1, r9
 8007536:	2300      	movs	r3, #0
 8007538:	220a      	movs	r2, #10
 800753a:	4658      	mov	r0, fp
 800753c:	f000 f9d6 	bl	80078ec <__multadd>
 8007540:	42af      	cmp	r7, r5
 8007542:	4681      	mov	r9, r0
 8007544:	f04f 0300 	mov.w	r3, #0
 8007548:	f04f 020a 	mov.w	r2, #10
 800754c:	4639      	mov	r1, r7
 800754e:	4658      	mov	r0, fp
 8007550:	d107      	bne.n	8007562 <_dtoa_r+0xac2>
 8007552:	f000 f9cb 	bl	80078ec <__multadd>
 8007556:	4607      	mov	r7, r0
 8007558:	4605      	mov	r5, r0
 800755a:	9b07      	ldr	r3, [sp, #28]
 800755c:	3301      	adds	r3, #1
 800755e:	9307      	str	r3, [sp, #28]
 8007560:	e774      	b.n	800744c <_dtoa_r+0x9ac>
 8007562:	f000 f9c3 	bl	80078ec <__multadd>
 8007566:	4629      	mov	r1, r5
 8007568:	4607      	mov	r7, r0
 800756a:	2300      	movs	r3, #0
 800756c:	220a      	movs	r2, #10
 800756e:	4658      	mov	r0, fp
 8007570:	f000 f9bc 	bl	80078ec <__multadd>
 8007574:	4605      	mov	r5, r0
 8007576:	e7f0      	b.n	800755a <_dtoa_r+0xaba>
 8007578:	9b00      	ldr	r3, [sp, #0]
 800757a:	2b00      	cmp	r3, #0
 800757c:	bfcc      	ite	gt
 800757e:	461e      	movgt	r6, r3
 8007580:	2601      	movle	r6, #1
 8007582:	4456      	add	r6, sl
 8007584:	2700      	movs	r7, #0
 8007586:	4649      	mov	r1, r9
 8007588:	2201      	movs	r2, #1
 800758a:	4658      	mov	r0, fp
 800758c:	f000 fba4 	bl	8007cd8 <__lshift>
 8007590:	4621      	mov	r1, r4
 8007592:	4681      	mov	r9, r0
 8007594:	f000 fc0c 	bl	8007db0 <__mcmp>
 8007598:	2800      	cmp	r0, #0
 800759a:	dcb0      	bgt.n	80074fe <_dtoa_r+0xa5e>
 800759c:	d102      	bne.n	80075a4 <_dtoa_r+0xb04>
 800759e:	f018 0f01 	tst.w	r8, #1
 80075a2:	d1ac      	bne.n	80074fe <_dtoa_r+0xa5e>
 80075a4:	4633      	mov	r3, r6
 80075a6:	461e      	mov	r6, r3
 80075a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075ac:	2a30      	cmp	r2, #48	@ 0x30
 80075ae:	d0fa      	beq.n	80075a6 <_dtoa_r+0xb06>
 80075b0:	e5c2      	b.n	8007138 <_dtoa_r+0x698>
 80075b2:	459a      	cmp	sl, r3
 80075b4:	d1a4      	bne.n	8007500 <_dtoa_r+0xa60>
 80075b6:	9b04      	ldr	r3, [sp, #16]
 80075b8:	3301      	adds	r3, #1
 80075ba:	9304      	str	r3, [sp, #16]
 80075bc:	2331      	movs	r3, #49	@ 0x31
 80075be:	f88a 3000 	strb.w	r3, [sl]
 80075c2:	e5b9      	b.n	8007138 <_dtoa_r+0x698>
 80075c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80075c6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007624 <_dtoa_r+0xb84>
 80075ca:	b11b      	cbz	r3, 80075d4 <_dtoa_r+0xb34>
 80075cc:	f10a 0308 	add.w	r3, sl, #8
 80075d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80075d2:	6013      	str	r3, [r2, #0]
 80075d4:	4650      	mov	r0, sl
 80075d6:	b019      	add	sp, #100	@ 0x64
 80075d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075de:	2b01      	cmp	r3, #1
 80075e0:	f77f ae37 	ble.w	8007252 <_dtoa_r+0x7b2>
 80075e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80075e8:	2001      	movs	r0, #1
 80075ea:	e655      	b.n	8007298 <_dtoa_r+0x7f8>
 80075ec:	9b00      	ldr	r3, [sp, #0]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	f77f aed6 	ble.w	80073a0 <_dtoa_r+0x900>
 80075f4:	4656      	mov	r6, sl
 80075f6:	4621      	mov	r1, r4
 80075f8:	4648      	mov	r0, r9
 80075fa:	f7ff f9c9 	bl	8006990 <quorem>
 80075fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007602:	f806 8b01 	strb.w	r8, [r6], #1
 8007606:	9b00      	ldr	r3, [sp, #0]
 8007608:	eba6 020a 	sub.w	r2, r6, sl
 800760c:	4293      	cmp	r3, r2
 800760e:	ddb3      	ble.n	8007578 <_dtoa_r+0xad8>
 8007610:	4649      	mov	r1, r9
 8007612:	2300      	movs	r3, #0
 8007614:	220a      	movs	r2, #10
 8007616:	4658      	mov	r0, fp
 8007618:	f000 f968 	bl	80078ec <__multadd>
 800761c:	4681      	mov	r9, r0
 800761e:	e7ea      	b.n	80075f6 <_dtoa_r+0xb56>
 8007620:	0800a1bd 	.word	0x0800a1bd
 8007624:	0800a141 	.word	0x0800a141

08007628 <_free_r>:
 8007628:	b538      	push	{r3, r4, r5, lr}
 800762a:	4605      	mov	r5, r0
 800762c:	2900      	cmp	r1, #0
 800762e:	d041      	beq.n	80076b4 <_free_r+0x8c>
 8007630:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007634:	1f0c      	subs	r4, r1, #4
 8007636:	2b00      	cmp	r3, #0
 8007638:	bfb8      	it	lt
 800763a:	18e4      	addlt	r4, r4, r3
 800763c:	f000 f8e8 	bl	8007810 <__malloc_lock>
 8007640:	4a1d      	ldr	r2, [pc, #116]	@ (80076b8 <_free_r+0x90>)
 8007642:	6813      	ldr	r3, [r2, #0]
 8007644:	b933      	cbnz	r3, 8007654 <_free_r+0x2c>
 8007646:	6063      	str	r3, [r4, #4]
 8007648:	6014      	str	r4, [r2, #0]
 800764a:	4628      	mov	r0, r5
 800764c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007650:	f000 b8e4 	b.w	800781c <__malloc_unlock>
 8007654:	42a3      	cmp	r3, r4
 8007656:	d908      	bls.n	800766a <_free_r+0x42>
 8007658:	6820      	ldr	r0, [r4, #0]
 800765a:	1821      	adds	r1, r4, r0
 800765c:	428b      	cmp	r3, r1
 800765e:	bf01      	itttt	eq
 8007660:	6819      	ldreq	r1, [r3, #0]
 8007662:	685b      	ldreq	r3, [r3, #4]
 8007664:	1809      	addeq	r1, r1, r0
 8007666:	6021      	streq	r1, [r4, #0]
 8007668:	e7ed      	b.n	8007646 <_free_r+0x1e>
 800766a:	461a      	mov	r2, r3
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	b10b      	cbz	r3, 8007674 <_free_r+0x4c>
 8007670:	42a3      	cmp	r3, r4
 8007672:	d9fa      	bls.n	800766a <_free_r+0x42>
 8007674:	6811      	ldr	r1, [r2, #0]
 8007676:	1850      	adds	r0, r2, r1
 8007678:	42a0      	cmp	r0, r4
 800767a:	d10b      	bne.n	8007694 <_free_r+0x6c>
 800767c:	6820      	ldr	r0, [r4, #0]
 800767e:	4401      	add	r1, r0
 8007680:	1850      	adds	r0, r2, r1
 8007682:	4283      	cmp	r3, r0
 8007684:	6011      	str	r1, [r2, #0]
 8007686:	d1e0      	bne.n	800764a <_free_r+0x22>
 8007688:	6818      	ldr	r0, [r3, #0]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	6053      	str	r3, [r2, #4]
 800768e:	4408      	add	r0, r1
 8007690:	6010      	str	r0, [r2, #0]
 8007692:	e7da      	b.n	800764a <_free_r+0x22>
 8007694:	d902      	bls.n	800769c <_free_r+0x74>
 8007696:	230c      	movs	r3, #12
 8007698:	602b      	str	r3, [r5, #0]
 800769a:	e7d6      	b.n	800764a <_free_r+0x22>
 800769c:	6820      	ldr	r0, [r4, #0]
 800769e:	1821      	adds	r1, r4, r0
 80076a0:	428b      	cmp	r3, r1
 80076a2:	bf04      	itt	eq
 80076a4:	6819      	ldreq	r1, [r3, #0]
 80076a6:	685b      	ldreq	r3, [r3, #4]
 80076a8:	6063      	str	r3, [r4, #4]
 80076aa:	bf04      	itt	eq
 80076ac:	1809      	addeq	r1, r1, r0
 80076ae:	6021      	streq	r1, [r4, #0]
 80076b0:	6054      	str	r4, [r2, #4]
 80076b2:	e7ca      	b.n	800764a <_free_r+0x22>
 80076b4:	bd38      	pop	{r3, r4, r5, pc}
 80076b6:	bf00      	nop
 80076b8:	200015d0 	.word	0x200015d0

080076bc <malloc>:
 80076bc:	4b02      	ldr	r3, [pc, #8]	@ (80076c8 <malloc+0xc>)
 80076be:	4601      	mov	r1, r0
 80076c0:	6818      	ldr	r0, [r3, #0]
 80076c2:	f000 b825 	b.w	8007710 <_malloc_r>
 80076c6:	bf00      	nop
 80076c8:	2000001c 	.word	0x2000001c

080076cc <sbrk_aligned>:
 80076cc:	b570      	push	{r4, r5, r6, lr}
 80076ce:	4e0f      	ldr	r6, [pc, #60]	@ (800770c <sbrk_aligned+0x40>)
 80076d0:	460c      	mov	r4, r1
 80076d2:	6831      	ldr	r1, [r6, #0]
 80076d4:	4605      	mov	r5, r0
 80076d6:	b911      	cbnz	r1, 80076de <sbrk_aligned+0x12>
 80076d8:	f001 ffd2 	bl	8009680 <_sbrk_r>
 80076dc:	6030      	str	r0, [r6, #0]
 80076de:	4621      	mov	r1, r4
 80076e0:	4628      	mov	r0, r5
 80076e2:	f001 ffcd 	bl	8009680 <_sbrk_r>
 80076e6:	1c43      	adds	r3, r0, #1
 80076e8:	d103      	bne.n	80076f2 <sbrk_aligned+0x26>
 80076ea:	f04f 34ff 	mov.w	r4, #4294967295
 80076ee:	4620      	mov	r0, r4
 80076f0:	bd70      	pop	{r4, r5, r6, pc}
 80076f2:	1cc4      	adds	r4, r0, #3
 80076f4:	f024 0403 	bic.w	r4, r4, #3
 80076f8:	42a0      	cmp	r0, r4
 80076fa:	d0f8      	beq.n	80076ee <sbrk_aligned+0x22>
 80076fc:	1a21      	subs	r1, r4, r0
 80076fe:	4628      	mov	r0, r5
 8007700:	f001 ffbe 	bl	8009680 <_sbrk_r>
 8007704:	3001      	adds	r0, #1
 8007706:	d1f2      	bne.n	80076ee <sbrk_aligned+0x22>
 8007708:	e7ef      	b.n	80076ea <sbrk_aligned+0x1e>
 800770a:	bf00      	nop
 800770c:	200015cc 	.word	0x200015cc

08007710 <_malloc_r>:
 8007710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007714:	1ccd      	adds	r5, r1, #3
 8007716:	f025 0503 	bic.w	r5, r5, #3
 800771a:	3508      	adds	r5, #8
 800771c:	2d0c      	cmp	r5, #12
 800771e:	bf38      	it	cc
 8007720:	250c      	movcc	r5, #12
 8007722:	2d00      	cmp	r5, #0
 8007724:	4606      	mov	r6, r0
 8007726:	db01      	blt.n	800772c <_malloc_r+0x1c>
 8007728:	42a9      	cmp	r1, r5
 800772a:	d904      	bls.n	8007736 <_malloc_r+0x26>
 800772c:	230c      	movs	r3, #12
 800772e:	6033      	str	r3, [r6, #0]
 8007730:	2000      	movs	r0, #0
 8007732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007736:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800780c <_malloc_r+0xfc>
 800773a:	f000 f869 	bl	8007810 <__malloc_lock>
 800773e:	f8d8 3000 	ldr.w	r3, [r8]
 8007742:	461c      	mov	r4, r3
 8007744:	bb44      	cbnz	r4, 8007798 <_malloc_r+0x88>
 8007746:	4629      	mov	r1, r5
 8007748:	4630      	mov	r0, r6
 800774a:	f7ff ffbf 	bl	80076cc <sbrk_aligned>
 800774e:	1c43      	adds	r3, r0, #1
 8007750:	4604      	mov	r4, r0
 8007752:	d158      	bne.n	8007806 <_malloc_r+0xf6>
 8007754:	f8d8 4000 	ldr.w	r4, [r8]
 8007758:	4627      	mov	r7, r4
 800775a:	2f00      	cmp	r7, #0
 800775c:	d143      	bne.n	80077e6 <_malloc_r+0xd6>
 800775e:	2c00      	cmp	r4, #0
 8007760:	d04b      	beq.n	80077fa <_malloc_r+0xea>
 8007762:	6823      	ldr	r3, [r4, #0]
 8007764:	4639      	mov	r1, r7
 8007766:	4630      	mov	r0, r6
 8007768:	eb04 0903 	add.w	r9, r4, r3
 800776c:	f001 ff88 	bl	8009680 <_sbrk_r>
 8007770:	4581      	cmp	r9, r0
 8007772:	d142      	bne.n	80077fa <_malloc_r+0xea>
 8007774:	6821      	ldr	r1, [r4, #0]
 8007776:	1a6d      	subs	r5, r5, r1
 8007778:	4629      	mov	r1, r5
 800777a:	4630      	mov	r0, r6
 800777c:	f7ff ffa6 	bl	80076cc <sbrk_aligned>
 8007780:	3001      	adds	r0, #1
 8007782:	d03a      	beq.n	80077fa <_malloc_r+0xea>
 8007784:	6823      	ldr	r3, [r4, #0]
 8007786:	442b      	add	r3, r5
 8007788:	6023      	str	r3, [r4, #0]
 800778a:	f8d8 3000 	ldr.w	r3, [r8]
 800778e:	685a      	ldr	r2, [r3, #4]
 8007790:	bb62      	cbnz	r2, 80077ec <_malloc_r+0xdc>
 8007792:	f8c8 7000 	str.w	r7, [r8]
 8007796:	e00f      	b.n	80077b8 <_malloc_r+0xa8>
 8007798:	6822      	ldr	r2, [r4, #0]
 800779a:	1b52      	subs	r2, r2, r5
 800779c:	d420      	bmi.n	80077e0 <_malloc_r+0xd0>
 800779e:	2a0b      	cmp	r2, #11
 80077a0:	d917      	bls.n	80077d2 <_malloc_r+0xc2>
 80077a2:	1961      	adds	r1, r4, r5
 80077a4:	42a3      	cmp	r3, r4
 80077a6:	6025      	str	r5, [r4, #0]
 80077a8:	bf18      	it	ne
 80077aa:	6059      	strne	r1, [r3, #4]
 80077ac:	6863      	ldr	r3, [r4, #4]
 80077ae:	bf08      	it	eq
 80077b0:	f8c8 1000 	streq.w	r1, [r8]
 80077b4:	5162      	str	r2, [r4, r5]
 80077b6:	604b      	str	r3, [r1, #4]
 80077b8:	4630      	mov	r0, r6
 80077ba:	f000 f82f 	bl	800781c <__malloc_unlock>
 80077be:	f104 000b 	add.w	r0, r4, #11
 80077c2:	1d23      	adds	r3, r4, #4
 80077c4:	f020 0007 	bic.w	r0, r0, #7
 80077c8:	1ac2      	subs	r2, r0, r3
 80077ca:	bf1c      	itt	ne
 80077cc:	1a1b      	subne	r3, r3, r0
 80077ce:	50a3      	strne	r3, [r4, r2]
 80077d0:	e7af      	b.n	8007732 <_malloc_r+0x22>
 80077d2:	6862      	ldr	r2, [r4, #4]
 80077d4:	42a3      	cmp	r3, r4
 80077d6:	bf0c      	ite	eq
 80077d8:	f8c8 2000 	streq.w	r2, [r8]
 80077dc:	605a      	strne	r2, [r3, #4]
 80077de:	e7eb      	b.n	80077b8 <_malloc_r+0xa8>
 80077e0:	4623      	mov	r3, r4
 80077e2:	6864      	ldr	r4, [r4, #4]
 80077e4:	e7ae      	b.n	8007744 <_malloc_r+0x34>
 80077e6:	463c      	mov	r4, r7
 80077e8:	687f      	ldr	r7, [r7, #4]
 80077ea:	e7b6      	b.n	800775a <_malloc_r+0x4a>
 80077ec:	461a      	mov	r2, r3
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	42a3      	cmp	r3, r4
 80077f2:	d1fb      	bne.n	80077ec <_malloc_r+0xdc>
 80077f4:	2300      	movs	r3, #0
 80077f6:	6053      	str	r3, [r2, #4]
 80077f8:	e7de      	b.n	80077b8 <_malloc_r+0xa8>
 80077fa:	230c      	movs	r3, #12
 80077fc:	6033      	str	r3, [r6, #0]
 80077fe:	4630      	mov	r0, r6
 8007800:	f000 f80c 	bl	800781c <__malloc_unlock>
 8007804:	e794      	b.n	8007730 <_malloc_r+0x20>
 8007806:	6005      	str	r5, [r0, #0]
 8007808:	e7d6      	b.n	80077b8 <_malloc_r+0xa8>
 800780a:	bf00      	nop
 800780c:	200015d0 	.word	0x200015d0

08007810 <__malloc_lock>:
 8007810:	4801      	ldr	r0, [pc, #4]	@ (8007818 <__malloc_lock+0x8>)
 8007812:	f7ff b8b4 	b.w	800697e <__retarget_lock_acquire_recursive>
 8007816:	bf00      	nop
 8007818:	200015c8 	.word	0x200015c8

0800781c <__malloc_unlock>:
 800781c:	4801      	ldr	r0, [pc, #4]	@ (8007824 <__malloc_unlock+0x8>)
 800781e:	f7ff b8af 	b.w	8006980 <__retarget_lock_release_recursive>
 8007822:	bf00      	nop
 8007824:	200015c8 	.word	0x200015c8

08007828 <_Balloc>:
 8007828:	b570      	push	{r4, r5, r6, lr}
 800782a:	69c6      	ldr	r6, [r0, #28]
 800782c:	4604      	mov	r4, r0
 800782e:	460d      	mov	r5, r1
 8007830:	b976      	cbnz	r6, 8007850 <_Balloc+0x28>
 8007832:	2010      	movs	r0, #16
 8007834:	f7ff ff42 	bl	80076bc <malloc>
 8007838:	4602      	mov	r2, r0
 800783a:	61e0      	str	r0, [r4, #28]
 800783c:	b920      	cbnz	r0, 8007848 <_Balloc+0x20>
 800783e:	4b18      	ldr	r3, [pc, #96]	@ (80078a0 <_Balloc+0x78>)
 8007840:	4818      	ldr	r0, [pc, #96]	@ (80078a4 <_Balloc+0x7c>)
 8007842:	216b      	movs	r1, #107	@ 0x6b
 8007844:	f001 ff44 	bl	80096d0 <__assert_func>
 8007848:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800784c:	6006      	str	r6, [r0, #0]
 800784e:	60c6      	str	r6, [r0, #12]
 8007850:	69e6      	ldr	r6, [r4, #28]
 8007852:	68f3      	ldr	r3, [r6, #12]
 8007854:	b183      	cbz	r3, 8007878 <_Balloc+0x50>
 8007856:	69e3      	ldr	r3, [r4, #28]
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800785e:	b9b8      	cbnz	r0, 8007890 <_Balloc+0x68>
 8007860:	2101      	movs	r1, #1
 8007862:	fa01 f605 	lsl.w	r6, r1, r5
 8007866:	1d72      	adds	r2, r6, #5
 8007868:	0092      	lsls	r2, r2, #2
 800786a:	4620      	mov	r0, r4
 800786c:	f001 ff4e 	bl	800970c <_calloc_r>
 8007870:	b160      	cbz	r0, 800788c <_Balloc+0x64>
 8007872:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007876:	e00e      	b.n	8007896 <_Balloc+0x6e>
 8007878:	2221      	movs	r2, #33	@ 0x21
 800787a:	2104      	movs	r1, #4
 800787c:	4620      	mov	r0, r4
 800787e:	f001 ff45 	bl	800970c <_calloc_r>
 8007882:	69e3      	ldr	r3, [r4, #28]
 8007884:	60f0      	str	r0, [r6, #12]
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d1e4      	bne.n	8007856 <_Balloc+0x2e>
 800788c:	2000      	movs	r0, #0
 800788e:	bd70      	pop	{r4, r5, r6, pc}
 8007890:	6802      	ldr	r2, [r0, #0]
 8007892:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007896:	2300      	movs	r3, #0
 8007898:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800789c:	e7f7      	b.n	800788e <_Balloc+0x66>
 800789e:	bf00      	nop
 80078a0:	0800a14e 	.word	0x0800a14e
 80078a4:	0800a1ce 	.word	0x0800a1ce

080078a8 <_Bfree>:
 80078a8:	b570      	push	{r4, r5, r6, lr}
 80078aa:	69c6      	ldr	r6, [r0, #28]
 80078ac:	4605      	mov	r5, r0
 80078ae:	460c      	mov	r4, r1
 80078b0:	b976      	cbnz	r6, 80078d0 <_Bfree+0x28>
 80078b2:	2010      	movs	r0, #16
 80078b4:	f7ff ff02 	bl	80076bc <malloc>
 80078b8:	4602      	mov	r2, r0
 80078ba:	61e8      	str	r0, [r5, #28]
 80078bc:	b920      	cbnz	r0, 80078c8 <_Bfree+0x20>
 80078be:	4b09      	ldr	r3, [pc, #36]	@ (80078e4 <_Bfree+0x3c>)
 80078c0:	4809      	ldr	r0, [pc, #36]	@ (80078e8 <_Bfree+0x40>)
 80078c2:	218f      	movs	r1, #143	@ 0x8f
 80078c4:	f001 ff04 	bl	80096d0 <__assert_func>
 80078c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078cc:	6006      	str	r6, [r0, #0]
 80078ce:	60c6      	str	r6, [r0, #12]
 80078d0:	b13c      	cbz	r4, 80078e2 <_Bfree+0x3a>
 80078d2:	69eb      	ldr	r3, [r5, #28]
 80078d4:	6862      	ldr	r2, [r4, #4]
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80078dc:	6021      	str	r1, [r4, #0]
 80078de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80078e2:	bd70      	pop	{r4, r5, r6, pc}
 80078e4:	0800a14e 	.word	0x0800a14e
 80078e8:	0800a1ce 	.word	0x0800a1ce

080078ec <__multadd>:
 80078ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078f0:	690d      	ldr	r5, [r1, #16]
 80078f2:	4607      	mov	r7, r0
 80078f4:	460c      	mov	r4, r1
 80078f6:	461e      	mov	r6, r3
 80078f8:	f101 0c14 	add.w	ip, r1, #20
 80078fc:	2000      	movs	r0, #0
 80078fe:	f8dc 3000 	ldr.w	r3, [ip]
 8007902:	b299      	uxth	r1, r3
 8007904:	fb02 6101 	mla	r1, r2, r1, r6
 8007908:	0c1e      	lsrs	r6, r3, #16
 800790a:	0c0b      	lsrs	r3, r1, #16
 800790c:	fb02 3306 	mla	r3, r2, r6, r3
 8007910:	b289      	uxth	r1, r1
 8007912:	3001      	adds	r0, #1
 8007914:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007918:	4285      	cmp	r5, r0
 800791a:	f84c 1b04 	str.w	r1, [ip], #4
 800791e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007922:	dcec      	bgt.n	80078fe <__multadd+0x12>
 8007924:	b30e      	cbz	r6, 800796a <__multadd+0x7e>
 8007926:	68a3      	ldr	r3, [r4, #8]
 8007928:	42ab      	cmp	r3, r5
 800792a:	dc19      	bgt.n	8007960 <__multadd+0x74>
 800792c:	6861      	ldr	r1, [r4, #4]
 800792e:	4638      	mov	r0, r7
 8007930:	3101      	adds	r1, #1
 8007932:	f7ff ff79 	bl	8007828 <_Balloc>
 8007936:	4680      	mov	r8, r0
 8007938:	b928      	cbnz	r0, 8007946 <__multadd+0x5a>
 800793a:	4602      	mov	r2, r0
 800793c:	4b0c      	ldr	r3, [pc, #48]	@ (8007970 <__multadd+0x84>)
 800793e:	480d      	ldr	r0, [pc, #52]	@ (8007974 <__multadd+0x88>)
 8007940:	21ba      	movs	r1, #186	@ 0xba
 8007942:	f001 fec5 	bl	80096d0 <__assert_func>
 8007946:	6922      	ldr	r2, [r4, #16]
 8007948:	3202      	adds	r2, #2
 800794a:	f104 010c 	add.w	r1, r4, #12
 800794e:	0092      	lsls	r2, r2, #2
 8007950:	300c      	adds	r0, #12
 8007952:	f001 fea5 	bl	80096a0 <memcpy>
 8007956:	4621      	mov	r1, r4
 8007958:	4638      	mov	r0, r7
 800795a:	f7ff ffa5 	bl	80078a8 <_Bfree>
 800795e:	4644      	mov	r4, r8
 8007960:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007964:	3501      	adds	r5, #1
 8007966:	615e      	str	r6, [r3, #20]
 8007968:	6125      	str	r5, [r4, #16]
 800796a:	4620      	mov	r0, r4
 800796c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007970:	0800a1bd 	.word	0x0800a1bd
 8007974:	0800a1ce 	.word	0x0800a1ce

08007978 <__s2b>:
 8007978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800797c:	460c      	mov	r4, r1
 800797e:	4615      	mov	r5, r2
 8007980:	461f      	mov	r7, r3
 8007982:	2209      	movs	r2, #9
 8007984:	3308      	adds	r3, #8
 8007986:	4606      	mov	r6, r0
 8007988:	fb93 f3f2 	sdiv	r3, r3, r2
 800798c:	2100      	movs	r1, #0
 800798e:	2201      	movs	r2, #1
 8007990:	429a      	cmp	r2, r3
 8007992:	db09      	blt.n	80079a8 <__s2b+0x30>
 8007994:	4630      	mov	r0, r6
 8007996:	f7ff ff47 	bl	8007828 <_Balloc>
 800799a:	b940      	cbnz	r0, 80079ae <__s2b+0x36>
 800799c:	4602      	mov	r2, r0
 800799e:	4b19      	ldr	r3, [pc, #100]	@ (8007a04 <__s2b+0x8c>)
 80079a0:	4819      	ldr	r0, [pc, #100]	@ (8007a08 <__s2b+0x90>)
 80079a2:	21d3      	movs	r1, #211	@ 0xd3
 80079a4:	f001 fe94 	bl	80096d0 <__assert_func>
 80079a8:	0052      	lsls	r2, r2, #1
 80079aa:	3101      	adds	r1, #1
 80079ac:	e7f0      	b.n	8007990 <__s2b+0x18>
 80079ae:	9b08      	ldr	r3, [sp, #32]
 80079b0:	6143      	str	r3, [r0, #20]
 80079b2:	2d09      	cmp	r5, #9
 80079b4:	f04f 0301 	mov.w	r3, #1
 80079b8:	6103      	str	r3, [r0, #16]
 80079ba:	dd16      	ble.n	80079ea <__s2b+0x72>
 80079bc:	f104 0909 	add.w	r9, r4, #9
 80079c0:	46c8      	mov	r8, r9
 80079c2:	442c      	add	r4, r5
 80079c4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80079c8:	4601      	mov	r1, r0
 80079ca:	3b30      	subs	r3, #48	@ 0x30
 80079cc:	220a      	movs	r2, #10
 80079ce:	4630      	mov	r0, r6
 80079d0:	f7ff ff8c 	bl	80078ec <__multadd>
 80079d4:	45a0      	cmp	r8, r4
 80079d6:	d1f5      	bne.n	80079c4 <__s2b+0x4c>
 80079d8:	f1a5 0408 	sub.w	r4, r5, #8
 80079dc:	444c      	add	r4, r9
 80079de:	1b2d      	subs	r5, r5, r4
 80079e0:	1963      	adds	r3, r4, r5
 80079e2:	42bb      	cmp	r3, r7
 80079e4:	db04      	blt.n	80079f0 <__s2b+0x78>
 80079e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079ea:	340a      	adds	r4, #10
 80079ec:	2509      	movs	r5, #9
 80079ee:	e7f6      	b.n	80079de <__s2b+0x66>
 80079f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80079f4:	4601      	mov	r1, r0
 80079f6:	3b30      	subs	r3, #48	@ 0x30
 80079f8:	220a      	movs	r2, #10
 80079fa:	4630      	mov	r0, r6
 80079fc:	f7ff ff76 	bl	80078ec <__multadd>
 8007a00:	e7ee      	b.n	80079e0 <__s2b+0x68>
 8007a02:	bf00      	nop
 8007a04:	0800a1bd 	.word	0x0800a1bd
 8007a08:	0800a1ce 	.word	0x0800a1ce

08007a0c <__hi0bits>:
 8007a0c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007a10:	4603      	mov	r3, r0
 8007a12:	bf36      	itet	cc
 8007a14:	0403      	lslcc	r3, r0, #16
 8007a16:	2000      	movcs	r0, #0
 8007a18:	2010      	movcc	r0, #16
 8007a1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007a1e:	bf3c      	itt	cc
 8007a20:	021b      	lslcc	r3, r3, #8
 8007a22:	3008      	addcc	r0, #8
 8007a24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a28:	bf3c      	itt	cc
 8007a2a:	011b      	lslcc	r3, r3, #4
 8007a2c:	3004      	addcc	r0, #4
 8007a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a32:	bf3c      	itt	cc
 8007a34:	009b      	lslcc	r3, r3, #2
 8007a36:	3002      	addcc	r0, #2
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	db05      	blt.n	8007a48 <__hi0bits+0x3c>
 8007a3c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007a40:	f100 0001 	add.w	r0, r0, #1
 8007a44:	bf08      	it	eq
 8007a46:	2020      	moveq	r0, #32
 8007a48:	4770      	bx	lr

08007a4a <__lo0bits>:
 8007a4a:	6803      	ldr	r3, [r0, #0]
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	f013 0007 	ands.w	r0, r3, #7
 8007a52:	d00b      	beq.n	8007a6c <__lo0bits+0x22>
 8007a54:	07d9      	lsls	r1, r3, #31
 8007a56:	d421      	bmi.n	8007a9c <__lo0bits+0x52>
 8007a58:	0798      	lsls	r0, r3, #30
 8007a5a:	bf49      	itett	mi
 8007a5c:	085b      	lsrmi	r3, r3, #1
 8007a5e:	089b      	lsrpl	r3, r3, #2
 8007a60:	2001      	movmi	r0, #1
 8007a62:	6013      	strmi	r3, [r2, #0]
 8007a64:	bf5c      	itt	pl
 8007a66:	6013      	strpl	r3, [r2, #0]
 8007a68:	2002      	movpl	r0, #2
 8007a6a:	4770      	bx	lr
 8007a6c:	b299      	uxth	r1, r3
 8007a6e:	b909      	cbnz	r1, 8007a74 <__lo0bits+0x2a>
 8007a70:	0c1b      	lsrs	r3, r3, #16
 8007a72:	2010      	movs	r0, #16
 8007a74:	b2d9      	uxtb	r1, r3
 8007a76:	b909      	cbnz	r1, 8007a7c <__lo0bits+0x32>
 8007a78:	3008      	adds	r0, #8
 8007a7a:	0a1b      	lsrs	r3, r3, #8
 8007a7c:	0719      	lsls	r1, r3, #28
 8007a7e:	bf04      	itt	eq
 8007a80:	091b      	lsreq	r3, r3, #4
 8007a82:	3004      	addeq	r0, #4
 8007a84:	0799      	lsls	r1, r3, #30
 8007a86:	bf04      	itt	eq
 8007a88:	089b      	lsreq	r3, r3, #2
 8007a8a:	3002      	addeq	r0, #2
 8007a8c:	07d9      	lsls	r1, r3, #31
 8007a8e:	d403      	bmi.n	8007a98 <__lo0bits+0x4e>
 8007a90:	085b      	lsrs	r3, r3, #1
 8007a92:	f100 0001 	add.w	r0, r0, #1
 8007a96:	d003      	beq.n	8007aa0 <__lo0bits+0x56>
 8007a98:	6013      	str	r3, [r2, #0]
 8007a9a:	4770      	bx	lr
 8007a9c:	2000      	movs	r0, #0
 8007a9e:	4770      	bx	lr
 8007aa0:	2020      	movs	r0, #32
 8007aa2:	4770      	bx	lr

08007aa4 <__i2b>:
 8007aa4:	b510      	push	{r4, lr}
 8007aa6:	460c      	mov	r4, r1
 8007aa8:	2101      	movs	r1, #1
 8007aaa:	f7ff febd 	bl	8007828 <_Balloc>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	b928      	cbnz	r0, 8007abe <__i2b+0x1a>
 8007ab2:	4b05      	ldr	r3, [pc, #20]	@ (8007ac8 <__i2b+0x24>)
 8007ab4:	4805      	ldr	r0, [pc, #20]	@ (8007acc <__i2b+0x28>)
 8007ab6:	f240 1145 	movw	r1, #325	@ 0x145
 8007aba:	f001 fe09 	bl	80096d0 <__assert_func>
 8007abe:	2301      	movs	r3, #1
 8007ac0:	6144      	str	r4, [r0, #20]
 8007ac2:	6103      	str	r3, [r0, #16]
 8007ac4:	bd10      	pop	{r4, pc}
 8007ac6:	bf00      	nop
 8007ac8:	0800a1bd 	.word	0x0800a1bd
 8007acc:	0800a1ce 	.word	0x0800a1ce

08007ad0 <__multiply>:
 8007ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ad4:	4614      	mov	r4, r2
 8007ad6:	690a      	ldr	r2, [r1, #16]
 8007ad8:	6923      	ldr	r3, [r4, #16]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	bfa8      	it	ge
 8007ade:	4623      	movge	r3, r4
 8007ae0:	460f      	mov	r7, r1
 8007ae2:	bfa4      	itt	ge
 8007ae4:	460c      	movge	r4, r1
 8007ae6:	461f      	movge	r7, r3
 8007ae8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007aec:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007af0:	68a3      	ldr	r3, [r4, #8]
 8007af2:	6861      	ldr	r1, [r4, #4]
 8007af4:	eb0a 0609 	add.w	r6, sl, r9
 8007af8:	42b3      	cmp	r3, r6
 8007afa:	b085      	sub	sp, #20
 8007afc:	bfb8      	it	lt
 8007afe:	3101      	addlt	r1, #1
 8007b00:	f7ff fe92 	bl	8007828 <_Balloc>
 8007b04:	b930      	cbnz	r0, 8007b14 <__multiply+0x44>
 8007b06:	4602      	mov	r2, r0
 8007b08:	4b44      	ldr	r3, [pc, #272]	@ (8007c1c <__multiply+0x14c>)
 8007b0a:	4845      	ldr	r0, [pc, #276]	@ (8007c20 <__multiply+0x150>)
 8007b0c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007b10:	f001 fdde 	bl	80096d0 <__assert_func>
 8007b14:	f100 0514 	add.w	r5, r0, #20
 8007b18:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007b1c:	462b      	mov	r3, r5
 8007b1e:	2200      	movs	r2, #0
 8007b20:	4543      	cmp	r3, r8
 8007b22:	d321      	bcc.n	8007b68 <__multiply+0x98>
 8007b24:	f107 0114 	add.w	r1, r7, #20
 8007b28:	f104 0214 	add.w	r2, r4, #20
 8007b2c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007b30:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007b34:	9302      	str	r3, [sp, #8]
 8007b36:	1b13      	subs	r3, r2, r4
 8007b38:	3b15      	subs	r3, #21
 8007b3a:	f023 0303 	bic.w	r3, r3, #3
 8007b3e:	3304      	adds	r3, #4
 8007b40:	f104 0715 	add.w	r7, r4, #21
 8007b44:	42ba      	cmp	r2, r7
 8007b46:	bf38      	it	cc
 8007b48:	2304      	movcc	r3, #4
 8007b4a:	9301      	str	r3, [sp, #4]
 8007b4c:	9b02      	ldr	r3, [sp, #8]
 8007b4e:	9103      	str	r1, [sp, #12]
 8007b50:	428b      	cmp	r3, r1
 8007b52:	d80c      	bhi.n	8007b6e <__multiply+0x9e>
 8007b54:	2e00      	cmp	r6, #0
 8007b56:	dd03      	ble.n	8007b60 <__multiply+0x90>
 8007b58:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d05b      	beq.n	8007c18 <__multiply+0x148>
 8007b60:	6106      	str	r6, [r0, #16]
 8007b62:	b005      	add	sp, #20
 8007b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b68:	f843 2b04 	str.w	r2, [r3], #4
 8007b6c:	e7d8      	b.n	8007b20 <__multiply+0x50>
 8007b6e:	f8b1 a000 	ldrh.w	sl, [r1]
 8007b72:	f1ba 0f00 	cmp.w	sl, #0
 8007b76:	d024      	beq.n	8007bc2 <__multiply+0xf2>
 8007b78:	f104 0e14 	add.w	lr, r4, #20
 8007b7c:	46a9      	mov	r9, r5
 8007b7e:	f04f 0c00 	mov.w	ip, #0
 8007b82:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007b86:	f8d9 3000 	ldr.w	r3, [r9]
 8007b8a:	fa1f fb87 	uxth.w	fp, r7
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	fb0a 330b 	mla	r3, sl, fp, r3
 8007b94:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007b98:	f8d9 7000 	ldr.w	r7, [r9]
 8007b9c:	4463      	add	r3, ip
 8007b9e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007ba2:	fb0a c70b 	mla	r7, sl, fp, ip
 8007ba6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007bb0:	4572      	cmp	r2, lr
 8007bb2:	f849 3b04 	str.w	r3, [r9], #4
 8007bb6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007bba:	d8e2      	bhi.n	8007b82 <__multiply+0xb2>
 8007bbc:	9b01      	ldr	r3, [sp, #4]
 8007bbe:	f845 c003 	str.w	ip, [r5, r3]
 8007bc2:	9b03      	ldr	r3, [sp, #12]
 8007bc4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007bc8:	3104      	adds	r1, #4
 8007bca:	f1b9 0f00 	cmp.w	r9, #0
 8007bce:	d021      	beq.n	8007c14 <__multiply+0x144>
 8007bd0:	682b      	ldr	r3, [r5, #0]
 8007bd2:	f104 0c14 	add.w	ip, r4, #20
 8007bd6:	46ae      	mov	lr, r5
 8007bd8:	f04f 0a00 	mov.w	sl, #0
 8007bdc:	f8bc b000 	ldrh.w	fp, [ip]
 8007be0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007be4:	fb09 770b 	mla	r7, r9, fp, r7
 8007be8:	4457      	add	r7, sl
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007bf0:	f84e 3b04 	str.w	r3, [lr], #4
 8007bf4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007bf8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007bfc:	f8be 3000 	ldrh.w	r3, [lr]
 8007c00:	fb09 330a 	mla	r3, r9, sl, r3
 8007c04:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007c08:	4562      	cmp	r2, ip
 8007c0a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007c0e:	d8e5      	bhi.n	8007bdc <__multiply+0x10c>
 8007c10:	9f01      	ldr	r7, [sp, #4]
 8007c12:	51eb      	str	r3, [r5, r7]
 8007c14:	3504      	adds	r5, #4
 8007c16:	e799      	b.n	8007b4c <__multiply+0x7c>
 8007c18:	3e01      	subs	r6, #1
 8007c1a:	e79b      	b.n	8007b54 <__multiply+0x84>
 8007c1c:	0800a1bd 	.word	0x0800a1bd
 8007c20:	0800a1ce 	.word	0x0800a1ce

08007c24 <__pow5mult>:
 8007c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c28:	4615      	mov	r5, r2
 8007c2a:	f012 0203 	ands.w	r2, r2, #3
 8007c2e:	4607      	mov	r7, r0
 8007c30:	460e      	mov	r6, r1
 8007c32:	d007      	beq.n	8007c44 <__pow5mult+0x20>
 8007c34:	4c25      	ldr	r4, [pc, #148]	@ (8007ccc <__pow5mult+0xa8>)
 8007c36:	3a01      	subs	r2, #1
 8007c38:	2300      	movs	r3, #0
 8007c3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c3e:	f7ff fe55 	bl	80078ec <__multadd>
 8007c42:	4606      	mov	r6, r0
 8007c44:	10ad      	asrs	r5, r5, #2
 8007c46:	d03d      	beq.n	8007cc4 <__pow5mult+0xa0>
 8007c48:	69fc      	ldr	r4, [r7, #28]
 8007c4a:	b97c      	cbnz	r4, 8007c6c <__pow5mult+0x48>
 8007c4c:	2010      	movs	r0, #16
 8007c4e:	f7ff fd35 	bl	80076bc <malloc>
 8007c52:	4602      	mov	r2, r0
 8007c54:	61f8      	str	r0, [r7, #28]
 8007c56:	b928      	cbnz	r0, 8007c64 <__pow5mult+0x40>
 8007c58:	4b1d      	ldr	r3, [pc, #116]	@ (8007cd0 <__pow5mult+0xac>)
 8007c5a:	481e      	ldr	r0, [pc, #120]	@ (8007cd4 <__pow5mult+0xb0>)
 8007c5c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007c60:	f001 fd36 	bl	80096d0 <__assert_func>
 8007c64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c68:	6004      	str	r4, [r0, #0]
 8007c6a:	60c4      	str	r4, [r0, #12]
 8007c6c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007c70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c74:	b94c      	cbnz	r4, 8007c8a <__pow5mult+0x66>
 8007c76:	f240 2171 	movw	r1, #625	@ 0x271
 8007c7a:	4638      	mov	r0, r7
 8007c7c:	f7ff ff12 	bl	8007aa4 <__i2b>
 8007c80:	2300      	movs	r3, #0
 8007c82:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c86:	4604      	mov	r4, r0
 8007c88:	6003      	str	r3, [r0, #0]
 8007c8a:	f04f 0900 	mov.w	r9, #0
 8007c8e:	07eb      	lsls	r3, r5, #31
 8007c90:	d50a      	bpl.n	8007ca8 <__pow5mult+0x84>
 8007c92:	4631      	mov	r1, r6
 8007c94:	4622      	mov	r2, r4
 8007c96:	4638      	mov	r0, r7
 8007c98:	f7ff ff1a 	bl	8007ad0 <__multiply>
 8007c9c:	4631      	mov	r1, r6
 8007c9e:	4680      	mov	r8, r0
 8007ca0:	4638      	mov	r0, r7
 8007ca2:	f7ff fe01 	bl	80078a8 <_Bfree>
 8007ca6:	4646      	mov	r6, r8
 8007ca8:	106d      	asrs	r5, r5, #1
 8007caa:	d00b      	beq.n	8007cc4 <__pow5mult+0xa0>
 8007cac:	6820      	ldr	r0, [r4, #0]
 8007cae:	b938      	cbnz	r0, 8007cc0 <__pow5mult+0x9c>
 8007cb0:	4622      	mov	r2, r4
 8007cb2:	4621      	mov	r1, r4
 8007cb4:	4638      	mov	r0, r7
 8007cb6:	f7ff ff0b 	bl	8007ad0 <__multiply>
 8007cba:	6020      	str	r0, [r4, #0]
 8007cbc:	f8c0 9000 	str.w	r9, [r0]
 8007cc0:	4604      	mov	r4, r0
 8007cc2:	e7e4      	b.n	8007c8e <__pow5mult+0x6a>
 8007cc4:	4630      	mov	r0, r6
 8007cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cca:	bf00      	nop
 8007ccc:	0800a228 	.word	0x0800a228
 8007cd0:	0800a14e 	.word	0x0800a14e
 8007cd4:	0800a1ce 	.word	0x0800a1ce

08007cd8 <__lshift>:
 8007cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cdc:	460c      	mov	r4, r1
 8007cde:	6849      	ldr	r1, [r1, #4]
 8007ce0:	6923      	ldr	r3, [r4, #16]
 8007ce2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007ce6:	68a3      	ldr	r3, [r4, #8]
 8007ce8:	4607      	mov	r7, r0
 8007cea:	4691      	mov	r9, r2
 8007cec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007cf0:	f108 0601 	add.w	r6, r8, #1
 8007cf4:	42b3      	cmp	r3, r6
 8007cf6:	db0b      	blt.n	8007d10 <__lshift+0x38>
 8007cf8:	4638      	mov	r0, r7
 8007cfa:	f7ff fd95 	bl	8007828 <_Balloc>
 8007cfe:	4605      	mov	r5, r0
 8007d00:	b948      	cbnz	r0, 8007d16 <__lshift+0x3e>
 8007d02:	4602      	mov	r2, r0
 8007d04:	4b28      	ldr	r3, [pc, #160]	@ (8007da8 <__lshift+0xd0>)
 8007d06:	4829      	ldr	r0, [pc, #164]	@ (8007dac <__lshift+0xd4>)
 8007d08:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007d0c:	f001 fce0 	bl	80096d0 <__assert_func>
 8007d10:	3101      	adds	r1, #1
 8007d12:	005b      	lsls	r3, r3, #1
 8007d14:	e7ee      	b.n	8007cf4 <__lshift+0x1c>
 8007d16:	2300      	movs	r3, #0
 8007d18:	f100 0114 	add.w	r1, r0, #20
 8007d1c:	f100 0210 	add.w	r2, r0, #16
 8007d20:	4618      	mov	r0, r3
 8007d22:	4553      	cmp	r3, sl
 8007d24:	db33      	blt.n	8007d8e <__lshift+0xb6>
 8007d26:	6920      	ldr	r0, [r4, #16]
 8007d28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d2c:	f104 0314 	add.w	r3, r4, #20
 8007d30:	f019 091f 	ands.w	r9, r9, #31
 8007d34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d38:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007d3c:	d02b      	beq.n	8007d96 <__lshift+0xbe>
 8007d3e:	f1c9 0e20 	rsb	lr, r9, #32
 8007d42:	468a      	mov	sl, r1
 8007d44:	2200      	movs	r2, #0
 8007d46:	6818      	ldr	r0, [r3, #0]
 8007d48:	fa00 f009 	lsl.w	r0, r0, r9
 8007d4c:	4310      	orrs	r0, r2
 8007d4e:	f84a 0b04 	str.w	r0, [sl], #4
 8007d52:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d56:	459c      	cmp	ip, r3
 8007d58:	fa22 f20e 	lsr.w	r2, r2, lr
 8007d5c:	d8f3      	bhi.n	8007d46 <__lshift+0x6e>
 8007d5e:	ebac 0304 	sub.w	r3, ip, r4
 8007d62:	3b15      	subs	r3, #21
 8007d64:	f023 0303 	bic.w	r3, r3, #3
 8007d68:	3304      	adds	r3, #4
 8007d6a:	f104 0015 	add.w	r0, r4, #21
 8007d6e:	4584      	cmp	ip, r0
 8007d70:	bf38      	it	cc
 8007d72:	2304      	movcc	r3, #4
 8007d74:	50ca      	str	r2, [r1, r3]
 8007d76:	b10a      	cbz	r2, 8007d7c <__lshift+0xa4>
 8007d78:	f108 0602 	add.w	r6, r8, #2
 8007d7c:	3e01      	subs	r6, #1
 8007d7e:	4638      	mov	r0, r7
 8007d80:	612e      	str	r6, [r5, #16]
 8007d82:	4621      	mov	r1, r4
 8007d84:	f7ff fd90 	bl	80078a8 <_Bfree>
 8007d88:	4628      	mov	r0, r5
 8007d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d8e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007d92:	3301      	adds	r3, #1
 8007d94:	e7c5      	b.n	8007d22 <__lshift+0x4a>
 8007d96:	3904      	subs	r1, #4
 8007d98:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d9c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007da0:	459c      	cmp	ip, r3
 8007da2:	d8f9      	bhi.n	8007d98 <__lshift+0xc0>
 8007da4:	e7ea      	b.n	8007d7c <__lshift+0xa4>
 8007da6:	bf00      	nop
 8007da8:	0800a1bd 	.word	0x0800a1bd
 8007dac:	0800a1ce 	.word	0x0800a1ce

08007db0 <__mcmp>:
 8007db0:	690a      	ldr	r2, [r1, #16]
 8007db2:	4603      	mov	r3, r0
 8007db4:	6900      	ldr	r0, [r0, #16]
 8007db6:	1a80      	subs	r0, r0, r2
 8007db8:	b530      	push	{r4, r5, lr}
 8007dba:	d10e      	bne.n	8007dda <__mcmp+0x2a>
 8007dbc:	3314      	adds	r3, #20
 8007dbe:	3114      	adds	r1, #20
 8007dc0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007dc4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007dc8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007dcc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007dd0:	4295      	cmp	r5, r2
 8007dd2:	d003      	beq.n	8007ddc <__mcmp+0x2c>
 8007dd4:	d205      	bcs.n	8007de2 <__mcmp+0x32>
 8007dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8007dda:	bd30      	pop	{r4, r5, pc}
 8007ddc:	42a3      	cmp	r3, r4
 8007dde:	d3f3      	bcc.n	8007dc8 <__mcmp+0x18>
 8007de0:	e7fb      	b.n	8007dda <__mcmp+0x2a>
 8007de2:	2001      	movs	r0, #1
 8007de4:	e7f9      	b.n	8007dda <__mcmp+0x2a>
	...

08007de8 <__mdiff>:
 8007de8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dec:	4689      	mov	r9, r1
 8007dee:	4606      	mov	r6, r0
 8007df0:	4611      	mov	r1, r2
 8007df2:	4648      	mov	r0, r9
 8007df4:	4614      	mov	r4, r2
 8007df6:	f7ff ffdb 	bl	8007db0 <__mcmp>
 8007dfa:	1e05      	subs	r5, r0, #0
 8007dfc:	d112      	bne.n	8007e24 <__mdiff+0x3c>
 8007dfe:	4629      	mov	r1, r5
 8007e00:	4630      	mov	r0, r6
 8007e02:	f7ff fd11 	bl	8007828 <_Balloc>
 8007e06:	4602      	mov	r2, r0
 8007e08:	b928      	cbnz	r0, 8007e16 <__mdiff+0x2e>
 8007e0a:	4b3f      	ldr	r3, [pc, #252]	@ (8007f08 <__mdiff+0x120>)
 8007e0c:	f240 2137 	movw	r1, #567	@ 0x237
 8007e10:	483e      	ldr	r0, [pc, #248]	@ (8007f0c <__mdiff+0x124>)
 8007e12:	f001 fc5d 	bl	80096d0 <__assert_func>
 8007e16:	2301      	movs	r3, #1
 8007e18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007e1c:	4610      	mov	r0, r2
 8007e1e:	b003      	add	sp, #12
 8007e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e24:	bfbc      	itt	lt
 8007e26:	464b      	movlt	r3, r9
 8007e28:	46a1      	movlt	r9, r4
 8007e2a:	4630      	mov	r0, r6
 8007e2c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007e30:	bfba      	itte	lt
 8007e32:	461c      	movlt	r4, r3
 8007e34:	2501      	movlt	r5, #1
 8007e36:	2500      	movge	r5, #0
 8007e38:	f7ff fcf6 	bl	8007828 <_Balloc>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	b918      	cbnz	r0, 8007e48 <__mdiff+0x60>
 8007e40:	4b31      	ldr	r3, [pc, #196]	@ (8007f08 <__mdiff+0x120>)
 8007e42:	f240 2145 	movw	r1, #581	@ 0x245
 8007e46:	e7e3      	b.n	8007e10 <__mdiff+0x28>
 8007e48:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007e4c:	6926      	ldr	r6, [r4, #16]
 8007e4e:	60c5      	str	r5, [r0, #12]
 8007e50:	f109 0310 	add.w	r3, r9, #16
 8007e54:	f109 0514 	add.w	r5, r9, #20
 8007e58:	f104 0e14 	add.w	lr, r4, #20
 8007e5c:	f100 0b14 	add.w	fp, r0, #20
 8007e60:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007e64:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007e68:	9301      	str	r3, [sp, #4]
 8007e6a:	46d9      	mov	r9, fp
 8007e6c:	f04f 0c00 	mov.w	ip, #0
 8007e70:	9b01      	ldr	r3, [sp, #4]
 8007e72:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007e76:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007e7a:	9301      	str	r3, [sp, #4]
 8007e7c:	fa1f f38a 	uxth.w	r3, sl
 8007e80:	4619      	mov	r1, r3
 8007e82:	b283      	uxth	r3, r0
 8007e84:	1acb      	subs	r3, r1, r3
 8007e86:	0c00      	lsrs	r0, r0, #16
 8007e88:	4463      	add	r3, ip
 8007e8a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007e8e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007e98:	4576      	cmp	r6, lr
 8007e9a:	f849 3b04 	str.w	r3, [r9], #4
 8007e9e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007ea2:	d8e5      	bhi.n	8007e70 <__mdiff+0x88>
 8007ea4:	1b33      	subs	r3, r6, r4
 8007ea6:	3b15      	subs	r3, #21
 8007ea8:	f023 0303 	bic.w	r3, r3, #3
 8007eac:	3415      	adds	r4, #21
 8007eae:	3304      	adds	r3, #4
 8007eb0:	42a6      	cmp	r6, r4
 8007eb2:	bf38      	it	cc
 8007eb4:	2304      	movcc	r3, #4
 8007eb6:	441d      	add	r5, r3
 8007eb8:	445b      	add	r3, fp
 8007eba:	461e      	mov	r6, r3
 8007ebc:	462c      	mov	r4, r5
 8007ebe:	4544      	cmp	r4, r8
 8007ec0:	d30e      	bcc.n	8007ee0 <__mdiff+0xf8>
 8007ec2:	f108 0103 	add.w	r1, r8, #3
 8007ec6:	1b49      	subs	r1, r1, r5
 8007ec8:	f021 0103 	bic.w	r1, r1, #3
 8007ecc:	3d03      	subs	r5, #3
 8007ece:	45a8      	cmp	r8, r5
 8007ed0:	bf38      	it	cc
 8007ed2:	2100      	movcc	r1, #0
 8007ed4:	440b      	add	r3, r1
 8007ed6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007eda:	b191      	cbz	r1, 8007f02 <__mdiff+0x11a>
 8007edc:	6117      	str	r7, [r2, #16]
 8007ede:	e79d      	b.n	8007e1c <__mdiff+0x34>
 8007ee0:	f854 1b04 	ldr.w	r1, [r4], #4
 8007ee4:	46e6      	mov	lr, ip
 8007ee6:	0c08      	lsrs	r0, r1, #16
 8007ee8:	fa1c fc81 	uxtah	ip, ip, r1
 8007eec:	4471      	add	r1, lr
 8007eee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007ef2:	b289      	uxth	r1, r1
 8007ef4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007ef8:	f846 1b04 	str.w	r1, [r6], #4
 8007efc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007f00:	e7dd      	b.n	8007ebe <__mdiff+0xd6>
 8007f02:	3f01      	subs	r7, #1
 8007f04:	e7e7      	b.n	8007ed6 <__mdiff+0xee>
 8007f06:	bf00      	nop
 8007f08:	0800a1bd 	.word	0x0800a1bd
 8007f0c:	0800a1ce 	.word	0x0800a1ce

08007f10 <__ulp>:
 8007f10:	b082      	sub	sp, #8
 8007f12:	ed8d 0b00 	vstr	d0, [sp]
 8007f16:	9a01      	ldr	r2, [sp, #4]
 8007f18:	4b0f      	ldr	r3, [pc, #60]	@ (8007f58 <__ulp+0x48>)
 8007f1a:	4013      	ands	r3, r2
 8007f1c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	dc08      	bgt.n	8007f36 <__ulp+0x26>
 8007f24:	425b      	negs	r3, r3
 8007f26:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007f2a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007f2e:	da04      	bge.n	8007f3a <__ulp+0x2a>
 8007f30:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007f34:	4113      	asrs	r3, r2
 8007f36:	2200      	movs	r2, #0
 8007f38:	e008      	b.n	8007f4c <__ulp+0x3c>
 8007f3a:	f1a2 0314 	sub.w	r3, r2, #20
 8007f3e:	2b1e      	cmp	r3, #30
 8007f40:	bfda      	itte	le
 8007f42:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007f46:	40da      	lsrle	r2, r3
 8007f48:	2201      	movgt	r2, #1
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	4619      	mov	r1, r3
 8007f4e:	4610      	mov	r0, r2
 8007f50:	ec41 0b10 	vmov	d0, r0, r1
 8007f54:	b002      	add	sp, #8
 8007f56:	4770      	bx	lr
 8007f58:	7ff00000 	.word	0x7ff00000

08007f5c <__b2d>:
 8007f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f60:	6906      	ldr	r6, [r0, #16]
 8007f62:	f100 0814 	add.w	r8, r0, #20
 8007f66:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007f6a:	1f37      	subs	r7, r6, #4
 8007f6c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007f70:	4610      	mov	r0, r2
 8007f72:	f7ff fd4b 	bl	8007a0c <__hi0bits>
 8007f76:	f1c0 0320 	rsb	r3, r0, #32
 8007f7a:	280a      	cmp	r0, #10
 8007f7c:	600b      	str	r3, [r1, #0]
 8007f7e:	491b      	ldr	r1, [pc, #108]	@ (8007fec <__b2d+0x90>)
 8007f80:	dc15      	bgt.n	8007fae <__b2d+0x52>
 8007f82:	f1c0 0c0b 	rsb	ip, r0, #11
 8007f86:	fa22 f30c 	lsr.w	r3, r2, ip
 8007f8a:	45b8      	cmp	r8, r7
 8007f8c:	ea43 0501 	orr.w	r5, r3, r1
 8007f90:	bf34      	ite	cc
 8007f92:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007f96:	2300      	movcs	r3, #0
 8007f98:	3015      	adds	r0, #21
 8007f9a:	fa02 f000 	lsl.w	r0, r2, r0
 8007f9e:	fa23 f30c 	lsr.w	r3, r3, ip
 8007fa2:	4303      	orrs	r3, r0
 8007fa4:	461c      	mov	r4, r3
 8007fa6:	ec45 4b10 	vmov	d0, r4, r5
 8007faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fae:	45b8      	cmp	r8, r7
 8007fb0:	bf3a      	itte	cc
 8007fb2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007fb6:	f1a6 0708 	subcc.w	r7, r6, #8
 8007fba:	2300      	movcs	r3, #0
 8007fbc:	380b      	subs	r0, #11
 8007fbe:	d012      	beq.n	8007fe6 <__b2d+0x8a>
 8007fc0:	f1c0 0120 	rsb	r1, r0, #32
 8007fc4:	fa23 f401 	lsr.w	r4, r3, r1
 8007fc8:	4082      	lsls	r2, r0
 8007fca:	4322      	orrs	r2, r4
 8007fcc:	4547      	cmp	r7, r8
 8007fce:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007fd2:	bf8c      	ite	hi
 8007fd4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007fd8:	2200      	movls	r2, #0
 8007fda:	4083      	lsls	r3, r0
 8007fdc:	40ca      	lsrs	r2, r1
 8007fde:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	e7de      	b.n	8007fa4 <__b2d+0x48>
 8007fe6:	ea42 0501 	orr.w	r5, r2, r1
 8007fea:	e7db      	b.n	8007fa4 <__b2d+0x48>
 8007fec:	3ff00000 	.word	0x3ff00000

08007ff0 <__d2b>:
 8007ff0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007ff4:	460f      	mov	r7, r1
 8007ff6:	2101      	movs	r1, #1
 8007ff8:	ec59 8b10 	vmov	r8, r9, d0
 8007ffc:	4616      	mov	r6, r2
 8007ffe:	f7ff fc13 	bl	8007828 <_Balloc>
 8008002:	4604      	mov	r4, r0
 8008004:	b930      	cbnz	r0, 8008014 <__d2b+0x24>
 8008006:	4602      	mov	r2, r0
 8008008:	4b23      	ldr	r3, [pc, #140]	@ (8008098 <__d2b+0xa8>)
 800800a:	4824      	ldr	r0, [pc, #144]	@ (800809c <__d2b+0xac>)
 800800c:	f240 310f 	movw	r1, #783	@ 0x30f
 8008010:	f001 fb5e 	bl	80096d0 <__assert_func>
 8008014:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008018:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800801c:	b10d      	cbz	r5, 8008022 <__d2b+0x32>
 800801e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008022:	9301      	str	r3, [sp, #4]
 8008024:	f1b8 0300 	subs.w	r3, r8, #0
 8008028:	d023      	beq.n	8008072 <__d2b+0x82>
 800802a:	4668      	mov	r0, sp
 800802c:	9300      	str	r3, [sp, #0]
 800802e:	f7ff fd0c 	bl	8007a4a <__lo0bits>
 8008032:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008036:	b1d0      	cbz	r0, 800806e <__d2b+0x7e>
 8008038:	f1c0 0320 	rsb	r3, r0, #32
 800803c:	fa02 f303 	lsl.w	r3, r2, r3
 8008040:	430b      	orrs	r3, r1
 8008042:	40c2      	lsrs	r2, r0
 8008044:	6163      	str	r3, [r4, #20]
 8008046:	9201      	str	r2, [sp, #4]
 8008048:	9b01      	ldr	r3, [sp, #4]
 800804a:	61a3      	str	r3, [r4, #24]
 800804c:	2b00      	cmp	r3, #0
 800804e:	bf0c      	ite	eq
 8008050:	2201      	moveq	r2, #1
 8008052:	2202      	movne	r2, #2
 8008054:	6122      	str	r2, [r4, #16]
 8008056:	b1a5      	cbz	r5, 8008082 <__d2b+0x92>
 8008058:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800805c:	4405      	add	r5, r0
 800805e:	603d      	str	r5, [r7, #0]
 8008060:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008064:	6030      	str	r0, [r6, #0]
 8008066:	4620      	mov	r0, r4
 8008068:	b003      	add	sp, #12
 800806a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800806e:	6161      	str	r1, [r4, #20]
 8008070:	e7ea      	b.n	8008048 <__d2b+0x58>
 8008072:	a801      	add	r0, sp, #4
 8008074:	f7ff fce9 	bl	8007a4a <__lo0bits>
 8008078:	9b01      	ldr	r3, [sp, #4]
 800807a:	6163      	str	r3, [r4, #20]
 800807c:	3020      	adds	r0, #32
 800807e:	2201      	movs	r2, #1
 8008080:	e7e8      	b.n	8008054 <__d2b+0x64>
 8008082:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008086:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800808a:	6038      	str	r0, [r7, #0]
 800808c:	6918      	ldr	r0, [r3, #16]
 800808e:	f7ff fcbd 	bl	8007a0c <__hi0bits>
 8008092:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008096:	e7e5      	b.n	8008064 <__d2b+0x74>
 8008098:	0800a1bd 	.word	0x0800a1bd
 800809c:	0800a1ce 	.word	0x0800a1ce

080080a0 <__ratio>:
 80080a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080a4:	b085      	sub	sp, #20
 80080a6:	e9cd 1000 	strd	r1, r0, [sp]
 80080aa:	a902      	add	r1, sp, #8
 80080ac:	f7ff ff56 	bl	8007f5c <__b2d>
 80080b0:	9800      	ldr	r0, [sp, #0]
 80080b2:	a903      	add	r1, sp, #12
 80080b4:	ec55 4b10 	vmov	r4, r5, d0
 80080b8:	f7ff ff50 	bl	8007f5c <__b2d>
 80080bc:	9b01      	ldr	r3, [sp, #4]
 80080be:	6919      	ldr	r1, [r3, #16]
 80080c0:	9b00      	ldr	r3, [sp, #0]
 80080c2:	691b      	ldr	r3, [r3, #16]
 80080c4:	1ac9      	subs	r1, r1, r3
 80080c6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80080ca:	1a9b      	subs	r3, r3, r2
 80080cc:	ec5b ab10 	vmov	sl, fp, d0
 80080d0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	bfce      	itee	gt
 80080d8:	462a      	movgt	r2, r5
 80080da:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80080de:	465a      	movle	r2, fp
 80080e0:	462f      	mov	r7, r5
 80080e2:	46d9      	mov	r9, fp
 80080e4:	bfcc      	ite	gt
 80080e6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80080ea:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80080ee:	464b      	mov	r3, r9
 80080f0:	4652      	mov	r2, sl
 80080f2:	4620      	mov	r0, r4
 80080f4:	4639      	mov	r1, r7
 80080f6:	f7f8 fba9 	bl	800084c <__aeabi_ddiv>
 80080fa:	ec41 0b10 	vmov	d0, r0, r1
 80080fe:	b005      	add	sp, #20
 8008100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008104 <__copybits>:
 8008104:	3901      	subs	r1, #1
 8008106:	b570      	push	{r4, r5, r6, lr}
 8008108:	1149      	asrs	r1, r1, #5
 800810a:	6914      	ldr	r4, [r2, #16]
 800810c:	3101      	adds	r1, #1
 800810e:	f102 0314 	add.w	r3, r2, #20
 8008112:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008116:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800811a:	1f05      	subs	r5, r0, #4
 800811c:	42a3      	cmp	r3, r4
 800811e:	d30c      	bcc.n	800813a <__copybits+0x36>
 8008120:	1aa3      	subs	r3, r4, r2
 8008122:	3b11      	subs	r3, #17
 8008124:	f023 0303 	bic.w	r3, r3, #3
 8008128:	3211      	adds	r2, #17
 800812a:	42a2      	cmp	r2, r4
 800812c:	bf88      	it	hi
 800812e:	2300      	movhi	r3, #0
 8008130:	4418      	add	r0, r3
 8008132:	2300      	movs	r3, #0
 8008134:	4288      	cmp	r0, r1
 8008136:	d305      	bcc.n	8008144 <__copybits+0x40>
 8008138:	bd70      	pop	{r4, r5, r6, pc}
 800813a:	f853 6b04 	ldr.w	r6, [r3], #4
 800813e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008142:	e7eb      	b.n	800811c <__copybits+0x18>
 8008144:	f840 3b04 	str.w	r3, [r0], #4
 8008148:	e7f4      	b.n	8008134 <__copybits+0x30>

0800814a <__any_on>:
 800814a:	f100 0214 	add.w	r2, r0, #20
 800814e:	6900      	ldr	r0, [r0, #16]
 8008150:	114b      	asrs	r3, r1, #5
 8008152:	4298      	cmp	r0, r3
 8008154:	b510      	push	{r4, lr}
 8008156:	db11      	blt.n	800817c <__any_on+0x32>
 8008158:	dd0a      	ble.n	8008170 <__any_on+0x26>
 800815a:	f011 011f 	ands.w	r1, r1, #31
 800815e:	d007      	beq.n	8008170 <__any_on+0x26>
 8008160:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008164:	fa24 f001 	lsr.w	r0, r4, r1
 8008168:	fa00 f101 	lsl.w	r1, r0, r1
 800816c:	428c      	cmp	r4, r1
 800816e:	d10b      	bne.n	8008188 <__any_on+0x3e>
 8008170:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008174:	4293      	cmp	r3, r2
 8008176:	d803      	bhi.n	8008180 <__any_on+0x36>
 8008178:	2000      	movs	r0, #0
 800817a:	bd10      	pop	{r4, pc}
 800817c:	4603      	mov	r3, r0
 800817e:	e7f7      	b.n	8008170 <__any_on+0x26>
 8008180:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008184:	2900      	cmp	r1, #0
 8008186:	d0f5      	beq.n	8008174 <__any_on+0x2a>
 8008188:	2001      	movs	r0, #1
 800818a:	e7f6      	b.n	800817a <__any_on+0x30>

0800818c <sulp>:
 800818c:	b570      	push	{r4, r5, r6, lr}
 800818e:	4604      	mov	r4, r0
 8008190:	460d      	mov	r5, r1
 8008192:	ec45 4b10 	vmov	d0, r4, r5
 8008196:	4616      	mov	r6, r2
 8008198:	f7ff feba 	bl	8007f10 <__ulp>
 800819c:	ec51 0b10 	vmov	r0, r1, d0
 80081a0:	b17e      	cbz	r6, 80081c2 <sulp+0x36>
 80081a2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80081a6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	dd09      	ble.n	80081c2 <sulp+0x36>
 80081ae:	051b      	lsls	r3, r3, #20
 80081b0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80081b4:	2400      	movs	r4, #0
 80081b6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80081ba:	4622      	mov	r2, r4
 80081bc:	462b      	mov	r3, r5
 80081be:	f7f8 fa1b 	bl	80005f8 <__aeabi_dmul>
 80081c2:	ec41 0b10 	vmov	d0, r0, r1
 80081c6:	bd70      	pop	{r4, r5, r6, pc}

080081c8 <_strtod_l>:
 80081c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081cc:	b09f      	sub	sp, #124	@ 0x7c
 80081ce:	460c      	mov	r4, r1
 80081d0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80081d2:	2200      	movs	r2, #0
 80081d4:	921a      	str	r2, [sp, #104]	@ 0x68
 80081d6:	9005      	str	r0, [sp, #20]
 80081d8:	f04f 0a00 	mov.w	sl, #0
 80081dc:	f04f 0b00 	mov.w	fp, #0
 80081e0:	460a      	mov	r2, r1
 80081e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80081e4:	7811      	ldrb	r1, [r2, #0]
 80081e6:	292b      	cmp	r1, #43	@ 0x2b
 80081e8:	d04a      	beq.n	8008280 <_strtod_l+0xb8>
 80081ea:	d838      	bhi.n	800825e <_strtod_l+0x96>
 80081ec:	290d      	cmp	r1, #13
 80081ee:	d832      	bhi.n	8008256 <_strtod_l+0x8e>
 80081f0:	2908      	cmp	r1, #8
 80081f2:	d832      	bhi.n	800825a <_strtod_l+0x92>
 80081f4:	2900      	cmp	r1, #0
 80081f6:	d03b      	beq.n	8008270 <_strtod_l+0xa8>
 80081f8:	2200      	movs	r2, #0
 80081fa:	920b      	str	r2, [sp, #44]	@ 0x2c
 80081fc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80081fe:	782a      	ldrb	r2, [r5, #0]
 8008200:	2a30      	cmp	r2, #48	@ 0x30
 8008202:	f040 80b3 	bne.w	800836c <_strtod_l+0x1a4>
 8008206:	786a      	ldrb	r2, [r5, #1]
 8008208:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800820c:	2a58      	cmp	r2, #88	@ 0x58
 800820e:	d16e      	bne.n	80082ee <_strtod_l+0x126>
 8008210:	9302      	str	r3, [sp, #8]
 8008212:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008214:	9301      	str	r3, [sp, #4]
 8008216:	ab1a      	add	r3, sp, #104	@ 0x68
 8008218:	9300      	str	r3, [sp, #0]
 800821a:	4a8e      	ldr	r2, [pc, #568]	@ (8008454 <_strtod_l+0x28c>)
 800821c:	9805      	ldr	r0, [sp, #20]
 800821e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008220:	a919      	add	r1, sp, #100	@ 0x64
 8008222:	f001 faef 	bl	8009804 <__gethex>
 8008226:	f010 060f 	ands.w	r6, r0, #15
 800822a:	4604      	mov	r4, r0
 800822c:	d005      	beq.n	800823a <_strtod_l+0x72>
 800822e:	2e06      	cmp	r6, #6
 8008230:	d128      	bne.n	8008284 <_strtod_l+0xbc>
 8008232:	3501      	adds	r5, #1
 8008234:	2300      	movs	r3, #0
 8008236:	9519      	str	r5, [sp, #100]	@ 0x64
 8008238:	930b      	str	r3, [sp, #44]	@ 0x2c
 800823a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800823c:	2b00      	cmp	r3, #0
 800823e:	f040 858e 	bne.w	8008d5e <_strtod_l+0xb96>
 8008242:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008244:	b1cb      	cbz	r3, 800827a <_strtod_l+0xb2>
 8008246:	4652      	mov	r2, sl
 8008248:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800824c:	ec43 2b10 	vmov	d0, r2, r3
 8008250:	b01f      	add	sp, #124	@ 0x7c
 8008252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008256:	2920      	cmp	r1, #32
 8008258:	d1ce      	bne.n	80081f8 <_strtod_l+0x30>
 800825a:	3201      	adds	r2, #1
 800825c:	e7c1      	b.n	80081e2 <_strtod_l+0x1a>
 800825e:	292d      	cmp	r1, #45	@ 0x2d
 8008260:	d1ca      	bne.n	80081f8 <_strtod_l+0x30>
 8008262:	2101      	movs	r1, #1
 8008264:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008266:	1c51      	adds	r1, r2, #1
 8008268:	9119      	str	r1, [sp, #100]	@ 0x64
 800826a:	7852      	ldrb	r2, [r2, #1]
 800826c:	2a00      	cmp	r2, #0
 800826e:	d1c5      	bne.n	80081fc <_strtod_l+0x34>
 8008270:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008272:	9419      	str	r4, [sp, #100]	@ 0x64
 8008274:	2b00      	cmp	r3, #0
 8008276:	f040 8570 	bne.w	8008d5a <_strtod_l+0xb92>
 800827a:	4652      	mov	r2, sl
 800827c:	465b      	mov	r3, fp
 800827e:	e7e5      	b.n	800824c <_strtod_l+0x84>
 8008280:	2100      	movs	r1, #0
 8008282:	e7ef      	b.n	8008264 <_strtod_l+0x9c>
 8008284:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008286:	b13a      	cbz	r2, 8008298 <_strtod_l+0xd0>
 8008288:	2135      	movs	r1, #53	@ 0x35
 800828a:	a81c      	add	r0, sp, #112	@ 0x70
 800828c:	f7ff ff3a 	bl	8008104 <__copybits>
 8008290:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008292:	9805      	ldr	r0, [sp, #20]
 8008294:	f7ff fb08 	bl	80078a8 <_Bfree>
 8008298:	3e01      	subs	r6, #1
 800829a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800829c:	2e04      	cmp	r6, #4
 800829e:	d806      	bhi.n	80082ae <_strtod_l+0xe6>
 80082a0:	e8df f006 	tbb	[pc, r6]
 80082a4:	201d0314 	.word	0x201d0314
 80082a8:	14          	.byte	0x14
 80082a9:	00          	.byte	0x00
 80082aa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80082ae:	05e1      	lsls	r1, r4, #23
 80082b0:	bf48      	it	mi
 80082b2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80082b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80082ba:	0d1b      	lsrs	r3, r3, #20
 80082bc:	051b      	lsls	r3, r3, #20
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d1bb      	bne.n	800823a <_strtod_l+0x72>
 80082c2:	f7fe fb31 	bl	8006928 <__errno>
 80082c6:	2322      	movs	r3, #34	@ 0x22
 80082c8:	6003      	str	r3, [r0, #0]
 80082ca:	e7b6      	b.n	800823a <_strtod_l+0x72>
 80082cc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80082d0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80082d4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80082d8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80082dc:	e7e7      	b.n	80082ae <_strtod_l+0xe6>
 80082de:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800845c <_strtod_l+0x294>
 80082e2:	e7e4      	b.n	80082ae <_strtod_l+0xe6>
 80082e4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80082e8:	f04f 3aff 	mov.w	sl, #4294967295
 80082ec:	e7df      	b.n	80082ae <_strtod_l+0xe6>
 80082ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80082f0:	1c5a      	adds	r2, r3, #1
 80082f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80082f4:	785b      	ldrb	r3, [r3, #1]
 80082f6:	2b30      	cmp	r3, #48	@ 0x30
 80082f8:	d0f9      	beq.n	80082ee <_strtod_l+0x126>
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d09d      	beq.n	800823a <_strtod_l+0x72>
 80082fe:	2301      	movs	r3, #1
 8008300:	9309      	str	r3, [sp, #36]	@ 0x24
 8008302:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008304:	930c      	str	r3, [sp, #48]	@ 0x30
 8008306:	2300      	movs	r3, #0
 8008308:	9308      	str	r3, [sp, #32]
 800830a:	930a      	str	r3, [sp, #40]	@ 0x28
 800830c:	461f      	mov	r7, r3
 800830e:	220a      	movs	r2, #10
 8008310:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008312:	7805      	ldrb	r5, [r0, #0]
 8008314:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008318:	b2d9      	uxtb	r1, r3
 800831a:	2909      	cmp	r1, #9
 800831c:	d928      	bls.n	8008370 <_strtod_l+0x1a8>
 800831e:	494e      	ldr	r1, [pc, #312]	@ (8008458 <_strtod_l+0x290>)
 8008320:	2201      	movs	r2, #1
 8008322:	f001 f979 	bl	8009618 <strncmp>
 8008326:	2800      	cmp	r0, #0
 8008328:	d032      	beq.n	8008390 <_strtod_l+0x1c8>
 800832a:	2000      	movs	r0, #0
 800832c:	462a      	mov	r2, r5
 800832e:	4681      	mov	r9, r0
 8008330:	463d      	mov	r5, r7
 8008332:	4603      	mov	r3, r0
 8008334:	2a65      	cmp	r2, #101	@ 0x65
 8008336:	d001      	beq.n	800833c <_strtod_l+0x174>
 8008338:	2a45      	cmp	r2, #69	@ 0x45
 800833a:	d114      	bne.n	8008366 <_strtod_l+0x19e>
 800833c:	b91d      	cbnz	r5, 8008346 <_strtod_l+0x17e>
 800833e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008340:	4302      	orrs	r2, r0
 8008342:	d095      	beq.n	8008270 <_strtod_l+0xa8>
 8008344:	2500      	movs	r5, #0
 8008346:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008348:	1c62      	adds	r2, r4, #1
 800834a:	9219      	str	r2, [sp, #100]	@ 0x64
 800834c:	7862      	ldrb	r2, [r4, #1]
 800834e:	2a2b      	cmp	r2, #43	@ 0x2b
 8008350:	d077      	beq.n	8008442 <_strtod_l+0x27a>
 8008352:	2a2d      	cmp	r2, #45	@ 0x2d
 8008354:	d07b      	beq.n	800844e <_strtod_l+0x286>
 8008356:	f04f 0c00 	mov.w	ip, #0
 800835a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800835e:	2909      	cmp	r1, #9
 8008360:	f240 8082 	bls.w	8008468 <_strtod_l+0x2a0>
 8008364:	9419      	str	r4, [sp, #100]	@ 0x64
 8008366:	f04f 0800 	mov.w	r8, #0
 800836a:	e0a2      	b.n	80084b2 <_strtod_l+0x2ea>
 800836c:	2300      	movs	r3, #0
 800836e:	e7c7      	b.n	8008300 <_strtod_l+0x138>
 8008370:	2f08      	cmp	r7, #8
 8008372:	bfd5      	itete	le
 8008374:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008376:	9908      	ldrgt	r1, [sp, #32]
 8008378:	fb02 3301 	mlale	r3, r2, r1, r3
 800837c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008380:	f100 0001 	add.w	r0, r0, #1
 8008384:	bfd4      	ite	le
 8008386:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008388:	9308      	strgt	r3, [sp, #32]
 800838a:	3701      	adds	r7, #1
 800838c:	9019      	str	r0, [sp, #100]	@ 0x64
 800838e:	e7bf      	b.n	8008310 <_strtod_l+0x148>
 8008390:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008392:	1c5a      	adds	r2, r3, #1
 8008394:	9219      	str	r2, [sp, #100]	@ 0x64
 8008396:	785a      	ldrb	r2, [r3, #1]
 8008398:	b37f      	cbz	r7, 80083fa <_strtod_l+0x232>
 800839a:	4681      	mov	r9, r0
 800839c:	463d      	mov	r5, r7
 800839e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80083a2:	2b09      	cmp	r3, #9
 80083a4:	d912      	bls.n	80083cc <_strtod_l+0x204>
 80083a6:	2301      	movs	r3, #1
 80083a8:	e7c4      	b.n	8008334 <_strtod_l+0x16c>
 80083aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80083ac:	1c5a      	adds	r2, r3, #1
 80083ae:	9219      	str	r2, [sp, #100]	@ 0x64
 80083b0:	785a      	ldrb	r2, [r3, #1]
 80083b2:	3001      	adds	r0, #1
 80083b4:	2a30      	cmp	r2, #48	@ 0x30
 80083b6:	d0f8      	beq.n	80083aa <_strtod_l+0x1e2>
 80083b8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80083bc:	2b08      	cmp	r3, #8
 80083be:	f200 84d3 	bhi.w	8008d68 <_strtod_l+0xba0>
 80083c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80083c4:	930c      	str	r3, [sp, #48]	@ 0x30
 80083c6:	4681      	mov	r9, r0
 80083c8:	2000      	movs	r0, #0
 80083ca:	4605      	mov	r5, r0
 80083cc:	3a30      	subs	r2, #48	@ 0x30
 80083ce:	f100 0301 	add.w	r3, r0, #1
 80083d2:	d02a      	beq.n	800842a <_strtod_l+0x262>
 80083d4:	4499      	add	r9, r3
 80083d6:	eb00 0c05 	add.w	ip, r0, r5
 80083da:	462b      	mov	r3, r5
 80083dc:	210a      	movs	r1, #10
 80083de:	4563      	cmp	r3, ip
 80083e0:	d10d      	bne.n	80083fe <_strtod_l+0x236>
 80083e2:	1c69      	adds	r1, r5, #1
 80083e4:	4401      	add	r1, r0
 80083e6:	4428      	add	r0, r5
 80083e8:	2808      	cmp	r0, #8
 80083ea:	dc16      	bgt.n	800841a <_strtod_l+0x252>
 80083ec:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80083ee:	230a      	movs	r3, #10
 80083f0:	fb03 2300 	mla	r3, r3, r0, r2
 80083f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80083f6:	2300      	movs	r3, #0
 80083f8:	e018      	b.n	800842c <_strtod_l+0x264>
 80083fa:	4638      	mov	r0, r7
 80083fc:	e7da      	b.n	80083b4 <_strtod_l+0x1ec>
 80083fe:	2b08      	cmp	r3, #8
 8008400:	f103 0301 	add.w	r3, r3, #1
 8008404:	dc03      	bgt.n	800840e <_strtod_l+0x246>
 8008406:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008408:	434e      	muls	r6, r1
 800840a:	960a      	str	r6, [sp, #40]	@ 0x28
 800840c:	e7e7      	b.n	80083de <_strtod_l+0x216>
 800840e:	2b10      	cmp	r3, #16
 8008410:	bfde      	ittt	le
 8008412:	9e08      	ldrle	r6, [sp, #32]
 8008414:	434e      	mulle	r6, r1
 8008416:	9608      	strle	r6, [sp, #32]
 8008418:	e7e1      	b.n	80083de <_strtod_l+0x216>
 800841a:	280f      	cmp	r0, #15
 800841c:	dceb      	bgt.n	80083f6 <_strtod_l+0x22e>
 800841e:	9808      	ldr	r0, [sp, #32]
 8008420:	230a      	movs	r3, #10
 8008422:	fb03 2300 	mla	r3, r3, r0, r2
 8008426:	9308      	str	r3, [sp, #32]
 8008428:	e7e5      	b.n	80083f6 <_strtod_l+0x22e>
 800842a:	4629      	mov	r1, r5
 800842c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800842e:	1c50      	adds	r0, r2, #1
 8008430:	9019      	str	r0, [sp, #100]	@ 0x64
 8008432:	7852      	ldrb	r2, [r2, #1]
 8008434:	4618      	mov	r0, r3
 8008436:	460d      	mov	r5, r1
 8008438:	e7b1      	b.n	800839e <_strtod_l+0x1d6>
 800843a:	f04f 0900 	mov.w	r9, #0
 800843e:	2301      	movs	r3, #1
 8008440:	e77d      	b.n	800833e <_strtod_l+0x176>
 8008442:	f04f 0c00 	mov.w	ip, #0
 8008446:	1ca2      	adds	r2, r4, #2
 8008448:	9219      	str	r2, [sp, #100]	@ 0x64
 800844a:	78a2      	ldrb	r2, [r4, #2]
 800844c:	e785      	b.n	800835a <_strtod_l+0x192>
 800844e:	f04f 0c01 	mov.w	ip, #1
 8008452:	e7f8      	b.n	8008446 <_strtod_l+0x27e>
 8008454:	0800a340 	.word	0x0800a340
 8008458:	0800a328 	.word	0x0800a328
 800845c:	7ff00000 	.word	0x7ff00000
 8008460:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008462:	1c51      	adds	r1, r2, #1
 8008464:	9119      	str	r1, [sp, #100]	@ 0x64
 8008466:	7852      	ldrb	r2, [r2, #1]
 8008468:	2a30      	cmp	r2, #48	@ 0x30
 800846a:	d0f9      	beq.n	8008460 <_strtod_l+0x298>
 800846c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008470:	2908      	cmp	r1, #8
 8008472:	f63f af78 	bhi.w	8008366 <_strtod_l+0x19e>
 8008476:	3a30      	subs	r2, #48	@ 0x30
 8008478:	920e      	str	r2, [sp, #56]	@ 0x38
 800847a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800847c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800847e:	f04f 080a 	mov.w	r8, #10
 8008482:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008484:	1c56      	adds	r6, r2, #1
 8008486:	9619      	str	r6, [sp, #100]	@ 0x64
 8008488:	7852      	ldrb	r2, [r2, #1]
 800848a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800848e:	f1be 0f09 	cmp.w	lr, #9
 8008492:	d939      	bls.n	8008508 <_strtod_l+0x340>
 8008494:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008496:	1a76      	subs	r6, r6, r1
 8008498:	2e08      	cmp	r6, #8
 800849a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800849e:	dc03      	bgt.n	80084a8 <_strtod_l+0x2e0>
 80084a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80084a2:	4588      	cmp	r8, r1
 80084a4:	bfa8      	it	ge
 80084a6:	4688      	movge	r8, r1
 80084a8:	f1bc 0f00 	cmp.w	ip, #0
 80084ac:	d001      	beq.n	80084b2 <_strtod_l+0x2ea>
 80084ae:	f1c8 0800 	rsb	r8, r8, #0
 80084b2:	2d00      	cmp	r5, #0
 80084b4:	d14e      	bne.n	8008554 <_strtod_l+0x38c>
 80084b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80084b8:	4308      	orrs	r0, r1
 80084ba:	f47f aebe 	bne.w	800823a <_strtod_l+0x72>
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f47f aed6 	bne.w	8008270 <_strtod_l+0xa8>
 80084c4:	2a69      	cmp	r2, #105	@ 0x69
 80084c6:	d028      	beq.n	800851a <_strtod_l+0x352>
 80084c8:	dc25      	bgt.n	8008516 <_strtod_l+0x34e>
 80084ca:	2a49      	cmp	r2, #73	@ 0x49
 80084cc:	d025      	beq.n	800851a <_strtod_l+0x352>
 80084ce:	2a4e      	cmp	r2, #78	@ 0x4e
 80084d0:	f47f aece 	bne.w	8008270 <_strtod_l+0xa8>
 80084d4:	499b      	ldr	r1, [pc, #620]	@ (8008744 <_strtod_l+0x57c>)
 80084d6:	a819      	add	r0, sp, #100	@ 0x64
 80084d8:	f001 fbb6 	bl	8009c48 <__match>
 80084dc:	2800      	cmp	r0, #0
 80084de:	f43f aec7 	beq.w	8008270 <_strtod_l+0xa8>
 80084e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80084e4:	781b      	ldrb	r3, [r3, #0]
 80084e6:	2b28      	cmp	r3, #40	@ 0x28
 80084e8:	d12e      	bne.n	8008548 <_strtod_l+0x380>
 80084ea:	4997      	ldr	r1, [pc, #604]	@ (8008748 <_strtod_l+0x580>)
 80084ec:	aa1c      	add	r2, sp, #112	@ 0x70
 80084ee:	a819      	add	r0, sp, #100	@ 0x64
 80084f0:	f001 fbbe 	bl	8009c70 <__hexnan>
 80084f4:	2805      	cmp	r0, #5
 80084f6:	d127      	bne.n	8008548 <_strtod_l+0x380>
 80084f8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80084fa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80084fe:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008502:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008506:	e698      	b.n	800823a <_strtod_l+0x72>
 8008508:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800850a:	fb08 2101 	mla	r1, r8, r1, r2
 800850e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008512:	920e      	str	r2, [sp, #56]	@ 0x38
 8008514:	e7b5      	b.n	8008482 <_strtod_l+0x2ba>
 8008516:	2a6e      	cmp	r2, #110	@ 0x6e
 8008518:	e7da      	b.n	80084d0 <_strtod_l+0x308>
 800851a:	498c      	ldr	r1, [pc, #560]	@ (800874c <_strtod_l+0x584>)
 800851c:	a819      	add	r0, sp, #100	@ 0x64
 800851e:	f001 fb93 	bl	8009c48 <__match>
 8008522:	2800      	cmp	r0, #0
 8008524:	f43f aea4 	beq.w	8008270 <_strtod_l+0xa8>
 8008528:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800852a:	4989      	ldr	r1, [pc, #548]	@ (8008750 <_strtod_l+0x588>)
 800852c:	3b01      	subs	r3, #1
 800852e:	a819      	add	r0, sp, #100	@ 0x64
 8008530:	9319      	str	r3, [sp, #100]	@ 0x64
 8008532:	f001 fb89 	bl	8009c48 <__match>
 8008536:	b910      	cbnz	r0, 800853e <_strtod_l+0x376>
 8008538:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800853a:	3301      	adds	r3, #1
 800853c:	9319      	str	r3, [sp, #100]	@ 0x64
 800853e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008760 <_strtod_l+0x598>
 8008542:	f04f 0a00 	mov.w	sl, #0
 8008546:	e678      	b.n	800823a <_strtod_l+0x72>
 8008548:	4882      	ldr	r0, [pc, #520]	@ (8008754 <_strtod_l+0x58c>)
 800854a:	f001 f8b9 	bl	80096c0 <nan>
 800854e:	ec5b ab10 	vmov	sl, fp, d0
 8008552:	e672      	b.n	800823a <_strtod_l+0x72>
 8008554:	eba8 0309 	sub.w	r3, r8, r9
 8008558:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800855a:	9309      	str	r3, [sp, #36]	@ 0x24
 800855c:	2f00      	cmp	r7, #0
 800855e:	bf08      	it	eq
 8008560:	462f      	moveq	r7, r5
 8008562:	2d10      	cmp	r5, #16
 8008564:	462c      	mov	r4, r5
 8008566:	bfa8      	it	ge
 8008568:	2410      	movge	r4, #16
 800856a:	f7f7 ffcb 	bl	8000504 <__aeabi_ui2d>
 800856e:	2d09      	cmp	r5, #9
 8008570:	4682      	mov	sl, r0
 8008572:	468b      	mov	fp, r1
 8008574:	dc13      	bgt.n	800859e <_strtod_l+0x3d6>
 8008576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008578:	2b00      	cmp	r3, #0
 800857a:	f43f ae5e 	beq.w	800823a <_strtod_l+0x72>
 800857e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008580:	dd78      	ble.n	8008674 <_strtod_l+0x4ac>
 8008582:	2b16      	cmp	r3, #22
 8008584:	dc5f      	bgt.n	8008646 <_strtod_l+0x47e>
 8008586:	4974      	ldr	r1, [pc, #464]	@ (8008758 <_strtod_l+0x590>)
 8008588:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800858c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008590:	4652      	mov	r2, sl
 8008592:	465b      	mov	r3, fp
 8008594:	f7f8 f830 	bl	80005f8 <__aeabi_dmul>
 8008598:	4682      	mov	sl, r0
 800859a:	468b      	mov	fp, r1
 800859c:	e64d      	b.n	800823a <_strtod_l+0x72>
 800859e:	4b6e      	ldr	r3, [pc, #440]	@ (8008758 <_strtod_l+0x590>)
 80085a0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80085a4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80085a8:	f7f8 f826 	bl	80005f8 <__aeabi_dmul>
 80085ac:	4682      	mov	sl, r0
 80085ae:	9808      	ldr	r0, [sp, #32]
 80085b0:	468b      	mov	fp, r1
 80085b2:	f7f7 ffa7 	bl	8000504 <__aeabi_ui2d>
 80085b6:	4602      	mov	r2, r0
 80085b8:	460b      	mov	r3, r1
 80085ba:	4650      	mov	r0, sl
 80085bc:	4659      	mov	r1, fp
 80085be:	f7f7 fe65 	bl	800028c <__adddf3>
 80085c2:	2d0f      	cmp	r5, #15
 80085c4:	4682      	mov	sl, r0
 80085c6:	468b      	mov	fp, r1
 80085c8:	ddd5      	ble.n	8008576 <_strtod_l+0x3ae>
 80085ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085cc:	1b2c      	subs	r4, r5, r4
 80085ce:	441c      	add	r4, r3
 80085d0:	2c00      	cmp	r4, #0
 80085d2:	f340 8096 	ble.w	8008702 <_strtod_l+0x53a>
 80085d6:	f014 030f 	ands.w	r3, r4, #15
 80085da:	d00a      	beq.n	80085f2 <_strtod_l+0x42a>
 80085dc:	495e      	ldr	r1, [pc, #376]	@ (8008758 <_strtod_l+0x590>)
 80085de:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80085e2:	4652      	mov	r2, sl
 80085e4:	465b      	mov	r3, fp
 80085e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085ea:	f7f8 f805 	bl	80005f8 <__aeabi_dmul>
 80085ee:	4682      	mov	sl, r0
 80085f0:	468b      	mov	fp, r1
 80085f2:	f034 040f 	bics.w	r4, r4, #15
 80085f6:	d073      	beq.n	80086e0 <_strtod_l+0x518>
 80085f8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80085fc:	dd48      	ble.n	8008690 <_strtod_l+0x4c8>
 80085fe:	2400      	movs	r4, #0
 8008600:	46a0      	mov	r8, r4
 8008602:	940a      	str	r4, [sp, #40]	@ 0x28
 8008604:	46a1      	mov	r9, r4
 8008606:	9a05      	ldr	r2, [sp, #20]
 8008608:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008760 <_strtod_l+0x598>
 800860c:	2322      	movs	r3, #34	@ 0x22
 800860e:	6013      	str	r3, [r2, #0]
 8008610:	f04f 0a00 	mov.w	sl, #0
 8008614:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008616:	2b00      	cmp	r3, #0
 8008618:	f43f ae0f 	beq.w	800823a <_strtod_l+0x72>
 800861c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800861e:	9805      	ldr	r0, [sp, #20]
 8008620:	f7ff f942 	bl	80078a8 <_Bfree>
 8008624:	9805      	ldr	r0, [sp, #20]
 8008626:	4649      	mov	r1, r9
 8008628:	f7ff f93e 	bl	80078a8 <_Bfree>
 800862c:	9805      	ldr	r0, [sp, #20]
 800862e:	4641      	mov	r1, r8
 8008630:	f7ff f93a 	bl	80078a8 <_Bfree>
 8008634:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008636:	9805      	ldr	r0, [sp, #20]
 8008638:	f7ff f936 	bl	80078a8 <_Bfree>
 800863c:	9805      	ldr	r0, [sp, #20]
 800863e:	4621      	mov	r1, r4
 8008640:	f7ff f932 	bl	80078a8 <_Bfree>
 8008644:	e5f9      	b.n	800823a <_strtod_l+0x72>
 8008646:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008648:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800864c:	4293      	cmp	r3, r2
 800864e:	dbbc      	blt.n	80085ca <_strtod_l+0x402>
 8008650:	4c41      	ldr	r4, [pc, #260]	@ (8008758 <_strtod_l+0x590>)
 8008652:	f1c5 050f 	rsb	r5, r5, #15
 8008656:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800865a:	4652      	mov	r2, sl
 800865c:	465b      	mov	r3, fp
 800865e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008662:	f7f7 ffc9 	bl	80005f8 <__aeabi_dmul>
 8008666:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008668:	1b5d      	subs	r5, r3, r5
 800866a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800866e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008672:	e78f      	b.n	8008594 <_strtod_l+0x3cc>
 8008674:	3316      	adds	r3, #22
 8008676:	dba8      	blt.n	80085ca <_strtod_l+0x402>
 8008678:	4b37      	ldr	r3, [pc, #220]	@ (8008758 <_strtod_l+0x590>)
 800867a:	eba9 0808 	sub.w	r8, r9, r8
 800867e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008682:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008686:	4650      	mov	r0, sl
 8008688:	4659      	mov	r1, fp
 800868a:	f7f8 f8df 	bl	800084c <__aeabi_ddiv>
 800868e:	e783      	b.n	8008598 <_strtod_l+0x3d0>
 8008690:	4b32      	ldr	r3, [pc, #200]	@ (800875c <_strtod_l+0x594>)
 8008692:	9308      	str	r3, [sp, #32]
 8008694:	2300      	movs	r3, #0
 8008696:	1124      	asrs	r4, r4, #4
 8008698:	4650      	mov	r0, sl
 800869a:	4659      	mov	r1, fp
 800869c:	461e      	mov	r6, r3
 800869e:	2c01      	cmp	r4, #1
 80086a0:	dc21      	bgt.n	80086e6 <_strtod_l+0x51e>
 80086a2:	b10b      	cbz	r3, 80086a8 <_strtod_l+0x4e0>
 80086a4:	4682      	mov	sl, r0
 80086a6:	468b      	mov	fp, r1
 80086a8:	492c      	ldr	r1, [pc, #176]	@ (800875c <_strtod_l+0x594>)
 80086aa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80086ae:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80086b2:	4652      	mov	r2, sl
 80086b4:	465b      	mov	r3, fp
 80086b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086ba:	f7f7 ff9d 	bl	80005f8 <__aeabi_dmul>
 80086be:	4b28      	ldr	r3, [pc, #160]	@ (8008760 <_strtod_l+0x598>)
 80086c0:	460a      	mov	r2, r1
 80086c2:	400b      	ands	r3, r1
 80086c4:	4927      	ldr	r1, [pc, #156]	@ (8008764 <_strtod_l+0x59c>)
 80086c6:	428b      	cmp	r3, r1
 80086c8:	4682      	mov	sl, r0
 80086ca:	d898      	bhi.n	80085fe <_strtod_l+0x436>
 80086cc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80086d0:	428b      	cmp	r3, r1
 80086d2:	bf86      	itte	hi
 80086d4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008768 <_strtod_l+0x5a0>
 80086d8:	f04f 3aff 	movhi.w	sl, #4294967295
 80086dc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80086e0:	2300      	movs	r3, #0
 80086e2:	9308      	str	r3, [sp, #32]
 80086e4:	e07a      	b.n	80087dc <_strtod_l+0x614>
 80086e6:	07e2      	lsls	r2, r4, #31
 80086e8:	d505      	bpl.n	80086f6 <_strtod_l+0x52e>
 80086ea:	9b08      	ldr	r3, [sp, #32]
 80086ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f0:	f7f7 ff82 	bl	80005f8 <__aeabi_dmul>
 80086f4:	2301      	movs	r3, #1
 80086f6:	9a08      	ldr	r2, [sp, #32]
 80086f8:	3208      	adds	r2, #8
 80086fa:	3601      	adds	r6, #1
 80086fc:	1064      	asrs	r4, r4, #1
 80086fe:	9208      	str	r2, [sp, #32]
 8008700:	e7cd      	b.n	800869e <_strtod_l+0x4d6>
 8008702:	d0ed      	beq.n	80086e0 <_strtod_l+0x518>
 8008704:	4264      	negs	r4, r4
 8008706:	f014 020f 	ands.w	r2, r4, #15
 800870a:	d00a      	beq.n	8008722 <_strtod_l+0x55a>
 800870c:	4b12      	ldr	r3, [pc, #72]	@ (8008758 <_strtod_l+0x590>)
 800870e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008712:	4650      	mov	r0, sl
 8008714:	4659      	mov	r1, fp
 8008716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871a:	f7f8 f897 	bl	800084c <__aeabi_ddiv>
 800871e:	4682      	mov	sl, r0
 8008720:	468b      	mov	fp, r1
 8008722:	1124      	asrs	r4, r4, #4
 8008724:	d0dc      	beq.n	80086e0 <_strtod_l+0x518>
 8008726:	2c1f      	cmp	r4, #31
 8008728:	dd20      	ble.n	800876c <_strtod_l+0x5a4>
 800872a:	2400      	movs	r4, #0
 800872c:	46a0      	mov	r8, r4
 800872e:	940a      	str	r4, [sp, #40]	@ 0x28
 8008730:	46a1      	mov	r9, r4
 8008732:	9a05      	ldr	r2, [sp, #20]
 8008734:	2322      	movs	r3, #34	@ 0x22
 8008736:	f04f 0a00 	mov.w	sl, #0
 800873a:	f04f 0b00 	mov.w	fp, #0
 800873e:	6013      	str	r3, [r2, #0]
 8008740:	e768      	b.n	8008614 <_strtod_l+0x44c>
 8008742:	bf00      	nop
 8008744:	0800a115 	.word	0x0800a115
 8008748:	0800a32c 	.word	0x0800a32c
 800874c:	0800a10d 	.word	0x0800a10d
 8008750:	0800a144 	.word	0x0800a144
 8008754:	0800a4d5 	.word	0x0800a4d5
 8008758:	0800a260 	.word	0x0800a260
 800875c:	0800a238 	.word	0x0800a238
 8008760:	7ff00000 	.word	0x7ff00000
 8008764:	7ca00000 	.word	0x7ca00000
 8008768:	7fefffff 	.word	0x7fefffff
 800876c:	f014 0310 	ands.w	r3, r4, #16
 8008770:	bf18      	it	ne
 8008772:	236a      	movne	r3, #106	@ 0x6a
 8008774:	4ea9      	ldr	r6, [pc, #676]	@ (8008a1c <_strtod_l+0x854>)
 8008776:	9308      	str	r3, [sp, #32]
 8008778:	4650      	mov	r0, sl
 800877a:	4659      	mov	r1, fp
 800877c:	2300      	movs	r3, #0
 800877e:	07e2      	lsls	r2, r4, #31
 8008780:	d504      	bpl.n	800878c <_strtod_l+0x5c4>
 8008782:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008786:	f7f7 ff37 	bl	80005f8 <__aeabi_dmul>
 800878a:	2301      	movs	r3, #1
 800878c:	1064      	asrs	r4, r4, #1
 800878e:	f106 0608 	add.w	r6, r6, #8
 8008792:	d1f4      	bne.n	800877e <_strtod_l+0x5b6>
 8008794:	b10b      	cbz	r3, 800879a <_strtod_l+0x5d2>
 8008796:	4682      	mov	sl, r0
 8008798:	468b      	mov	fp, r1
 800879a:	9b08      	ldr	r3, [sp, #32]
 800879c:	b1b3      	cbz	r3, 80087cc <_strtod_l+0x604>
 800879e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80087a2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	4659      	mov	r1, fp
 80087aa:	dd0f      	ble.n	80087cc <_strtod_l+0x604>
 80087ac:	2b1f      	cmp	r3, #31
 80087ae:	dd55      	ble.n	800885c <_strtod_l+0x694>
 80087b0:	2b34      	cmp	r3, #52	@ 0x34
 80087b2:	bfde      	ittt	le
 80087b4:	f04f 33ff 	movle.w	r3, #4294967295
 80087b8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80087bc:	4093      	lslle	r3, r2
 80087be:	f04f 0a00 	mov.w	sl, #0
 80087c2:	bfcc      	ite	gt
 80087c4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80087c8:	ea03 0b01 	andle.w	fp, r3, r1
 80087cc:	2200      	movs	r2, #0
 80087ce:	2300      	movs	r3, #0
 80087d0:	4650      	mov	r0, sl
 80087d2:	4659      	mov	r1, fp
 80087d4:	f7f8 f978 	bl	8000ac8 <__aeabi_dcmpeq>
 80087d8:	2800      	cmp	r0, #0
 80087da:	d1a6      	bne.n	800872a <_strtod_l+0x562>
 80087dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087de:	9300      	str	r3, [sp, #0]
 80087e0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80087e2:	9805      	ldr	r0, [sp, #20]
 80087e4:	462b      	mov	r3, r5
 80087e6:	463a      	mov	r2, r7
 80087e8:	f7ff f8c6 	bl	8007978 <__s2b>
 80087ec:	900a      	str	r0, [sp, #40]	@ 0x28
 80087ee:	2800      	cmp	r0, #0
 80087f0:	f43f af05 	beq.w	80085fe <_strtod_l+0x436>
 80087f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087f6:	2a00      	cmp	r2, #0
 80087f8:	eba9 0308 	sub.w	r3, r9, r8
 80087fc:	bfa8      	it	ge
 80087fe:	2300      	movge	r3, #0
 8008800:	9312      	str	r3, [sp, #72]	@ 0x48
 8008802:	2400      	movs	r4, #0
 8008804:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008808:	9316      	str	r3, [sp, #88]	@ 0x58
 800880a:	46a0      	mov	r8, r4
 800880c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800880e:	9805      	ldr	r0, [sp, #20]
 8008810:	6859      	ldr	r1, [r3, #4]
 8008812:	f7ff f809 	bl	8007828 <_Balloc>
 8008816:	4681      	mov	r9, r0
 8008818:	2800      	cmp	r0, #0
 800881a:	f43f aef4 	beq.w	8008606 <_strtod_l+0x43e>
 800881e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008820:	691a      	ldr	r2, [r3, #16]
 8008822:	3202      	adds	r2, #2
 8008824:	f103 010c 	add.w	r1, r3, #12
 8008828:	0092      	lsls	r2, r2, #2
 800882a:	300c      	adds	r0, #12
 800882c:	f000 ff38 	bl	80096a0 <memcpy>
 8008830:	ec4b ab10 	vmov	d0, sl, fp
 8008834:	9805      	ldr	r0, [sp, #20]
 8008836:	aa1c      	add	r2, sp, #112	@ 0x70
 8008838:	a91b      	add	r1, sp, #108	@ 0x6c
 800883a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800883e:	f7ff fbd7 	bl	8007ff0 <__d2b>
 8008842:	901a      	str	r0, [sp, #104]	@ 0x68
 8008844:	2800      	cmp	r0, #0
 8008846:	f43f aede 	beq.w	8008606 <_strtod_l+0x43e>
 800884a:	9805      	ldr	r0, [sp, #20]
 800884c:	2101      	movs	r1, #1
 800884e:	f7ff f929 	bl	8007aa4 <__i2b>
 8008852:	4680      	mov	r8, r0
 8008854:	b948      	cbnz	r0, 800886a <_strtod_l+0x6a2>
 8008856:	f04f 0800 	mov.w	r8, #0
 800885a:	e6d4      	b.n	8008606 <_strtod_l+0x43e>
 800885c:	f04f 32ff 	mov.w	r2, #4294967295
 8008860:	fa02 f303 	lsl.w	r3, r2, r3
 8008864:	ea03 0a0a 	and.w	sl, r3, sl
 8008868:	e7b0      	b.n	80087cc <_strtod_l+0x604>
 800886a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800886c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800886e:	2d00      	cmp	r5, #0
 8008870:	bfab      	itete	ge
 8008872:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008874:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008876:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008878:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800887a:	bfac      	ite	ge
 800887c:	18ef      	addge	r7, r5, r3
 800887e:	1b5e      	sublt	r6, r3, r5
 8008880:	9b08      	ldr	r3, [sp, #32]
 8008882:	1aed      	subs	r5, r5, r3
 8008884:	4415      	add	r5, r2
 8008886:	4b66      	ldr	r3, [pc, #408]	@ (8008a20 <_strtod_l+0x858>)
 8008888:	3d01      	subs	r5, #1
 800888a:	429d      	cmp	r5, r3
 800888c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008890:	da50      	bge.n	8008934 <_strtod_l+0x76c>
 8008892:	1b5b      	subs	r3, r3, r5
 8008894:	2b1f      	cmp	r3, #31
 8008896:	eba2 0203 	sub.w	r2, r2, r3
 800889a:	f04f 0101 	mov.w	r1, #1
 800889e:	dc3d      	bgt.n	800891c <_strtod_l+0x754>
 80088a0:	fa01 f303 	lsl.w	r3, r1, r3
 80088a4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80088a6:	2300      	movs	r3, #0
 80088a8:	9310      	str	r3, [sp, #64]	@ 0x40
 80088aa:	18bd      	adds	r5, r7, r2
 80088ac:	9b08      	ldr	r3, [sp, #32]
 80088ae:	42af      	cmp	r7, r5
 80088b0:	4416      	add	r6, r2
 80088b2:	441e      	add	r6, r3
 80088b4:	463b      	mov	r3, r7
 80088b6:	bfa8      	it	ge
 80088b8:	462b      	movge	r3, r5
 80088ba:	42b3      	cmp	r3, r6
 80088bc:	bfa8      	it	ge
 80088be:	4633      	movge	r3, r6
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	bfc2      	ittt	gt
 80088c4:	1aed      	subgt	r5, r5, r3
 80088c6:	1af6      	subgt	r6, r6, r3
 80088c8:	1aff      	subgt	r7, r7, r3
 80088ca:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	dd16      	ble.n	80088fe <_strtod_l+0x736>
 80088d0:	4641      	mov	r1, r8
 80088d2:	9805      	ldr	r0, [sp, #20]
 80088d4:	461a      	mov	r2, r3
 80088d6:	f7ff f9a5 	bl	8007c24 <__pow5mult>
 80088da:	4680      	mov	r8, r0
 80088dc:	2800      	cmp	r0, #0
 80088de:	d0ba      	beq.n	8008856 <_strtod_l+0x68e>
 80088e0:	4601      	mov	r1, r0
 80088e2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80088e4:	9805      	ldr	r0, [sp, #20]
 80088e6:	f7ff f8f3 	bl	8007ad0 <__multiply>
 80088ea:	900e      	str	r0, [sp, #56]	@ 0x38
 80088ec:	2800      	cmp	r0, #0
 80088ee:	f43f ae8a 	beq.w	8008606 <_strtod_l+0x43e>
 80088f2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80088f4:	9805      	ldr	r0, [sp, #20]
 80088f6:	f7fe ffd7 	bl	80078a8 <_Bfree>
 80088fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80088fe:	2d00      	cmp	r5, #0
 8008900:	dc1d      	bgt.n	800893e <_strtod_l+0x776>
 8008902:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008904:	2b00      	cmp	r3, #0
 8008906:	dd23      	ble.n	8008950 <_strtod_l+0x788>
 8008908:	4649      	mov	r1, r9
 800890a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800890c:	9805      	ldr	r0, [sp, #20]
 800890e:	f7ff f989 	bl	8007c24 <__pow5mult>
 8008912:	4681      	mov	r9, r0
 8008914:	b9e0      	cbnz	r0, 8008950 <_strtod_l+0x788>
 8008916:	f04f 0900 	mov.w	r9, #0
 800891a:	e674      	b.n	8008606 <_strtod_l+0x43e>
 800891c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008920:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008924:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008928:	35e2      	adds	r5, #226	@ 0xe2
 800892a:	fa01 f305 	lsl.w	r3, r1, r5
 800892e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008930:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008932:	e7ba      	b.n	80088aa <_strtod_l+0x6e2>
 8008934:	2300      	movs	r3, #0
 8008936:	9310      	str	r3, [sp, #64]	@ 0x40
 8008938:	2301      	movs	r3, #1
 800893a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800893c:	e7b5      	b.n	80088aa <_strtod_l+0x6e2>
 800893e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008940:	9805      	ldr	r0, [sp, #20]
 8008942:	462a      	mov	r2, r5
 8008944:	f7ff f9c8 	bl	8007cd8 <__lshift>
 8008948:	901a      	str	r0, [sp, #104]	@ 0x68
 800894a:	2800      	cmp	r0, #0
 800894c:	d1d9      	bne.n	8008902 <_strtod_l+0x73a>
 800894e:	e65a      	b.n	8008606 <_strtod_l+0x43e>
 8008950:	2e00      	cmp	r6, #0
 8008952:	dd07      	ble.n	8008964 <_strtod_l+0x79c>
 8008954:	4649      	mov	r1, r9
 8008956:	9805      	ldr	r0, [sp, #20]
 8008958:	4632      	mov	r2, r6
 800895a:	f7ff f9bd 	bl	8007cd8 <__lshift>
 800895e:	4681      	mov	r9, r0
 8008960:	2800      	cmp	r0, #0
 8008962:	d0d8      	beq.n	8008916 <_strtod_l+0x74e>
 8008964:	2f00      	cmp	r7, #0
 8008966:	dd08      	ble.n	800897a <_strtod_l+0x7b2>
 8008968:	4641      	mov	r1, r8
 800896a:	9805      	ldr	r0, [sp, #20]
 800896c:	463a      	mov	r2, r7
 800896e:	f7ff f9b3 	bl	8007cd8 <__lshift>
 8008972:	4680      	mov	r8, r0
 8008974:	2800      	cmp	r0, #0
 8008976:	f43f ae46 	beq.w	8008606 <_strtod_l+0x43e>
 800897a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800897c:	9805      	ldr	r0, [sp, #20]
 800897e:	464a      	mov	r2, r9
 8008980:	f7ff fa32 	bl	8007de8 <__mdiff>
 8008984:	4604      	mov	r4, r0
 8008986:	2800      	cmp	r0, #0
 8008988:	f43f ae3d 	beq.w	8008606 <_strtod_l+0x43e>
 800898c:	68c3      	ldr	r3, [r0, #12]
 800898e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008990:	2300      	movs	r3, #0
 8008992:	60c3      	str	r3, [r0, #12]
 8008994:	4641      	mov	r1, r8
 8008996:	f7ff fa0b 	bl	8007db0 <__mcmp>
 800899a:	2800      	cmp	r0, #0
 800899c:	da46      	bge.n	8008a2c <_strtod_l+0x864>
 800899e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089a0:	ea53 030a 	orrs.w	r3, r3, sl
 80089a4:	d16c      	bne.n	8008a80 <_strtod_l+0x8b8>
 80089a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d168      	bne.n	8008a80 <_strtod_l+0x8b8>
 80089ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80089b2:	0d1b      	lsrs	r3, r3, #20
 80089b4:	051b      	lsls	r3, r3, #20
 80089b6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80089ba:	d961      	bls.n	8008a80 <_strtod_l+0x8b8>
 80089bc:	6963      	ldr	r3, [r4, #20]
 80089be:	b913      	cbnz	r3, 80089c6 <_strtod_l+0x7fe>
 80089c0:	6923      	ldr	r3, [r4, #16]
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	dd5c      	ble.n	8008a80 <_strtod_l+0x8b8>
 80089c6:	4621      	mov	r1, r4
 80089c8:	2201      	movs	r2, #1
 80089ca:	9805      	ldr	r0, [sp, #20]
 80089cc:	f7ff f984 	bl	8007cd8 <__lshift>
 80089d0:	4641      	mov	r1, r8
 80089d2:	4604      	mov	r4, r0
 80089d4:	f7ff f9ec 	bl	8007db0 <__mcmp>
 80089d8:	2800      	cmp	r0, #0
 80089da:	dd51      	ble.n	8008a80 <_strtod_l+0x8b8>
 80089dc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80089e0:	9a08      	ldr	r2, [sp, #32]
 80089e2:	0d1b      	lsrs	r3, r3, #20
 80089e4:	051b      	lsls	r3, r3, #20
 80089e6:	2a00      	cmp	r2, #0
 80089e8:	d06b      	beq.n	8008ac2 <_strtod_l+0x8fa>
 80089ea:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80089ee:	d868      	bhi.n	8008ac2 <_strtod_l+0x8fa>
 80089f0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80089f4:	f67f ae9d 	bls.w	8008732 <_strtod_l+0x56a>
 80089f8:	4b0a      	ldr	r3, [pc, #40]	@ (8008a24 <_strtod_l+0x85c>)
 80089fa:	4650      	mov	r0, sl
 80089fc:	4659      	mov	r1, fp
 80089fe:	2200      	movs	r2, #0
 8008a00:	f7f7 fdfa 	bl	80005f8 <__aeabi_dmul>
 8008a04:	4b08      	ldr	r3, [pc, #32]	@ (8008a28 <_strtod_l+0x860>)
 8008a06:	400b      	ands	r3, r1
 8008a08:	4682      	mov	sl, r0
 8008a0a:	468b      	mov	fp, r1
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	f47f ae05 	bne.w	800861c <_strtod_l+0x454>
 8008a12:	9a05      	ldr	r2, [sp, #20]
 8008a14:	2322      	movs	r3, #34	@ 0x22
 8008a16:	6013      	str	r3, [r2, #0]
 8008a18:	e600      	b.n	800861c <_strtod_l+0x454>
 8008a1a:	bf00      	nop
 8008a1c:	0800a358 	.word	0x0800a358
 8008a20:	fffffc02 	.word	0xfffffc02
 8008a24:	39500000 	.word	0x39500000
 8008a28:	7ff00000 	.word	0x7ff00000
 8008a2c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008a30:	d165      	bne.n	8008afe <_strtod_l+0x936>
 8008a32:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008a34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a38:	b35a      	cbz	r2, 8008a92 <_strtod_l+0x8ca>
 8008a3a:	4a9f      	ldr	r2, [pc, #636]	@ (8008cb8 <_strtod_l+0xaf0>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d12b      	bne.n	8008a98 <_strtod_l+0x8d0>
 8008a40:	9b08      	ldr	r3, [sp, #32]
 8008a42:	4651      	mov	r1, sl
 8008a44:	b303      	cbz	r3, 8008a88 <_strtod_l+0x8c0>
 8008a46:	4b9d      	ldr	r3, [pc, #628]	@ (8008cbc <_strtod_l+0xaf4>)
 8008a48:	465a      	mov	r2, fp
 8008a4a:	4013      	ands	r3, r2
 8008a4c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008a50:	f04f 32ff 	mov.w	r2, #4294967295
 8008a54:	d81b      	bhi.n	8008a8e <_strtod_l+0x8c6>
 8008a56:	0d1b      	lsrs	r3, r3, #20
 8008a58:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a60:	4299      	cmp	r1, r3
 8008a62:	d119      	bne.n	8008a98 <_strtod_l+0x8d0>
 8008a64:	4b96      	ldr	r3, [pc, #600]	@ (8008cc0 <_strtod_l+0xaf8>)
 8008a66:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d102      	bne.n	8008a72 <_strtod_l+0x8aa>
 8008a6c:	3101      	adds	r1, #1
 8008a6e:	f43f adca 	beq.w	8008606 <_strtod_l+0x43e>
 8008a72:	4b92      	ldr	r3, [pc, #584]	@ (8008cbc <_strtod_l+0xaf4>)
 8008a74:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a76:	401a      	ands	r2, r3
 8008a78:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008a7c:	f04f 0a00 	mov.w	sl, #0
 8008a80:	9b08      	ldr	r3, [sp, #32]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d1b8      	bne.n	80089f8 <_strtod_l+0x830>
 8008a86:	e5c9      	b.n	800861c <_strtod_l+0x454>
 8008a88:	f04f 33ff 	mov.w	r3, #4294967295
 8008a8c:	e7e8      	b.n	8008a60 <_strtod_l+0x898>
 8008a8e:	4613      	mov	r3, r2
 8008a90:	e7e6      	b.n	8008a60 <_strtod_l+0x898>
 8008a92:	ea53 030a 	orrs.w	r3, r3, sl
 8008a96:	d0a1      	beq.n	80089dc <_strtod_l+0x814>
 8008a98:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008a9a:	b1db      	cbz	r3, 8008ad4 <_strtod_l+0x90c>
 8008a9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a9e:	4213      	tst	r3, r2
 8008aa0:	d0ee      	beq.n	8008a80 <_strtod_l+0x8b8>
 8008aa2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008aa4:	9a08      	ldr	r2, [sp, #32]
 8008aa6:	4650      	mov	r0, sl
 8008aa8:	4659      	mov	r1, fp
 8008aaa:	b1bb      	cbz	r3, 8008adc <_strtod_l+0x914>
 8008aac:	f7ff fb6e 	bl	800818c <sulp>
 8008ab0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ab4:	ec53 2b10 	vmov	r2, r3, d0
 8008ab8:	f7f7 fbe8 	bl	800028c <__adddf3>
 8008abc:	4682      	mov	sl, r0
 8008abe:	468b      	mov	fp, r1
 8008ac0:	e7de      	b.n	8008a80 <_strtod_l+0x8b8>
 8008ac2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008ac6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008aca:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008ace:	f04f 3aff 	mov.w	sl, #4294967295
 8008ad2:	e7d5      	b.n	8008a80 <_strtod_l+0x8b8>
 8008ad4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008ad6:	ea13 0f0a 	tst.w	r3, sl
 8008ada:	e7e1      	b.n	8008aa0 <_strtod_l+0x8d8>
 8008adc:	f7ff fb56 	bl	800818c <sulp>
 8008ae0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ae4:	ec53 2b10 	vmov	r2, r3, d0
 8008ae8:	f7f7 fbce 	bl	8000288 <__aeabi_dsub>
 8008aec:	2200      	movs	r2, #0
 8008aee:	2300      	movs	r3, #0
 8008af0:	4682      	mov	sl, r0
 8008af2:	468b      	mov	fp, r1
 8008af4:	f7f7 ffe8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008af8:	2800      	cmp	r0, #0
 8008afa:	d0c1      	beq.n	8008a80 <_strtod_l+0x8b8>
 8008afc:	e619      	b.n	8008732 <_strtod_l+0x56a>
 8008afe:	4641      	mov	r1, r8
 8008b00:	4620      	mov	r0, r4
 8008b02:	f7ff facd 	bl	80080a0 <__ratio>
 8008b06:	ec57 6b10 	vmov	r6, r7, d0
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008b10:	4630      	mov	r0, r6
 8008b12:	4639      	mov	r1, r7
 8008b14:	f7f7 ffec 	bl	8000af0 <__aeabi_dcmple>
 8008b18:	2800      	cmp	r0, #0
 8008b1a:	d06f      	beq.n	8008bfc <_strtod_l+0xa34>
 8008b1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d17a      	bne.n	8008c18 <_strtod_l+0xa50>
 8008b22:	f1ba 0f00 	cmp.w	sl, #0
 8008b26:	d158      	bne.n	8008bda <_strtod_l+0xa12>
 8008b28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d15a      	bne.n	8008be8 <_strtod_l+0xa20>
 8008b32:	4b64      	ldr	r3, [pc, #400]	@ (8008cc4 <_strtod_l+0xafc>)
 8008b34:	2200      	movs	r2, #0
 8008b36:	4630      	mov	r0, r6
 8008b38:	4639      	mov	r1, r7
 8008b3a:	f7f7 ffcf 	bl	8000adc <__aeabi_dcmplt>
 8008b3e:	2800      	cmp	r0, #0
 8008b40:	d159      	bne.n	8008bf6 <_strtod_l+0xa2e>
 8008b42:	4630      	mov	r0, r6
 8008b44:	4639      	mov	r1, r7
 8008b46:	4b60      	ldr	r3, [pc, #384]	@ (8008cc8 <_strtod_l+0xb00>)
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f7f7 fd55 	bl	80005f8 <__aeabi_dmul>
 8008b4e:	4606      	mov	r6, r0
 8008b50:	460f      	mov	r7, r1
 8008b52:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008b56:	9606      	str	r6, [sp, #24]
 8008b58:	9307      	str	r3, [sp, #28]
 8008b5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b5e:	4d57      	ldr	r5, [pc, #348]	@ (8008cbc <_strtod_l+0xaf4>)
 8008b60:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008b64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b66:	401d      	ands	r5, r3
 8008b68:	4b58      	ldr	r3, [pc, #352]	@ (8008ccc <_strtod_l+0xb04>)
 8008b6a:	429d      	cmp	r5, r3
 8008b6c:	f040 80b2 	bne.w	8008cd4 <_strtod_l+0xb0c>
 8008b70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b72:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008b76:	ec4b ab10 	vmov	d0, sl, fp
 8008b7a:	f7ff f9c9 	bl	8007f10 <__ulp>
 8008b7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b82:	ec51 0b10 	vmov	r0, r1, d0
 8008b86:	f7f7 fd37 	bl	80005f8 <__aeabi_dmul>
 8008b8a:	4652      	mov	r2, sl
 8008b8c:	465b      	mov	r3, fp
 8008b8e:	f7f7 fb7d 	bl	800028c <__adddf3>
 8008b92:	460b      	mov	r3, r1
 8008b94:	4949      	ldr	r1, [pc, #292]	@ (8008cbc <_strtod_l+0xaf4>)
 8008b96:	4a4e      	ldr	r2, [pc, #312]	@ (8008cd0 <_strtod_l+0xb08>)
 8008b98:	4019      	ands	r1, r3
 8008b9a:	4291      	cmp	r1, r2
 8008b9c:	4682      	mov	sl, r0
 8008b9e:	d942      	bls.n	8008c26 <_strtod_l+0xa5e>
 8008ba0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008ba2:	4b47      	ldr	r3, [pc, #284]	@ (8008cc0 <_strtod_l+0xaf8>)
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d103      	bne.n	8008bb0 <_strtod_l+0x9e8>
 8008ba8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008baa:	3301      	adds	r3, #1
 8008bac:	f43f ad2b 	beq.w	8008606 <_strtod_l+0x43e>
 8008bb0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008cc0 <_strtod_l+0xaf8>
 8008bb4:	f04f 3aff 	mov.w	sl, #4294967295
 8008bb8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008bba:	9805      	ldr	r0, [sp, #20]
 8008bbc:	f7fe fe74 	bl	80078a8 <_Bfree>
 8008bc0:	9805      	ldr	r0, [sp, #20]
 8008bc2:	4649      	mov	r1, r9
 8008bc4:	f7fe fe70 	bl	80078a8 <_Bfree>
 8008bc8:	9805      	ldr	r0, [sp, #20]
 8008bca:	4641      	mov	r1, r8
 8008bcc:	f7fe fe6c 	bl	80078a8 <_Bfree>
 8008bd0:	9805      	ldr	r0, [sp, #20]
 8008bd2:	4621      	mov	r1, r4
 8008bd4:	f7fe fe68 	bl	80078a8 <_Bfree>
 8008bd8:	e618      	b.n	800880c <_strtod_l+0x644>
 8008bda:	f1ba 0f01 	cmp.w	sl, #1
 8008bde:	d103      	bne.n	8008be8 <_strtod_l+0xa20>
 8008be0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	f43f ada5 	beq.w	8008732 <_strtod_l+0x56a>
 8008be8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008c98 <_strtod_l+0xad0>
 8008bec:	4f35      	ldr	r7, [pc, #212]	@ (8008cc4 <_strtod_l+0xafc>)
 8008bee:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008bf2:	2600      	movs	r6, #0
 8008bf4:	e7b1      	b.n	8008b5a <_strtod_l+0x992>
 8008bf6:	4f34      	ldr	r7, [pc, #208]	@ (8008cc8 <_strtod_l+0xb00>)
 8008bf8:	2600      	movs	r6, #0
 8008bfa:	e7aa      	b.n	8008b52 <_strtod_l+0x98a>
 8008bfc:	4b32      	ldr	r3, [pc, #200]	@ (8008cc8 <_strtod_l+0xb00>)
 8008bfe:	4630      	mov	r0, r6
 8008c00:	4639      	mov	r1, r7
 8008c02:	2200      	movs	r2, #0
 8008c04:	f7f7 fcf8 	bl	80005f8 <__aeabi_dmul>
 8008c08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c0a:	4606      	mov	r6, r0
 8008c0c:	460f      	mov	r7, r1
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d09f      	beq.n	8008b52 <_strtod_l+0x98a>
 8008c12:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008c16:	e7a0      	b.n	8008b5a <_strtod_l+0x992>
 8008c18:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008ca0 <_strtod_l+0xad8>
 8008c1c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008c20:	ec57 6b17 	vmov	r6, r7, d7
 8008c24:	e799      	b.n	8008b5a <_strtod_l+0x992>
 8008c26:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008c2a:	9b08      	ldr	r3, [sp, #32]
 8008c2c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d1c1      	bne.n	8008bb8 <_strtod_l+0x9f0>
 8008c34:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008c38:	0d1b      	lsrs	r3, r3, #20
 8008c3a:	051b      	lsls	r3, r3, #20
 8008c3c:	429d      	cmp	r5, r3
 8008c3e:	d1bb      	bne.n	8008bb8 <_strtod_l+0x9f0>
 8008c40:	4630      	mov	r0, r6
 8008c42:	4639      	mov	r1, r7
 8008c44:	f7f8 f838 	bl	8000cb8 <__aeabi_d2lz>
 8008c48:	f7f7 fca8 	bl	800059c <__aeabi_l2d>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	460b      	mov	r3, r1
 8008c50:	4630      	mov	r0, r6
 8008c52:	4639      	mov	r1, r7
 8008c54:	f7f7 fb18 	bl	8000288 <__aeabi_dsub>
 8008c58:	460b      	mov	r3, r1
 8008c5a:	4602      	mov	r2, r0
 8008c5c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008c60:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008c64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c66:	ea46 060a 	orr.w	r6, r6, sl
 8008c6a:	431e      	orrs	r6, r3
 8008c6c:	d06f      	beq.n	8008d4e <_strtod_l+0xb86>
 8008c6e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008ca8 <_strtod_l+0xae0>)
 8008c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c74:	f7f7 ff32 	bl	8000adc <__aeabi_dcmplt>
 8008c78:	2800      	cmp	r0, #0
 8008c7a:	f47f accf 	bne.w	800861c <_strtod_l+0x454>
 8008c7e:	a30c      	add	r3, pc, #48	@ (adr r3, 8008cb0 <_strtod_l+0xae8>)
 8008c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008c88:	f7f7 ff46 	bl	8000b18 <__aeabi_dcmpgt>
 8008c8c:	2800      	cmp	r0, #0
 8008c8e:	d093      	beq.n	8008bb8 <_strtod_l+0x9f0>
 8008c90:	e4c4      	b.n	800861c <_strtod_l+0x454>
 8008c92:	bf00      	nop
 8008c94:	f3af 8000 	nop.w
 8008c98:	00000000 	.word	0x00000000
 8008c9c:	bff00000 	.word	0xbff00000
 8008ca0:	00000000 	.word	0x00000000
 8008ca4:	3ff00000 	.word	0x3ff00000
 8008ca8:	94a03595 	.word	0x94a03595
 8008cac:	3fdfffff 	.word	0x3fdfffff
 8008cb0:	35afe535 	.word	0x35afe535
 8008cb4:	3fe00000 	.word	0x3fe00000
 8008cb8:	000fffff 	.word	0x000fffff
 8008cbc:	7ff00000 	.word	0x7ff00000
 8008cc0:	7fefffff 	.word	0x7fefffff
 8008cc4:	3ff00000 	.word	0x3ff00000
 8008cc8:	3fe00000 	.word	0x3fe00000
 8008ccc:	7fe00000 	.word	0x7fe00000
 8008cd0:	7c9fffff 	.word	0x7c9fffff
 8008cd4:	9b08      	ldr	r3, [sp, #32]
 8008cd6:	b323      	cbz	r3, 8008d22 <_strtod_l+0xb5a>
 8008cd8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008cdc:	d821      	bhi.n	8008d22 <_strtod_l+0xb5a>
 8008cde:	a328      	add	r3, pc, #160	@ (adr r3, 8008d80 <_strtod_l+0xbb8>)
 8008ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce4:	4630      	mov	r0, r6
 8008ce6:	4639      	mov	r1, r7
 8008ce8:	f7f7 ff02 	bl	8000af0 <__aeabi_dcmple>
 8008cec:	b1a0      	cbz	r0, 8008d18 <_strtod_l+0xb50>
 8008cee:	4639      	mov	r1, r7
 8008cf0:	4630      	mov	r0, r6
 8008cf2:	f7f7 ff59 	bl	8000ba8 <__aeabi_d2uiz>
 8008cf6:	2801      	cmp	r0, #1
 8008cf8:	bf38      	it	cc
 8008cfa:	2001      	movcc	r0, #1
 8008cfc:	f7f7 fc02 	bl	8000504 <__aeabi_ui2d>
 8008d00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d02:	4606      	mov	r6, r0
 8008d04:	460f      	mov	r7, r1
 8008d06:	b9fb      	cbnz	r3, 8008d48 <_strtod_l+0xb80>
 8008d08:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008d0c:	9014      	str	r0, [sp, #80]	@ 0x50
 8008d0e:	9315      	str	r3, [sp, #84]	@ 0x54
 8008d10:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008d14:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008d18:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008d1a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008d1e:	1b5b      	subs	r3, r3, r5
 8008d20:	9311      	str	r3, [sp, #68]	@ 0x44
 8008d22:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008d26:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008d2a:	f7ff f8f1 	bl	8007f10 <__ulp>
 8008d2e:	4650      	mov	r0, sl
 8008d30:	ec53 2b10 	vmov	r2, r3, d0
 8008d34:	4659      	mov	r1, fp
 8008d36:	f7f7 fc5f 	bl	80005f8 <__aeabi_dmul>
 8008d3a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008d3e:	f7f7 faa5 	bl	800028c <__adddf3>
 8008d42:	4682      	mov	sl, r0
 8008d44:	468b      	mov	fp, r1
 8008d46:	e770      	b.n	8008c2a <_strtod_l+0xa62>
 8008d48:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008d4c:	e7e0      	b.n	8008d10 <_strtod_l+0xb48>
 8008d4e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008d88 <_strtod_l+0xbc0>)
 8008d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d54:	f7f7 fec2 	bl	8000adc <__aeabi_dcmplt>
 8008d58:	e798      	b.n	8008c8c <_strtod_l+0xac4>
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d5e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008d60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d62:	6013      	str	r3, [r2, #0]
 8008d64:	f7ff ba6d 	b.w	8008242 <_strtod_l+0x7a>
 8008d68:	2a65      	cmp	r2, #101	@ 0x65
 8008d6a:	f43f ab66 	beq.w	800843a <_strtod_l+0x272>
 8008d6e:	2a45      	cmp	r2, #69	@ 0x45
 8008d70:	f43f ab63 	beq.w	800843a <_strtod_l+0x272>
 8008d74:	2301      	movs	r3, #1
 8008d76:	f7ff bb9e 	b.w	80084b6 <_strtod_l+0x2ee>
 8008d7a:	bf00      	nop
 8008d7c:	f3af 8000 	nop.w
 8008d80:	ffc00000 	.word	0xffc00000
 8008d84:	41dfffff 	.word	0x41dfffff
 8008d88:	94a03595 	.word	0x94a03595
 8008d8c:	3fcfffff 	.word	0x3fcfffff

08008d90 <_strtod_r>:
 8008d90:	4b01      	ldr	r3, [pc, #4]	@ (8008d98 <_strtod_r+0x8>)
 8008d92:	f7ff ba19 	b.w	80081c8 <_strtod_l>
 8008d96:	bf00      	nop
 8008d98:	2000006c 	.word	0x2000006c

08008d9c <_strtol_l.constprop.0>:
 8008d9c:	2b24      	cmp	r3, #36	@ 0x24
 8008d9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008da2:	4686      	mov	lr, r0
 8008da4:	4690      	mov	r8, r2
 8008da6:	d801      	bhi.n	8008dac <_strtol_l.constprop.0+0x10>
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d106      	bne.n	8008dba <_strtol_l.constprop.0+0x1e>
 8008dac:	f7fd fdbc 	bl	8006928 <__errno>
 8008db0:	2316      	movs	r3, #22
 8008db2:	6003      	str	r3, [r0, #0]
 8008db4:	2000      	movs	r0, #0
 8008db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dba:	4834      	ldr	r0, [pc, #208]	@ (8008e8c <_strtol_l.constprop.0+0xf0>)
 8008dbc:	460d      	mov	r5, r1
 8008dbe:	462a      	mov	r2, r5
 8008dc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008dc4:	5d06      	ldrb	r6, [r0, r4]
 8008dc6:	f016 0608 	ands.w	r6, r6, #8
 8008dca:	d1f8      	bne.n	8008dbe <_strtol_l.constprop.0+0x22>
 8008dcc:	2c2d      	cmp	r4, #45	@ 0x2d
 8008dce:	d12d      	bne.n	8008e2c <_strtol_l.constprop.0+0x90>
 8008dd0:	782c      	ldrb	r4, [r5, #0]
 8008dd2:	2601      	movs	r6, #1
 8008dd4:	1c95      	adds	r5, r2, #2
 8008dd6:	f033 0210 	bics.w	r2, r3, #16
 8008dda:	d109      	bne.n	8008df0 <_strtol_l.constprop.0+0x54>
 8008ddc:	2c30      	cmp	r4, #48	@ 0x30
 8008dde:	d12a      	bne.n	8008e36 <_strtol_l.constprop.0+0x9a>
 8008de0:	782a      	ldrb	r2, [r5, #0]
 8008de2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008de6:	2a58      	cmp	r2, #88	@ 0x58
 8008de8:	d125      	bne.n	8008e36 <_strtol_l.constprop.0+0x9a>
 8008dea:	786c      	ldrb	r4, [r5, #1]
 8008dec:	2310      	movs	r3, #16
 8008dee:	3502      	adds	r5, #2
 8008df0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008df4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008df8:	2200      	movs	r2, #0
 8008dfa:	fbbc f9f3 	udiv	r9, ip, r3
 8008dfe:	4610      	mov	r0, r2
 8008e00:	fb03 ca19 	mls	sl, r3, r9, ip
 8008e04:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008e08:	2f09      	cmp	r7, #9
 8008e0a:	d81b      	bhi.n	8008e44 <_strtol_l.constprop.0+0xa8>
 8008e0c:	463c      	mov	r4, r7
 8008e0e:	42a3      	cmp	r3, r4
 8008e10:	dd27      	ble.n	8008e62 <_strtol_l.constprop.0+0xc6>
 8008e12:	1c57      	adds	r7, r2, #1
 8008e14:	d007      	beq.n	8008e26 <_strtol_l.constprop.0+0x8a>
 8008e16:	4581      	cmp	r9, r0
 8008e18:	d320      	bcc.n	8008e5c <_strtol_l.constprop.0+0xc0>
 8008e1a:	d101      	bne.n	8008e20 <_strtol_l.constprop.0+0x84>
 8008e1c:	45a2      	cmp	sl, r4
 8008e1e:	db1d      	blt.n	8008e5c <_strtol_l.constprop.0+0xc0>
 8008e20:	fb00 4003 	mla	r0, r0, r3, r4
 8008e24:	2201      	movs	r2, #1
 8008e26:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e2a:	e7eb      	b.n	8008e04 <_strtol_l.constprop.0+0x68>
 8008e2c:	2c2b      	cmp	r4, #43	@ 0x2b
 8008e2e:	bf04      	itt	eq
 8008e30:	782c      	ldrbeq	r4, [r5, #0]
 8008e32:	1c95      	addeq	r5, r2, #2
 8008e34:	e7cf      	b.n	8008dd6 <_strtol_l.constprop.0+0x3a>
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d1da      	bne.n	8008df0 <_strtol_l.constprop.0+0x54>
 8008e3a:	2c30      	cmp	r4, #48	@ 0x30
 8008e3c:	bf0c      	ite	eq
 8008e3e:	2308      	moveq	r3, #8
 8008e40:	230a      	movne	r3, #10
 8008e42:	e7d5      	b.n	8008df0 <_strtol_l.constprop.0+0x54>
 8008e44:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008e48:	2f19      	cmp	r7, #25
 8008e4a:	d801      	bhi.n	8008e50 <_strtol_l.constprop.0+0xb4>
 8008e4c:	3c37      	subs	r4, #55	@ 0x37
 8008e4e:	e7de      	b.n	8008e0e <_strtol_l.constprop.0+0x72>
 8008e50:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008e54:	2f19      	cmp	r7, #25
 8008e56:	d804      	bhi.n	8008e62 <_strtol_l.constprop.0+0xc6>
 8008e58:	3c57      	subs	r4, #87	@ 0x57
 8008e5a:	e7d8      	b.n	8008e0e <_strtol_l.constprop.0+0x72>
 8008e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e60:	e7e1      	b.n	8008e26 <_strtol_l.constprop.0+0x8a>
 8008e62:	1c53      	adds	r3, r2, #1
 8008e64:	d108      	bne.n	8008e78 <_strtol_l.constprop.0+0xdc>
 8008e66:	2322      	movs	r3, #34	@ 0x22
 8008e68:	f8ce 3000 	str.w	r3, [lr]
 8008e6c:	4660      	mov	r0, ip
 8008e6e:	f1b8 0f00 	cmp.w	r8, #0
 8008e72:	d0a0      	beq.n	8008db6 <_strtol_l.constprop.0+0x1a>
 8008e74:	1e69      	subs	r1, r5, #1
 8008e76:	e006      	b.n	8008e86 <_strtol_l.constprop.0+0xea>
 8008e78:	b106      	cbz	r6, 8008e7c <_strtol_l.constprop.0+0xe0>
 8008e7a:	4240      	negs	r0, r0
 8008e7c:	f1b8 0f00 	cmp.w	r8, #0
 8008e80:	d099      	beq.n	8008db6 <_strtol_l.constprop.0+0x1a>
 8008e82:	2a00      	cmp	r2, #0
 8008e84:	d1f6      	bne.n	8008e74 <_strtol_l.constprop.0+0xd8>
 8008e86:	f8c8 1000 	str.w	r1, [r8]
 8008e8a:	e794      	b.n	8008db6 <_strtol_l.constprop.0+0x1a>
 8008e8c:	0800a381 	.word	0x0800a381

08008e90 <_strtol_r>:
 8008e90:	f7ff bf84 	b.w	8008d9c <_strtol_l.constprop.0>

08008e94 <__ssputs_r>:
 8008e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e98:	688e      	ldr	r6, [r1, #8]
 8008e9a:	461f      	mov	r7, r3
 8008e9c:	42be      	cmp	r6, r7
 8008e9e:	680b      	ldr	r3, [r1, #0]
 8008ea0:	4682      	mov	sl, r0
 8008ea2:	460c      	mov	r4, r1
 8008ea4:	4690      	mov	r8, r2
 8008ea6:	d82d      	bhi.n	8008f04 <__ssputs_r+0x70>
 8008ea8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008eac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008eb0:	d026      	beq.n	8008f00 <__ssputs_r+0x6c>
 8008eb2:	6965      	ldr	r5, [r4, #20]
 8008eb4:	6909      	ldr	r1, [r1, #16]
 8008eb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008eba:	eba3 0901 	sub.w	r9, r3, r1
 8008ebe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ec2:	1c7b      	adds	r3, r7, #1
 8008ec4:	444b      	add	r3, r9
 8008ec6:	106d      	asrs	r5, r5, #1
 8008ec8:	429d      	cmp	r5, r3
 8008eca:	bf38      	it	cc
 8008ecc:	461d      	movcc	r5, r3
 8008ece:	0553      	lsls	r3, r2, #21
 8008ed0:	d527      	bpl.n	8008f22 <__ssputs_r+0x8e>
 8008ed2:	4629      	mov	r1, r5
 8008ed4:	f7fe fc1c 	bl	8007710 <_malloc_r>
 8008ed8:	4606      	mov	r6, r0
 8008eda:	b360      	cbz	r0, 8008f36 <__ssputs_r+0xa2>
 8008edc:	6921      	ldr	r1, [r4, #16]
 8008ede:	464a      	mov	r2, r9
 8008ee0:	f000 fbde 	bl	80096a0 <memcpy>
 8008ee4:	89a3      	ldrh	r3, [r4, #12]
 8008ee6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008eea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008eee:	81a3      	strh	r3, [r4, #12]
 8008ef0:	6126      	str	r6, [r4, #16]
 8008ef2:	6165      	str	r5, [r4, #20]
 8008ef4:	444e      	add	r6, r9
 8008ef6:	eba5 0509 	sub.w	r5, r5, r9
 8008efa:	6026      	str	r6, [r4, #0]
 8008efc:	60a5      	str	r5, [r4, #8]
 8008efe:	463e      	mov	r6, r7
 8008f00:	42be      	cmp	r6, r7
 8008f02:	d900      	bls.n	8008f06 <__ssputs_r+0x72>
 8008f04:	463e      	mov	r6, r7
 8008f06:	6820      	ldr	r0, [r4, #0]
 8008f08:	4632      	mov	r2, r6
 8008f0a:	4641      	mov	r1, r8
 8008f0c:	f000 fb6a 	bl	80095e4 <memmove>
 8008f10:	68a3      	ldr	r3, [r4, #8]
 8008f12:	1b9b      	subs	r3, r3, r6
 8008f14:	60a3      	str	r3, [r4, #8]
 8008f16:	6823      	ldr	r3, [r4, #0]
 8008f18:	4433      	add	r3, r6
 8008f1a:	6023      	str	r3, [r4, #0]
 8008f1c:	2000      	movs	r0, #0
 8008f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f22:	462a      	mov	r2, r5
 8008f24:	f000 ff51 	bl	8009dca <_realloc_r>
 8008f28:	4606      	mov	r6, r0
 8008f2a:	2800      	cmp	r0, #0
 8008f2c:	d1e0      	bne.n	8008ef0 <__ssputs_r+0x5c>
 8008f2e:	6921      	ldr	r1, [r4, #16]
 8008f30:	4650      	mov	r0, sl
 8008f32:	f7fe fb79 	bl	8007628 <_free_r>
 8008f36:	230c      	movs	r3, #12
 8008f38:	f8ca 3000 	str.w	r3, [sl]
 8008f3c:	89a3      	ldrh	r3, [r4, #12]
 8008f3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f42:	81a3      	strh	r3, [r4, #12]
 8008f44:	f04f 30ff 	mov.w	r0, #4294967295
 8008f48:	e7e9      	b.n	8008f1e <__ssputs_r+0x8a>
	...

08008f4c <_svfiprintf_r>:
 8008f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f50:	4698      	mov	r8, r3
 8008f52:	898b      	ldrh	r3, [r1, #12]
 8008f54:	061b      	lsls	r3, r3, #24
 8008f56:	b09d      	sub	sp, #116	@ 0x74
 8008f58:	4607      	mov	r7, r0
 8008f5a:	460d      	mov	r5, r1
 8008f5c:	4614      	mov	r4, r2
 8008f5e:	d510      	bpl.n	8008f82 <_svfiprintf_r+0x36>
 8008f60:	690b      	ldr	r3, [r1, #16]
 8008f62:	b973      	cbnz	r3, 8008f82 <_svfiprintf_r+0x36>
 8008f64:	2140      	movs	r1, #64	@ 0x40
 8008f66:	f7fe fbd3 	bl	8007710 <_malloc_r>
 8008f6a:	6028      	str	r0, [r5, #0]
 8008f6c:	6128      	str	r0, [r5, #16]
 8008f6e:	b930      	cbnz	r0, 8008f7e <_svfiprintf_r+0x32>
 8008f70:	230c      	movs	r3, #12
 8008f72:	603b      	str	r3, [r7, #0]
 8008f74:	f04f 30ff 	mov.w	r0, #4294967295
 8008f78:	b01d      	add	sp, #116	@ 0x74
 8008f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f7e:	2340      	movs	r3, #64	@ 0x40
 8008f80:	616b      	str	r3, [r5, #20]
 8008f82:	2300      	movs	r3, #0
 8008f84:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f86:	2320      	movs	r3, #32
 8008f88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008f8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f90:	2330      	movs	r3, #48	@ 0x30
 8008f92:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009130 <_svfiprintf_r+0x1e4>
 8008f96:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008f9a:	f04f 0901 	mov.w	r9, #1
 8008f9e:	4623      	mov	r3, r4
 8008fa0:	469a      	mov	sl, r3
 8008fa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fa6:	b10a      	cbz	r2, 8008fac <_svfiprintf_r+0x60>
 8008fa8:	2a25      	cmp	r2, #37	@ 0x25
 8008faa:	d1f9      	bne.n	8008fa0 <_svfiprintf_r+0x54>
 8008fac:	ebba 0b04 	subs.w	fp, sl, r4
 8008fb0:	d00b      	beq.n	8008fca <_svfiprintf_r+0x7e>
 8008fb2:	465b      	mov	r3, fp
 8008fb4:	4622      	mov	r2, r4
 8008fb6:	4629      	mov	r1, r5
 8008fb8:	4638      	mov	r0, r7
 8008fba:	f7ff ff6b 	bl	8008e94 <__ssputs_r>
 8008fbe:	3001      	adds	r0, #1
 8008fc0:	f000 80a7 	beq.w	8009112 <_svfiprintf_r+0x1c6>
 8008fc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008fc6:	445a      	add	r2, fp
 8008fc8:	9209      	str	r2, [sp, #36]	@ 0x24
 8008fca:	f89a 3000 	ldrb.w	r3, [sl]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	f000 809f 	beq.w	8009112 <_svfiprintf_r+0x1c6>
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8008fda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fde:	f10a 0a01 	add.w	sl, sl, #1
 8008fe2:	9304      	str	r3, [sp, #16]
 8008fe4:	9307      	str	r3, [sp, #28]
 8008fe6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008fea:	931a      	str	r3, [sp, #104]	@ 0x68
 8008fec:	4654      	mov	r4, sl
 8008fee:	2205      	movs	r2, #5
 8008ff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ff4:	484e      	ldr	r0, [pc, #312]	@ (8009130 <_svfiprintf_r+0x1e4>)
 8008ff6:	f7f7 f8eb 	bl	80001d0 <memchr>
 8008ffa:	9a04      	ldr	r2, [sp, #16]
 8008ffc:	b9d8      	cbnz	r0, 8009036 <_svfiprintf_r+0xea>
 8008ffe:	06d0      	lsls	r0, r2, #27
 8009000:	bf44      	itt	mi
 8009002:	2320      	movmi	r3, #32
 8009004:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009008:	0711      	lsls	r1, r2, #28
 800900a:	bf44      	itt	mi
 800900c:	232b      	movmi	r3, #43	@ 0x2b
 800900e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009012:	f89a 3000 	ldrb.w	r3, [sl]
 8009016:	2b2a      	cmp	r3, #42	@ 0x2a
 8009018:	d015      	beq.n	8009046 <_svfiprintf_r+0xfa>
 800901a:	9a07      	ldr	r2, [sp, #28]
 800901c:	4654      	mov	r4, sl
 800901e:	2000      	movs	r0, #0
 8009020:	f04f 0c0a 	mov.w	ip, #10
 8009024:	4621      	mov	r1, r4
 8009026:	f811 3b01 	ldrb.w	r3, [r1], #1
 800902a:	3b30      	subs	r3, #48	@ 0x30
 800902c:	2b09      	cmp	r3, #9
 800902e:	d94b      	bls.n	80090c8 <_svfiprintf_r+0x17c>
 8009030:	b1b0      	cbz	r0, 8009060 <_svfiprintf_r+0x114>
 8009032:	9207      	str	r2, [sp, #28]
 8009034:	e014      	b.n	8009060 <_svfiprintf_r+0x114>
 8009036:	eba0 0308 	sub.w	r3, r0, r8
 800903a:	fa09 f303 	lsl.w	r3, r9, r3
 800903e:	4313      	orrs	r3, r2
 8009040:	9304      	str	r3, [sp, #16]
 8009042:	46a2      	mov	sl, r4
 8009044:	e7d2      	b.n	8008fec <_svfiprintf_r+0xa0>
 8009046:	9b03      	ldr	r3, [sp, #12]
 8009048:	1d19      	adds	r1, r3, #4
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	9103      	str	r1, [sp, #12]
 800904e:	2b00      	cmp	r3, #0
 8009050:	bfbb      	ittet	lt
 8009052:	425b      	neglt	r3, r3
 8009054:	f042 0202 	orrlt.w	r2, r2, #2
 8009058:	9307      	strge	r3, [sp, #28]
 800905a:	9307      	strlt	r3, [sp, #28]
 800905c:	bfb8      	it	lt
 800905e:	9204      	strlt	r2, [sp, #16]
 8009060:	7823      	ldrb	r3, [r4, #0]
 8009062:	2b2e      	cmp	r3, #46	@ 0x2e
 8009064:	d10a      	bne.n	800907c <_svfiprintf_r+0x130>
 8009066:	7863      	ldrb	r3, [r4, #1]
 8009068:	2b2a      	cmp	r3, #42	@ 0x2a
 800906a:	d132      	bne.n	80090d2 <_svfiprintf_r+0x186>
 800906c:	9b03      	ldr	r3, [sp, #12]
 800906e:	1d1a      	adds	r2, r3, #4
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	9203      	str	r2, [sp, #12]
 8009074:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009078:	3402      	adds	r4, #2
 800907a:	9305      	str	r3, [sp, #20]
 800907c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009140 <_svfiprintf_r+0x1f4>
 8009080:	7821      	ldrb	r1, [r4, #0]
 8009082:	2203      	movs	r2, #3
 8009084:	4650      	mov	r0, sl
 8009086:	f7f7 f8a3 	bl	80001d0 <memchr>
 800908a:	b138      	cbz	r0, 800909c <_svfiprintf_r+0x150>
 800908c:	9b04      	ldr	r3, [sp, #16]
 800908e:	eba0 000a 	sub.w	r0, r0, sl
 8009092:	2240      	movs	r2, #64	@ 0x40
 8009094:	4082      	lsls	r2, r0
 8009096:	4313      	orrs	r3, r2
 8009098:	3401      	adds	r4, #1
 800909a:	9304      	str	r3, [sp, #16]
 800909c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090a0:	4824      	ldr	r0, [pc, #144]	@ (8009134 <_svfiprintf_r+0x1e8>)
 80090a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80090a6:	2206      	movs	r2, #6
 80090a8:	f7f7 f892 	bl	80001d0 <memchr>
 80090ac:	2800      	cmp	r0, #0
 80090ae:	d036      	beq.n	800911e <_svfiprintf_r+0x1d2>
 80090b0:	4b21      	ldr	r3, [pc, #132]	@ (8009138 <_svfiprintf_r+0x1ec>)
 80090b2:	bb1b      	cbnz	r3, 80090fc <_svfiprintf_r+0x1b0>
 80090b4:	9b03      	ldr	r3, [sp, #12]
 80090b6:	3307      	adds	r3, #7
 80090b8:	f023 0307 	bic.w	r3, r3, #7
 80090bc:	3308      	adds	r3, #8
 80090be:	9303      	str	r3, [sp, #12]
 80090c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090c2:	4433      	add	r3, r6
 80090c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80090c6:	e76a      	b.n	8008f9e <_svfiprintf_r+0x52>
 80090c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80090cc:	460c      	mov	r4, r1
 80090ce:	2001      	movs	r0, #1
 80090d0:	e7a8      	b.n	8009024 <_svfiprintf_r+0xd8>
 80090d2:	2300      	movs	r3, #0
 80090d4:	3401      	adds	r4, #1
 80090d6:	9305      	str	r3, [sp, #20]
 80090d8:	4619      	mov	r1, r3
 80090da:	f04f 0c0a 	mov.w	ip, #10
 80090de:	4620      	mov	r0, r4
 80090e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090e4:	3a30      	subs	r2, #48	@ 0x30
 80090e6:	2a09      	cmp	r2, #9
 80090e8:	d903      	bls.n	80090f2 <_svfiprintf_r+0x1a6>
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d0c6      	beq.n	800907c <_svfiprintf_r+0x130>
 80090ee:	9105      	str	r1, [sp, #20]
 80090f0:	e7c4      	b.n	800907c <_svfiprintf_r+0x130>
 80090f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80090f6:	4604      	mov	r4, r0
 80090f8:	2301      	movs	r3, #1
 80090fa:	e7f0      	b.n	80090de <_svfiprintf_r+0x192>
 80090fc:	ab03      	add	r3, sp, #12
 80090fe:	9300      	str	r3, [sp, #0]
 8009100:	462a      	mov	r2, r5
 8009102:	4b0e      	ldr	r3, [pc, #56]	@ (800913c <_svfiprintf_r+0x1f0>)
 8009104:	a904      	add	r1, sp, #16
 8009106:	4638      	mov	r0, r7
 8009108:	f7fc fbc6 	bl	8005898 <_printf_float>
 800910c:	1c42      	adds	r2, r0, #1
 800910e:	4606      	mov	r6, r0
 8009110:	d1d6      	bne.n	80090c0 <_svfiprintf_r+0x174>
 8009112:	89ab      	ldrh	r3, [r5, #12]
 8009114:	065b      	lsls	r3, r3, #25
 8009116:	f53f af2d 	bmi.w	8008f74 <_svfiprintf_r+0x28>
 800911a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800911c:	e72c      	b.n	8008f78 <_svfiprintf_r+0x2c>
 800911e:	ab03      	add	r3, sp, #12
 8009120:	9300      	str	r3, [sp, #0]
 8009122:	462a      	mov	r2, r5
 8009124:	4b05      	ldr	r3, [pc, #20]	@ (800913c <_svfiprintf_r+0x1f0>)
 8009126:	a904      	add	r1, sp, #16
 8009128:	4638      	mov	r0, r7
 800912a:	f7fc fe4d 	bl	8005dc8 <_printf_i>
 800912e:	e7ed      	b.n	800910c <_svfiprintf_r+0x1c0>
 8009130:	0800a481 	.word	0x0800a481
 8009134:	0800a48b 	.word	0x0800a48b
 8009138:	08005899 	.word	0x08005899
 800913c:	08008e95 	.word	0x08008e95
 8009140:	0800a487 	.word	0x0800a487

08009144 <__sfputc_r>:
 8009144:	6893      	ldr	r3, [r2, #8]
 8009146:	3b01      	subs	r3, #1
 8009148:	2b00      	cmp	r3, #0
 800914a:	b410      	push	{r4}
 800914c:	6093      	str	r3, [r2, #8]
 800914e:	da08      	bge.n	8009162 <__sfputc_r+0x1e>
 8009150:	6994      	ldr	r4, [r2, #24]
 8009152:	42a3      	cmp	r3, r4
 8009154:	db01      	blt.n	800915a <__sfputc_r+0x16>
 8009156:	290a      	cmp	r1, #10
 8009158:	d103      	bne.n	8009162 <__sfputc_r+0x1e>
 800915a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800915e:	f7fd bafc 	b.w	800675a <__swbuf_r>
 8009162:	6813      	ldr	r3, [r2, #0]
 8009164:	1c58      	adds	r0, r3, #1
 8009166:	6010      	str	r0, [r2, #0]
 8009168:	7019      	strb	r1, [r3, #0]
 800916a:	4608      	mov	r0, r1
 800916c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009170:	4770      	bx	lr

08009172 <__sfputs_r>:
 8009172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009174:	4606      	mov	r6, r0
 8009176:	460f      	mov	r7, r1
 8009178:	4614      	mov	r4, r2
 800917a:	18d5      	adds	r5, r2, r3
 800917c:	42ac      	cmp	r4, r5
 800917e:	d101      	bne.n	8009184 <__sfputs_r+0x12>
 8009180:	2000      	movs	r0, #0
 8009182:	e007      	b.n	8009194 <__sfputs_r+0x22>
 8009184:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009188:	463a      	mov	r2, r7
 800918a:	4630      	mov	r0, r6
 800918c:	f7ff ffda 	bl	8009144 <__sfputc_r>
 8009190:	1c43      	adds	r3, r0, #1
 8009192:	d1f3      	bne.n	800917c <__sfputs_r+0xa>
 8009194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009198 <_vfiprintf_r>:
 8009198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800919c:	460d      	mov	r5, r1
 800919e:	b09d      	sub	sp, #116	@ 0x74
 80091a0:	4614      	mov	r4, r2
 80091a2:	4698      	mov	r8, r3
 80091a4:	4606      	mov	r6, r0
 80091a6:	b118      	cbz	r0, 80091b0 <_vfiprintf_r+0x18>
 80091a8:	6a03      	ldr	r3, [r0, #32]
 80091aa:	b90b      	cbnz	r3, 80091b0 <_vfiprintf_r+0x18>
 80091ac:	f7fd f9cc 	bl	8006548 <__sinit>
 80091b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091b2:	07d9      	lsls	r1, r3, #31
 80091b4:	d405      	bmi.n	80091c2 <_vfiprintf_r+0x2a>
 80091b6:	89ab      	ldrh	r3, [r5, #12]
 80091b8:	059a      	lsls	r2, r3, #22
 80091ba:	d402      	bmi.n	80091c2 <_vfiprintf_r+0x2a>
 80091bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80091be:	f7fd fbde 	bl	800697e <__retarget_lock_acquire_recursive>
 80091c2:	89ab      	ldrh	r3, [r5, #12]
 80091c4:	071b      	lsls	r3, r3, #28
 80091c6:	d501      	bpl.n	80091cc <_vfiprintf_r+0x34>
 80091c8:	692b      	ldr	r3, [r5, #16]
 80091ca:	b99b      	cbnz	r3, 80091f4 <_vfiprintf_r+0x5c>
 80091cc:	4629      	mov	r1, r5
 80091ce:	4630      	mov	r0, r6
 80091d0:	f7fd fb02 	bl	80067d8 <__swsetup_r>
 80091d4:	b170      	cbz	r0, 80091f4 <_vfiprintf_r+0x5c>
 80091d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091d8:	07dc      	lsls	r4, r3, #31
 80091da:	d504      	bpl.n	80091e6 <_vfiprintf_r+0x4e>
 80091dc:	f04f 30ff 	mov.w	r0, #4294967295
 80091e0:	b01d      	add	sp, #116	@ 0x74
 80091e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091e6:	89ab      	ldrh	r3, [r5, #12]
 80091e8:	0598      	lsls	r0, r3, #22
 80091ea:	d4f7      	bmi.n	80091dc <_vfiprintf_r+0x44>
 80091ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80091ee:	f7fd fbc7 	bl	8006980 <__retarget_lock_release_recursive>
 80091f2:	e7f3      	b.n	80091dc <_vfiprintf_r+0x44>
 80091f4:	2300      	movs	r3, #0
 80091f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80091f8:	2320      	movs	r3, #32
 80091fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80091fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8009202:	2330      	movs	r3, #48	@ 0x30
 8009204:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80093b4 <_vfiprintf_r+0x21c>
 8009208:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800920c:	f04f 0901 	mov.w	r9, #1
 8009210:	4623      	mov	r3, r4
 8009212:	469a      	mov	sl, r3
 8009214:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009218:	b10a      	cbz	r2, 800921e <_vfiprintf_r+0x86>
 800921a:	2a25      	cmp	r2, #37	@ 0x25
 800921c:	d1f9      	bne.n	8009212 <_vfiprintf_r+0x7a>
 800921e:	ebba 0b04 	subs.w	fp, sl, r4
 8009222:	d00b      	beq.n	800923c <_vfiprintf_r+0xa4>
 8009224:	465b      	mov	r3, fp
 8009226:	4622      	mov	r2, r4
 8009228:	4629      	mov	r1, r5
 800922a:	4630      	mov	r0, r6
 800922c:	f7ff ffa1 	bl	8009172 <__sfputs_r>
 8009230:	3001      	adds	r0, #1
 8009232:	f000 80a7 	beq.w	8009384 <_vfiprintf_r+0x1ec>
 8009236:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009238:	445a      	add	r2, fp
 800923a:	9209      	str	r2, [sp, #36]	@ 0x24
 800923c:	f89a 3000 	ldrb.w	r3, [sl]
 8009240:	2b00      	cmp	r3, #0
 8009242:	f000 809f 	beq.w	8009384 <_vfiprintf_r+0x1ec>
 8009246:	2300      	movs	r3, #0
 8009248:	f04f 32ff 	mov.w	r2, #4294967295
 800924c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009250:	f10a 0a01 	add.w	sl, sl, #1
 8009254:	9304      	str	r3, [sp, #16]
 8009256:	9307      	str	r3, [sp, #28]
 8009258:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800925c:	931a      	str	r3, [sp, #104]	@ 0x68
 800925e:	4654      	mov	r4, sl
 8009260:	2205      	movs	r2, #5
 8009262:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009266:	4853      	ldr	r0, [pc, #332]	@ (80093b4 <_vfiprintf_r+0x21c>)
 8009268:	f7f6 ffb2 	bl	80001d0 <memchr>
 800926c:	9a04      	ldr	r2, [sp, #16]
 800926e:	b9d8      	cbnz	r0, 80092a8 <_vfiprintf_r+0x110>
 8009270:	06d1      	lsls	r1, r2, #27
 8009272:	bf44      	itt	mi
 8009274:	2320      	movmi	r3, #32
 8009276:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800927a:	0713      	lsls	r3, r2, #28
 800927c:	bf44      	itt	mi
 800927e:	232b      	movmi	r3, #43	@ 0x2b
 8009280:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009284:	f89a 3000 	ldrb.w	r3, [sl]
 8009288:	2b2a      	cmp	r3, #42	@ 0x2a
 800928a:	d015      	beq.n	80092b8 <_vfiprintf_r+0x120>
 800928c:	9a07      	ldr	r2, [sp, #28]
 800928e:	4654      	mov	r4, sl
 8009290:	2000      	movs	r0, #0
 8009292:	f04f 0c0a 	mov.w	ip, #10
 8009296:	4621      	mov	r1, r4
 8009298:	f811 3b01 	ldrb.w	r3, [r1], #1
 800929c:	3b30      	subs	r3, #48	@ 0x30
 800929e:	2b09      	cmp	r3, #9
 80092a0:	d94b      	bls.n	800933a <_vfiprintf_r+0x1a2>
 80092a2:	b1b0      	cbz	r0, 80092d2 <_vfiprintf_r+0x13a>
 80092a4:	9207      	str	r2, [sp, #28]
 80092a6:	e014      	b.n	80092d2 <_vfiprintf_r+0x13a>
 80092a8:	eba0 0308 	sub.w	r3, r0, r8
 80092ac:	fa09 f303 	lsl.w	r3, r9, r3
 80092b0:	4313      	orrs	r3, r2
 80092b2:	9304      	str	r3, [sp, #16]
 80092b4:	46a2      	mov	sl, r4
 80092b6:	e7d2      	b.n	800925e <_vfiprintf_r+0xc6>
 80092b8:	9b03      	ldr	r3, [sp, #12]
 80092ba:	1d19      	adds	r1, r3, #4
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	9103      	str	r1, [sp, #12]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	bfbb      	ittet	lt
 80092c4:	425b      	neglt	r3, r3
 80092c6:	f042 0202 	orrlt.w	r2, r2, #2
 80092ca:	9307      	strge	r3, [sp, #28]
 80092cc:	9307      	strlt	r3, [sp, #28]
 80092ce:	bfb8      	it	lt
 80092d0:	9204      	strlt	r2, [sp, #16]
 80092d2:	7823      	ldrb	r3, [r4, #0]
 80092d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80092d6:	d10a      	bne.n	80092ee <_vfiprintf_r+0x156>
 80092d8:	7863      	ldrb	r3, [r4, #1]
 80092da:	2b2a      	cmp	r3, #42	@ 0x2a
 80092dc:	d132      	bne.n	8009344 <_vfiprintf_r+0x1ac>
 80092de:	9b03      	ldr	r3, [sp, #12]
 80092e0:	1d1a      	adds	r2, r3, #4
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	9203      	str	r2, [sp, #12]
 80092e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80092ea:	3402      	adds	r4, #2
 80092ec:	9305      	str	r3, [sp, #20]
 80092ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80093c4 <_vfiprintf_r+0x22c>
 80092f2:	7821      	ldrb	r1, [r4, #0]
 80092f4:	2203      	movs	r2, #3
 80092f6:	4650      	mov	r0, sl
 80092f8:	f7f6 ff6a 	bl	80001d0 <memchr>
 80092fc:	b138      	cbz	r0, 800930e <_vfiprintf_r+0x176>
 80092fe:	9b04      	ldr	r3, [sp, #16]
 8009300:	eba0 000a 	sub.w	r0, r0, sl
 8009304:	2240      	movs	r2, #64	@ 0x40
 8009306:	4082      	lsls	r2, r0
 8009308:	4313      	orrs	r3, r2
 800930a:	3401      	adds	r4, #1
 800930c:	9304      	str	r3, [sp, #16]
 800930e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009312:	4829      	ldr	r0, [pc, #164]	@ (80093b8 <_vfiprintf_r+0x220>)
 8009314:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009318:	2206      	movs	r2, #6
 800931a:	f7f6 ff59 	bl	80001d0 <memchr>
 800931e:	2800      	cmp	r0, #0
 8009320:	d03f      	beq.n	80093a2 <_vfiprintf_r+0x20a>
 8009322:	4b26      	ldr	r3, [pc, #152]	@ (80093bc <_vfiprintf_r+0x224>)
 8009324:	bb1b      	cbnz	r3, 800936e <_vfiprintf_r+0x1d6>
 8009326:	9b03      	ldr	r3, [sp, #12]
 8009328:	3307      	adds	r3, #7
 800932a:	f023 0307 	bic.w	r3, r3, #7
 800932e:	3308      	adds	r3, #8
 8009330:	9303      	str	r3, [sp, #12]
 8009332:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009334:	443b      	add	r3, r7
 8009336:	9309      	str	r3, [sp, #36]	@ 0x24
 8009338:	e76a      	b.n	8009210 <_vfiprintf_r+0x78>
 800933a:	fb0c 3202 	mla	r2, ip, r2, r3
 800933e:	460c      	mov	r4, r1
 8009340:	2001      	movs	r0, #1
 8009342:	e7a8      	b.n	8009296 <_vfiprintf_r+0xfe>
 8009344:	2300      	movs	r3, #0
 8009346:	3401      	adds	r4, #1
 8009348:	9305      	str	r3, [sp, #20]
 800934a:	4619      	mov	r1, r3
 800934c:	f04f 0c0a 	mov.w	ip, #10
 8009350:	4620      	mov	r0, r4
 8009352:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009356:	3a30      	subs	r2, #48	@ 0x30
 8009358:	2a09      	cmp	r2, #9
 800935a:	d903      	bls.n	8009364 <_vfiprintf_r+0x1cc>
 800935c:	2b00      	cmp	r3, #0
 800935e:	d0c6      	beq.n	80092ee <_vfiprintf_r+0x156>
 8009360:	9105      	str	r1, [sp, #20]
 8009362:	e7c4      	b.n	80092ee <_vfiprintf_r+0x156>
 8009364:	fb0c 2101 	mla	r1, ip, r1, r2
 8009368:	4604      	mov	r4, r0
 800936a:	2301      	movs	r3, #1
 800936c:	e7f0      	b.n	8009350 <_vfiprintf_r+0x1b8>
 800936e:	ab03      	add	r3, sp, #12
 8009370:	9300      	str	r3, [sp, #0]
 8009372:	462a      	mov	r2, r5
 8009374:	4b12      	ldr	r3, [pc, #72]	@ (80093c0 <_vfiprintf_r+0x228>)
 8009376:	a904      	add	r1, sp, #16
 8009378:	4630      	mov	r0, r6
 800937a:	f7fc fa8d 	bl	8005898 <_printf_float>
 800937e:	4607      	mov	r7, r0
 8009380:	1c78      	adds	r0, r7, #1
 8009382:	d1d6      	bne.n	8009332 <_vfiprintf_r+0x19a>
 8009384:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009386:	07d9      	lsls	r1, r3, #31
 8009388:	d405      	bmi.n	8009396 <_vfiprintf_r+0x1fe>
 800938a:	89ab      	ldrh	r3, [r5, #12]
 800938c:	059a      	lsls	r2, r3, #22
 800938e:	d402      	bmi.n	8009396 <_vfiprintf_r+0x1fe>
 8009390:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009392:	f7fd faf5 	bl	8006980 <__retarget_lock_release_recursive>
 8009396:	89ab      	ldrh	r3, [r5, #12]
 8009398:	065b      	lsls	r3, r3, #25
 800939a:	f53f af1f 	bmi.w	80091dc <_vfiprintf_r+0x44>
 800939e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80093a0:	e71e      	b.n	80091e0 <_vfiprintf_r+0x48>
 80093a2:	ab03      	add	r3, sp, #12
 80093a4:	9300      	str	r3, [sp, #0]
 80093a6:	462a      	mov	r2, r5
 80093a8:	4b05      	ldr	r3, [pc, #20]	@ (80093c0 <_vfiprintf_r+0x228>)
 80093aa:	a904      	add	r1, sp, #16
 80093ac:	4630      	mov	r0, r6
 80093ae:	f7fc fd0b 	bl	8005dc8 <_printf_i>
 80093b2:	e7e4      	b.n	800937e <_vfiprintf_r+0x1e6>
 80093b4:	0800a481 	.word	0x0800a481
 80093b8:	0800a48b 	.word	0x0800a48b
 80093bc:	08005899 	.word	0x08005899
 80093c0:	08009173 	.word	0x08009173
 80093c4:	0800a487 	.word	0x0800a487

080093c8 <__sflush_r>:
 80093c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80093cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093d0:	0716      	lsls	r6, r2, #28
 80093d2:	4605      	mov	r5, r0
 80093d4:	460c      	mov	r4, r1
 80093d6:	d454      	bmi.n	8009482 <__sflush_r+0xba>
 80093d8:	684b      	ldr	r3, [r1, #4]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	dc02      	bgt.n	80093e4 <__sflush_r+0x1c>
 80093de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	dd48      	ble.n	8009476 <__sflush_r+0xae>
 80093e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80093e6:	2e00      	cmp	r6, #0
 80093e8:	d045      	beq.n	8009476 <__sflush_r+0xae>
 80093ea:	2300      	movs	r3, #0
 80093ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80093f0:	682f      	ldr	r7, [r5, #0]
 80093f2:	6a21      	ldr	r1, [r4, #32]
 80093f4:	602b      	str	r3, [r5, #0]
 80093f6:	d030      	beq.n	800945a <__sflush_r+0x92>
 80093f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80093fa:	89a3      	ldrh	r3, [r4, #12]
 80093fc:	0759      	lsls	r1, r3, #29
 80093fe:	d505      	bpl.n	800940c <__sflush_r+0x44>
 8009400:	6863      	ldr	r3, [r4, #4]
 8009402:	1ad2      	subs	r2, r2, r3
 8009404:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009406:	b10b      	cbz	r3, 800940c <__sflush_r+0x44>
 8009408:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800940a:	1ad2      	subs	r2, r2, r3
 800940c:	2300      	movs	r3, #0
 800940e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009410:	6a21      	ldr	r1, [r4, #32]
 8009412:	4628      	mov	r0, r5
 8009414:	47b0      	blx	r6
 8009416:	1c43      	adds	r3, r0, #1
 8009418:	89a3      	ldrh	r3, [r4, #12]
 800941a:	d106      	bne.n	800942a <__sflush_r+0x62>
 800941c:	6829      	ldr	r1, [r5, #0]
 800941e:	291d      	cmp	r1, #29
 8009420:	d82b      	bhi.n	800947a <__sflush_r+0xb2>
 8009422:	4a2a      	ldr	r2, [pc, #168]	@ (80094cc <__sflush_r+0x104>)
 8009424:	410a      	asrs	r2, r1
 8009426:	07d6      	lsls	r6, r2, #31
 8009428:	d427      	bmi.n	800947a <__sflush_r+0xb2>
 800942a:	2200      	movs	r2, #0
 800942c:	6062      	str	r2, [r4, #4]
 800942e:	04d9      	lsls	r1, r3, #19
 8009430:	6922      	ldr	r2, [r4, #16]
 8009432:	6022      	str	r2, [r4, #0]
 8009434:	d504      	bpl.n	8009440 <__sflush_r+0x78>
 8009436:	1c42      	adds	r2, r0, #1
 8009438:	d101      	bne.n	800943e <__sflush_r+0x76>
 800943a:	682b      	ldr	r3, [r5, #0]
 800943c:	b903      	cbnz	r3, 8009440 <__sflush_r+0x78>
 800943e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009440:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009442:	602f      	str	r7, [r5, #0]
 8009444:	b1b9      	cbz	r1, 8009476 <__sflush_r+0xae>
 8009446:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800944a:	4299      	cmp	r1, r3
 800944c:	d002      	beq.n	8009454 <__sflush_r+0x8c>
 800944e:	4628      	mov	r0, r5
 8009450:	f7fe f8ea 	bl	8007628 <_free_r>
 8009454:	2300      	movs	r3, #0
 8009456:	6363      	str	r3, [r4, #52]	@ 0x34
 8009458:	e00d      	b.n	8009476 <__sflush_r+0xae>
 800945a:	2301      	movs	r3, #1
 800945c:	4628      	mov	r0, r5
 800945e:	47b0      	blx	r6
 8009460:	4602      	mov	r2, r0
 8009462:	1c50      	adds	r0, r2, #1
 8009464:	d1c9      	bne.n	80093fa <__sflush_r+0x32>
 8009466:	682b      	ldr	r3, [r5, #0]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d0c6      	beq.n	80093fa <__sflush_r+0x32>
 800946c:	2b1d      	cmp	r3, #29
 800946e:	d001      	beq.n	8009474 <__sflush_r+0xac>
 8009470:	2b16      	cmp	r3, #22
 8009472:	d11e      	bne.n	80094b2 <__sflush_r+0xea>
 8009474:	602f      	str	r7, [r5, #0]
 8009476:	2000      	movs	r0, #0
 8009478:	e022      	b.n	80094c0 <__sflush_r+0xf8>
 800947a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800947e:	b21b      	sxth	r3, r3
 8009480:	e01b      	b.n	80094ba <__sflush_r+0xf2>
 8009482:	690f      	ldr	r7, [r1, #16]
 8009484:	2f00      	cmp	r7, #0
 8009486:	d0f6      	beq.n	8009476 <__sflush_r+0xae>
 8009488:	0793      	lsls	r3, r2, #30
 800948a:	680e      	ldr	r6, [r1, #0]
 800948c:	bf08      	it	eq
 800948e:	694b      	ldreq	r3, [r1, #20]
 8009490:	600f      	str	r7, [r1, #0]
 8009492:	bf18      	it	ne
 8009494:	2300      	movne	r3, #0
 8009496:	eba6 0807 	sub.w	r8, r6, r7
 800949a:	608b      	str	r3, [r1, #8]
 800949c:	f1b8 0f00 	cmp.w	r8, #0
 80094a0:	dde9      	ble.n	8009476 <__sflush_r+0xae>
 80094a2:	6a21      	ldr	r1, [r4, #32]
 80094a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80094a6:	4643      	mov	r3, r8
 80094a8:	463a      	mov	r2, r7
 80094aa:	4628      	mov	r0, r5
 80094ac:	47b0      	blx	r6
 80094ae:	2800      	cmp	r0, #0
 80094b0:	dc08      	bgt.n	80094c4 <__sflush_r+0xfc>
 80094b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094ba:	81a3      	strh	r3, [r4, #12]
 80094bc:	f04f 30ff 	mov.w	r0, #4294967295
 80094c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094c4:	4407      	add	r7, r0
 80094c6:	eba8 0800 	sub.w	r8, r8, r0
 80094ca:	e7e7      	b.n	800949c <__sflush_r+0xd4>
 80094cc:	dfbffffe 	.word	0xdfbffffe

080094d0 <_fflush_r>:
 80094d0:	b538      	push	{r3, r4, r5, lr}
 80094d2:	690b      	ldr	r3, [r1, #16]
 80094d4:	4605      	mov	r5, r0
 80094d6:	460c      	mov	r4, r1
 80094d8:	b913      	cbnz	r3, 80094e0 <_fflush_r+0x10>
 80094da:	2500      	movs	r5, #0
 80094dc:	4628      	mov	r0, r5
 80094de:	bd38      	pop	{r3, r4, r5, pc}
 80094e0:	b118      	cbz	r0, 80094ea <_fflush_r+0x1a>
 80094e2:	6a03      	ldr	r3, [r0, #32]
 80094e4:	b90b      	cbnz	r3, 80094ea <_fflush_r+0x1a>
 80094e6:	f7fd f82f 	bl	8006548 <__sinit>
 80094ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d0f3      	beq.n	80094da <_fflush_r+0xa>
 80094f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80094f4:	07d0      	lsls	r0, r2, #31
 80094f6:	d404      	bmi.n	8009502 <_fflush_r+0x32>
 80094f8:	0599      	lsls	r1, r3, #22
 80094fa:	d402      	bmi.n	8009502 <_fflush_r+0x32>
 80094fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80094fe:	f7fd fa3e 	bl	800697e <__retarget_lock_acquire_recursive>
 8009502:	4628      	mov	r0, r5
 8009504:	4621      	mov	r1, r4
 8009506:	f7ff ff5f 	bl	80093c8 <__sflush_r>
 800950a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800950c:	07da      	lsls	r2, r3, #31
 800950e:	4605      	mov	r5, r0
 8009510:	d4e4      	bmi.n	80094dc <_fflush_r+0xc>
 8009512:	89a3      	ldrh	r3, [r4, #12]
 8009514:	059b      	lsls	r3, r3, #22
 8009516:	d4e1      	bmi.n	80094dc <_fflush_r+0xc>
 8009518:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800951a:	f7fd fa31 	bl	8006980 <__retarget_lock_release_recursive>
 800951e:	e7dd      	b.n	80094dc <_fflush_r+0xc>

08009520 <__swhatbuf_r>:
 8009520:	b570      	push	{r4, r5, r6, lr}
 8009522:	460c      	mov	r4, r1
 8009524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009528:	2900      	cmp	r1, #0
 800952a:	b096      	sub	sp, #88	@ 0x58
 800952c:	4615      	mov	r5, r2
 800952e:	461e      	mov	r6, r3
 8009530:	da0d      	bge.n	800954e <__swhatbuf_r+0x2e>
 8009532:	89a3      	ldrh	r3, [r4, #12]
 8009534:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009538:	f04f 0100 	mov.w	r1, #0
 800953c:	bf14      	ite	ne
 800953e:	2340      	movne	r3, #64	@ 0x40
 8009540:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009544:	2000      	movs	r0, #0
 8009546:	6031      	str	r1, [r6, #0]
 8009548:	602b      	str	r3, [r5, #0]
 800954a:	b016      	add	sp, #88	@ 0x58
 800954c:	bd70      	pop	{r4, r5, r6, pc}
 800954e:	466a      	mov	r2, sp
 8009550:	f000 f874 	bl	800963c <_fstat_r>
 8009554:	2800      	cmp	r0, #0
 8009556:	dbec      	blt.n	8009532 <__swhatbuf_r+0x12>
 8009558:	9901      	ldr	r1, [sp, #4]
 800955a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800955e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009562:	4259      	negs	r1, r3
 8009564:	4159      	adcs	r1, r3
 8009566:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800956a:	e7eb      	b.n	8009544 <__swhatbuf_r+0x24>

0800956c <__smakebuf_r>:
 800956c:	898b      	ldrh	r3, [r1, #12]
 800956e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009570:	079d      	lsls	r5, r3, #30
 8009572:	4606      	mov	r6, r0
 8009574:	460c      	mov	r4, r1
 8009576:	d507      	bpl.n	8009588 <__smakebuf_r+0x1c>
 8009578:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800957c:	6023      	str	r3, [r4, #0]
 800957e:	6123      	str	r3, [r4, #16]
 8009580:	2301      	movs	r3, #1
 8009582:	6163      	str	r3, [r4, #20]
 8009584:	b003      	add	sp, #12
 8009586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009588:	ab01      	add	r3, sp, #4
 800958a:	466a      	mov	r2, sp
 800958c:	f7ff ffc8 	bl	8009520 <__swhatbuf_r>
 8009590:	9f00      	ldr	r7, [sp, #0]
 8009592:	4605      	mov	r5, r0
 8009594:	4639      	mov	r1, r7
 8009596:	4630      	mov	r0, r6
 8009598:	f7fe f8ba 	bl	8007710 <_malloc_r>
 800959c:	b948      	cbnz	r0, 80095b2 <__smakebuf_r+0x46>
 800959e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095a2:	059a      	lsls	r2, r3, #22
 80095a4:	d4ee      	bmi.n	8009584 <__smakebuf_r+0x18>
 80095a6:	f023 0303 	bic.w	r3, r3, #3
 80095aa:	f043 0302 	orr.w	r3, r3, #2
 80095ae:	81a3      	strh	r3, [r4, #12]
 80095b0:	e7e2      	b.n	8009578 <__smakebuf_r+0xc>
 80095b2:	89a3      	ldrh	r3, [r4, #12]
 80095b4:	6020      	str	r0, [r4, #0]
 80095b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095ba:	81a3      	strh	r3, [r4, #12]
 80095bc:	9b01      	ldr	r3, [sp, #4]
 80095be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80095c2:	b15b      	cbz	r3, 80095dc <__smakebuf_r+0x70>
 80095c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095c8:	4630      	mov	r0, r6
 80095ca:	f000 f849 	bl	8009660 <_isatty_r>
 80095ce:	b128      	cbz	r0, 80095dc <__smakebuf_r+0x70>
 80095d0:	89a3      	ldrh	r3, [r4, #12]
 80095d2:	f023 0303 	bic.w	r3, r3, #3
 80095d6:	f043 0301 	orr.w	r3, r3, #1
 80095da:	81a3      	strh	r3, [r4, #12]
 80095dc:	89a3      	ldrh	r3, [r4, #12]
 80095de:	431d      	orrs	r5, r3
 80095e0:	81a5      	strh	r5, [r4, #12]
 80095e2:	e7cf      	b.n	8009584 <__smakebuf_r+0x18>

080095e4 <memmove>:
 80095e4:	4288      	cmp	r0, r1
 80095e6:	b510      	push	{r4, lr}
 80095e8:	eb01 0402 	add.w	r4, r1, r2
 80095ec:	d902      	bls.n	80095f4 <memmove+0x10>
 80095ee:	4284      	cmp	r4, r0
 80095f0:	4623      	mov	r3, r4
 80095f2:	d807      	bhi.n	8009604 <memmove+0x20>
 80095f4:	1e43      	subs	r3, r0, #1
 80095f6:	42a1      	cmp	r1, r4
 80095f8:	d008      	beq.n	800960c <memmove+0x28>
 80095fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009602:	e7f8      	b.n	80095f6 <memmove+0x12>
 8009604:	4402      	add	r2, r0
 8009606:	4601      	mov	r1, r0
 8009608:	428a      	cmp	r2, r1
 800960a:	d100      	bne.n	800960e <memmove+0x2a>
 800960c:	bd10      	pop	{r4, pc}
 800960e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009612:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009616:	e7f7      	b.n	8009608 <memmove+0x24>

08009618 <strncmp>:
 8009618:	b510      	push	{r4, lr}
 800961a:	b16a      	cbz	r2, 8009638 <strncmp+0x20>
 800961c:	3901      	subs	r1, #1
 800961e:	1884      	adds	r4, r0, r2
 8009620:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009624:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009628:	429a      	cmp	r2, r3
 800962a:	d103      	bne.n	8009634 <strncmp+0x1c>
 800962c:	42a0      	cmp	r0, r4
 800962e:	d001      	beq.n	8009634 <strncmp+0x1c>
 8009630:	2a00      	cmp	r2, #0
 8009632:	d1f5      	bne.n	8009620 <strncmp+0x8>
 8009634:	1ad0      	subs	r0, r2, r3
 8009636:	bd10      	pop	{r4, pc}
 8009638:	4610      	mov	r0, r2
 800963a:	e7fc      	b.n	8009636 <strncmp+0x1e>

0800963c <_fstat_r>:
 800963c:	b538      	push	{r3, r4, r5, lr}
 800963e:	4d07      	ldr	r5, [pc, #28]	@ (800965c <_fstat_r+0x20>)
 8009640:	2300      	movs	r3, #0
 8009642:	4604      	mov	r4, r0
 8009644:	4608      	mov	r0, r1
 8009646:	4611      	mov	r1, r2
 8009648:	602b      	str	r3, [r5, #0]
 800964a:	f7f8 f8cc 	bl	80017e6 <_fstat>
 800964e:	1c43      	adds	r3, r0, #1
 8009650:	d102      	bne.n	8009658 <_fstat_r+0x1c>
 8009652:	682b      	ldr	r3, [r5, #0]
 8009654:	b103      	cbz	r3, 8009658 <_fstat_r+0x1c>
 8009656:	6023      	str	r3, [r4, #0]
 8009658:	bd38      	pop	{r3, r4, r5, pc}
 800965a:	bf00      	nop
 800965c:	200015c4 	.word	0x200015c4

08009660 <_isatty_r>:
 8009660:	b538      	push	{r3, r4, r5, lr}
 8009662:	4d06      	ldr	r5, [pc, #24]	@ (800967c <_isatty_r+0x1c>)
 8009664:	2300      	movs	r3, #0
 8009666:	4604      	mov	r4, r0
 8009668:	4608      	mov	r0, r1
 800966a:	602b      	str	r3, [r5, #0]
 800966c:	f7f8 f8cb 	bl	8001806 <_isatty>
 8009670:	1c43      	adds	r3, r0, #1
 8009672:	d102      	bne.n	800967a <_isatty_r+0x1a>
 8009674:	682b      	ldr	r3, [r5, #0]
 8009676:	b103      	cbz	r3, 800967a <_isatty_r+0x1a>
 8009678:	6023      	str	r3, [r4, #0]
 800967a:	bd38      	pop	{r3, r4, r5, pc}
 800967c:	200015c4 	.word	0x200015c4

08009680 <_sbrk_r>:
 8009680:	b538      	push	{r3, r4, r5, lr}
 8009682:	4d06      	ldr	r5, [pc, #24]	@ (800969c <_sbrk_r+0x1c>)
 8009684:	2300      	movs	r3, #0
 8009686:	4604      	mov	r4, r0
 8009688:	4608      	mov	r0, r1
 800968a:	602b      	str	r3, [r5, #0]
 800968c:	f7f8 f8d4 	bl	8001838 <_sbrk>
 8009690:	1c43      	adds	r3, r0, #1
 8009692:	d102      	bne.n	800969a <_sbrk_r+0x1a>
 8009694:	682b      	ldr	r3, [r5, #0]
 8009696:	b103      	cbz	r3, 800969a <_sbrk_r+0x1a>
 8009698:	6023      	str	r3, [r4, #0]
 800969a:	bd38      	pop	{r3, r4, r5, pc}
 800969c:	200015c4 	.word	0x200015c4

080096a0 <memcpy>:
 80096a0:	440a      	add	r2, r1
 80096a2:	4291      	cmp	r1, r2
 80096a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80096a8:	d100      	bne.n	80096ac <memcpy+0xc>
 80096aa:	4770      	bx	lr
 80096ac:	b510      	push	{r4, lr}
 80096ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096b6:	4291      	cmp	r1, r2
 80096b8:	d1f9      	bne.n	80096ae <memcpy+0xe>
 80096ba:	bd10      	pop	{r4, pc}
 80096bc:	0000      	movs	r0, r0
	...

080096c0 <nan>:
 80096c0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80096c8 <nan+0x8>
 80096c4:	4770      	bx	lr
 80096c6:	bf00      	nop
 80096c8:	00000000 	.word	0x00000000
 80096cc:	7ff80000 	.word	0x7ff80000

080096d0 <__assert_func>:
 80096d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80096d2:	4614      	mov	r4, r2
 80096d4:	461a      	mov	r2, r3
 80096d6:	4b09      	ldr	r3, [pc, #36]	@ (80096fc <__assert_func+0x2c>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4605      	mov	r5, r0
 80096dc:	68d8      	ldr	r0, [r3, #12]
 80096de:	b954      	cbnz	r4, 80096f6 <__assert_func+0x26>
 80096e0:	4b07      	ldr	r3, [pc, #28]	@ (8009700 <__assert_func+0x30>)
 80096e2:	461c      	mov	r4, r3
 80096e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80096e8:	9100      	str	r1, [sp, #0]
 80096ea:	462b      	mov	r3, r5
 80096ec:	4905      	ldr	r1, [pc, #20]	@ (8009704 <__assert_func+0x34>)
 80096ee:	f000 fba7 	bl	8009e40 <fiprintf>
 80096f2:	f000 fbb7 	bl	8009e64 <abort>
 80096f6:	4b04      	ldr	r3, [pc, #16]	@ (8009708 <__assert_func+0x38>)
 80096f8:	e7f4      	b.n	80096e4 <__assert_func+0x14>
 80096fa:	bf00      	nop
 80096fc:	2000001c 	.word	0x2000001c
 8009700:	0800a4d5 	.word	0x0800a4d5
 8009704:	0800a4a7 	.word	0x0800a4a7
 8009708:	0800a49a 	.word	0x0800a49a

0800970c <_calloc_r>:
 800970c:	b570      	push	{r4, r5, r6, lr}
 800970e:	fba1 5402 	umull	r5, r4, r1, r2
 8009712:	b93c      	cbnz	r4, 8009724 <_calloc_r+0x18>
 8009714:	4629      	mov	r1, r5
 8009716:	f7fd fffb 	bl	8007710 <_malloc_r>
 800971a:	4606      	mov	r6, r0
 800971c:	b928      	cbnz	r0, 800972a <_calloc_r+0x1e>
 800971e:	2600      	movs	r6, #0
 8009720:	4630      	mov	r0, r6
 8009722:	bd70      	pop	{r4, r5, r6, pc}
 8009724:	220c      	movs	r2, #12
 8009726:	6002      	str	r2, [r0, #0]
 8009728:	e7f9      	b.n	800971e <_calloc_r+0x12>
 800972a:	462a      	mov	r2, r5
 800972c:	4621      	mov	r1, r4
 800972e:	f7fd f8a9 	bl	8006884 <memset>
 8009732:	e7f5      	b.n	8009720 <_calloc_r+0x14>

08009734 <rshift>:
 8009734:	6903      	ldr	r3, [r0, #16]
 8009736:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800973a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800973e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009742:	f100 0414 	add.w	r4, r0, #20
 8009746:	dd45      	ble.n	80097d4 <rshift+0xa0>
 8009748:	f011 011f 	ands.w	r1, r1, #31
 800974c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009750:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009754:	d10c      	bne.n	8009770 <rshift+0x3c>
 8009756:	f100 0710 	add.w	r7, r0, #16
 800975a:	4629      	mov	r1, r5
 800975c:	42b1      	cmp	r1, r6
 800975e:	d334      	bcc.n	80097ca <rshift+0x96>
 8009760:	1a9b      	subs	r3, r3, r2
 8009762:	009b      	lsls	r3, r3, #2
 8009764:	1eea      	subs	r2, r5, #3
 8009766:	4296      	cmp	r6, r2
 8009768:	bf38      	it	cc
 800976a:	2300      	movcc	r3, #0
 800976c:	4423      	add	r3, r4
 800976e:	e015      	b.n	800979c <rshift+0x68>
 8009770:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009774:	f1c1 0820 	rsb	r8, r1, #32
 8009778:	40cf      	lsrs	r7, r1
 800977a:	f105 0e04 	add.w	lr, r5, #4
 800977e:	46a1      	mov	r9, r4
 8009780:	4576      	cmp	r6, lr
 8009782:	46f4      	mov	ip, lr
 8009784:	d815      	bhi.n	80097b2 <rshift+0x7e>
 8009786:	1a9a      	subs	r2, r3, r2
 8009788:	0092      	lsls	r2, r2, #2
 800978a:	3a04      	subs	r2, #4
 800978c:	3501      	adds	r5, #1
 800978e:	42ae      	cmp	r6, r5
 8009790:	bf38      	it	cc
 8009792:	2200      	movcc	r2, #0
 8009794:	18a3      	adds	r3, r4, r2
 8009796:	50a7      	str	r7, [r4, r2]
 8009798:	b107      	cbz	r7, 800979c <rshift+0x68>
 800979a:	3304      	adds	r3, #4
 800979c:	1b1a      	subs	r2, r3, r4
 800979e:	42a3      	cmp	r3, r4
 80097a0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80097a4:	bf08      	it	eq
 80097a6:	2300      	moveq	r3, #0
 80097a8:	6102      	str	r2, [r0, #16]
 80097aa:	bf08      	it	eq
 80097ac:	6143      	streq	r3, [r0, #20]
 80097ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80097b2:	f8dc c000 	ldr.w	ip, [ip]
 80097b6:	fa0c fc08 	lsl.w	ip, ip, r8
 80097ba:	ea4c 0707 	orr.w	r7, ip, r7
 80097be:	f849 7b04 	str.w	r7, [r9], #4
 80097c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80097c6:	40cf      	lsrs	r7, r1
 80097c8:	e7da      	b.n	8009780 <rshift+0x4c>
 80097ca:	f851 cb04 	ldr.w	ip, [r1], #4
 80097ce:	f847 cf04 	str.w	ip, [r7, #4]!
 80097d2:	e7c3      	b.n	800975c <rshift+0x28>
 80097d4:	4623      	mov	r3, r4
 80097d6:	e7e1      	b.n	800979c <rshift+0x68>

080097d8 <__hexdig_fun>:
 80097d8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80097dc:	2b09      	cmp	r3, #9
 80097de:	d802      	bhi.n	80097e6 <__hexdig_fun+0xe>
 80097e0:	3820      	subs	r0, #32
 80097e2:	b2c0      	uxtb	r0, r0
 80097e4:	4770      	bx	lr
 80097e6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80097ea:	2b05      	cmp	r3, #5
 80097ec:	d801      	bhi.n	80097f2 <__hexdig_fun+0x1a>
 80097ee:	3847      	subs	r0, #71	@ 0x47
 80097f0:	e7f7      	b.n	80097e2 <__hexdig_fun+0xa>
 80097f2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80097f6:	2b05      	cmp	r3, #5
 80097f8:	d801      	bhi.n	80097fe <__hexdig_fun+0x26>
 80097fa:	3827      	subs	r0, #39	@ 0x27
 80097fc:	e7f1      	b.n	80097e2 <__hexdig_fun+0xa>
 80097fe:	2000      	movs	r0, #0
 8009800:	4770      	bx	lr
	...

08009804 <__gethex>:
 8009804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009808:	b085      	sub	sp, #20
 800980a:	468a      	mov	sl, r1
 800980c:	9302      	str	r3, [sp, #8]
 800980e:	680b      	ldr	r3, [r1, #0]
 8009810:	9001      	str	r0, [sp, #4]
 8009812:	4690      	mov	r8, r2
 8009814:	1c9c      	adds	r4, r3, #2
 8009816:	46a1      	mov	r9, r4
 8009818:	f814 0b01 	ldrb.w	r0, [r4], #1
 800981c:	2830      	cmp	r0, #48	@ 0x30
 800981e:	d0fa      	beq.n	8009816 <__gethex+0x12>
 8009820:	eba9 0303 	sub.w	r3, r9, r3
 8009824:	f1a3 0b02 	sub.w	fp, r3, #2
 8009828:	f7ff ffd6 	bl	80097d8 <__hexdig_fun>
 800982c:	4605      	mov	r5, r0
 800982e:	2800      	cmp	r0, #0
 8009830:	d168      	bne.n	8009904 <__gethex+0x100>
 8009832:	49a0      	ldr	r1, [pc, #640]	@ (8009ab4 <__gethex+0x2b0>)
 8009834:	2201      	movs	r2, #1
 8009836:	4648      	mov	r0, r9
 8009838:	f7ff feee 	bl	8009618 <strncmp>
 800983c:	4607      	mov	r7, r0
 800983e:	2800      	cmp	r0, #0
 8009840:	d167      	bne.n	8009912 <__gethex+0x10e>
 8009842:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009846:	4626      	mov	r6, r4
 8009848:	f7ff ffc6 	bl	80097d8 <__hexdig_fun>
 800984c:	2800      	cmp	r0, #0
 800984e:	d062      	beq.n	8009916 <__gethex+0x112>
 8009850:	4623      	mov	r3, r4
 8009852:	7818      	ldrb	r0, [r3, #0]
 8009854:	2830      	cmp	r0, #48	@ 0x30
 8009856:	4699      	mov	r9, r3
 8009858:	f103 0301 	add.w	r3, r3, #1
 800985c:	d0f9      	beq.n	8009852 <__gethex+0x4e>
 800985e:	f7ff ffbb 	bl	80097d8 <__hexdig_fun>
 8009862:	fab0 f580 	clz	r5, r0
 8009866:	096d      	lsrs	r5, r5, #5
 8009868:	f04f 0b01 	mov.w	fp, #1
 800986c:	464a      	mov	r2, r9
 800986e:	4616      	mov	r6, r2
 8009870:	3201      	adds	r2, #1
 8009872:	7830      	ldrb	r0, [r6, #0]
 8009874:	f7ff ffb0 	bl	80097d8 <__hexdig_fun>
 8009878:	2800      	cmp	r0, #0
 800987a:	d1f8      	bne.n	800986e <__gethex+0x6a>
 800987c:	498d      	ldr	r1, [pc, #564]	@ (8009ab4 <__gethex+0x2b0>)
 800987e:	2201      	movs	r2, #1
 8009880:	4630      	mov	r0, r6
 8009882:	f7ff fec9 	bl	8009618 <strncmp>
 8009886:	2800      	cmp	r0, #0
 8009888:	d13f      	bne.n	800990a <__gethex+0x106>
 800988a:	b944      	cbnz	r4, 800989e <__gethex+0x9a>
 800988c:	1c74      	adds	r4, r6, #1
 800988e:	4622      	mov	r2, r4
 8009890:	4616      	mov	r6, r2
 8009892:	3201      	adds	r2, #1
 8009894:	7830      	ldrb	r0, [r6, #0]
 8009896:	f7ff ff9f 	bl	80097d8 <__hexdig_fun>
 800989a:	2800      	cmp	r0, #0
 800989c:	d1f8      	bne.n	8009890 <__gethex+0x8c>
 800989e:	1ba4      	subs	r4, r4, r6
 80098a0:	00a7      	lsls	r7, r4, #2
 80098a2:	7833      	ldrb	r3, [r6, #0]
 80098a4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80098a8:	2b50      	cmp	r3, #80	@ 0x50
 80098aa:	d13e      	bne.n	800992a <__gethex+0x126>
 80098ac:	7873      	ldrb	r3, [r6, #1]
 80098ae:	2b2b      	cmp	r3, #43	@ 0x2b
 80098b0:	d033      	beq.n	800991a <__gethex+0x116>
 80098b2:	2b2d      	cmp	r3, #45	@ 0x2d
 80098b4:	d034      	beq.n	8009920 <__gethex+0x11c>
 80098b6:	1c71      	adds	r1, r6, #1
 80098b8:	2400      	movs	r4, #0
 80098ba:	7808      	ldrb	r0, [r1, #0]
 80098bc:	f7ff ff8c 	bl	80097d8 <__hexdig_fun>
 80098c0:	1e43      	subs	r3, r0, #1
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	2b18      	cmp	r3, #24
 80098c6:	d830      	bhi.n	800992a <__gethex+0x126>
 80098c8:	f1a0 0210 	sub.w	r2, r0, #16
 80098cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80098d0:	f7ff ff82 	bl	80097d8 <__hexdig_fun>
 80098d4:	f100 3cff 	add.w	ip, r0, #4294967295
 80098d8:	fa5f fc8c 	uxtb.w	ip, ip
 80098dc:	f1bc 0f18 	cmp.w	ip, #24
 80098e0:	f04f 030a 	mov.w	r3, #10
 80098e4:	d91e      	bls.n	8009924 <__gethex+0x120>
 80098e6:	b104      	cbz	r4, 80098ea <__gethex+0xe6>
 80098e8:	4252      	negs	r2, r2
 80098ea:	4417      	add	r7, r2
 80098ec:	f8ca 1000 	str.w	r1, [sl]
 80098f0:	b1ed      	cbz	r5, 800992e <__gethex+0x12a>
 80098f2:	f1bb 0f00 	cmp.w	fp, #0
 80098f6:	bf0c      	ite	eq
 80098f8:	2506      	moveq	r5, #6
 80098fa:	2500      	movne	r5, #0
 80098fc:	4628      	mov	r0, r5
 80098fe:	b005      	add	sp, #20
 8009900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009904:	2500      	movs	r5, #0
 8009906:	462c      	mov	r4, r5
 8009908:	e7b0      	b.n	800986c <__gethex+0x68>
 800990a:	2c00      	cmp	r4, #0
 800990c:	d1c7      	bne.n	800989e <__gethex+0x9a>
 800990e:	4627      	mov	r7, r4
 8009910:	e7c7      	b.n	80098a2 <__gethex+0x9e>
 8009912:	464e      	mov	r6, r9
 8009914:	462f      	mov	r7, r5
 8009916:	2501      	movs	r5, #1
 8009918:	e7c3      	b.n	80098a2 <__gethex+0x9e>
 800991a:	2400      	movs	r4, #0
 800991c:	1cb1      	adds	r1, r6, #2
 800991e:	e7cc      	b.n	80098ba <__gethex+0xb6>
 8009920:	2401      	movs	r4, #1
 8009922:	e7fb      	b.n	800991c <__gethex+0x118>
 8009924:	fb03 0002 	mla	r0, r3, r2, r0
 8009928:	e7ce      	b.n	80098c8 <__gethex+0xc4>
 800992a:	4631      	mov	r1, r6
 800992c:	e7de      	b.n	80098ec <__gethex+0xe8>
 800992e:	eba6 0309 	sub.w	r3, r6, r9
 8009932:	3b01      	subs	r3, #1
 8009934:	4629      	mov	r1, r5
 8009936:	2b07      	cmp	r3, #7
 8009938:	dc0a      	bgt.n	8009950 <__gethex+0x14c>
 800993a:	9801      	ldr	r0, [sp, #4]
 800993c:	f7fd ff74 	bl	8007828 <_Balloc>
 8009940:	4604      	mov	r4, r0
 8009942:	b940      	cbnz	r0, 8009956 <__gethex+0x152>
 8009944:	4b5c      	ldr	r3, [pc, #368]	@ (8009ab8 <__gethex+0x2b4>)
 8009946:	4602      	mov	r2, r0
 8009948:	21e4      	movs	r1, #228	@ 0xe4
 800994a:	485c      	ldr	r0, [pc, #368]	@ (8009abc <__gethex+0x2b8>)
 800994c:	f7ff fec0 	bl	80096d0 <__assert_func>
 8009950:	3101      	adds	r1, #1
 8009952:	105b      	asrs	r3, r3, #1
 8009954:	e7ef      	b.n	8009936 <__gethex+0x132>
 8009956:	f100 0a14 	add.w	sl, r0, #20
 800995a:	2300      	movs	r3, #0
 800995c:	4655      	mov	r5, sl
 800995e:	469b      	mov	fp, r3
 8009960:	45b1      	cmp	r9, r6
 8009962:	d337      	bcc.n	80099d4 <__gethex+0x1d0>
 8009964:	f845 bb04 	str.w	fp, [r5], #4
 8009968:	eba5 050a 	sub.w	r5, r5, sl
 800996c:	10ad      	asrs	r5, r5, #2
 800996e:	6125      	str	r5, [r4, #16]
 8009970:	4658      	mov	r0, fp
 8009972:	f7fe f84b 	bl	8007a0c <__hi0bits>
 8009976:	016d      	lsls	r5, r5, #5
 8009978:	f8d8 6000 	ldr.w	r6, [r8]
 800997c:	1a2d      	subs	r5, r5, r0
 800997e:	42b5      	cmp	r5, r6
 8009980:	dd54      	ble.n	8009a2c <__gethex+0x228>
 8009982:	1bad      	subs	r5, r5, r6
 8009984:	4629      	mov	r1, r5
 8009986:	4620      	mov	r0, r4
 8009988:	f7fe fbdf 	bl	800814a <__any_on>
 800998c:	4681      	mov	r9, r0
 800998e:	b178      	cbz	r0, 80099b0 <__gethex+0x1ac>
 8009990:	1e6b      	subs	r3, r5, #1
 8009992:	1159      	asrs	r1, r3, #5
 8009994:	f003 021f 	and.w	r2, r3, #31
 8009998:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800999c:	f04f 0901 	mov.w	r9, #1
 80099a0:	fa09 f202 	lsl.w	r2, r9, r2
 80099a4:	420a      	tst	r2, r1
 80099a6:	d003      	beq.n	80099b0 <__gethex+0x1ac>
 80099a8:	454b      	cmp	r3, r9
 80099aa:	dc36      	bgt.n	8009a1a <__gethex+0x216>
 80099ac:	f04f 0902 	mov.w	r9, #2
 80099b0:	4629      	mov	r1, r5
 80099b2:	4620      	mov	r0, r4
 80099b4:	f7ff febe 	bl	8009734 <rshift>
 80099b8:	442f      	add	r7, r5
 80099ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80099be:	42bb      	cmp	r3, r7
 80099c0:	da42      	bge.n	8009a48 <__gethex+0x244>
 80099c2:	9801      	ldr	r0, [sp, #4]
 80099c4:	4621      	mov	r1, r4
 80099c6:	f7fd ff6f 	bl	80078a8 <_Bfree>
 80099ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80099cc:	2300      	movs	r3, #0
 80099ce:	6013      	str	r3, [r2, #0]
 80099d0:	25a3      	movs	r5, #163	@ 0xa3
 80099d2:	e793      	b.n	80098fc <__gethex+0xf8>
 80099d4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80099d8:	2a2e      	cmp	r2, #46	@ 0x2e
 80099da:	d012      	beq.n	8009a02 <__gethex+0x1fe>
 80099dc:	2b20      	cmp	r3, #32
 80099de:	d104      	bne.n	80099ea <__gethex+0x1e6>
 80099e0:	f845 bb04 	str.w	fp, [r5], #4
 80099e4:	f04f 0b00 	mov.w	fp, #0
 80099e8:	465b      	mov	r3, fp
 80099ea:	7830      	ldrb	r0, [r6, #0]
 80099ec:	9303      	str	r3, [sp, #12]
 80099ee:	f7ff fef3 	bl	80097d8 <__hexdig_fun>
 80099f2:	9b03      	ldr	r3, [sp, #12]
 80099f4:	f000 000f 	and.w	r0, r0, #15
 80099f8:	4098      	lsls	r0, r3
 80099fa:	ea4b 0b00 	orr.w	fp, fp, r0
 80099fe:	3304      	adds	r3, #4
 8009a00:	e7ae      	b.n	8009960 <__gethex+0x15c>
 8009a02:	45b1      	cmp	r9, r6
 8009a04:	d8ea      	bhi.n	80099dc <__gethex+0x1d8>
 8009a06:	492b      	ldr	r1, [pc, #172]	@ (8009ab4 <__gethex+0x2b0>)
 8009a08:	9303      	str	r3, [sp, #12]
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	4630      	mov	r0, r6
 8009a0e:	f7ff fe03 	bl	8009618 <strncmp>
 8009a12:	9b03      	ldr	r3, [sp, #12]
 8009a14:	2800      	cmp	r0, #0
 8009a16:	d1e1      	bne.n	80099dc <__gethex+0x1d8>
 8009a18:	e7a2      	b.n	8009960 <__gethex+0x15c>
 8009a1a:	1ea9      	subs	r1, r5, #2
 8009a1c:	4620      	mov	r0, r4
 8009a1e:	f7fe fb94 	bl	800814a <__any_on>
 8009a22:	2800      	cmp	r0, #0
 8009a24:	d0c2      	beq.n	80099ac <__gethex+0x1a8>
 8009a26:	f04f 0903 	mov.w	r9, #3
 8009a2a:	e7c1      	b.n	80099b0 <__gethex+0x1ac>
 8009a2c:	da09      	bge.n	8009a42 <__gethex+0x23e>
 8009a2e:	1b75      	subs	r5, r6, r5
 8009a30:	4621      	mov	r1, r4
 8009a32:	9801      	ldr	r0, [sp, #4]
 8009a34:	462a      	mov	r2, r5
 8009a36:	f7fe f94f 	bl	8007cd8 <__lshift>
 8009a3a:	1b7f      	subs	r7, r7, r5
 8009a3c:	4604      	mov	r4, r0
 8009a3e:	f100 0a14 	add.w	sl, r0, #20
 8009a42:	f04f 0900 	mov.w	r9, #0
 8009a46:	e7b8      	b.n	80099ba <__gethex+0x1b6>
 8009a48:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009a4c:	42bd      	cmp	r5, r7
 8009a4e:	dd6f      	ble.n	8009b30 <__gethex+0x32c>
 8009a50:	1bed      	subs	r5, r5, r7
 8009a52:	42ae      	cmp	r6, r5
 8009a54:	dc34      	bgt.n	8009ac0 <__gethex+0x2bc>
 8009a56:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009a5a:	2b02      	cmp	r3, #2
 8009a5c:	d022      	beq.n	8009aa4 <__gethex+0x2a0>
 8009a5e:	2b03      	cmp	r3, #3
 8009a60:	d024      	beq.n	8009aac <__gethex+0x2a8>
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	d115      	bne.n	8009a92 <__gethex+0x28e>
 8009a66:	42ae      	cmp	r6, r5
 8009a68:	d113      	bne.n	8009a92 <__gethex+0x28e>
 8009a6a:	2e01      	cmp	r6, #1
 8009a6c:	d10b      	bne.n	8009a86 <__gethex+0x282>
 8009a6e:	9a02      	ldr	r2, [sp, #8]
 8009a70:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009a74:	6013      	str	r3, [r2, #0]
 8009a76:	2301      	movs	r3, #1
 8009a78:	6123      	str	r3, [r4, #16]
 8009a7a:	f8ca 3000 	str.w	r3, [sl]
 8009a7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a80:	2562      	movs	r5, #98	@ 0x62
 8009a82:	601c      	str	r4, [r3, #0]
 8009a84:	e73a      	b.n	80098fc <__gethex+0xf8>
 8009a86:	1e71      	subs	r1, r6, #1
 8009a88:	4620      	mov	r0, r4
 8009a8a:	f7fe fb5e 	bl	800814a <__any_on>
 8009a8e:	2800      	cmp	r0, #0
 8009a90:	d1ed      	bne.n	8009a6e <__gethex+0x26a>
 8009a92:	9801      	ldr	r0, [sp, #4]
 8009a94:	4621      	mov	r1, r4
 8009a96:	f7fd ff07 	bl	80078a8 <_Bfree>
 8009a9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	6013      	str	r3, [r2, #0]
 8009aa0:	2550      	movs	r5, #80	@ 0x50
 8009aa2:	e72b      	b.n	80098fc <__gethex+0xf8>
 8009aa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d1f3      	bne.n	8009a92 <__gethex+0x28e>
 8009aaa:	e7e0      	b.n	8009a6e <__gethex+0x26a>
 8009aac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d1dd      	bne.n	8009a6e <__gethex+0x26a>
 8009ab2:	e7ee      	b.n	8009a92 <__gethex+0x28e>
 8009ab4:	0800a328 	.word	0x0800a328
 8009ab8:	0800a1bd 	.word	0x0800a1bd
 8009abc:	0800a4d6 	.word	0x0800a4d6
 8009ac0:	1e6f      	subs	r7, r5, #1
 8009ac2:	f1b9 0f00 	cmp.w	r9, #0
 8009ac6:	d130      	bne.n	8009b2a <__gethex+0x326>
 8009ac8:	b127      	cbz	r7, 8009ad4 <__gethex+0x2d0>
 8009aca:	4639      	mov	r1, r7
 8009acc:	4620      	mov	r0, r4
 8009ace:	f7fe fb3c 	bl	800814a <__any_on>
 8009ad2:	4681      	mov	r9, r0
 8009ad4:	117a      	asrs	r2, r7, #5
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009adc:	f007 071f 	and.w	r7, r7, #31
 8009ae0:	40bb      	lsls	r3, r7
 8009ae2:	4213      	tst	r3, r2
 8009ae4:	4629      	mov	r1, r5
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	bf18      	it	ne
 8009aea:	f049 0902 	orrne.w	r9, r9, #2
 8009aee:	f7ff fe21 	bl	8009734 <rshift>
 8009af2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009af6:	1b76      	subs	r6, r6, r5
 8009af8:	2502      	movs	r5, #2
 8009afa:	f1b9 0f00 	cmp.w	r9, #0
 8009afe:	d047      	beq.n	8009b90 <__gethex+0x38c>
 8009b00:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009b04:	2b02      	cmp	r3, #2
 8009b06:	d015      	beq.n	8009b34 <__gethex+0x330>
 8009b08:	2b03      	cmp	r3, #3
 8009b0a:	d017      	beq.n	8009b3c <__gethex+0x338>
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	d109      	bne.n	8009b24 <__gethex+0x320>
 8009b10:	f019 0f02 	tst.w	r9, #2
 8009b14:	d006      	beq.n	8009b24 <__gethex+0x320>
 8009b16:	f8da 3000 	ldr.w	r3, [sl]
 8009b1a:	ea49 0903 	orr.w	r9, r9, r3
 8009b1e:	f019 0f01 	tst.w	r9, #1
 8009b22:	d10e      	bne.n	8009b42 <__gethex+0x33e>
 8009b24:	f045 0510 	orr.w	r5, r5, #16
 8009b28:	e032      	b.n	8009b90 <__gethex+0x38c>
 8009b2a:	f04f 0901 	mov.w	r9, #1
 8009b2e:	e7d1      	b.n	8009ad4 <__gethex+0x2d0>
 8009b30:	2501      	movs	r5, #1
 8009b32:	e7e2      	b.n	8009afa <__gethex+0x2f6>
 8009b34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b36:	f1c3 0301 	rsb	r3, r3, #1
 8009b3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009b3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d0f0      	beq.n	8009b24 <__gethex+0x320>
 8009b42:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009b46:	f104 0314 	add.w	r3, r4, #20
 8009b4a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009b4e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009b52:	f04f 0c00 	mov.w	ip, #0
 8009b56:	4618      	mov	r0, r3
 8009b58:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b5c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009b60:	d01b      	beq.n	8009b9a <__gethex+0x396>
 8009b62:	3201      	adds	r2, #1
 8009b64:	6002      	str	r2, [r0, #0]
 8009b66:	2d02      	cmp	r5, #2
 8009b68:	f104 0314 	add.w	r3, r4, #20
 8009b6c:	d13c      	bne.n	8009be8 <__gethex+0x3e4>
 8009b6e:	f8d8 2000 	ldr.w	r2, [r8]
 8009b72:	3a01      	subs	r2, #1
 8009b74:	42b2      	cmp	r2, r6
 8009b76:	d109      	bne.n	8009b8c <__gethex+0x388>
 8009b78:	1171      	asrs	r1, r6, #5
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009b80:	f006 061f 	and.w	r6, r6, #31
 8009b84:	fa02 f606 	lsl.w	r6, r2, r6
 8009b88:	421e      	tst	r6, r3
 8009b8a:	d13a      	bne.n	8009c02 <__gethex+0x3fe>
 8009b8c:	f045 0520 	orr.w	r5, r5, #32
 8009b90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b92:	601c      	str	r4, [r3, #0]
 8009b94:	9b02      	ldr	r3, [sp, #8]
 8009b96:	601f      	str	r7, [r3, #0]
 8009b98:	e6b0      	b.n	80098fc <__gethex+0xf8>
 8009b9a:	4299      	cmp	r1, r3
 8009b9c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009ba0:	d8d9      	bhi.n	8009b56 <__gethex+0x352>
 8009ba2:	68a3      	ldr	r3, [r4, #8]
 8009ba4:	459b      	cmp	fp, r3
 8009ba6:	db17      	blt.n	8009bd8 <__gethex+0x3d4>
 8009ba8:	6861      	ldr	r1, [r4, #4]
 8009baa:	9801      	ldr	r0, [sp, #4]
 8009bac:	3101      	adds	r1, #1
 8009bae:	f7fd fe3b 	bl	8007828 <_Balloc>
 8009bb2:	4681      	mov	r9, r0
 8009bb4:	b918      	cbnz	r0, 8009bbe <__gethex+0x3ba>
 8009bb6:	4b1a      	ldr	r3, [pc, #104]	@ (8009c20 <__gethex+0x41c>)
 8009bb8:	4602      	mov	r2, r0
 8009bba:	2184      	movs	r1, #132	@ 0x84
 8009bbc:	e6c5      	b.n	800994a <__gethex+0x146>
 8009bbe:	6922      	ldr	r2, [r4, #16]
 8009bc0:	3202      	adds	r2, #2
 8009bc2:	f104 010c 	add.w	r1, r4, #12
 8009bc6:	0092      	lsls	r2, r2, #2
 8009bc8:	300c      	adds	r0, #12
 8009bca:	f7ff fd69 	bl	80096a0 <memcpy>
 8009bce:	4621      	mov	r1, r4
 8009bd0:	9801      	ldr	r0, [sp, #4]
 8009bd2:	f7fd fe69 	bl	80078a8 <_Bfree>
 8009bd6:	464c      	mov	r4, r9
 8009bd8:	6923      	ldr	r3, [r4, #16]
 8009bda:	1c5a      	adds	r2, r3, #1
 8009bdc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009be0:	6122      	str	r2, [r4, #16]
 8009be2:	2201      	movs	r2, #1
 8009be4:	615a      	str	r2, [r3, #20]
 8009be6:	e7be      	b.n	8009b66 <__gethex+0x362>
 8009be8:	6922      	ldr	r2, [r4, #16]
 8009bea:	455a      	cmp	r2, fp
 8009bec:	dd0b      	ble.n	8009c06 <__gethex+0x402>
 8009bee:	2101      	movs	r1, #1
 8009bf0:	4620      	mov	r0, r4
 8009bf2:	f7ff fd9f 	bl	8009734 <rshift>
 8009bf6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009bfa:	3701      	adds	r7, #1
 8009bfc:	42bb      	cmp	r3, r7
 8009bfe:	f6ff aee0 	blt.w	80099c2 <__gethex+0x1be>
 8009c02:	2501      	movs	r5, #1
 8009c04:	e7c2      	b.n	8009b8c <__gethex+0x388>
 8009c06:	f016 061f 	ands.w	r6, r6, #31
 8009c0a:	d0fa      	beq.n	8009c02 <__gethex+0x3fe>
 8009c0c:	4453      	add	r3, sl
 8009c0e:	f1c6 0620 	rsb	r6, r6, #32
 8009c12:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009c16:	f7fd fef9 	bl	8007a0c <__hi0bits>
 8009c1a:	42b0      	cmp	r0, r6
 8009c1c:	dbe7      	blt.n	8009bee <__gethex+0x3ea>
 8009c1e:	e7f0      	b.n	8009c02 <__gethex+0x3fe>
 8009c20:	0800a1bd 	.word	0x0800a1bd

08009c24 <L_shift>:
 8009c24:	f1c2 0208 	rsb	r2, r2, #8
 8009c28:	0092      	lsls	r2, r2, #2
 8009c2a:	b570      	push	{r4, r5, r6, lr}
 8009c2c:	f1c2 0620 	rsb	r6, r2, #32
 8009c30:	6843      	ldr	r3, [r0, #4]
 8009c32:	6804      	ldr	r4, [r0, #0]
 8009c34:	fa03 f506 	lsl.w	r5, r3, r6
 8009c38:	432c      	orrs	r4, r5
 8009c3a:	40d3      	lsrs	r3, r2
 8009c3c:	6004      	str	r4, [r0, #0]
 8009c3e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009c42:	4288      	cmp	r0, r1
 8009c44:	d3f4      	bcc.n	8009c30 <L_shift+0xc>
 8009c46:	bd70      	pop	{r4, r5, r6, pc}

08009c48 <__match>:
 8009c48:	b530      	push	{r4, r5, lr}
 8009c4a:	6803      	ldr	r3, [r0, #0]
 8009c4c:	3301      	adds	r3, #1
 8009c4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c52:	b914      	cbnz	r4, 8009c5a <__match+0x12>
 8009c54:	6003      	str	r3, [r0, #0]
 8009c56:	2001      	movs	r0, #1
 8009c58:	bd30      	pop	{r4, r5, pc}
 8009c5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c5e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009c62:	2d19      	cmp	r5, #25
 8009c64:	bf98      	it	ls
 8009c66:	3220      	addls	r2, #32
 8009c68:	42a2      	cmp	r2, r4
 8009c6a:	d0f0      	beq.n	8009c4e <__match+0x6>
 8009c6c:	2000      	movs	r0, #0
 8009c6e:	e7f3      	b.n	8009c58 <__match+0x10>

08009c70 <__hexnan>:
 8009c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c74:	680b      	ldr	r3, [r1, #0]
 8009c76:	6801      	ldr	r1, [r0, #0]
 8009c78:	115e      	asrs	r6, r3, #5
 8009c7a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009c7e:	f013 031f 	ands.w	r3, r3, #31
 8009c82:	b087      	sub	sp, #28
 8009c84:	bf18      	it	ne
 8009c86:	3604      	addne	r6, #4
 8009c88:	2500      	movs	r5, #0
 8009c8a:	1f37      	subs	r7, r6, #4
 8009c8c:	4682      	mov	sl, r0
 8009c8e:	4690      	mov	r8, r2
 8009c90:	9301      	str	r3, [sp, #4]
 8009c92:	f846 5c04 	str.w	r5, [r6, #-4]
 8009c96:	46b9      	mov	r9, r7
 8009c98:	463c      	mov	r4, r7
 8009c9a:	9502      	str	r5, [sp, #8]
 8009c9c:	46ab      	mov	fp, r5
 8009c9e:	784a      	ldrb	r2, [r1, #1]
 8009ca0:	1c4b      	adds	r3, r1, #1
 8009ca2:	9303      	str	r3, [sp, #12]
 8009ca4:	b342      	cbz	r2, 8009cf8 <__hexnan+0x88>
 8009ca6:	4610      	mov	r0, r2
 8009ca8:	9105      	str	r1, [sp, #20]
 8009caa:	9204      	str	r2, [sp, #16]
 8009cac:	f7ff fd94 	bl	80097d8 <__hexdig_fun>
 8009cb0:	2800      	cmp	r0, #0
 8009cb2:	d151      	bne.n	8009d58 <__hexnan+0xe8>
 8009cb4:	9a04      	ldr	r2, [sp, #16]
 8009cb6:	9905      	ldr	r1, [sp, #20]
 8009cb8:	2a20      	cmp	r2, #32
 8009cba:	d818      	bhi.n	8009cee <__hexnan+0x7e>
 8009cbc:	9b02      	ldr	r3, [sp, #8]
 8009cbe:	459b      	cmp	fp, r3
 8009cc0:	dd13      	ble.n	8009cea <__hexnan+0x7a>
 8009cc2:	454c      	cmp	r4, r9
 8009cc4:	d206      	bcs.n	8009cd4 <__hexnan+0x64>
 8009cc6:	2d07      	cmp	r5, #7
 8009cc8:	dc04      	bgt.n	8009cd4 <__hexnan+0x64>
 8009cca:	462a      	mov	r2, r5
 8009ccc:	4649      	mov	r1, r9
 8009cce:	4620      	mov	r0, r4
 8009cd0:	f7ff ffa8 	bl	8009c24 <L_shift>
 8009cd4:	4544      	cmp	r4, r8
 8009cd6:	d952      	bls.n	8009d7e <__hexnan+0x10e>
 8009cd8:	2300      	movs	r3, #0
 8009cda:	f1a4 0904 	sub.w	r9, r4, #4
 8009cde:	f844 3c04 	str.w	r3, [r4, #-4]
 8009ce2:	f8cd b008 	str.w	fp, [sp, #8]
 8009ce6:	464c      	mov	r4, r9
 8009ce8:	461d      	mov	r5, r3
 8009cea:	9903      	ldr	r1, [sp, #12]
 8009cec:	e7d7      	b.n	8009c9e <__hexnan+0x2e>
 8009cee:	2a29      	cmp	r2, #41	@ 0x29
 8009cf0:	d157      	bne.n	8009da2 <__hexnan+0x132>
 8009cf2:	3102      	adds	r1, #2
 8009cf4:	f8ca 1000 	str.w	r1, [sl]
 8009cf8:	f1bb 0f00 	cmp.w	fp, #0
 8009cfc:	d051      	beq.n	8009da2 <__hexnan+0x132>
 8009cfe:	454c      	cmp	r4, r9
 8009d00:	d206      	bcs.n	8009d10 <__hexnan+0xa0>
 8009d02:	2d07      	cmp	r5, #7
 8009d04:	dc04      	bgt.n	8009d10 <__hexnan+0xa0>
 8009d06:	462a      	mov	r2, r5
 8009d08:	4649      	mov	r1, r9
 8009d0a:	4620      	mov	r0, r4
 8009d0c:	f7ff ff8a 	bl	8009c24 <L_shift>
 8009d10:	4544      	cmp	r4, r8
 8009d12:	d936      	bls.n	8009d82 <__hexnan+0x112>
 8009d14:	f1a8 0204 	sub.w	r2, r8, #4
 8009d18:	4623      	mov	r3, r4
 8009d1a:	f853 1b04 	ldr.w	r1, [r3], #4
 8009d1e:	f842 1f04 	str.w	r1, [r2, #4]!
 8009d22:	429f      	cmp	r7, r3
 8009d24:	d2f9      	bcs.n	8009d1a <__hexnan+0xaa>
 8009d26:	1b3b      	subs	r3, r7, r4
 8009d28:	f023 0303 	bic.w	r3, r3, #3
 8009d2c:	3304      	adds	r3, #4
 8009d2e:	3401      	adds	r4, #1
 8009d30:	3e03      	subs	r6, #3
 8009d32:	42b4      	cmp	r4, r6
 8009d34:	bf88      	it	hi
 8009d36:	2304      	movhi	r3, #4
 8009d38:	4443      	add	r3, r8
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	f843 2b04 	str.w	r2, [r3], #4
 8009d40:	429f      	cmp	r7, r3
 8009d42:	d2fb      	bcs.n	8009d3c <__hexnan+0xcc>
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	b91b      	cbnz	r3, 8009d50 <__hexnan+0xe0>
 8009d48:	4547      	cmp	r7, r8
 8009d4a:	d128      	bne.n	8009d9e <__hexnan+0x12e>
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	603b      	str	r3, [r7, #0]
 8009d50:	2005      	movs	r0, #5
 8009d52:	b007      	add	sp, #28
 8009d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d58:	3501      	adds	r5, #1
 8009d5a:	2d08      	cmp	r5, #8
 8009d5c:	f10b 0b01 	add.w	fp, fp, #1
 8009d60:	dd06      	ble.n	8009d70 <__hexnan+0x100>
 8009d62:	4544      	cmp	r4, r8
 8009d64:	d9c1      	bls.n	8009cea <__hexnan+0x7a>
 8009d66:	2300      	movs	r3, #0
 8009d68:	f844 3c04 	str.w	r3, [r4, #-4]
 8009d6c:	2501      	movs	r5, #1
 8009d6e:	3c04      	subs	r4, #4
 8009d70:	6822      	ldr	r2, [r4, #0]
 8009d72:	f000 000f 	and.w	r0, r0, #15
 8009d76:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009d7a:	6020      	str	r0, [r4, #0]
 8009d7c:	e7b5      	b.n	8009cea <__hexnan+0x7a>
 8009d7e:	2508      	movs	r5, #8
 8009d80:	e7b3      	b.n	8009cea <__hexnan+0x7a>
 8009d82:	9b01      	ldr	r3, [sp, #4]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d0dd      	beq.n	8009d44 <__hexnan+0xd4>
 8009d88:	f1c3 0320 	rsb	r3, r3, #32
 8009d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8009d90:	40da      	lsrs	r2, r3
 8009d92:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009d96:	4013      	ands	r3, r2
 8009d98:	f846 3c04 	str.w	r3, [r6, #-4]
 8009d9c:	e7d2      	b.n	8009d44 <__hexnan+0xd4>
 8009d9e:	3f04      	subs	r7, #4
 8009da0:	e7d0      	b.n	8009d44 <__hexnan+0xd4>
 8009da2:	2004      	movs	r0, #4
 8009da4:	e7d5      	b.n	8009d52 <__hexnan+0xe2>

08009da6 <__ascii_mbtowc>:
 8009da6:	b082      	sub	sp, #8
 8009da8:	b901      	cbnz	r1, 8009dac <__ascii_mbtowc+0x6>
 8009daa:	a901      	add	r1, sp, #4
 8009dac:	b142      	cbz	r2, 8009dc0 <__ascii_mbtowc+0x1a>
 8009dae:	b14b      	cbz	r3, 8009dc4 <__ascii_mbtowc+0x1e>
 8009db0:	7813      	ldrb	r3, [r2, #0]
 8009db2:	600b      	str	r3, [r1, #0]
 8009db4:	7812      	ldrb	r2, [r2, #0]
 8009db6:	1e10      	subs	r0, r2, #0
 8009db8:	bf18      	it	ne
 8009dba:	2001      	movne	r0, #1
 8009dbc:	b002      	add	sp, #8
 8009dbe:	4770      	bx	lr
 8009dc0:	4610      	mov	r0, r2
 8009dc2:	e7fb      	b.n	8009dbc <__ascii_mbtowc+0x16>
 8009dc4:	f06f 0001 	mvn.w	r0, #1
 8009dc8:	e7f8      	b.n	8009dbc <__ascii_mbtowc+0x16>

08009dca <_realloc_r>:
 8009dca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dce:	4680      	mov	r8, r0
 8009dd0:	4615      	mov	r5, r2
 8009dd2:	460c      	mov	r4, r1
 8009dd4:	b921      	cbnz	r1, 8009de0 <_realloc_r+0x16>
 8009dd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009dda:	4611      	mov	r1, r2
 8009ddc:	f7fd bc98 	b.w	8007710 <_malloc_r>
 8009de0:	b92a      	cbnz	r2, 8009dee <_realloc_r+0x24>
 8009de2:	f7fd fc21 	bl	8007628 <_free_r>
 8009de6:	2400      	movs	r4, #0
 8009de8:	4620      	mov	r0, r4
 8009dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dee:	f000 f840 	bl	8009e72 <_malloc_usable_size_r>
 8009df2:	4285      	cmp	r5, r0
 8009df4:	4606      	mov	r6, r0
 8009df6:	d802      	bhi.n	8009dfe <_realloc_r+0x34>
 8009df8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009dfc:	d8f4      	bhi.n	8009de8 <_realloc_r+0x1e>
 8009dfe:	4629      	mov	r1, r5
 8009e00:	4640      	mov	r0, r8
 8009e02:	f7fd fc85 	bl	8007710 <_malloc_r>
 8009e06:	4607      	mov	r7, r0
 8009e08:	2800      	cmp	r0, #0
 8009e0a:	d0ec      	beq.n	8009de6 <_realloc_r+0x1c>
 8009e0c:	42b5      	cmp	r5, r6
 8009e0e:	462a      	mov	r2, r5
 8009e10:	4621      	mov	r1, r4
 8009e12:	bf28      	it	cs
 8009e14:	4632      	movcs	r2, r6
 8009e16:	f7ff fc43 	bl	80096a0 <memcpy>
 8009e1a:	4621      	mov	r1, r4
 8009e1c:	4640      	mov	r0, r8
 8009e1e:	f7fd fc03 	bl	8007628 <_free_r>
 8009e22:	463c      	mov	r4, r7
 8009e24:	e7e0      	b.n	8009de8 <_realloc_r+0x1e>

08009e26 <__ascii_wctomb>:
 8009e26:	4603      	mov	r3, r0
 8009e28:	4608      	mov	r0, r1
 8009e2a:	b141      	cbz	r1, 8009e3e <__ascii_wctomb+0x18>
 8009e2c:	2aff      	cmp	r2, #255	@ 0xff
 8009e2e:	d904      	bls.n	8009e3a <__ascii_wctomb+0x14>
 8009e30:	228a      	movs	r2, #138	@ 0x8a
 8009e32:	601a      	str	r2, [r3, #0]
 8009e34:	f04f 30ff 	mov.w	r0, #4294967295
 8009e38:	4770      	bx	lr
 8009e3a:	700a      	strb	r2, [r1, #0]
 8009e3c:	2001      	movs	r0, #1
 8009e3e:	4770      	bx	lr

08009e40 <fiprintf>:
 8009e40:	b40e      	push	{r1, r2, r3}
 8009e42:	b503      	push	{r0, r1, lr}
 8009e44:	4601      	mov	r1, r0
 8009e46:	ab03      	add	r3, sp, #12
 8009e48:	4805      	ldr	r0, [pc, #20]	@ (8009e60 <fiprintf+0x20>)
 8009e4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e4e:	6800      	ldr	r0, [r0, #0]
 8009e50:	9301      	str	r3, [sp, #4]
 8009e52:	f7ff f9a1 	bl	8009198 <_vfiprintf_r>
 8009e56:	b002      	add	sp, #8
 8009e58:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e5c:	b003      	add	sp, #12
 8009e5e:	4770      	bx	lr
 8009e60:	2000001c 	.word	0x2000001c

08009e64 <abort>:
 8009e64:	b508      	push	{r3, lr}
 8009e66:	2006      	movs	r0, #6
 8009e68:	f000 f834 	bl	8009ed4 <raise>
 8009e6c:	2001      	movs	r0, #1
 8009e6e:	f7f7 fc6a 	bl	8001746 <_exit>

08009e72 <_malloc_usable_size_r>:
 8009e72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e76:	1f18      	subs	r0, r3, #4
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	bfbc      	itt	lt
 8009e7c:	580b      	ldrlt	r3, [r1, r0]
 8009e7e:	18c0      	addlt	r0, r0, r3
 8009e80:	4770      	bx	lr

08009e82 <_raise_r>:
 8009e82:	291f      	cmp	r1, #31
 8009e84:	b538      	push	{r3, r4, r5, lr}
 8009e86:	4605      	mov	r5, r0
 8009e88:	460c      	mov	r4, r1
 8009e8a:	d904      	bls.n	8009e96 <_raise_r+0x14>
 8009e8c:	2316      	movs	r3, #22
 8009e8e:	6003      	str	r3, [r0, #0]
 8009e90:	f04f 30ff 	mov.w	r0, #4294967295
 8009e94:	bd38      	pop	{r3, r4, r5, pc}
 8009e96:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009e98:	b112      	cbz	r2, 8009ea0 <_raise_r+0x1e>
 8009e9a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e9e:	b94b      	cbnz	r3, 8009eb4 <_raise_r+0x32>
 8009ea0:	4628      	mov	r0, r5
 8009ea2:	f000 f831 	bl	8009f08 <_getpid_r>
 8009ea6:	4622      	mov	r2, r4
 8009ea8:	4601      	mov	r1, r0
 8009eaa:	4628      	mov	r0, r5
 8009eac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009eb0:	f000 b818 	b.w	8009ee4 <_kill_r>
 8009eb4:	2b01      	cmp	r3, #1
 8009eb6:	d00a      	beq.n	8009ece <_raise_r+0x4c>
 8009eb8:	1c59      	adds	r1, r3, #1
 8009eba:	d103      	bne.n	8009ec4 <_raise_r+0x42>
 8009ebc:	2316      	movs	r3, #22
 8009ebe:	6003      	str	r3, [r0, #0]
 8009ec0:	2001      	movs	r0, #1
 8009ec2:	e7e7      	b.n	8009e94 <_raise_r+0x12>
 8009ec4:	2100      	movs	r1, #0
 8009ec6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009eca:	4620      	mov	r0, r4
 8009ecc:	4798      	blx	r3
 8009ece:	2000      	movs	r0, #0
 8009ed0:	e7e0      	b.n	8009e94 <_raise_r+0x12>
	...

08009ed4 <raise>:
 8009ed4:	4b02      	ldr	r3, [pc, #8]	@ (8009ee0 <raise+0xc>)
 8009ed6:	4601      	mov	r1, r0
 8009ed8:	6818      	ldr	r0, [r3, #0]
 8009eda:	f7ff bfd2 	b.w	8009e82 <_raise_r>
 8009ede:	bf00      	nop
 8009ee0:	2000001c 	.word	0x2000001c

08009ee4 <_kill_r>:
 8009ee4:	b538      	push	{r3, r4, r5, lr}
 8009ee6:	4d07      	ldr	r5, [pc, #28]	@ (8009f04 <_kill_r+0x20>)
 8009ee8:	2300      	movs	r3, #0
 8009eea:	4604      	mov	r4, r0
 8009eec:	4608      	mov	r0, r1
 8009eee:	4611      	mov	r1, r2
 8009ef0:	602b      	str	r3, [r5, #0]
 8009ef2:	f7f7 fc18 	bl	8001726 <_kill>
 8009ef6:	1c43      	adds	r3, r0, #1
 8009ef8:	d102      	bne.n	8009f00 <_kill_r+0x1c>
 8009efa:	682b      	ldr	r3, [r5, #0]
 8009efc:	b103      	cbz	r3, 8009f00 <_kill_r+0x1c>
 8009efe:	6023      	str	r3, [r4, #0]
 8009f00:	bd38      	pop	{r3, r4, r5, pc}
 8009f02:	bf00      	nop
 8009f04:	200015c4 	.word	0x200015c4

08009f08 <_getpid_r>:
 8009f08:	f7f7 bc05 	b.w	8001716 <_getpid>

08009f0c <fmax>:
 8009f0c:	b508      	push	{r3, lr}
 8009f0e:	ed2d 8b04 	vpush	{d8-d9}
 8009f12:	eeb0 8a40 	vmov.f32	s16, s0
 8009f16:	eef0 8a60 	vmov.f32	s17, s1
 8009f1a:	eeb0 9a41 	vmov.f32	s18, s2
 8009f1e:	eef0 9a61 	vmov.f32	s19, s3
 8009f22:	f000 f81d 	bl	8009f60 <__fpclassifyd>
 8009f26:	b950      	cbnz	r0, 8009f3e <fmax+0x32>
 8009f28:	eeb0 8a49 	vmov.f32	s16, s18
 8009f2c:	eef0 8a69 	vmov.f32	s17, s19
 8009f30:	eeb0 0a48 	vmov.f32	s0, s16
 8009f34:	eef0 0a68 	vmov.f32	s1, s17
 8009f38:	ecbd 8b04 	vpop	{d8-d9}
 8009f3c:	bd08      	pop	{r3, pc}
 8009f3e:	eeb0 0a49 	vmov.f32	s0, s18
 8009f42:	eef0 0a69 	vmov.f32	s1, s19
 8009f46:	f000 f80b 	bl	8009f60 <__fpclassifyd>
 8009f4a:	2800      	cmp	r0, #0
 8009f4c:	d0f0      	beq.n	8009f30 <fmax+0x24>
 8009f4e:	ec53 2b19 	vmov	r2, r3, d9
 8009f52:	ec51 0b18 	vmov	r0, r1, d8
 8009f56:	f7f6 fddf 	bl	8000b18 <__aeabi_dcmpgt>
 8009f5a:	2800      	cmp	r0, #0
 8009f5c:	d0e4      	beq.n	8009f28 <fmax+0x1c>
 8009f5e:	e7e7      	b.n	8009f30 <fmax+0x24>

08009f60 <__fpclassifyd>:
 8009f60:	ec51 0b10 	vmov	r0, r1, d0
 8009f64:	b510      	push	{r4, lr}
 8009f66:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 8009f6a:	460b      	mov	r3, r1
 8009f6c:	d019      	beq.n	8009fa2 <__fpclassifyd+0x42>
 8009f6e:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 8009f72:	490e      	ldr	r1, [pc, #56]	@ (8009fac <__fpclassifyd+0x4c>)
 8009f74:	428a      	cmp	r2, r1
 8009f76:	d90e      	bls.n	8009f96 <__fpclassifyd+0x36>
 8009f78:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 8009f7c:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 8009f80:	428a      	cmp	r2, r1
 8009f82:	d908      	bls.n	8009f96 <__fpclassifyd+0x36>
 8009f84:	4a0a      	ldr	r2, [pc, #40]	@ (8009fb0 <__fpclassifyd+0x50>)
 8009f86:	4213      	tst	r3, r2
 8009f88:	d007      	beq.n	8009f9a <__fpclassifyd+0x3a>
 8009f8a:	4294      	cmp	r4, r2
 8009f8c:	d107      	bne.n	8009f9e <__fpclassifyd+0x3e>
 8009f8e:	fab0 f080 	clz	r0, r0
 8009f92:	0940      	lsrs	r0, r0, #5
 8009f94:	bd10      	pop	{r4, pc}
 8009f96:	2004      	movs	r0, #4
 8009f98:	e7fc      	b.n	8009f94 <__fpclassifyd+0x34>
 8009f9a:	2003      	movs	r0, #3
 8009f9c:	e7fa      	b.n	8009f94 <__fpclassifyd+0x34>
 8009f9e:	2000      	movs	r0, #0
 8009fa0:	e7f8      	b.n	8009f94 <__fpclassifyd+0x34>
 8009fa2:	2800      	cmp	r0, #0
 8009fa4:	d1ee      	bne.n	8009f84 <__fpclassifyd+0x24>
 8009fa6:	2002      	movs	r0, #2
 8009fa8:	e7f4      	b.n	8009f94 <__fpclassifyd+0x34>
 8009faa:	bf00      	nop
 8009fac:	7fdfffff 	.word	0x7fdfffff
 8009fb0:	7ff00000 	.word	0x7ff00000

08009fb4 <fminf>:
 8009fb4:	b508      	push	{r3, lr}
 8009fb6:	ed2d 8b02 	vpush	{d8}
 8009fba:	eeb0 8a40 	vmov.f32	s16, s0
 8009fbe:	eef0 8a60 	vmov.f32	s17, s1
 8009fc2:	f000 f815 	bl	8009ff0 <__fpclassifyf>
 8009fc6:	b930      	cbnz	r0, 8009fd6 <fminf+0x22>
 8009fc8:	eeb0 8a68 	vmov.f32	s16, s17
 8009fcc:	eeb0 0a48 	vmov.f32	s0, s16
 8009fd0:	ecbd 8b02 	vpop	{d8}
 8009fd4:	bd08      	pop	{r3, pc}
 8009fd6:	eeb0 0a68 	vmov.f32	s0, s17
 8009fda:	f000 f809 	bl	8009ff0 <__fpclassifyf>
 8009fde:	2800      	cmp	r0, #0
 8009fe0:	d0f4      	beq.n	8009fcc <fminf+0x18>
 8009fe2:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fea:	d5ed      	bpl.n	8009fc8 <fminf+0x14>
 8009fec:	e7ee      	b.n	8009fcc <fminf+0x18>
	...

08009ff0 <__fpclassifyf>:
 8009ff0:	ee10 3a10 	vmov	r3, s0
 8009ff4:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8009ff8:	d00d      	beq.n	800a016 <__fpclassifyf+0x26>
 8009ffa:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8009ffe:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800a002:	d30a      	bcc.n	800a01a <__fpclassifyf+0x2a>
 800a004:	4b07      	ldr	r3, [pc, #28]	@ (800a024 <__fpclassifyf+0x34>)
 800a006:	1e42      	subs	r2, r0, #1
 800a008:	429a      	cmp	r2, r3
 800a00a:	d908      	bls.n	800a01e <__fpclassifyf+0x2e>
 800a00c:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800a010:	4258      	negs	r0, r3
 800a012:	4158      	adcs	r0, r3
 800a014:	4770      	bx	lr
 800a016:	2002      	movs	r0, #2
 800a018:	4770      	bx	lr
 800a01a:	2004      	movs	r0, #4
 800a01c:	4770      	bx	lr
 800a01e:	2003      	movs	r0, #3
 800a020:	4770      	bx	lr
 800a022:	bf00      	nop
 800a024:	007ffffe 	.word	0x007ffffe

0800a028 <_init>:
 800a028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a02a:	bf00      	nop
 800a02c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a02e:	bc08      	pop	{r3}
 800a030:	469e      	mov	lr, r3
 800a032:	4770      	bx	lr

0800a034 <_fini>:
 800a034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a036:	bf00      	nop
 800a038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a03a:	bc08      	pop	{r3}
 800a03c:	469e      	mov	lr, r3
 800a03e:	4770      	bx	lr
