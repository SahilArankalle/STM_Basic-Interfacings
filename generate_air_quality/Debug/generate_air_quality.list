
generate_air_quality.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cc4  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000530  08009e88  08009e88  0000ae88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3b8  0800a3b8  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3b8  0800a3b8  0000b3b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3c0  0800a3c0  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3c0  0800a3c0  0000b3c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a3c4  0800a3c4  0000b3c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a3c8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  200001d4  0800a59c  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000450  0800a59c  0000c450  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f6e4  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020c5  00000000  00000000  0001b8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf0  00000000  00000000  0001d9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009e5  00000000  00000000  0001e6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c136  00000000  00000000  0001f085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f6d1  00000000  00000000  0004b1bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00111c7f  00000000  00000000  0005a88c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016c50b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ae4  00000000  00000000  0016c550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00171034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001d4 	.word	0x200001d4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08009e6c 	.word	0x08009e6c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	08009e6c 	.word	0x08009e6c

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a0 	b.w	8001010 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	460c      	mov	r4, r1
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d14e      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d60:	4694      	mov	ip, r2
 8000d62:	458c      	cmp	ip, r1
 8000d64:	4686      	mov	lr, r0
 8000d66:	fab2 f282 	clz	r2, r2
 8000d6a:	d962      	bls.n	8000e32 <__udivmoddi4+0xde>
 8000d6c:	b14a      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d6e:	f1c2 0320 	rsb	r3, r2, #32
 8000d72:	4091      	lsls	r1, r2
 8000d74:	fa20 f303 	lsr.w	r3, r0, r3
 8000d78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7c:	4319      	orrs	r1, r3
 8000d7e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f f68c 	uxth.w	r6, ip
 8000d8a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb07 1114 	mls	r1, r7, r4, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb04 f106 	mul.w	r1, r4, r6
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000daa:	f080 8112 	bcs.w	8000fd2 <__udivmoddi4+0x27e>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 810f 	bls.w	8000fd2 <__udivmoddi4+0x27e>
 8000db4:	3c02      	subs	r4, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a59      	subs	r1, r3, r1
 8000dba:	fa1f f38e 	uxth.w	r3, lr
 8000dbe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dca:	fb00 f606 	mul.w	r6, r0, r6
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x94>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dda:	f080 80fc 	bcs.w	8000fd6 <__udivmoddi4+0x282>
 8000dde:	429e      	cmp	r6, r3
 8000de0:	f240 80f9 	bls.w	8000fd6 <__udivmoddi4+0x282>
 8000de4:	4463      	add	r3, ip
 8000de6:	3802      	subs	r0, #2
 8000de8:	1b9b      	subs	r3, r3, r6
 8000dea:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dee:	2100      	movs	r1, #0
 8000df0:	b11d      	cbz	r5, 8000dfa <__udivmoddi4+0xa6>
 8000df2:	40d3      	lsrs	r3, r2
 8000df4:	2200      	movs	r2, #0
 8000df6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d905      	bls.n	8000e0e <__udivmoddi4+0xba>
 8000e02:	b10d      	cbz	r5, 8000e08 <__udivmoddi4+0xb4>
 8000e04:	e9c5 0100 	strd	r0, r1, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e7f5      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e0e:	fab3 f183 	clz	r1, r3
 8000e12:	2900      	cmp	r1, #0
 8000e14:	d146      	bne.n	8000ea4 <__udivmoddi4+0x150>
 8000e16:	42a3      	cmp	r3, r4
 8000e18:	d302      	bcc.n	8000e20 <__udivmoddi4+0xcc>
 8000e1a:	4290      	cmp	r0, r2
 8000e1c:	f0c0 80f0 	bcc.w	8001000 <__udivmoddi4+0x2ac>
 8000e20:	1a86      	subs	r6, r0, r2
 8000e22:	eb64 0303 	sbc.w	r3, r4, r3
 8000e26:	2001      	movs	r0, #1
 8000e28:	2d00      	cmp	r5, #0
 8000e2a:	d0e6      	beq.n	8000dfa <__udivmoddi4+0xa6>
 8000e2c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e30:	e7e3      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	f040 8090 	bne.w	8000f58 <__udivmoddi4+0x204>
 8000e38:	eba1 040c 	sub.w	r4, r1, ip
 8000e3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e40:	fa1f f78c 	uxth.w	r7, ip
 8000e44:	2101      	movs	r1, #1
 8000e46:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e4e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e56:	fb07 f006 	mul.w	r0, r7, r6
 8000e5a:	4298      	cmp	r0, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x11c>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x11a>
 8000e68:	4298      	cmp	r0, r3
 8000e6a:	f200 80cd 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e6e:	4626      	mov	r6, r4
 8000e70:	1a1c      	subs	r4, r3, r0
 8000e72:	fa1f f38e 	uxth.w	r3, lr
 8000e76:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e7a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e82:	fb00 f707 	mul.w	r7, r0, r7
 8000e86:	429f      	cmp	r7, r3
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x148>
 8000e8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x146>
 8000e94:	429f      	cmp	r7, r3
 8000e96:	f200 80b0 	bhi.w	8000ffa <__udivmoddi4+0x2a6>
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	1bdb      	subs	r3, r3, r7
 8000e9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ea2:	e7a5      	b.n	8000df0 <__udivmoddi4+0x9c>
 8000ea4:	f1c1 0620 	rsb	r6, r1, #32
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	fa22 f706 	lsr.w	r7, r2, r6
 8000eae:	431f      	orrs	r7, r3
 8000eb0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eb4:	fa04 f301 	lsl.w	r3, r4, r1
 8000eb8:	ea43 030c 	orr.w	r3, r3, ip
 8000ebc:	40f4      	lsrs	r4, r6
 8000ebe:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec2:	0c38      	lsrs	r0, r7, #16
 8000ec4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ec8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ecc:	fa1f fc87 	uxth.w	ip, r7
 8000ed0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ed4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed8:	fb0e f90c 	mul.w	r9, lr, ip
 8000edc:	45a1      	cmp	r9, r4
 8000ede:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee2:	d90a      	bls.n	8000efa <__udivmoddi4+0x1a6>
 8000ee4:	193c      	adds	r4, r7, r4
 8000ee6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eea:	f080 8084 	bcs.w	8000ff6 <__udivmoddi4+0x2a2>
 8000eee:	45a1      	cmp	r9, r4
 8000ef0:	f240 8081 	bls.w	8000ff6 <__udivmoddi4+0x2a2>
 8000ef4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ef8:	443c      	add	r4, r7
 8000efa:	eba4 0409 	sub.w	r4, r4, r9
 8000efe:	fa1f f983 	uxth.w	r9, r3
 8000f02:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f06:	fb00 4413 	mls	r4, r0, r3, r4
 8000f0a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f12:	45a4      	cmp	ip, r4
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x1d2>
 8000f16:	193c      	adds	r4, r7, r4
 8000f18:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f1c:	d267      	bcs.n	8000fee <__udivmoddi4+0x29a>
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d965      	bls.n	8000fee <__udivmoddi4+0x29a>
 8000f22:	3b02      	subs	r3, #2
 8000f24:	443c      	add	r4, r7
 8000f26:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f2a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f2e:	eba4 040c 	sub.w	r4, r4, ip
 8000f32:	429c      	cmp	r4, r3
 8000f34:	46ce      	mov	lr, r9
 8000f36:	469c      	mov	ip, r3
 8000f38:	d351      	bcc.n	8000fde <__udivmoddi4+0x28a>
 8000f3a:	d04e      	beq.n	8000fda <__udivmoddi4+0x286>
 8000f3c:	b155      	cbz	r5, 8000f54 <__udivmoddi4+0x200>
 8000f3e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f42:	eb64 040c 	sbc.w	r4, r4, ip
 8000f46:	fa04 f606 	lsl.w	r6, r4, r6
 8000f4a:	40cb      	lsrs	r3, r1
 8000f4c:	431e      	orrs	r6, r3
 8000f4e:	40cc      	lsrs	r4, r1
 8000f50:	e9c5 6400 	strd	r6, r4, [r5]
 8000f54:	2100      	movs	r1, #0
 8000f56:	e750      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000f58:	f1c2 0320 	rsb	r3, r2, #32
 8000f5c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f64:	fa24 f303 	lsr.w	r3, r4, r3
 8000f68:	4094      	lsls	r4, r2
 8000f6a:	430c      	orrs	r4, r1
 8000f6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f70:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f74:	fa1f f78c 	uxth.w	r7, ip
 8000f78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f7c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f80:	0c23      	lsrs	r3, r4, #16
 8000f82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f86:	fb00 f107 	mul.w	r1, r0, r7
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	d908      	bls.n	8000fa0 <__udivmoddi4+0x24c>
 8000f8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f92:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f96:	d22c      	bcs.n	8000ff2 <__udivmoddi4+0x29e>
 8000f98:	4299      	cmp	r1, r3
 8000f9a:	d92a      	bls.n	8000ff2 <__udivmoddi4+0x29e>
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	1a5b      	subs	r3, r3, r1
 8000fa2:	b2a4      	uxth	r4, r4
 8000fa4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fa8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fb0:	fb01 f307 	mul.w	r3, r1, r7
 8000fb4:	42a3      	cmp	r3, r4
 8000fb6:	d908      	bls.n	8000fca <__udivmoddi4+0x276>
 8000fb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fbc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fc0:	d213      	bcs.n	8000fea <__udivmoddi4+0x296>
 8000fc2:	42a3      	cmp	r3, r4
 8000fc4:	d911      	bls.n	8000fea <__udivmoddi4+0x296>
 8000fc6:	3902      	subs	r1, #2
 8000fc8:	4464      	add	r4, ip
 8000fca:	1ae4      	subs	r4, r4, r3
 8000fcc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fd0:	e739      	b.n	8000e46 <__udivmoddi4+0xf2>
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	e6f0      	b.n	8000db8 <__udivmoddi4+0x64>
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	e706      	b.n	8000de8 <__udivmoddi4+0x94>
 8000fda:	45c8      	cmp	r8, r9
 8000fdc:	d2ae      	bcs.n	8000f3c <__udivmoddi4+0x1e8>
 8000fde:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fe2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fe6:	3801      	subs	r0, #1
 8000fe8:	e7a8      	b.n	8000f3c <__udivmoddi4+0x1e8>
 8000fea:	4631      	mov	r1, r6
 8000fec:	e7ed      	b.n	8000fca <__udivmoddi4+0x276>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	e799      	b.n	8000f26 <__udivmoddi4+0x1d2>
 8000ff2:	4630      	mov	r0, r6
 8000ff4:	e7d4      	b.n	8000fa0 <__udivmoddi4+0x24c>
 8000ff6:	46d6      	mov	lr, sl
 8000ff8:	e77f      	b.n	8000efa <__udivmoddi4+0x1a6>
 8000ffa:	4463      	add	r3, ip
 8000ffc:	3802      	subs	r0, #2
 8000ffe:	e74d      	b.n	8000e9c <__udivmoddi4+0x148>
 8001000:	4606      	mov	r6, r0
 8001002:	4623      	mov	r3, r4
 8001004:	4608      	mov	r0, r1
 8001006:	e70f      	b.n	8000e28 <__udivmoddi4+0xd4>
 8001008:	3e02      	subs	r6, #2
 800100a:	4463      	add	r3, ip
 800100c:	e730      	b.n	8000e70 <__udivmoddi4+0x11c>
 800100e:	bf00      	nop

08001010 <__aeabi_idiv0>:
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <AirQualitySensor_Init.0>:
  */
int main(void)
{

  /* USER CODE BEGIN 1 */
	void AirQualitySensor_Init(void) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	f8c7 c004 	str.w	ip, [r7, #4]
	    HAL_ADC_Start(&hadc1);
 800101e:	4814      	ldr	r0, [pc, #80]	@ (8001070 <AirQualitySensor_Init.0+0x5c>)
 8001020:	f000 ffb4 	bl	8001f8c <HAL_ADC_Start>
	    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001024:	f04f 31ff 	mov.w	r1, #4294967295
 8001028:	4811      	ldr	r0, [pc, #68]	@ (8001070 <AirQualitySensor_Init.0+0x5c>)
 800102a:	f001 f812 	bl	8002052 <HAL_ADC_PollForConversion>
	    int initVoltage = HAL_ADC_GetValue(&hadc1);
 800102e:	4810      	ldr	r0, [pc, #64]	@ (8001070 <AirQualitySensor_Init.0+0x5c>)
 8001030:	f001 f89e 	bl	8002170 <HAL_ADC_GetValue>
 8001034:	4603      	mov	r3, r0
 8001036:	60fb      	str	r3, [r7, #12]

	    if (initVoltage > 10 && initVoltage < 798) {
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2b0a      	cmp	r3, #10
 800103c:	dd14      	ble.n	8001068 <AirQualitySensor_Init.0+0x54>
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f240 321d 	movw	r2, #797	@ 0x31d
 8001044:	4293      	cmp	r3, r2
 8001046:	dc0f      	bgt.n	8001068 <AirQualitySensor_Init.0+0x54>
	        currentVoltage = initVoltage;
 8001048:	4a0a      	ldr	r2, [pc, #40]	@ (8001074 <AirQualitySensor_Init.0+0x60>)
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	6013      	str	r3, [r2, #0]
	        lastVoltage = currentVoltage;
 800104e:	4b09      	ldr	r3, [pc, #36]	@ (8001074 <AirQualitySensor_Init.0+0x60>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a09      	ldr	r2, [pc, #36]	@ (8001078 <AirQualitySensor_Init.0+0x64>)
 8001054:	6013      	str	r3, [r2, #0]

	        standardVoltage = initVoltage;
 8001056:	4a09      	ldr	r2, [pc, #36]	@ (800107c <AirQualitySensor_Init.0+0x68>)
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	6013      	str	r3, [r2, #0]
	        lastStdVolUpdated = HAL_GetTick();
 800105c:	f000 fc46 	bl	80018ec <HAL_GetTick>
 8001060:	4603      	mov	r3, r0
 8001062:	461a      	mov	r2, r3
 8001064:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <AirQualitySensor_Init.0+0x6c>)
 8001066:	601a      	str	r2, [r3, #0]
	    }
	}
 8001068:	bf00      	nop
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	200001f0 	.word	0x200001f0
 8001074:	200002f0 	.word	0x200002f0
 8001078:	200002ec 	.word	0x200002ec
 800107c:	200002f4 	.word	0x200002f4
 8001080:	200002f8 	.word	0x200002f8

08001084 <main>:
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
int main(void)
 800108a:	f107 0310 	add.w	r3, r7, #16
 800108e:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001090:	f000 fbc3 	bl	800181a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001094:	f000 f866 	bl	8001164 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001098:	f000 f966 	bl	8001368 <MX_GPIO_Init>
  MX_ADC1_Init();
 800109c:	f000 f8b4 	bl	8001208 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80010a0:	f000 f916 	bl	80012d0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  AirQualitySensor_Init();
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	469c      	mov	ip, r3
 80010a8:	f7ff ffb4 	bl	8001014 <AirQualitySensor_Init.0>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      AirQualitySensor_ReadValue();
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	469c      	mov	ip, r3
 80010b0:	f000 f80e 	bl	80010d0 <AirQualitySensor_ReadValue.1>
      AirQualitySensor_PrintLevel(currentVoltage);
 80010b4:	4b05      	ldr	r3, [pc, #20]	@ (80010cc <main+0x48>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	1d3a      	adds	r2, r7, #4
 80010ba:	4694      	mov	ip, r2
 80010bc:	4618      	mov	r0, r3
 80010be:	f000 f825 	bl	800110c <AirQualitySensor_PrintLevel.2>
      HAL_Delay(200);
 80010c2:	20c8      	movs	r0, #200	@ 0xc8
 80010c4:	f000 fc1e 	bl	8001904 <HAL_Delay>
      AirQualitySensor_ReadValue();
 80010c8:	bf00      	nop
 80010ca:	e7ef      	b.n	80010ac <main+0x28>
 80010cc:	200002f0 	.word	0x200002f0

080010d0 <AirQualitySensor_ReadValue.1>:
int AirQualitySensor_ReadValue(void) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	f8c7 c004 	str.w	ip, [r7, #4]
    HAL_ADC_Start(&hadc1);
 80010da:	480a      	ldr	r0, [pc, #40]	@ (8001104 <AirQualitySensor_ReadValue.1+0x34>)
 80010dc:	f000 ff56 	bl	8001f8c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80010e0:	f04f 31ff 	mov.w	r1, #4294967295
 80010e4:	4807      	ldr	r0, [pc, #28]	@ (8001104 <AirQualitySensor_ReadValue.1+0x34>)
 80010e6:	f000 ffb4 	bl	8002052 <HAL_ADC_PollForConversion>
    currentVoltage = HAL_ADC_GetValue(&hadc1);
 80010ea:	4806      	ldr	r0, [pc, #24]	@ (8001104 <AirQualitySensor_ReadValue.1+0x34>)
 80010ec:	f001 f840 	bl	8002170 <HAL_ADC_GetValue>
 80010f0:	4603      	mov	r3, r0
 80010f2:	461a      	mov	r2, r3
 80010f4:	4b04      	ldr	r3, [pc, #16]	@ (8001108 <AirQualitySensor_ReadValue.1+0x38>)
 80010f6:	601a      	str	r2, [r3, #0]
    return currentVoltage;
 80010f8:	4b03      	ldr	r3, [pc, #12]	@ (8001108 <AirQualitySensor_ReadValue.1+0x38>)
 80010fa:	681b      	ldr	r3, [r3, #0]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	200001f0 	.word	0x200001f0
 8001108:	200002f0 	.word	0x200002f0

0800110c <AirQualitySensor_PrintLevel.2>:
void AirQualitySensor_PrintLevel(int adcValue) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	f8c7 c000 	str.w	ip, [r7]
    if (adcValue < 200) {  // Example threshold for Low Pollution
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2bc7      	cmp	r3, #199	@ 0xc7
 800111c:	dc03      	bgt.n	8001126 <AirQualitySensor_PrintLevel.2+0x1a>
        printf("Air Quality Level: Low Pollution\r\n");
 800111e:	480d      	ldr	r0, [pc, #52]	@ (8001154 <AirQualitySensor_PrintLevel.2+0x48>)
 8001120:	f005 fa62 	bl	80065e8 <puts>
}
 8001124:	e012      	b.n	800114c <AirQualitySensor_PrintLevel.2+0x40>
    } else if (adcValue < 400) {  // Example threshold for Medium Pollution
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800112c:	da03      	bge.n	8001136 <AirQualitySensor_PrintLevel.2+0x2a>
        printf("Air Quality Level: Medium Pollution\r\n");
 800112e:	480a      	ldr	r0, [pc, #40]	@ (8001158 <AirQualitySensor_PrintLevel.2+0x4c>)
 8001130:	f005 fa5a 	bl	80065e8 <puts>
}
 8001134:	e00a      	b.n	800114c <AirQualitySensor_PrintLevel.2+0x40>
    } else if (adcValue < 600) {  // Example threshold for High Pollution
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800113c:	da03      	bge.n	8001146 <AirQualitySensor_PrintLevel.2+0x3a>
        printf("Air Quality Level: High Pollution\r\n");
 800113e:	4807      	ldr	r0, [pc, #28]	@ (800115c <AirQualitySensor_PrintLevel.2+0x50>)
 8001140:	f005 fa52 	bl	80065e8 <puts>
}
 8001144:	e002      	b.n	800114c <AirQualitySensor_PrintLevel.2+0x40>
        printf("Air Quality Level: Fresh Air\r\n");
 8001146:	4806      	ldr	r0, [pc, #24]	@ (8001160 <AirQualitySensor_PrintLevel.2+0x54>)
 8001148:	f005 fa4e 	bl	80065e8 <puts>
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	08009e88 	.word	0x08009e88
 8001158:	08009eac 	.word	0x08009eac
 800115c:	08009ed4 	.word	0x08009ed4
 8001160:	08009ef8 	.word	0x08009ef8

08001164 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b096      	sub	sp, #88	@ 0x58
 8001168:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	2244      	movs	r2, #68	@ 0x44
 8001170:	2100      	movs	r1, #0
 8001172:	4618      	mov	r0, r3
 8001174:	f005 fb38 	bl	80067e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001178:	463b      	mov	r3, r7
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]
 8001184:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001186:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800118a:	f001 ff19 	bl	8002fc0 <HAL_PWREx_ControlVoltageScaling>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001194:	f000 f91e 	bl	80013d4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001198:	2310      	movs	r3, #16
 800119a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800119c:	2301      	movs	r3, #1
 800119e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80011a4:	2360      	movs	r3, #96	@ 0x60
 80011a6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a8:	2302      	movs	r3, #2
 80011aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80011ac:	2301      	movs	r3, #1
 80011ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011b0:	2301      	movs	r3, #1
 80011b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 32;
 80011b4:	2320      	movs	r3, #32
 80011b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011b8:	2302      	movs	r3, #2
 80011ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011bc:	2302      	movs	r3, #2
 80011be:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011c0:	2302      	movs	r3, #2
 80011c2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	4618      	mov	r0, r3
 80011ca:	f001 ff9d 	bl	8003108 <HAL_RCC_OscConfig>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80011d4:	f000 f8fe 	bl	80013d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d8:	230f      	movs	r3, #15
 80011da:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011dc:	2303      	movs	r3, #3
 80011de:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e8:	2300      	movs	r3, #0
 80011ea:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011ec:	463b      	mov	r3, r7
 80011ee:	2103      	movs	r1, #3
 80011f0:	4618      	mov	r0, r3
 80011f2:	f002 fba3 	bl	800393c <HAL_RCC_ClockConfig>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80011fc:	f000 f8ea 	bl	80013d4 <Error_Handler>
  }
}
 8001200:	bf00      	nop
 8001202:	3758      	adds	r7, #88	@ 0x58
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800120e:	463b      	mov	r3, r7
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
 800121c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800121e:	4b29      	ldr	r3, [pc, #164]	@ (80012c4 <MX_ADC1_Init+0xbc>)
 8001220:	4a29      	ldr	r2, [pc, #164]	@ (80012c8 <MX_ADC1_Init+0xc0>)
 8001222:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001224:	4b27      	ldr	r3, [pc, #156]	@ (80012c4 <MX_ADC1_Init+0xbc>)
 8001226:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800122a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800122c:	4b25      	ldr	r3, [pc, #148]	@ (80012c4 <MX_ADC1_Init+0xbc>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001232:	4b24      	ldr	r3, [pc, #144]	@ (80012c4 <MX_ADC1_Init+0xbc>)
 8001234:	2200      	movs	r2, #0
 8001236:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001238:	4b22      	ldr	r3, [pc, #136]	@ (80012c4 <MX_ADC1_Init+0xbc>)
 800123a:	2200      	movs	r2, #0
 800123c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800123e:	4b21      	ldr	r3, [pc, #132]	@ (80012c4 <MX_ADC1_Init+0xbc>)
 8001240:	2204      	movs	r2, #4
 8001242:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001244:	4b1f      	ldr	r3, [pc, #124]	@ (80012c4 <MX_ADC1_Init+0xbc>)
 8001246:	2200      	movs	r2, #0
 8001248:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800124a:	4b1e      	ldr	r3, [pc, #120]	@ (80012c4 <MX_ADC1_Init+0xbc>)
 800124c:	2200      	movs	r2, #0
 800124e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001250:	4b1c      	ldr	r3, [pc, #112]	@ (80012c4 <MX_ADC1_Init+0xbc>)
 8001252:	2201      	movs	r2, #1
 8001254:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001256:	4b1b      	ldr	r3, [pc, #108]	@ (80012c4 <MX_ADC1_Init+0xbc>)
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800125e:	4b19      	ldr	r3, [pc, #100]	@ (80012c4 <MX_ADC1_Init+0xbc>)
 8001260:	2200      	movs	r2, #0
 8001262:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001264:	4b17      	ldr	r3, [pc, #92]	@ (80012c4 <MX_ADC1_Init+0xbc>)
 8001266:	2200      	movs	r2, #0
 8001268:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800126a:	4b16      	ldr	r3, [pc, #88]	@ (80012c4 <MX_ADC1_Init+0xbc>)
 800126c:	2200      	movs	r2, #0
 800126e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001272:	4b14      	ldr	r3, [pc, #80]	@ (80012c4 <MX_ADC1_Init+0xbc>)
 8001274:	2200      	movs	r2, #0
 8001276:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001278:	4b12      	ldr	r3, [pc, #72]	@ (80012c4 <MX_ADC1_Init+0xbc>)
 800127a:	2200      	movs	r2, #0
 800127c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001280:	4810      	ldr	r0, [pc, #64]	@ (80012c4 <MX_ADC1_Init+0xbc>)
 8001282:	f000 fd3d 	bl	8001d00 <HAL_ADC_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 800128c:	f000 f8a2 	bl	80013d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001290:	4b0e      	ldr	r3, [pc, #56]	@ (80012cc <MX_ADC1_Init+0xc4>)
 8001292:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001294:	2306      	movs	r3, #6
 8001296:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001298:	2300      	movs	r3, #0
 800129a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800129c:	237f      	movs	r3, #127	@ 0x7f
 800129e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012a0:	2304      	movs	r3, #4
 80012a2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a8:	463b      	mov	r3, r7
 80012aa:	4619      	mov	r1, r3
 80012ac:	4805      	ldr	r0, [pc, #20]	@ (80012c4 <MX_ADC1_Init+0xbc>)
 80012ae:	f000 ff6d 	bl	800218c <HAL_ADC_ConfigChannel>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80012b8:	f000 f88c 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012bc:	bf00      	nop
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	200001f0 	.word	0x200001f0
 80012c8:	50040000 	.word	0x50040000
 80012cc:	04300002 	.word	0x04300002

080012d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012d4:	4b22      	ldr	r3, [pc, #136]	@ (8001360 <MX_USART1_UART_Init+0x90>)
 80012d6:	4a23      	ldr	r2, [pc, #140]	@ (8001364 <MX_USART1_UART_Init+0x94>)
 80012d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012da:	4b21      	ldr	r3, [pc, #132]	@ (8001360 <MX_USART1_UART_Init+0x90>)
 80012dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001360 <MX_USART1_UART_Init+0x90>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001360 <MX_USART1_UART_Init+0x90>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001360 <MX_USART1_UART_Init+0x90>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001360 <MX_USART1_UART_Init+0x90>)
 80012f6:	220c      	movs	r2, #12
 80012f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fa:	4b19      	ldr	r3, [pc, #100]	@ (8001360 <MX_USART1_UART_Init+0x90>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001300:	4b17      	ldr	r3, [pc, #92]	@ (8001360 <MX_USART1_UART_Init+0x90>)
 8001302:	2200      	movs	r2, #0
 8001304:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001306:	4b16      	ldr	r3, [pc, #88]	@ (8001360 <MX_USART1_UART_Init+0x90>)
 8001308:	2200      	movs	r2, #0
 800130a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800130c:	4b14      	ldr	r3, [pc, #80]	@ (8001360 <MX_USART1_UART_Init+0x90>)
 800130e:	2200      	movs	r2, #0
 8001310:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001312:	4b13      	ldr	r3, [pc, #76]	@ (8001360 <MX_USART1_UART_Init+0x90>)
 8001314:	2200      	movs	r2, #0
 8001316:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001318:	4811      	ldr	r0, [pc, #68]	@ (8001360 <MX_USART1_UART_Init+0x90>)
 800131a:	f003 fae5 	bl	80048e8 <HAL_UART_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001324:	f000 f856 	bl	80013d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001328:	2100      	movs	r1, #0
 800132a:	480d      	ldr	r0, [pc, #52]	@ (8001360 <MX_USART1_UART_Init+0x90>)
 800132c:	f004 f90e 	bl	800554c <HAL_UARTEx_SetTxFifoThreshold>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001336:	f000 f84d 	bl	80013d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800133a:	2100      	movs	r1, #0
 800133c:	4808      	ldr	r0, [pc, #32]	@ (8001360 <MX_USART1_UART_Init+0x90>)
 800133e:	f004 f943 	bl	80055c8 <HAL_UARTEx_SetRxFifoThreshold>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001348:	f000 f844 	bl	80013d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800134c:	4804      	ldr	r0, [pc, #16]	@ (8001360 <MX_USART1_UART_Init+0x90>)
 800134e:	f004 f8c4 	bl	80054da <HAL_UARTEx_DisableFifoMode>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001358:	f000 f83c 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000258 	.word	0x20000258
 8001364:	40013800 	.word	0x40013800

08001368 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800136e:	4b0f      	ldr	r3, [pc, #60]	@ (80013ac <MX_GPIO_Init+0x44>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001372:	4a0e      	ldr	r2, [pc, #56]	@ (80013ac <MX_GPIO_Init+0x44>)
 8001374:	f043 0304 	orr.w	r3, r3, #4
 8001378:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800137a:	4b0c      	ldr	r3, [pc, #48]	@ (80013ac <MX_GPIO_Init+0x44>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137e:	f003 0304 	and.w	r3, r3, #4
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001386:	4b09      	ldr	r3, [pc, #36]	@ (80013ac <MX_GPIO_Init+0x44>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138a:	4a08      	ldr	r2, [pc, #32]	@ (80013ac <MX_GPIO_Init+0x44>)
 800138c:	f043 0302 	orr.w	r3, r3, #2
 8001390:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001392:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <MX_GPIO_Init+0x44>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	603b      	str	r3, [r7, #0]
 800139c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	40021000 	.word	0x40021000

080013b0 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80013b8:	1d39      	adds	r1, r7, #4
 80013ba:	f04f 33ff 	mov.w	r3, #4294967295
 80013be:	2201      	movs	r2, #1
 80013c0:	4803      	ldr	r0, [pc, #12]	@ (80013d0 <__io_putchar+0x20>)
 80013c2:	f003 fae1 	bl	8004988 <HAL_UART_Transmit>
	return ch;
 80013c6:	687b      	ldr	r3, [r7, #4]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000258 	.word	0x20000258

080013d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013d8:	b672      	cpsid	i
}
 80013da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013dc:	bf00      	nop
 80013de:	e7fd      	b.n	80013dc <Error_Handler+0x8>

080013e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001424 <HAL_MspInit+0x44>)
 80013e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001424 <HAL_MspInit+0x44>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80013f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001424 <HAL_MspInit+0x44>)
 80013f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013fe:	4b09      	ldr	r3, [pc, #36]	@ (8001424 <HAL_MspInit+0x44>)
 8001400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001402:	4a08      	ldr	r2, [pc, #32]	@ (8001424 <HAL_MspInit+0x44>)
 8001404:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001408:	6593      	str	r3, [r2, #88]	@ 0x58
 800140a:	4b06      	ldr	r3, [pc, #24]	@ (8001424 <HAL_MspInit+0x44>)
 800140c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800140e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001412:	603b      	str	r3, [r7, #0]
 8001414:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40021000 	.word	0x40021000

08001428 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b0ae      	sub	sp, #184	@ 0xb8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001430:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001440:	f107 0310 	add.w	r3, r7, #16
 8001444:	2294      	movs	r2, #148	@ 0x94
 8001446:	2100      	movs	r1, #0
 8001448:	4618      	mov	r0, r3
 800144a:	f005 f9cd 	bl	80067e8 <memset>
  if(hadc->Instance==ADC1)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a27      	ldr	r2, [pc, #156]	@ (80014f0 <HAL_ADC_MspInit+0xc8>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d146      	bne.n	80014e6 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001458:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800145c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800145e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001462:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001466:	2301      	movs	r3, #1
 8001468:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800146a:	2301      	movs	r3, #1
 800146c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800146e:	2310      	movs	r3, #16
 8001470:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001472:	2302      	movs	r3, #2
 8001474:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001476:	2302      	movs	r3, #2
 8001478:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800147a:	2302      	movs	r3, #2
 800147c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800147e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001482:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001484:	f107 0310 	add.w	r3, r7, #16
 8001488:	4618      	mov	r0, r3
 800148a:	f002 fd15 	bl	8003eb8 <HAL_RCCEx_PeriphCLKConfig>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001494:	f7ff ff9e 	bl	80013d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001498:	4b16      	ldr	r3, [pc, #88]	@ (80014f4 <HAL_ADC_MspInit+0xcc>)
 800149a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149c:	4a15      	ldr	r2, [pc, #84]	@ (80014f4 <HAL_ADC_MspInit+0xcc>)
 800149e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80014a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014a4:	4b13      	ldr	r3, [pc, #76]	@ (80014f4 <HAL_ADC_MspInit+0xcc>)
 80014a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b0:	4b10      	ldr	r3, [pc, #64]	@ (80014f4 <HAL_ADC_MspInit+0xcc>)
 80014b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b4:	4a0f      	ldr	r2, [pc, #60]	@ (80014f4 <HAL_ADC_MspInit+0xcc>)
 80014b6:	f043 0304 	orr.w	r3, r3, #4
 80014ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014bc:	4b0d      	ldr	r3, [pc, #52]	@ (80014f4 <HAL_ADC_MspInit+0xcc>)
 80014be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c0:	f003 0304 	and.w	r3, r3, #4
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014c8:	2301      	movs	r3, #1
 80014ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80014ce:	230b      	movs	r3, #11
 80014d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014da:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80014de:	4619      	mov	r1, r3
 80014e0:	4805      	ldr	r0, [pc, #20]	@ (80014f8 <HAL_ADC_MspInit+0xd0>)
 80014e2:	f001 fbbb 	bl	8002c5c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80014e6:	bf00      	nop
 80014e8:	37b8      	adds	r7, #184	@ 0xb8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	50040000 	.word	0x50040000
 80014f4:	40021000 	.word	0x40021000
 80014f8:	48000800 	.word	0x48000800

080014fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b0ae      	sub	sp, #184	@ 0xb8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001504:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001514:	f107 0310 	add.w	r3, r7, #16
 8001518:	2294      	movs	r2, #148	@ 0x94
 800151a:	2100      	movs	r1, #0
 800151c:	4618      	mov	r0, r3
 800151e:	f005 f963 	bl	80067e8 <memset>
  if(huart->Instance==USART1)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a21      	ldr	r2, [pc, #132]	@ (80015ac <HAL_UART_MspInit+0xb0>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d13a      	bne.n	80015a2 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800152c:	2301      	movs	r3, #1
 800152e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001530:	2300      	movs	r3, #0
 8001532:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001534:	f107 0310 	add.w	r3, r7, #16
 8001538:	4618      	mov	r0, r3
 800153a:	f002 fcbd 	bl	8003eb8 <HAL_RCCEx_PeriphCLKConfig>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001544:	f7ff ff46 	bl	80013d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001548:	4b19      	ldr	r3, [pc, #100]	@ (80015b0 <HAL_UART_MspInit+0xb4>)
 800154a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800154c:	4a18      	ldr	r2, [pc, #96]	@ (80015b0 <HAL_UART_MspInit+0xb4>)
 800154e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001552:	6613      	str	r3, [r2, #96]	@ 0x60
 8001554:	4b16      	ldr	r3, [pc, #88]	@ (80015b0 <HAL_UART_MspInit+0xb4>)
 8001556:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001558:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001560:	4b13      	ldr	r3, [pc, #76]	@ (80015b0 <HAL_UART_MspInit+0xb4>)
 8001562:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001564:	4a12      	ldr	r2, [pc, #72]	@ (80015b0 <HAL_UART_MspInit+0xb4>)
 8001566:	f043 0302 	orr.w	r3, r3, #2
 800156a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800156c:	4b10      	ldr	r3, [pc, #64]	@ (80015b0 <HAL_UART_MspInit+0xb4>)
 800156e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001578:	23c0      	movs	r3, #192	@ 0xc0
 800157a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158a:	2303      	movs	r3, #3
 800158c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001590:	2307      	movs	r3, #7
 8001592:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001596:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800159a:	4619      	mov	r1, r3
 800159c:	4805      	ldr	r0, [pc, #20]	@ (80015b4 <HAL_UART_MspInit+0xb8>)
 800159e:	f001 fb5d 	bl	8002c5c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80015a2:	bf00      	nop
 80015a4:	37b8      	adds	r7, #184	@ 0xb8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40013800 	.word	0x40013800
 80015b0:	40021000 	.word	0x40021000
 80015b4:	48000400 	.word	0x48000400

080015b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015bc:	bf00      	nop
 80015be:	e7fd      	b.n	80015bc <NMI_Handler+0x4>

080015c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c4:	bf00      	nop
 80015c6:	e7fd      	b.n	80015c4 <HardFault_Handler+0x4>

080015c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015cc:	bf00      	nop
 80015ce:	e7fd      	b.n	80015cc <MemManage_Handler+0x4>

080015d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <BusFault_Handler+0x4>

080015d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015dc:	bf00      	nop
 80015de:	e7fd      	b.n	80015dc <UsageFault_Handler+0x4>

080015e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800160e:	f000 f959 	bl	80018c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}

08001616 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0
  return 1;
 800161a:	2301      	movs	r3, #1
}
 800161c:	4618      	mov	r0, r3
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <_kill>:

int _kill(int pid, int sig)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
 800162e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001630:	f005 f92c 	bl	800688c <__errno>
 8001634:	4603      	mov	r3, r0
 8001636:	2216      	movs	r2, #22
 8001638:	601a      	str	r2, [r3, #0]
  return -1;
 800163a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <_exit>:

void _exit (int status)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800164e:	f04f 31ff 	mov.w	r1, #4294967295
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff ffe7 	bl	8001626 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001658:	bf00      	nop
 800165a:	e7fd      	b.n	8001658 <_exit+0x12>

0800165c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	e00a      	b.n	8001684 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800166e:	f3af 8000 	nop.w
 8001672:	4601      	mov	r1, r0
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	1c5a      	adds	r2, r3, #1
 8001678:	60ba      	str	r2, [r7, #8]
 800167a:	b2ca      	uxtb	r2, r1
 800167c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	3301      	adds	r3, #1
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	429a      	cmp	r2, r3
 800168a:	dbf0      	blt.n	800166e <_read+0x12>
  }

  return len;
 800168c:	687b      	ldr	r3, [r7, #4]
}
 800168e:	4618      	mov	r0, r3
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b086      	sub	sp, #24
 800169a:	af00      	add	r7, sp, #0
 800169c:	60f8      	str	r0, [r7, #12]
 800169e:	60b9      	str	r1, [r7, #8]
 80016a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
 80016a6:	e009      	b.n	80016bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	1c5a      	adds	r2, r3, #1
 80016ac:	60ba      	str	r2, [r7, #8]
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff fe7d 	bl	80013b0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	3301      	adds	r3, #1
 80016ba:	617b      	str	r3, [r7, #20]
 80016bc:	697a      	ldr	r2, [r7, #20]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	dbf1      	blt.n	80016a8 <_write+0x12>
  }
  return len;
 80016c4:	687b      	ldr	r3, [r7, #4]
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <_close>:

int _close(int file)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016da:	4618      	mov	r0, r3
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
 80016ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016f6:	605a      	str	r2, [r3, #4]
  return 0;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <_isatty>:

int _isatty(int file)
{
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800170e:	2301      	movs	r3, #1
}
 8001710:	4618      	mov	r0, r3
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3714      	adds	r7, #20
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
	...

08001738 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001740:	4a14      	ldr	r2, [pc, #80]	@ (8001794 <_sbrk+0x5c>)
 8001742:	4b15      	ldr	r3, [pc, #84]	@ (8001798 <_sbrk+0x60>)
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800174c:	4b13      	ldr	r3, [pc, #76]	@ (800179c <_sbrk+0x64>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d102      	bne.n	800175a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001754:	4b11      	ldr	r3, [pc, #68]	@ (800179c <_sbrk+0x64>)
 8001756:	4a12      	ldr	r2, [pc, #72]	@ (80017a0 <_sbrk+0x68>)
 8001758:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800175a:	4b10      	ldr	r3, [pc, #64]	@ (800179c <_sbrk+0x64>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4413      	add	r3, r2
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	429a      	cmp	r2, r3
 8001766:	d207      	bcs.n	8001778 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001768:	f005 f890 	bl	800688c <__errno>
 800176c:	4603      	mov	r3, r0
 800176e:	220c      	movs	r2, #12
 8001770:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001772:	f04f 33ff 	mov.w	r3, #4294967295
 8001776:	e009      	b.n	800178c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001778:	4b08      	ldr	r3, [pc, #32]	@ (800179c <_sbrk+0x64>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800177e:	4b07      	ldr	r3, [pc, #28]	@ (800179c <_sbrk+0x64>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4413      	add	r3, r2
 8001786:	4a05      	ldr	r2, [pc, #20]	@ (800179c <_sbrk+0x64>)
 8001788:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800178a:	68fb      	ldr	r3, [r7, #12]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3718      	adds	r7, #24
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	200a0000 	.word	0x200a0000
 8001798:	00000400 	.word	0x00000400
 800179c:	200002fc 	.word	0x200002fc
 80017a0:	20000450 	.word	0x20000450

080017a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017a8:	4b06      	ldr	r3, [pc, #24]	@ (80017c4 <SystemInit+0x20>)
 80017aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017ae:	4a05      	ldr	r2, [pc, #20]	@ (80017c4 <SystemInit+0x20>)
 80017b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001800 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017cc:	f7ff ffea 	bl	80017a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017d0:	480c      	ldr	r0, [pc, #48]	@ (8001804 <LoopForever+0x6>)
  ldr r1, =_edata
 80017d2:	490d      	ldr	r1, [pc, #52]	@ (8001808 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017d4:	4a0d      	ldr	r2, [pc, #52]	@ (800180c <LoopForever+0xe>)
  movs r3, #0
 80017d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017d8:	e002      	b.n	80017e0 <LoopCopyDataInit>

080017da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017de:	3304      	adds	r3, #4

080017e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017e4:	d3f9      	bcc.n	80017da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001810 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001814 <LoopForever+0x16>)
  movs r3, #0
 80017ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017ec:	e001      	b.n	80017f2 <LoopFillZerobss>

080017ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017f0:	3204      	adds	r2, #4

080017f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017f4:	d3fb      	bcc.n	80017ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017f6:	f005 f84f 	bl	8006898 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017fa:	f7ff fc43 	bl	8001084 <main>

080017fe <LoopForever>:

LoopForever:
    b LoopForever
 80017fe:	e7fe      	b.n	80017fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001800:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001804:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001808:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800180c:	0800a3c8 	.word	0x0800a3c8
  ldr r2, =_sbss
 8001810:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001814:	20000450 	.word	0x20000450

08001818 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001818:	e7fe      	b.n	8001818 <ADC1_IRQHandler>

0800181a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001820:	2300      	movs	r3, #0
 8001822:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001824:	2003      	movs	r0, #3
 8001826:	f001 f9e5 	bl	8002bf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800182a:	2000      	movs	r0, #0
 800182c:	f000 f80e 	bl	800184c <HAL_InitTick>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d002      	beq.n	800183c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	71fb      	strb	r3, [r7, #7]
 800183a:	e001      	b.n	8001840 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800183c:	f7ff fdd0 	bl	80013e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001840:	79fb      	ldrb	r3, [r7, #7]
}
 8001842:	4618      	mov	r0, r3
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
	...

0800184c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001854:	2300      	movs	r3, #0
 8001856:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001858:	4b17      	ldr	r3, [pc, #92]	@ (80018b8 <HAL_InitTick+0x6c>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d023      	beq.n	80018a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001860:	4b16      	ldr	r3, [pc, #88]	@ (80018bc <HAL_InitTick+0x70>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b14      	ldr	r3, [pc, #80]	@ (80018b8 <HAL_InitTick+0x6c>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	4619      	mov	r1, r3
 800186a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800186e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001872:	fbb2 f3f3 	udiv	r3, r2, r3
 8001876:	4618      	mov	r0, r3
 8001878:	f001 f9e3 	bl	8002c42 <HAL_SYSTICK_Config>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d10f      	bne.n	80018a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b0f      	cmp	r3, #15
 8001886:	d809      	bhi.n	800189c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001888:	2200      	movs	r2, #0
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	f04f 30ff 	mov.w	r0, #4294967295
 8001890:	f001 f9bb 	bl	8002c0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001894:	4a0a      	ldr	r2, [pc, #40]	@ (80018c0 <HAL_InitTick+0x74>)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	e007      	b.n	80018ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	73fb      	strb	r3, [r7, #15]
 80018a0:	e004      	b.n	80018ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	73fb      	strb	r3, [r7, #15]
 80018a6:	e001      	b.n	80018ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000008 	.word	0x20000008
 80018bc:	20000000 	.word	0x20000000
 80018c0:	20000004 	.word	0x20000004

080018c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018c8:	4b06      	ldr	r3, [pc, #24]	@ (80018e4 <HAL_IncTick+0x20>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	461a      	mov	r2, r3
 80018ce:	4b06      	ldr	r3, [pc, #24]	@ (80018e8 <HAL_IncTick+0x24>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4413      	add	r3, r2
 80018d4:	4a04      	ldr	r2, [pc, #16]	@ (80018e8 <HAL_IncTick+0x24>)
 80018d6:	6013      	str	r3, [r2, #0]
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	20000008 	.word	0x20000008
 80018e8:	20000300 	.word	0x20000300

080018ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return uwTick;
 80018f0:	4b03      	ldr	r3, [pc, #12]	@ (8001900 <HAL_GetTick+0x14>)
 80018f2:	681b      	ldr	r3, [r3, #0]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	20000300 	.word	0x20000300

08001904 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800190c:	f7ff ffee 	bl	80018ec <HAL_GetTick>
 8001910:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800191c:	d005      	beq.n	800192a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800191e:	4b0a      	ldr	r3, [pc, #40]	@ (8001948 <HAL_Delay+0x44>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	461a      	mov	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	4413      	add	r3, r2
 8001928:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800192a:	bf00      	nop
 800192c:	f7ff ffde 	bl	80018ec <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	429a      	cmp	r2, r3
 800193a:	d8f7      	bhi.n	800192c <HAL_Delay+0x28>
  {
  }
}
 800193c:	bf00      	nop
 800193e:	bf00      	nop
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000008 	.word	0x20000008

0800194c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	431a      	orrs	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	609a      	str	r2, [r3, #8]
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
 800197a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	431a      	orrs	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	609a      	str	r2, [r3, #8]
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b087      	sub	sp, #28
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
 80019c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	3360      	adds	r3, #96	@ 0x60
 80019c6:	461a      	mov	r2, r3
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4b08      	ldr	r3, [pc, #32]	@ (80019f8 <LL_ADC_SetOffset+0x44>)
 80019d6:	4013      	ands	r3, r2
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	430a      	orrs	r2, r1
 80019e2:	4313      	orrs	r3, r2
 80019e4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80019ec:	bf00      	nop
 80019ee:	371c      	adds	r7, #28
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	03fff000 	.word	0x03fff000

080019fc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	3360      	adds	r3, #96	@ 0x60
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b087      	sub	sp, #28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	3360      	adds	r3, #96	@ 0x60
 8001a38:	461a      	mov	r2, r3
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	4413      	add	r3, r2
 8001a40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a52:	bf00      	nop
 8001a54:	371c      	adds	r7, #28
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
 8001a66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	695b      	ldr	r3, [r3, #20]
 8001a6c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	431a      	orrs	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	615a      	str	r2, [r3, #20]
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d101      	bne.n	8001a9c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e000      	b.n	8001a9e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b087      	sub	sp, #28
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	60f8      	str	r0, [r7, #12]
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	3330      	adds	r3, #48	@ 0x30
 8001aba:	461a      	mov	r2, r3
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	0a1b      	lsrs	r3, r3, #8
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	f003 030c 	and.w	r3, r3, #12
 8001ac6:	4413      	add	r3, r2
 8001ac8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	f003 031f 	and.w	r3, r3, #31
 8001ad4:	211f      	movs	r1, #31
 8001ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	401a      	ands	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	0e9b      	lsrs	r3, r3, #26
 8001ae2:	f003 011f 	and.w	r1, r3, #31
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	f003 031f 	and.w	r3, r3, #31
 8001aec:	fa01 f303 	lsl.w	r3, r1, r3
 8001af0:	431a      	orrs	r2, r3
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001af6:	bf00      	nop
 8001af8:	371c      	adds	r7, #28
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b087      	sub	sp, #28
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	60f8      	str	r0, [r7, #12]
 8001b0a:	60b9      	str	r1, [r7, #8]
 8001b0c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	3314      	adds	r3, #20
 8001b12:	461a      	mov	r2, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	0e5b      	lsrs	r3, r3, #25
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	4413      	add	r3, r2
 8001b20:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	0d1b      	lsrs	r3, r3, #20
 8001b2a:	f003 031f 	and.w	r3, r3, #31
 8001b2e:	2107      	movs	r1, #7
 8001b30:	fa01 f303 	lsl.w	r3, r1, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	401a      	ands	r2, r3
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	0d1b      	lsrs	r3, r3, #20
 8001b3c:	f003 031f 	and.w	r3, r3, #31
 8001b40:	6879      	ldr	r1, [r7, #4]
 8001b42:	fa01 f303 	lsl.w	r3, r1, r3
 8001b46:	431a      	orrs	r2, r3
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b4c:	bf00      	nop
 8001b4e:	371c      	adds	r7, #28
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b70:	43db      	mvns	r3, r3
 8001b72:	401a      	ands	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f003 0318 	and.w	r3, r3, #24
 8001b7a:	4908      	ldr	r1, [pc, #32]	@ (8001b9c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b7c:	40d9      	lsrs	r1, r3
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	400b      	ands	r3, r1
 8001b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b86:	431a      	orrs	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b8e:	bf00      	nop
 8001b90:	3714      	adds	r7, #20
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	0007ffff 	.word	0x0007ffff

08001ba0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001bb0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	6093      	str	r3, [r2, #8]
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001bd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001bd8:	d101      	bne.n	8001bde <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e000      	b.n	8001be0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001bfc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c00:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001c28:	d101      	bne.n	8001c2e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e000      	b.n	8001c30 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c50:	f043 0201 	orr.w	r2, r3, #1
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d101      	bne.n	8001c7c <LL_ADC_IsEnabled+0x18>
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e000      	b.n	8001c7e <LL_ADC_IsEnabled+0x1a>
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c9a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c9e:	f043 0204 	orr.w	r2, r3, #4
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 0304 	and.w	r3, r3, #4
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d101      	bne.n	8001cca <LL_ADC_REG_IsConversionOngoing+0x18>
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e000      	b.n	8001ccc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f003 0308 	and.w	r3, r3, #8
 8001ce8:	2b08      	cmp	r3, #8
 8001cea:	d101      	bne.n	8001cf0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001cec:	2301      	movs	r3, #1
 8001cee:	e000      	b.n	8001cf2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
	...

08001d00 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b088      	sub	sp, #32
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e129      	b.n	8001f6e <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d109      	bne.n	8001d3c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff fb7d 	bl	8001428 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff ff3f 	bl	8001bc4 <LL_ADC_IsDeepPowerDownEnabled>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d004      	beq.n	8001d56 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff ff25 	bl	8001ba0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff ff5a 	bl	8001c14 <LL_ADC_IsInternalRegulatorEnabled>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d115      	bne.n	8001d92 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff ff3e 	bl	8001bec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d70:	4b81      	ldr	r3, [pc, #516]	@ (8001f78 <HAL_ADC_Init+0x278>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	099b      	lsrs	r3, r3, #6
 8001d76:	4a81      	ldr	r2, [pc, #516]	@ (8001f7c <HAL_ADC_Init+0x27c>)
 8001d78:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7c:	099b      	lsrs	r3, r3, #6
 8001d7e:	3301      	adds	r3, #1
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d84:	e002      	b.n	8001d8c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f9      	bne.n	8001d86 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff ff3c 	bl	8001c14 <LL_ADC_IsInternalRegulatorEnabled>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10d      	bne.n	8001dbe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da6:	f043 0210 	orr.w	r2, r3, #16
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001db2:	f043 0201 	orr.w	r2, r3, #1
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff ff75 	bl	8001cb2 <LL_ADC_REG_IsConversionOngoing>
 8001dc8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dce:	f003 0310 	and.w	r3, r3, #16
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f040 80c2 	bne.w	8001f5c <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f040 80be 	bne.w	8001f5c <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001de8:	f043 0202 	orr.w	r2, r3, #2
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ff35 	bl	8001c64 <LL_ADC_IsEnabled>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d10b      	bne.n	8001e18 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e00:	485f      	ldr	r0, [pc, #380]	@ (8001f80 <HAL_ADC_Init+0x280>)
 8001e02:	f7ff ff2f 	bl	8001c64 <LL_ADC_IsEnabled>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d105      	bne.n	8001e18 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	4619      	mov	r1, r3
 8001e12:	485c      	ldr	r0, [pc, #368]	@ (8001f84 <HAL_ADC_Init+0x284>)
 8001e14:	f7ff fd9a 	bl	800194c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	7e5b      	ldrb	r3, [r3, #25]
 8001e1c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e22:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001e28:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001e2e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e36:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d106      	bne.n	8001e54 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	045b      	lsls	r3, r3, #17
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d009      	beq.n	8001e70 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e60:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e68:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68da      	ldr	r2, [r3, #12]
 8001e76:	4b44      	ldr	r3, [pc, #272]	@ (8001f88 <HAL_ADC_Init+0x288>)
 8001e78:	4013      	ands	r3, r2
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	6812      	ldr	r2, [r2, #0]
 8001e7e:	69b9      	ldr	r1, [r7, #24]
 8001e80:	430b      	orrs	r3, r1
 8001e82:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff ff25 	bl	8001cd8 <LL_ADC_INJ_IsConversionOngoing>
 8001e8e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d140      	bne.n	8001f18 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d13d      	bne.n	8001f18 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	7e1b      	ldrb	r3, [r3, #24]
 8001ea4:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ea6:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001eae:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001ebe:	f023 0306 	bic.w	r3, r3, #6
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	6812      	ldr	r2, [r2, #0]
 8001ec6:	69b9      	ldr	r1, [r7, #24]
 8001ec8:	430b      	orrs	r3, r1
 8001eca:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d118      	bne.n	8001f08 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001ee0:	f023 0304 	bic.w	r3, r3, #4
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001eec:	4311      	orrs	r1, r2
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001ef2:	4311      	orrs	r1, r2
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	431a      	orrs	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f042 0201 	orr.w	r2, r2, #1
 8001f04:	611a      	str	r2, [r3, #16]
 8001f06:	e007      	b.n	8001f18 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	691a      	ldr	r2, [r3, #16]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0201 	bic.w	r2, r2, #1
 8001f16:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d10c      	bne.n	8001f3a <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f26:	f023 010f 	bic.w	r1, r3, #15
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	1e5a      	subs	r2, r3, #1
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f38:	e007      	b.n	8001f4a <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 020f 	bic.w	r2, r2, #15
 8001f48:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f4e:	f023 0303 	bic.w	r3, r3, #3
 8001f52:	f043 0201 	orr.w	r2, r3, #1
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f5a:	e007      	b.n	8001f6c <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f60:	f043 0210 	orr.w	r2, r3, #16
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3720      	adds	r7, #32
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000000 	.word	0x20000000
 8001f7c:	053e2d63 	.word	0x053e2d63
 8001f80:	50040000 	.word	0x50040000
 8001f84:	50040300 	.word	0x50040300
 8001f88:	fff0c007 	.word	0xfff0c007

08001f8c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff fe8a 	bl	8001cb2 <LL_ADC_REG_IsConversionOngoing>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d14f      	bne.n	8002044 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d101      	bne.n	8001fb2 <HAL_ADC_Start+0x26>
 8001fae:	2302      	movs	r3, #2
 8001fb0:	e04b      	b.n	800204a <HAL_ADC_Start+0xbe>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 fce2 	bl	8002984 <ADC_Enable>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001fc4:	7bfb      	ldrb	r3, [r7, #15]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d137      	bne.n	800203a <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fce:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001fd2:	f023 0301 	bic.w	r3, r3, #1
 8001fd6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fe6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fea:	d106      	bne.n	8001ffa <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff0:	f023 0206 	bic.w	r2, r3, #6
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ff8:	e002      	b.n	8002000 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	221c      	movs	r2, #28
 8002006:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d007      	beq.n	800202e <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002022:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002026:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff fe29 	bl	8001c8a <LL_ADC_REG_StartConversion>
 8002038:	e006      	b.n	8002048 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8002042:	e001      	b.n	8002048 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002044:	2302      	movs	r3, #2
 8002046:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002048:	7bfb      	ldrb	r3, [r7, #15]
}
 800204a:	4618      	mov	r0, r3
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b086      	sub	sp, #24
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
 800205a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	695b      	ldr	r3, [r3, #20]
 8002060:	2b08      	cmp	r3, #8
 8002062:	d102      	bne.n	800206a <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002064:	2308      	movs	r3, #8
 8002066:	617b      	str	r3, [r7, #20]
 8002068:	e010      	b.n	800208c <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	2b00      	cmp	r3, #0
 8002076:	d007      	beq.n	8002088 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800207c:	f043 0220 	orr.w	r2, r3, #32
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e06f      	b.n	8002168 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002088:	2304      	movs	r3, #4
 800208a:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800208c:	f7ff fc2e 	bl	80018ec <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002092:	e021      	b.n	80020d8 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800209a:	d01d      	beq.n	80020d8 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800209c:	f7ff fc26 	bl	80018ec <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d302      	bcc.n	80020b2 <HAL_ADC_PollForConversion+0x60>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d112      	bne.n	80020d8 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	4013      	ands	r3, r2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d10b      	bne.n	80020d8 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c4:	f043 0204 	orr.w	r2, r3, #4
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e047      	b.n	8002168 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	4013      	ands	r3, r2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0d6      	beq.n	8002094 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ea:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff fcc4 	bl	8001a84 <LL_ADC_REG_IsTriggerSourceSWStart>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d01c      	beq.n	800213c <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	7e5b      	ldrb	r3, [r3, #25]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d118      	bne.n	800213c <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0308 	and.w	r3, r3, #8
 8002114:	2b08      	cmp	r3, #8
 8002116:	d111      	bne.n	800213c <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800211c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002128:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d105      	bne.n	800213c <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002134:	f043 0201 	orr.w	r2, r3, #1
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	659a      	str	r2, [r3, #88]	@ 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	2b08      	cmp	r3, #8
 8002148:	d104      	bne.n	8002154 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2208      	movs	r2, #8
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	e008      	b.n	8002166 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d103      	bne.n	8002166 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	220c      	movs	r2, #12
 8002164:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3718      	adds	r7, #24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800217e:	4618      	mov	r0, r3
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
	...

0800218c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b0b6      	sub	sp, #216	@ 0xd8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002196:	2300      	movs	r3, #0
 8002198:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800219c:	2300      	movs	r3, #0
 800219e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d101      	bne.n	80021ae <HAL_ADC_ConfigChannel+0x22>
 80021aa:	2302      	movs	r3, #2
 80021ac:	e3d5      	b.n	800295a <HAL_ADC_ConfigChannel+0x7ce>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff fd79 	bl	8001cb2 <LL_ADC_REG_IsConversionOngoing>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f040 83ba 	bne.w	800293c <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2b05      	cmp	r3, #5
 80021d6:	d824      	bhi.n	8002222 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	3b02      	subs	r3, #2
 80021de:	2b03      	cmp	r3, #3
 80021e0:	d81b      	bhi.n	800221a <HAL_ADC_ConfigChannel+0x8e>
 80021e2:	a201      	add	r2, pc, #4	@ (adr r2, 80021e8 <HAL_ADC_ConfigChannel+0x5c>)
 80021e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e8:	080021f9 	.word	0x080021f9
 80021ec:	08002201 	.word	0x08002201
 80021f0:	08002209 	.word	0x08002209
 80021f4:	08002211 	.word	0x08002211
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80021f8:	230c      	movs	r3, #12
 80021fa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80021fe:	e010      	b.n	8002222 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002200:	2312      	movs	r3, #18
 8002202:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002206:	e00c      	b.n	8002222 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002208:	2318      	movs	r3, #24
 800220a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800220e:	e008      	b.n	8002222 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002210:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002214:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002218:	e003      	b.n	8002222 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800221a:	2306      	movs	r3, #6
 800221c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002220:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6818      	ldr	r0, [r3, #0]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	461a      	mov	r2, r3
 800222c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002230:	f7ff fc3b 	bl	8001aaa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff fd3a 	bl	8001cb2 <LL_ADC_REG_IsConversionOngoing>
 800223e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff fd46 	bl	8001cd8 <LL_ADC_INJ_IsConversionOngoing>
 800224c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002250:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002254:	2b00      	cmp	r3, #0
 8002256:	f040 81bf 	bne.w	80025d8 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800225a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800225e:	2b00      	cmp	r3, #0
 8002260:	f040 81ba 	bne.w	80025d8 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800226c:	d10f      	bne.n	800228e <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6818      	ldr	r0, [r3, #0]
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2200      	movs	r2, #0
 8002278:	4619      	mov	r1, r3
 800227a:	f7ff fc42 	bl	8001b02 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff fbe9 	bl	8001a5e <LL_ADC_SetSamplingTimeCommonConfig>
 800228c:	e00e      	b.n	80022ac <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6818      	ldr	r0, [r3, #0]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	6819      	ldr	r1, [r3, #0]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	461a      	mov	r2, r3
 800229c:	f7ff fc31 	bl	8001b02 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2100      	movs	r1, #0
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff fbd9 	bl	8001a5e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	695a      	ldr	r2, [r3, #20]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	08db      	lsrs	r3, r3, #3
 80022b8:	f003 0303 	and.w	r3, r3, #3
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	d00a      	beq.n	80022e4 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6818      	ldr	r0, [r3, #0]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	6919      	ldr	r1, [r3, #16]
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80022de:	f7ff fb69 	bl	80019b4 <LL_ADC_SetOffset>
 80022e2:	e179      	b.n	80025d8 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2100      	movs	r1, #0
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff fb86 	bl	80019fc <LL_ADC_GetOffsetChannel>
 80022f0:	4603      	mov	r3, r0
 80022f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10a      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x184>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2100      	movs	r1, #0
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff fb7b 	bl	80019fc <LL_ADC_GetOffsetChannel>
 8002306:	4603      	mov	r3, r0
 8002308:	0e9b      	lsrs	r3, r3, #26
 800230a:	f003 021f 	and.w	r2, r3, #31
 800230e:	e01e      	b.n	800234e <HAL_ADC_ConfigChannel+0x1c2>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2100      	movs	r1, #0
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff fb70 	bl	80019fc <LL_ADC_GetOffsetChannel>
 800231c:	4603      	mov	r3, r0
 800231e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002322:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002326:	fa93 f3a3 	rbit	r3, r3
 800232a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800232e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002332:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002336:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 800233e:	2320      	movs	r3, #32
 8002340:	e004      	b.n	800234c <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002342:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002346:	fab3 f383 	clz	r3, r3
 800234a:	b2db      	uxtb	r3, r3
 800234c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002356:	2b00      	cmp	r3, #0
 8002358:	d105      	bne.n	8002366 <HAL_ADC_ConfigChannel+0x1da>
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	0e9b      	lsrs	r3, r3, #26
 8002360:	f003 031f 	and.w	r3, r3, #31
 8002364:	e018      	b.n	8002398 <HAL_ADC_ConfigChannel+0x20c>
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002372:	fa93 f3a3 	rbit	r3, r3
 8002376:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800237a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800237e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002382:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800238a:	2320      	movs	r3, #32
 800238c:	e004      	b.n	8002398 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800238e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002392:	fab3 f383 	clz	r3, r3
 8002396:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002398:	429a      	cmp	r2, r3
 800239a:	d106      	bne.n	80023aa <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2200      	movs	r2, #0
 80023a2:	2100      	movs	r1, #0
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff fb3f 	bl	8001a28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2101      	movs	r1, #1
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff fb23 	bl	80019fc <LL_ADC_GetOffsetChannel>
 80023b6:	4603      	mov	r3, r0
 80023b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d10a      	bne.n	80023d6 <HAL_ADC_ConfigChannel+0x24a>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2101      	movs	r1, #1
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff fb18 	bl	80019fc <LL_ADC_GetOffsetChannel>
 80023cc:	4603      	mov	r3, r0
 80023ce:	0e9b      	lsrs	r3, r3, #26
 80023d0:	f003 021f 	and.w	r2, r3, #31
 80023d4:	e01e      	b.n	8002414 <HAL_ADC_ConfigChannel+0x288>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2101      	movs	r1, #1
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff fb0d 	bl	80019fc <LL_ADC_GetOffsetChannel>
 80023e2:	4603      	mov	r3, r0
 80023e4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80023ec:	fa93 f3a3 	rbit	r3, r3
 80023f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80023f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80023f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80023fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002404:	2320      	movs	r3, #32
 8002406:	e004      	b.n	8002412 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002408:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800240c:	fab3 f383 	clz	r3, r3
 8002410:	b2db      	uxtb	r3, r3
 8002412:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800241c:	2b00      	cmp	r3, #0
 800241e:	d105      	bne.n	800242c <HAL_ADC_ConfigChannel+0x2a0>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	0e9b      	lsrs	r3, r3, #26
 8002426:	f003 031f 	and.w	r3, r3, #31
 800242a:	e018      	b.n	800245e <HAL_ADC_ConfigChannel+0x2d2>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002434:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002438:	fa93 f3a3 	rbit	r3, r3
 800243c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002440:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002444:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002448:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002450:	2320      	movs	r3, #32
 8002452:	e004      	b.n	800245e <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002454:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002458:	fab3 f383 	clz	r3, r3
 800245c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800245e:	429a      	cmp	r2, r3
 8002460:	d106      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2200      	movs	r2, #0
 8002468:	2101      	movs	r1, #1
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff fadc 	bl	8001a28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2102      	movs	r1, #2
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff fac0 	bl	80019fc <LL_ADC_GetOffsetChannel>
 800247c:	4603      	mov	r3, r0
 800247e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10a      	bne.n	800249c <HAL_ADC_ConfigChannel+0x310>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2102      	movs	r1, #2
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff fab5 	bl	80019fc <LL_ADC_GetOffsetChannel>
 8002492:	4603      	mov	r3, r0
 8002494:	0e9b      	lsrs	r3, r3, #26
 8002496:	f003 021f 	and.w	r2, r3, #31
 800249a:	e01e      	b.n	80024da <HAL_ADC_ConfigChannel+0x34e>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2102      	movs	r1, #2
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff faaa 	bl	80019fc <LL_ADC_GetOffsetChannel>
 80024a8:	4603      	mov	r3, r0
 80024aa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80024b2:	fa93 f3a3 	rbit	r3, r3
 80024b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80024ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80024c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80024ca:	2320      	movs	r3, #32
 80024cc:	e004      	b.n	80024d8 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80024ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024d2:	fab3 f383 	clz	r3, r3
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d105      	bne.n	80024f2 <HAL_ADC_ConfigChannel+0x366>
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	0e9b      	lsrs	r3, r3, #26
 80024ec:	f003 031f 	and.w	r3, r3, #31
 80024f0:	e014      	b.n	800251c <HAL_ADC_ConfigChannel+0x390>
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80024fa:	fa93 f3a3 	rbit	r3, r3
 80024fe:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002500:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002502:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002506:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800250e:	2320      	movs	r3, #32
 8002510:	e004      	b.n	800251c <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002512:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002516:	fab3 f383 	clz	r3, r3
 800251a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800251c:	429a      	cmp	r2, r3
 800251e:	d106      	bne.n	800252e <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2200      	movs	r2, #0
 8002526:	2102      	movs	r1, #2
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff fa7d 	bl	8001a28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2103      	movs	r1, #3
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff fa61 	bl	80019fc <LL_ADC_GetOffsetChannel>
 800253a:	4603      	mov	r3, r0
 800253c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10a      	bne.n	800255a <HAL_ADC_ConfigChannel+0x3ce>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2103      	movs	r1, #3
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff fa56 	bl	80019fc <LL_ADC_GetOffsetChannel>
 8002550:	4603      	mov	r3, r0
 8002552:	0e9b      	lsrs	r3, r3, #26
 8002554:	f003 021f 	and.w	r2, r3, #31
 8002558:	e017      	b.n	800258a <HAL_ADC_ConfigChannel+0x3fe>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2103      	movs	r1, #3
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff fa4b 	bl	80019fc <LL_ADC_GetOffsetChannel>
 8002566:	4603      	mov	r3, r0
 8002568:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800256c:	fa93 f3a3 	rbit	r3, r3
 8002570:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002572:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002574:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002576:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 800257c:	2320      	movs	r3, #32
 800257e:	e003      	b.n	8002588 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002580:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002582:	fab3 f383 	clz	r3, r3
 8002586:	b2db      	uxtb	r3, r3
 8002588:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002592:	2b00      	cmp	r3, #0
 8002594:	d105      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x416>
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	0e9b      	lsrs	r3, r3, #26
 800259c:	f003 031f 	and.w	r3, r3, #31
 80025a0:	e011      	b.n	80025c6 <HAL_ADC_ConfigChannel+0x43a>
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80025aa:	fa93 f3a3 	rbit	r3, r3
 80025ae:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80025b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025b2:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80025b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80025ba:	2320      	movs	r3, #32
 80025bc:	e003      	b.n	80025c6 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80025be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80025c0:	fab3 f383 	clz	r3, r3
 80025c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d106      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2200      	movs	r2, #0
 80025d0:	2103      	movs	r1, #3
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff fa28 	bl	8001a28 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff fb41 	bl	8001c64 <LL_ADC_IsEnabled>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f040 813f 	bne.w	8002868 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6818      	ldr	r0, [r3, #0]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	6819      	ldr	r1, [r3, #0]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	461a      	mov	r2, r3
 80025f8:	f7ff faae 	bl	8001b58 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	4a8e      	ldr	r2, [pc, #568]	@ (800283c <HAL_ADC_ConfigChannel+0x6b0>)
 8002602:	4293      	cmp	r3, r2
 8002604:	f040 8130 	bne.w	8002868 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002614:	2b00      	cmp	r3, #0
 8002616:	d10b      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x4a4>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	0e9b      	lsrs	r3, r3, #26
 800261e:	3301      	adds	r3, #1
 8002620:	f003 031f 	and.w	r3, r3, #31
 8002624:	2b09      	cmp	r3, #9
 8002626:	bf94      	ite	ls
 8002628:	2301      	movls	r3, #1
 800262a:	2300      	movhi	r3, #0
 800262c:	b2db      	uxtb	r3, r3
 800262e:	e019      	b.n	8002664 <HAL_ADC_ConfigChannel+0x4d8>
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002636:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002638:	fa93 f3a3 	rbit	r3, r3
 800263c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800263e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002640:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002642:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002644:	2b00      	cmp	r3, #0
 8002646:	d101      	bne.n	800264c <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002648:	2320      	movs	r3, #32
 800264a:	e003      	b.n	8002654 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 800264c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800264e:	fab3 f383 	clz	r3, r3
 8002652:	b2db      	uxtb	r3, r3
 8002654:	3301      	adds	r3, #1
 8002656:	f003 031f 	and.w	r3, r3, #31
 800265a:	2b09      	cmp	r3, #9
 800265c:	bf94      	ite	ls
 800265e:	2301      	movls	r3, #1
 8002660:	2300      	movhi	r3, #0
 8002662:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002664:	2b00      	cmp	r3, #0
 8002666:	d079      	beq.n	800275c <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002670:	2b00      	cmp	r3, #0
 8002672:	d107      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x4f8>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	0e9b      	lsrs	r3, r3, #26
 800267a:	3301      	adds	r3, #1
 800267c:	069b      	lsls	r3, r3, #26
 800267e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002682:	e015      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x524>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800268c:	fa93 f3a3 	rbit	r3, r3
 8002690:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002692:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002694:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002696:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002698:	2b00      	cmp	r3, #0
 800269a:	d101      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 800269c:	2320      	movs	r3, #32
 800269e:	e003      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80026a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026a2:	fab3 f383 	clz	r3, r3
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	3301      	adds	r3, #1
 80026aa:	069b      	lsls	r3, r3, #26
 80026ac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d109      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x544>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	0e9b      	lsrs	r3, r3, #26
 80026c2:	3301      	adds	r3, #1
 80026c4:	f003 031f 	and.w	r3, r3, #31
 80026c8:	2101      	movs	r1, #1
 80026ca:	fa01 f303 	lsl.w	r3, r1, r3
 80026ce:	e017      	b.n	8002700 <HAL_ADC_ConfigChannel+0x574>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026d8:	fa93 f3a3 	rbit	r3, r3
 80026dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80026de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026e0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80026e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d101      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80026e8:	2320      	movs	r3, #32
 80026ea:	e003      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80026ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026ee:	fab3 f383 	clz	r3, r3
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	3301      	adds	r3, #1
 80026f6:	f003 031f 	and.w	r3, r3, #31
 80026fa:	2101      	movs	r1, #1
 80026fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002700:	ea42 0103 	orr.w	r1, r2, r3
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800270c:	2b00      	cmp	r3, #0
 800270e:	d10a      	bne.n	8002726 <HAL_ADC_ConfigChannel+0x59a>
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	0e9b      	lsrs	r3, r3, #26
 8002716:	3301      	adds	r3, #1
 8002718:	f003 021f 	and.w	r2, r3, #31
 800271c:	4613      	mov	r3, r2
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	4413      	add	r3, r2
 8002722:	051b      	lsls	r3, r3, #20
 8002724:	e018      	b.n	8002758 <HAL_ADC_ConfigChannel+0x5cc>
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800272e:	fa93 f3a3 	rbit	r3, r3
 8002732:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002736:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 800273e:	2320      	movs	r3, #32
 8002740:	e003      	b.n	800274a <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002744:	fab3 f383 	clz	r3, r3
 8002748:	b2db      	uxtb	r3, r3
 800274a:	3301      	adds	r3, #1
 800274c:	f003 021f 	and.w	r2, r3, #31
 8002750:	4613      	mov	r3, r2
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	4413      	add	r3, r2
 8002756:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002758:	430b      	orrs	r3, r1
 800275a:	e080      	b.n	800285e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002764:	2b00      	cmp	r3, #0
 8002766:	d107      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x5ec>
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	0e9b      	lsrs	r3, r3, #26
 800276e:	3301      	adds	r3, #1
 8002770:	069b      	lsls	r3, r3, #26
 8002772:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002776:	e015      	b.n	80027a4 <HAL_ADC_ConfigChannel+0x618>
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002780:	fa93 f3a3 	rbit	r3, r3
 8002784:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002788:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800278a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002790:	2320      	movs	r3, #32
 8002792:	e003      	b.n	800279c <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002796:	fab3 f383 	clz	r3, r3
 800279a:	b2db      	uxtb	r3, r3
 800279c:	3301      	adds	r3, #1
 800279e:	069b      	lsls	r3, r3, #26
 80027a0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d109      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x638>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	0e9b      	lsrs	r3, r3, #26
 80027b6:	3301      	adds	r3, #1
 80027b8:	f003 031f 	and.w	r3, r3, #31
 80027bc:	2101      	movs	r1, #1
 80027be:	fa01 f303 	lsl.w	r3, r1, r3
 80027c2:	e017      	b.n	80027f4 <HAL_ADC_ConfigChannel+0x668>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	fa93 f3a3 	rbit	r3, r3
 80027d0:	61bb      	str	r3, [r7, #24]
  return result;
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80027d6:	6a3b      	ldr	r3, [r7, #32]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80027dc:	2320      	movs	r3, #32
 80027de:	e003      	b.n	80027e8 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80027e0:	6a3b      	ldr	r3, [r7, #32]
 80027e2:	fab3 f383 	clz	r3, r3
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	3301      	adds	r3, #1
 80027ea:	f003 031f 	and.w	r3, r3, #31
 80027ee:	2101      	movs	r1, #1
 80027f0:	fa01 f303 	lsl.w	r3, r1, r3
 80027f4:	ea42 0103 	orr.w	r1, r2, r3
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10d      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x694>
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	0e9b      	lsrs	r3, r3, #26
 800280a:	3301      	adds	r3, #1
 800280c:	f003 021f 	and.w	r2, r3, #31
 8002810:	4613      	mov	r3, r2
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	4413      	add	r3, r2
 8002816:	3b1e      	subs	r3, #30
 8002818:	051b      	lsls	r3, r3, #20
 800281a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800281e:	e01d      	b.n	800285c <HAL_ADC_ConfigChannel+0x6d0>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	fa93 f3a3 	rbit	r3, r3
 800282c:	60fb      	str	r3, [r7, #12]
  return result;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d103      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002838:	2320      	movs	r3, #32
 800283a:	e005      	b.n	8002848 <HAL_ADC_ConfigChannel+0x6bc>
 800283c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	fab3 f383 	clz	r3, r3
 8002846:	b2db      	uxtb	r3, r3
 8002848:	3301      	adds	r3, #1
 800284a:	f003 021f 	and.w	r2, r3, #31
 800284e:	4613      	mov	r3, r2
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	4413      	add	r3, r2
 8002854:	3b1e      	subs	r3, #30
 8002856:	051b      	lsls	r3, r3, #20
 8002858:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800285c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002862:	4619      	mov	r1, r3
 8002864:	f7ff f94d 	bl	8001b02 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	4b3d      	ldr	r3, [pc, #244]	@ (8002964 <HAL_ADC_ConfigChannel+0x7d8>)
 800286e:	4013      	ands	r3, r2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d06c      	beq.n	800294e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002874:	483c      	ldr	r0, [pc, #240]	@ (8002968 <HAL_ADC_ConfigChannel+0x7dc>)
 8002876:	f7ff f88f 	bl	8001998 <LL_ADC_GetCommonPathInternalCh>
 800287a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a3a      	ldr	r2, [pc, #232]	@ (800296c <HAL_ADC_ConfigChannel+0x7e0>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d127      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002888:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800288c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d121      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a35      	ldr	r2, [pc, #212]	@ (8002970 <HAL_ADC_ConfigChannel+0x7e4>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d157      	bne.n	800294e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800289e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80028a2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80028a6:	4619      	mov	r1, r3
 80028a8:	482f      	ldr	r0, [pc, #188]	@ (8002968 <HAL_ADC_ConfigChannel+0x7dc>)
 80028aa:	f7ff f862 	bl	8001972 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028ae:	4b31      	ldr	r3, [pc, #196]	@ (8002974 <HAL_ADC_ConfigChannel+0x7e8>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	099b      	lsrs	r3, r3, #6
 80028b4:	4a30      	ldr	r2, [pc, #192]	@ (8002978 <HAL_ADC_ConfigChannel+0x7ec>)
 80028b6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ba:	099b      	lsrs	r3, r3, #6
 80028bc:	1c5a      	adds	r2, r3, #1
 80028be:	4613      	mov	r3, r2
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	4413      	add	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80028c8:	e002      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	3b01      	subs	r3, #1
 80028ce:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1f9      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028d6:	e03a      	b.n	800294e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a27      	ldr	r2, [pc, #156]	@ (800297c <HAL_ADC_ConfigChannel+0x7f0>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d113      	bne.n	800290a <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80028e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80028e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10d      	bne.n	800290a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a1f      	ldr	r2, [pc, #124]	@ (8002970 <HAL_ADC_ConfigChannel+0x7e4>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d12a      	bne.n	800294e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80028fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002900:	4619      	mov	r1, r3
 8002902:	4819      	ldr	r0, [pc, #100]	@ (8002968 <HAL_ADC_ConfigChannel+0x7dc>)
 8002904:	f7ff f835 	bl	8001972 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002908:	e021      	b.n	800294e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a1c      	ldr	r2, [pc, #112]	@ (8002980 <HAL_ADC_ConfigChannel+0x7f4>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d11c      	bne.n	800294e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002914:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002918:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d116      	bne.n	800294e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a12      	ldr	r2, [pc, #72]	@ (8002970 <HAL_ADC_ConfigChannel+0x7e4>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d111      	bne.n	800294e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800292a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800292e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002932:	4619      	mov	r1, r3
 8002934:	480c      	ldr	r0, [pc, #48]	@ (8002968 <HAL_ADC_ConfigChannel+0x7dc>)
 8002936:	f7ff f81c 	bl	8001972 <LL_ADC_SetCommonPathInternalCh>
 800293a:	e008      	b.n	800294e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002940:	f043 0220 	orr.w	r2, r3, #32
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002956:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800295a:	4618      	mov	r0, r3
 800295c:	37d8      	adds	r7, #216	@ 0xd8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	80080000 	.word	0x80080000
 8002968:	50040300 	.word	0x50040300
 800296c:	c7520000 	.word	0xc7520000
 8002970:	50040000 	.word	0x50040000
 8002974:	20000000 	.word	0x20000000
 8002978:	053e2d63 	.word	0x053e2d63
 800297c:	cb840000 	.word	0xcb840000
 8002980:	80000001 	.word	0x80000001

08002984 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800298c:	2300      	movs	r3, #0
 800298e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff f965 	bl	8001c64 <LL_ADC_IsEnabled>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d169      	bne.n	8002a74 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689a      	ldr	r2, [r3, #8]
 80029a6:	4b36      	ldr	r3, [pc, #216]	@ (8002a80 <ADC_Enable+0xfc>)
 80029a8:	4013      	ands	r3, r2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00d      	beq.n	80029ca <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b2:	f043 0210 	orr.w	r2, r3, #16
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029be:	f043 0201 	orr.w	r2, r3, #1
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e055      	b.n	8002a76 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff f934 	bl	8001c3c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80029d4:	482b      	ldr	r0, [pc, #172]	@ (8002a84 <ADC_Enable+0x100>)
 80029d6:	f7fe ffdf 	bl	8001998 <LL_ADC_GetCommonPathInternalCh>
 80029da:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80029dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d013      	beq.n	8002a0c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029e4:	4b28      	ldr	r3, [pc, #160]	@ (8002a88 <ADC_Enable+0x104>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	099b      	lsrs	r3, r3, #6
 80029ea:	4a28      	ldr	r2, [pc, #160]	@ (8002a8c <ADC_Enable+0x108>)
 80029ec:	fba2 2303 	umull	r2, r3, r2, r3
 80029f0:	099b      	lsrs	r3, r3, #6
 80029f2:	1c5a      	adds	r2, r3, #1
 80029f4:	4613      	mov	r3, r2
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	4413      	add	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80029fe:	e002      	b.n	8002a06 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	3b01      	subs	r3, #1
 8002a04:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1f9      	bne.n	8002a00 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002a0c:	f7fe ff6e 	bl	80018ec <HAL_GetTick>
 8002a10:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a12:	e028      	b.n	8002a66 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff f923 	bl	8001c64 <LL_ADC_IsEnabled>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d104      	bne.n	8002a2e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff f907 	bl	8001c3c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a2e:	f7fe ff5d 	bl	80018ec <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d914      	bls.n	8002a66 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d00d      	beq.n	8002a66 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a4e:	f043 0210 	orr.w	r2, r3, #16
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a5a:	f043 0201 	orr.w	r2, r3, #1
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e007      	b.n	8002a76 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d1cf      	bne.n	8002a14 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	8000003f 	.word	0x8000003f
 8002a84:	50040300 	.word	0x50040300
 8002a88:	20000000 	.word	0x20000000
 8002a8c:	053e2d63 	.word	0x053e2d63

08002a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002aac:	4013      	ands	r3, r2
 8002aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ab8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002abc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ac2:	4a04      	ldr	r2, [pc, #16]	@ (8002ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	60d3      	str	r3, [r2, #12]
}
 8002ac8:	bf00      	nop
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	e000ed00 	.word	0xe000ed00

08002ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002adc:	4b04      	ldr	r3, [pc, #16]	@ (8002af0 <__NVIC_GetPriorityGrouping+0x18>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	0a1b      	lsrs	r3, r3, #8
 8002ae2:	f003 0307 	and.w	r3, r3, #7
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	e000ed00 	.word	0xe000ed00

08002af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	4603      	mov	r3, r0
 8002afc:	6039      	str	r1, [r7, #0]
 8002afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	db0a      	blt.n	8002b1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	490c      	ldr	r1, [pc, #48]	@ (8002b40 <__NVIC_SetPriority+0x4c>)
 8002b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b12:	0112      	lsls	r2, r2, #4
 8002b14:	b2d2      	uxtb	r2, r2
 8002b16:	440b      	add	r3, r1
 8002b18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b1c:	e00a      	b.n	8002b34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	4908      	ldr	r1, [pc, #32]	@ (8002b44 <__NVIC_SetPriority+0x50>)
 8002b24:	79fb      	ldrb	r3, [r7, #7]
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	3b04      	subs	r3, #4
 8002b2c:	0112      	lsls	r2, r2, #4
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	440b      	add	r3, r1
 8002b32:	761a      	strb	r2, [r3, #24]
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	e000e100 	.word	0xe000e100
 8002b44:	e000ed00 	.word	0xe000ed00

08002b48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b089      	sub	sp, #36	@ 0x24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f003 0307 	and.w	r3, r3, #7
 8002b5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	f1c3 0307 	rsb	r3, r3, #7
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	bf28      	it	cs
 8002b66:	2304      	movcs	r3, #4
 8002b68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	2b06      	cmp	r3, #6
 8002b70:	d902      	bls.n	8002b78 <NVIC_EncodePriority+0x30>
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	3b03      	subs	r3, #3
 8002b76:	e000      	b.n	8002b7a <NVIC_EncodePriority+0x32>
 8002b78:	2300      	movs	r3, #0
 8002b7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	43da      	mvns	r2, r3
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	401a      	ands	r2, r3
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b90:	f04f 31ff 	mov.w	r1, #4294967295
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9a:	43d9      	mvns	r1, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba0:	4313      	orrs	r3, r2
         );
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3724      	adds	r7, #36	@ 0x24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
	...

08002bb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bc0:	d301      	bcc.n	8002bc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e00f      	b.n	8002be6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8002bf0 <SysTick_Config+0x40>)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bce:	210f      	movs	r1, #15
 8002bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bd4:	f7ff ff8e 	bl	8002af4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bd8:	4b05      	ldr	r3, [pc, #20]	@ (8002bf0 <SysTick_Config+0x40>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bde:	4b04      	ldr	r3, [pc, #16]	@ (8002bf0 <SysTick_Config+0x40>)
 8002be0:	2207      	movs	r2, #7
 8002be2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	e000e010 	.word	0xe000e010

08002bf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f7ff ff47 	bl	8002a90 <__NVIC_SetPriorityGrouping>
}
 8002c02:	bf00      	nop
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b086      	sub	sp, #24
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	4603      	mov	r3, r0
 8002c12:	60b9      	str	r1, [r7, #8]
 8002c14:	607a      	str	r2, [r7, #4]
 8002c16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c1c:	f7ff ff5c 	bl	8002ad8 <__NVIC_GetPriorityGrouping>
 8002c20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	68b9      	ldr	r1, [r7, #8]
 8002c26:	6978      	ldr	r0, [r7, #20]
 8002c28:	f7ff ff8e 	bl	8002b48 <NVIC_EncodePriority>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c32:	4611      	mov	r1, r2
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff ff5d 	bl	8002af4 <__NVIC_SetPriority>
}
 8002c3a:	bf00      	nop
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b082      	sub	sp, #8
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7ff ffb0 	bl	8002bb0 <SysTick_Config>
 8002c50:	4603      	mov	r3, r0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
	...

08002c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b087      	sub	sp, #28
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c66:	2300      	movs	r3, #0
 8002c68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c6a:	e166      	b.n	8002f3a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	2101      	movs	r1, #1
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	fa01 f303 	lsl.w	r3, r1, r3
 8002c78:	4013      	ands	r3, r2
 8002c7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f000 8158 	beq.w	8002f34 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 0303 	and.w	r3, r3, #3
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d005      	beq.n	8002c9c <HAL_GPIO_Init+0x40>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f003 0303 	and.w	r3, r3, #3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d130      	bne.n	8002cfe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	2203      	movs	r2, #3
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	43db      	mvns	r3, r3
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	68da      	ldr	r2, [r3, #12]
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cda:	43db      	mvns	r3, r3
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	091b      	lsrs	r3, r3, #4
 8002ce8:	f003 0201 	and.w	r2, r3, #1
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	2b03      	cmp	r3, #3
 8002d08:	d017      	beq.n	8002d3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	2203      	movs	r2, #3
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	689a      	ldr	r2, [r3, #8]
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d123      	bne.n	8002d8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	08da      	lsrs	r2, r3, #3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	3208      	adds	r2, #8
 8002d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	220f      	movs	r2, #15
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	43db      	mvns	r3, r3
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	4013      	ands	r3, r2
 8002d68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	691a      	ldr	r2, [r3, #16]
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	08da      	lsrs	r2, r3, #3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3208      	adds	r2, #8
 8002d88:	6939      	ldr	r1, [r7, #16]
 8002d8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	2203      	movs	r2, #3
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	4013      	ands	r3, r2
 8002da4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f003 0203 	and.w	r2, r3, #3
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f000 80b2 	beq.w	8002f34 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dd0:	4b61      	ldr	r3, [pc, #388]	@ (8002f58 <HAL_GPIO_Init+0x2fc>)
 8002dd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dd4:	4a60      	ldr	r2, [pc, #384]	@ (8002f58 <HAL_GPIO_Init+0x2fc>)
 8002dd6:	f043 0301 	orr.w	r3, r3, #1
 8002dda:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ddc:	4b5e      	ldr	r3, [pc, #376]	@ (8002f58 <HAL_GPIO_Init+0x2fc>)
 8002dde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	60bb      	str	r3, [r7, #8]
 8002de6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002de8:	4a5c      	ldr	r2, [pc, #368]	@ (8002f5c <HAL_GPIO_Init+0x300>)
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	089b      	lsrs	r3, r3, #2
 8002dee:	3302      	adds	r3, #2
 8002df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002df4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f003 0303 	and.w	r3, r3, #3
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	220f      	movs	r2, #15
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	43db      	mvns	r3, r3
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002e12:	d02b      	beq.n	8002e6c <HAL_GPIO_Init+0x210>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a52      	ldr	r2, [pc, #328]	@ (8002f60 <HAL_GPIO_Init+0x304>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d025      	beq.n	8002e68 <HAL_GPIO_Init+0x20c>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a51      	ldr	r2, [pc, #324]	@ (8002f64 <HAL_GPIO_Init+0x308>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d01f      	beq.n	8002e64 <HAL_GPIO_Init+0x208>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a50      	ldr	r2, [pc, #320]	@ (8002f68 <HAL_GPIO_Init+0x30c>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d019      	beq.n	8002e60 <HAL_GPIO_Init+0x204>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a4f      	ldr	r2, [pc, #316]	@ (8002f6c <HAL_GPIO_Init+0x310>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d013      	beq.n	8002e5c <HAL_GPIO_Init+0x200>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a4e      	ldr	r2, [pc, #312]	@ (8002f70 <HAL_GPIO_Init+0x314>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d00d      	beq.n	8002e58 <HAL_GPIO_Init+0x1fc>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a4d      	ldr	r2, [pc, #308]	@ (8002f74 <HAL_GPIO_Init+0x318>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d007      	beq.n	8002e54 <HAL_GPIO_Init+0x1f8>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a4c      	ldr	r2, [pc, #304]	@ (8002f78 <HAL_GPIO_Init+0x31c>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d101      	bne.n	8002e50 <HAL_GPIO_Init+0x1f4>
 8002e4c:	2307      	movs	r3, #7
 8002e4e:	e00e      	b.n	8002e6e <HAL_GPIO_Init+0x212>
 8002e50:	2308      	movs	r3, #8
 8002e52:	e00c      	b.n	8002e6e <HAL_GPIO_Init+0x212>
 8002e54:	2306      	movs	r3, #6
 8002e56:	e00a      	b.n	8002e6e <HAL_GPIO_Init+0x212>
 8002e58:	2305      	movs	r3, #5
 8002e5a:	e008      	b.n	8002e6e <HAL_GPIO_Init+0x212>
 8002e5c:	2304      	movs	r3, #4
 8002e5e:	e006      	b.n	8002e6e <HAL_GPIO_Init+0x212>
 8002e60:	2303      	movs	r3, #3
 8002e62:	e004      	b.n	8002e6e <HAL_GPIO_Init+0x212>
 8002e64:	2302      	movs	r3, #2
 8002e66:	e002      	b.n	8002e6e <HAL_GPIO_Init+0x212>
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e000      	b.n	8002e6e <HAL_GPIO_Init+0x212>
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	f002 0203 	and.w	r2, r2, #3
 8002e74:	0092      	lsls	r2, r2, #2
 8002e76:	4093      	lsls	r3, r2
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e7e:	4937      	ldr	r1, [pc, #220]	@ (8002f5c <HAL_GPIO_Init+0x300>)
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	089b      	lsrs	r3, r3, #2
 8002e84:	3302      	adds	r3, #2
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e8c:	4b3b      	ldr	r3, [pc, #236]	@ (8002f7c <HAL_GPIO_Init+0x320>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	43db      	mvns	r3, r3
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d003      	beq.n	8002eb0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002eb0:	4a32      	ldr	r2, [pc, #200]	@ (8002f7c <HAL_GPIO_Init+0x320>)
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002eb6:	4b31      	ldr	r3, [pc, #196]	@ (8002f7c <HAL_GPIO_Init+0x320>)
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002eda:	4a28      	ldr	r2, [pc, #160]	@ (8002f7c <HAL_GPIO_Init+0x320>)
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002ee0:	4b26      	ldr	r3, [pc, #152]	@ (8002f7c <HAL_GPIO_Init+0x320>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	4013      	ands	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d003      	beq.n	8002f04 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f04:	4a1d      	ldr	r2, [pc, #116]	@ (8002f7c <HAL_GPIO_Init+0x320>)
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002f0a:	4b1c      	ldr	r3, [pc, #112]	@ (8002f7c <HAL_GPIO_Init+0x320>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	43db      	mvns	r3, r3
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	4013      	ands	r3, r2
 8002f18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f2e:	4a13      	ldr	r2, [pc, #76]	@ (8002f7c <HAL_GPIO_Init+0x320>)
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	3301      	adds	r3, #1
 8002f38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	fa22 f303 	lsr.w	r3, r2, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f47f ae91 	bne.w	8002c6c <HAL_GPIO_Init+0x10>
  }
}
 8002f4a:	bf00      	nop
 8002f4c:	bf00      	nop
 8002f4e:	371c      	adds	r7, #28
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	40010000 	.word	0x40010000
 8002f60:	48000400 	.word	0x48000400
 8002f64:	48000800 	.word	0x48000800
 8002f68:	48000c00 	.word	0x48000c00
 8002f6c:	48001000 	.word	0x48001000
 8002f70:	48001400 	.word	0x48001400
 8002f74:	48001800 	.word	0x48001800
 8002f78:	48001c00 	.word	0x48001c00
 8002f7c:	40010400 	.word	0x40010400

08002f80 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f84:	4b0d      	ldr	r3, [pc, #52]	@ (8002fbc <HAL_PWREx_GetVoltageRange+0x3c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f90:	d102      	bne.n	8002f98 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002f92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f96:	e00b      	b.n	8002fb0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002f98:	4b08      	ldr	r3, [pc, #32]	@ (8002fbc <HAL_PWREx_GetVoltageRange+0x3c>)
 8002f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fa6:	d102      	bne.n	8002fae <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002fa8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002fac:	e000      	b.n	8002fb0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002fae:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	40007000 	.word	0x40007000

08002fc0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d141      	bne.n	8003052 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fce:	4b4b      	ldr	r3, [pc, #300]	@ (80030fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002fd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fda:	d131      	bne.n	8003040 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fdc:	4b47      	ldr	r3, [pc, #284]	@ (80030fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fe2:	4a46      	ldr	r2, [pc, #280]	@ (80030fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fe4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fe8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fec:	4b43      	ldr	r3, [pc, #268]	@ (80030fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ff4:	4a41      	ldr	r2, [pc, #260]	@ (80030fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ff6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ffa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002ffc:	4b40      	ldr	r3, [pc, #256]	@ (8003100 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2232      	movs	r2, #50	@ 0x32
 8003002:	fb02 f303 	mul.w	r3, r2, r3
 8003006:	4a3f      	ldr	r2, [pc, #252]	@ (8003104 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003008:	fba2 2303 	umull	r2, r3, r2, r3
 800300c:	0c9b      	lsrs	r3, r3, #18
 800300e:	3301      	adds	r3, #1
 8003010:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003012:	e002      	b.n	800301a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	3b01      	subs	r3, #1
 8003018:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800301a:	4b38      	ldr	r3, [pc, #224]	@ (80030fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003022:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003026:	d102      	bne.n	800302e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1f2      	bne.n	8003014 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800302e:	4b33      	ldr	r3, [pc, #204]	@ (80030fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003036:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800303a:	d158      	bne.n	80030ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e057      	b.n	80030f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003040:	4b2e      	ldr	r3, [pc, #184]	@ (80030fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003042:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003046:	4a2d      	ldr	r2, [pc, #180]	@ (80030fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003048:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800304c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003050:	e04d      	b.n	80030ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003058:	d141      	bne.n	80030de <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800305a:	4b28      	ldr	r3, [pc, #160]	@ (80030fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003062:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003066:	d131      	bne.n	80030cc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003068:	4b24      	ldr	r3, [pc, #144]	@ (80030fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800306a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800306e:	4a23      	ldr	r2, [pc, #140]	@ (80030fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003070:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003074:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003078:	4b20      	ldr	r3, [pc, #128]	@ (80030fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003080:	4a1e      	ldr	r2, [pc, #120]	@ (80030fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003082:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003086:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003088:	4b1d      	ldr	r3, [pc, #116]	@ (8003100 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2232      	movs	r2, #50	@ 0x32
 800308e:	fb02 f303 	mul.w	r3, r2, r3
 8003092:	4a1c      	ldr	r2, [pc, #112]	@ (8003104 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003094:	fba2 2303 	umull	r2, r3, r2, r3
 8003098:	0c9b      	lsrs	r3, r3, #18
 800309a:	3301      	adds	r3, #1
 800309c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800309e:	e002      	b.n	80030a6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	3b01      	subs	r3, #1
 80030a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030a6:	4b15      	ldr	r3, [pc, #84]	@ (80030fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030b2:	d102      	bne.n	80030ba <HAL_PWREx_ControlVoltageScaling+0xfa>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1f2      	bne.n	80030a0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030ba:	4b10      	ldr	r3, [pc, #64]	@ (80030fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030c6:	d112      	bne.n	80030ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e011      	b.n	80030f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030cc:	4b0b      	ldr	r3, [pc, #44]	@ (80030fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030d2:	4a0a      	ldr	r2, [pc, #40]	@ (80030fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80030dc:	e007      	b.n	80030ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030de:	4b07      	ldr	r3, [pc, #28]	@ (80030fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80030e6:	4a05      	ldr	r2, [pc, #20]	@ (80030fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030e8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030ec:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	40007000 	.word	0x40007000
 8003100:	20000000 	.word	0x20000000
 8003104:	431bde83 	.word	0x431bde83

08003108 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b088      	sub	sp, #32
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d102      	bne.n	800311c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	f000 bc08 	b.w	800392c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800311c:	4b96      	ldr	r3, [pc, #600]	@ (8003378 <HAL_RCC_OscConfig+0x270>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f003 030c 	and.w	r3, r3, #12
 8003124:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003126:	4b94      	ldr	r3, [pc, #592]	@ (8003378 <HAL_RCC_OscConfig+0x270>)
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	f003 0303 	and.w	r3, r3, #3
 800312e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0310 	and.w	r3, r3, #16
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 80e4 	beq.w	8003306 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d007      	beq.n	8003154 <HAL_RCC_OscConfig+0x4c>
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	2b0c      	cmp	r3, #12
 8003148:	f040 808b 	bne.w	8003262 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	2b01      	cmp	r3, #1
 8003150:	f040 8087 	bne.w	8003262 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003154:	4b88      	ldr	r3, [pc, #544]	@ (8003378 <HAL_RCC_OscConfig+0x270>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d005      	beq.n	800316c <HAL_RCC_OscConfig+0x64>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e3df      	b.n	800392c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a1a      	ldr	r2, [r3, #32]
 8003170:	4b81      	ldr	r3, [pc, #516]	@ (8003378 <HAL_RCC_OscConfig+0x270>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0308 	and.w	r3, r3, #8
 8003178:	2b00      	cmp	r3, #0
 800317a:	d004      	beq.n	8003186 <HAL_RCC_OscConfig+0x7e>
 800317c:	4b7e      	ldr	r3, [pc, #504]	@ (8003378 <HAL_RCC_OscConfig+0x270>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003184:	e005      	b.n	8003192 <HAL_RCC_OscConfig+0x8a>
 8003186:	4b7c      	ldr	r3, [pc, #496]	@ (8003378 <HAL_RCC_OscConfig+0x270>)
 8003188:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800318c:	091b      	lsrs	r3, r3, #4
 800318e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003192:	4293      	cmp	r3, r2
 8003194:	d223      	bcs.n	80031de <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	4618      	mov	r0, r3
 800319c:	f000 fdcc 	bl	8003d38 <RCC_SetFlashLatencyFromMSIRange>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e3c0      	b.n	800392c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031aa:	4b73      	ldr	r3, [pc, #460]	@ (8003378 <HAL_RCC_OscConfig+0x270>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a72      	ldr	r2, [pc, #456]	@ (8003378 <HAL_RCC_OscConfig+0x270>)
 80031b0:	f043 0308 	orr.w	r3, r3, #8
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	4b70      	ldr	r3, [pc, #448]	@ (8003378 <HAL_RCC_OscConfig+0x270>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	496d      	ldr	r1, [pc, #436]	@ (8003378 <HAL_RCC_OscConfig+0x270>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031c8:	4b6b      	ldr	r3, [pc, #428]	@ (8003378 <HAL_RCC_OscConfig+0x270>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	69db      	ldr	r3, [r3, #28]
 80031d4:	021b      	lsls	r3, r3, #8
 80031d6:	4968      	ldr	r1, [pc, #416]	@ (8003378 <HAL_RCC_OscConfig+0x270>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	604b      	str	r3, [r1, #4]
 80031dc:	e025      	b.n	800322a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031de:	4b66      	ldr	r3, [pc, #408]	@ (8003378 <HAL_RCC_OscConfig+0x270>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a65      	ldr	r2, [pc, #404]	@ (8003378 <HAL_RCC_OscConfig+0x270>)
 80031e4:	f043 0308 	orr.w	r3, r3, #8
 80031e8:	6013      	str	r3, [r2, #0]
 80031ea:	4b63      	ldr	r3, [pc, #396]	@ (8003378 <HAL_RCC_OscConfig+0x270>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	4960      	ldr	r1, [pc, #384]	@ (8003378 <HAL_RCC_OscConfig+0x270>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031fc:	4b5e      	ldr	r3, [pc, #376]	@ (8003378 <HAL_RCC_OscConfig+0x270>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	69db      	ldr	r3, [r3, #28]
 8003208:	021b      	lsls	r3, r3, #8
 800320a:	495b      	ldr	r1, [pc, #364]	@ (8003378 <HAL_RCC_OscConfig+0x270>)
 800320c:	4313      	orrs	r3, r2
 800320e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d109      	bne.n	800322a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	4618      	mov	r0, r3
 800321c:	f000 fd8c 	bl	8003d38 <RCC_SetFlashLatencyFromMSIRange>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e380      	b.n	800392c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800322a:	f000 fcc1 	bl	8003bb0 <HAL_RCC_GetSysClockFreq>
 800322e:	4602      	mov	r2, r0
 8003230:	4b51      	ldr	r3, [pc, #324]	@ (8003378 <HAL_RCC_OscConfig+0x270>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	091b      	lsrs	r3, r3, #4
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	4950      	ldr	r1, [pc, #320]	@ (800337c <HAL_RCC_OscConfig+0x274>)
 800323c:	5ccb      	ldrb	r3, [r1, r3]
 800323e:	f003 031f 	and.w	r3, r3, #31
 8003242:	fa22 f303 	lsr.w	r3, r2, r3
 8003246:	4a4e      	ldr	r2, [pc, #312]	@ (8003380 <HAL_RCC_OscConfig+0x278>)
 8003248:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800324a:	4b4e      	ldr	r3, [pc, #312]	@ (8003384 <HAL_RCC_OscConfig+0x27c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f7fe fafc 	bl	800184c <HAL_InitTick>
 8003254:	4603      	mov	r3, r0
 8003256:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003258:	7bfb      	ldrb	r3, [r7, #15]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d052      	beq.n	8003304 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800325e:	7bfb      	ldrb	r3, [r7, #15]
 8003260:	e364      	b.n	800392c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d032      	beq.n	80032d0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800326a:	4b43      	ldr	r3, [pc, #268]	@ (8003378 <HAL_RCC_OscConfig+0x270>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a42      	ldr	r2, [pc, #264]	@ (8003378 <HAL_RCC_OscConfig+0x270>)
 8003270:	f043 0301 	orr.w	r3, r3, #1
 8003274:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003276:	f7fe fb39 	bl	80018ec <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800327c:	e008      	b.n	8003290 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800327e:	f7fe fb35 	bl	80018ec <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e34d      	b.n	800392c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003290:	4b39      	ldr	r3, [pc, #228]	@ (8003378 <HAL_RCC_OscConfig+0x270>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d0f0      	beq.n	800327e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800329c:	4b36      	ldr	r3, [pc, #216]	@ (8003378 <HAL_RCC_OscConfig+0x270>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a35      	ldr	r2, [pc, #212]	@ (8003378 <HAL_RCC_OscConfig+0x270>)
 80032a2:	f043 0308 	orr.w	r3, r3, #8
 80032a6:	6013      	str	r3, [r2, #0]
 80032a8:	4b33      	ldr	r3, [pc, #204]	@ (8003378 <HAL_RCC_OscConfig+0x270>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	4930      	ldr	r1, [pc, #192]	@ (8003378 <HAL_RCC_OscConfig+0x270>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032ba:	4b2f      	ldr	r3, [pc, #188]	@ (8003378 <HAL_RCC_OscConfig+0x270>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	021b      	lsls	r3, r3, #8
 80032c8:	492b      	ldr	r1, [pc, #172]	@ (8003378 <HAL_RCC_OscConfig+0x270>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	604b      	str	r3, [r1, #4]
 80032ce:	e01a      	b.n	8003306 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032d0:	4b29      	ldr	r3, [pc, #164]	@ (8003378 <HAL_RCC_OscConfig+0x270>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a28      	ldr	r2, [pc, #160]	@ (8003378 <HAL_RCC_OscConfig+0x270>)
 80032d6:	f023 0301 	bic.w	r3, r3, #1
 80032da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032dc:	f7fe fb06 	bl	80018ec <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032e4:	f7fe fb02 	bl	80018ec <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e31a      	b.n	800392c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032f6:	4b20      	ldr	r3, [pc, #128]	@ (8003378 <HAL_RCC_OscConfig+0x270>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1f0      	bne.n	80032e4 <HAL_RCC_OscConfig+0x1dc>
 8003302:	e000      	b.n	8003306 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003304:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b00      	cmp	r3, #0
 8003310:	d073      	beq.n	80033fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	2b08      	cmp	r3, #8
 8003316:	d005      	beq.n	8003324 <HAL_RCC_OscConfig+0x21c>
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	2b0c      	cmp	r3, #12
 800331c:	d10e      	bne.n	800333c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	2b03      	cmp	r3, #3
 8003322:	d10b      	bne.n	800333c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003324:	4b14      	ldr	r3, [pc, #80]	@ (8003378 <HAL_RCC_OscConfig+0x270>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d063      	beq.n	80033f8 <HAL_RCC_OscConfig+0x2f0>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d15f      	bne.n	80033f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e2f7      	b.n	800392c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003344:	d106      	bne.n	8003354 <HAL_RCC_OscConfig+0x24c>
 8003346:	4b0c      	ldr	r3, [pc, #48]	@ (8003378 <HAL_RCC_OscConfig+0x270>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a0b      	ldr	r2, [pc, #44]	@ (8003378 <HAL_RCC_OscConfig+0x270>)
 800334c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003350:	6013      	str	r3, [r2, #0]
 8003352:	e025      	b.n	80033a0 <HAL_RCC_OscConfig+0x298>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800335c:	d114      	bne.n	8003388 <HAL_RCC_OscConfig+0x280>
 800335e:	4b06      	ldr	r3, [pc, #24]	@ (8003378 <HAL_RCC_OscConfig+0x270>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a05      	ldr	r2, [pc, #20]	@ (8003378 <HAL_RCC_OscConfig+0x270>)
 8003364:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003368:	6013      	str	r3, [r2, #0]
 800336a:	4b03      	ldr	r3, [pc, #12]	@ (8003378 <HAL_RCC_OscConfig+0x270>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a02      	ldr	r2, [pc, #8]	@ (8003378 <HAL_RCC_OscConfig+0x270>)
 8003370:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003374:	6013      	str	r3, [r2, #0]
 8003376:	e013      	b.n	80033a0 <HAL_RCC_OscConfig+0x298>
 8003378:	40021000 	.word	0x40021000
 800337c:	08009f18 	.word	0x08009f18
 8003380:	20000000 	.word	0x20000000
 8003384:	20000004 	.word	0x20000004
 8003388:	4ba0      	ldr	r3, [pc, #640]	@ (800360c <HAL_RCC_OscConfig+0x504>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a9f      	ldr	r2, [pc, #636]	@ (800360c <HAL_RCC_OscConfig+0x504>)
 800338e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003392:	6013      	str	r3, [r2, #0]
 8003394:	4b9d      	ldr	r3, [pc, #628]	@ (800360c <HAL_RCC_OscConfig+0x504>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a9c      	ldr	r2, [pc, #624]	@ (800360c <HAL_RCC_OscConfig+0x504>)
 800339a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800339e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d013      	beq.n	80033d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a8:	f7fe faa0 	bl	80018ec <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033b0:	f7fe fa9c 	bl	80018ec <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b64      	cmp	r3, #100	@ 0x64
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e2b4      	b.n	800392c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033c2:	4b92      	ldr	r3, [pc, #584]	@ (800360c <HAL_RCC_OscConfig+0x504>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d0f0      	beq.n	80033b0 <HAL_RCC_OscConfig+0x2a8>
 80033ce:	e014      	b.n	80033fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d0:	f7fe fa8c 	bl	80018ec <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033d8:	f7fe fa88 	bl	80018ec <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b64      	cmp	r3, #100	@ 0x64
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e2a0      	b.n	800392c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033ea:	4b88      	ldr	r3, [pc, #544]	@ (800360c <HAL_RCC_OscConfig+0x504>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f0      	bne.n	80033d8 <HAL_RCC_OscConfig+0x2d0>
 80033f6:	e000      	b.n	80033fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d060      	beq.n	80034c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	2b04      	cmp	r3, #4
 800340a:	d005      	beq.n	8003418 <HAL_RCC_OscConfig+0x310>
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	2b0c      	cmp	r3, #12
 8003410:	d119      	bne.n	8003446 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	2b02      	cmp	r3, #2
 8003416:	d116      	bne.n	8003446 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003418:	4b7c      	ldr	r3, [pc, #496]	@ (800360c <HAL_RCC_OscConfig+0x504>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003420:	2b00      	cmp	r3, #0
 8003422:	d005      	beq.n	8003430 <HAL_RCC_OscConfig+0x328>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d101      	bne.n	8003430 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e27d      	b.n	800392c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003430:	4b76      	ldr	r3, [pc, #472]	@ (800360c <HAL_RCC_OscConfig+0x504>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	061b      	lsls	r3, r3, #24
 800343e:	4973      	ldr	r1, [pc, #460]	@ (800360c <HAL_RCC_OscConfig+0x504>)
 8003440:	4313      	orrs	r3, r2
 8003442:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003444:	e040      	b.n	80034c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d023      	beq.n	8003496 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800344e:	4b6f      	ldr	r3, [pc, #444]	@ (800360c <HAL_RCC_OscConfig+0x504>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a6e      	ldr	r2, [pc, #440]	@ (800360c <HAL_RCC_OscConfig+0x504>)
 8003454:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003458:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345a:	f7fe fa47 	bl	80018ec <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003462:	f7fe fa43 	bl	80018ec <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e25b      	b.n	800392c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003474:	4b65      	ldr	r3, [pc, #404]	@ (800360c <HAL_RCC_OscConfig+0x504>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0f0      	beq.n	8003462 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003480:	4b62      	ldr	r3, [pc, #392]	@ (800360c <HAL_RCC_OscConfig+0x504>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	061b      	lsls	r3, r3, #24
 800348e:	495f      	ldr	r1, [pc, #380]	@ (800360c <HAL_RCC_OscConfig+0x504>)
 8003490:	4313      	orrs	r3, r2
 8003492:	604b      	str	r3, [r1, #4]
 8003494:	e018      	b.n	80034c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003496:	4b5d      	ldr	r3, [pc, #372]	@ (800360c <HAL_RCC_OscConfig+0x504>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a5c      	ldr	r2, [pc, #368]	@ (800360c <HAL_RCC_OscConfig+0x504>)
 800349c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a2:	f7fe fa23 	bl	80018ec <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034a8:	e008      	b.n	80034bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034aa:	f7fe fa1f 	bl	80018ec <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e237      	b.n	800392c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034bc:	4b53      	ldr	r3, [pc, #332]	@ (800360c <HAL_RCC_OscConfig+0x504>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1f0      	bne.n	80034aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0308 	and.w	r3, r3, #8
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d03c      	beq.n	800354e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d01c      	beq.n	8003516 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034dc:	4b4b      	ldr	r3, [pc, #300]	@ (800360c <HAL_RCC_OscConfig+0x504>)
 80034de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034e2:	4a4a      	ldr	r2, [pc, #296]	@ (800360c <HAL_RCC_OscConfig+0x504>)
 80034e4:	f043 0301 	orr.w	r3, r3, #1
 80034e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ec:	f7fe f9fe 	bl	80018ec <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034f4:	f7fe f9fa 	bl	80018ec <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e212      	b.n	800392c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003506:	4b41      	ldr	r3, [pc, #260]	@ (800360c <HAL_RCC_OscConfig+0x504>)
 8003508:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0ef      	beq.n	80034f4 <HAL_RCC_OscConfig+0x3ec>
 8003514:	e01b      	b.n	800354e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003516:	4b3d      	ldr	r3, [pc, #244]	@ (800360c <HAL_RCC_OscConfig+0x504>)
 8003518:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800351c:	4a3b      	ldr	r2, [pc, #236]	@ (800360c <HAL_RCC_OscConfig+0x504>)
 800351e:	f023 0301 	bic.w	r3, r3, #1
 8003522:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003526:	f7fe f9e1 	bl	80018ec <HAL_GetTick>
 800352a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800352c:	e008      	b.n	8003540 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800352e:	f7fe f9dd 	bl	80018ec <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d901      	bls.n	8003540 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e1f5      	b.n	800392c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003540:	4b32      	ldr	r3, [pc, #200]	@ (800360c <HAL_RCC_OscConfig+0x504>)
 8003542:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1ef      	bne.n	800352e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0304 	and.w	r3, r3, #4
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 80a6 	beq.w	80036a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800355c:	2300      	movs	r3, #0
 800355e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003560:	4b2a      	ldr	r3, [pc, #168]	@ (800360c <HAL_RCC_OscConfig+0x504>)
 8003562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003564:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10d      	bne.n	8003588 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800356c:	4b27      	ldr	r3, [pc, #156]	@ (800360c <HAL_RCC_OscConfig+0x504>)
 800356e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003570:	4a26      	ldr	r2, [pc, #152]	@ (800360c <HAL_RCC_OscConfig+0x504>)
 8003572:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003576:	6593      	str	r3, [r2, #88]	@ 0x58
 8003578:	4b24      	ldr	r3, [pc, #144]	@ (800360c <HAL_RCC_OscConfig+0x504>)
 800357a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800357c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003580:	60bb      	str	r3, [r7, #8]
 8003582:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003584:	2301      	movs	r3, #1
 8003586:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003588:	4b21      	ldr	r3, [pc, #132]	@ (8003610 <HAL_RCC_OscConfig+0x508>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003590:	2b00      	cmp	r3, #0
 8003592:	d118      	bne.n	80035c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003594:	4b1e      	ldr	r3, [pc, #120]	@ (8003610 <HAL_RCC_OscConfig+0x508>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a1d      	ldr	r2, [pc, #116]	@ (8003610 <HAL_RCC_OscConfig+0x508>)
 800359a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800359e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035a0:	f7fe f9a4 	bl	80018ec <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035a8:	f7fe f9a0 	bl	80018ec <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e1b8      	b.n	800392c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035ba:	4b15      	ldr	r3, [pc, #84]	@ (8003610 <HAL_RCC_OscConfig+0x508>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f0      	beq.n	80035a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d108      	bne.n	80035e0 <HAL_RCC_OscConfig+0x4d8>
 80035ce:	4b0f      	ldr	r3, [pc, #60]	@ (800360c <HAL_RCC_OscConfig+0x504>)
 80035d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035d4:	4a0d      	ldr	r2, [pc, #52]	@ (800360c <HAL_RCC_OscConfig+0x504>)
 80035d6:	f043 0301 	orr.w	r3, r3, #1
 80035da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035de:	e029      	b.n	8003634 <HAL_RCC_OscConfig+0x52c>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	2b05      	cmp	r3, #5
 80035e6:	d115      	bne.n	8003614 <HAL_RCC_OscConfig+0x50c>
 80035e8:	4b08      	ldr	r3, [pc, #32]	@ (800360c <HAL_RCC_OscConfig+0x504>)
 80035ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ee:	4a07      	ldr	r2, [pc, #28]	@ (800360c <HAL_RCC_OscConfig+0x504>)
 80035f0:	f043 0304 	orr.w	r3, r3, #4
 80035f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035f8:	4b04      	ldr	r3, [pc, #16]	@ (800360c <HAL_RCC_OscConfig+0x504>)
 80035fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035fe:	4a03      	ldr	r2, [pc, #12]	@ (800360c <HAL_RCC_OscConfig+0x504>)
 8003600:	f043 0301 	orr.w	r3, r3, #1
 8003604:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003608:	e014      	b.n	8003634 <HAL_RCC_OscConfig+0x52c>
 800360a:	bf00      	nop
 800360c:	40021000 	.word	0x40021000
 8003610:	40007000 	.word	0x40007000
 8003614:	4b9d      	ldr	r3, [pc, #628]	@ (800388c <HAL_RCC_OscConfig+0x784>)
 8003616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800361a:	4a9c      	ldr	r2, [pc, #624]	@ (800388c <HAL_RCC_OscConfig+0x784>)
 800361c:	f023 0301 	bic.w	r3, r3, #1
 8003620:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003624:	4b99      	ldr	r3, [pc, #612]	@ (800388c <HAL_RCC_OscConfig+0x784>)
 8003626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800362a:	4a98      	ldr	r2, [pc, #608]	@ (800388c <HAL_RCC_OscConfig+0x784>)
 800362c:	f023 0304 	bic.w	r3, r3, #4
 8003630:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d016      	beq.n	800366a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800363c:	f7fe f956 	bl	80018ec <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003642:	e00a      	b.n	800365a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003644:	f7fe f952 	bl	80018ec <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003652:	4293      	cmp	r3, r2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e168      	b.n	800392c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800365a:	4b8c      	ldr	r3, [pc, #560]	@ (800388c <HAL_RCC_OscConfig+0x784>)
 800365c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0ed      	beq.n	8003644 <HAL_RCC_OscConfig+0x53c>
 8003668:	e015      	b.n	8003696 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800366a:	f7fe f93f 	bl	80018ec <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003670:	e00a      	b.n	8003688 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003672:	f7fe f93b 	bl	80018ec <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003680:	4293      	cmp	r3, r2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e151      	b.n	800392c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003688:	4b80      	ldr	r3, [pc, #512]	@ (800388c <HAL_RCC_OscConfig+0x784>)
 800368a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1ed      	bne.n	8003672 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003696:	7ffb      	ldrb	r3, [r7, #31]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d105      	bne.n	80036a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800369c:	4b7b      	ldr	r3, [pc, #492]	@ (800388c <HAL_RCC_OscConfig+0x784>)
 800369e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036a0:	4a7a      	ldr	r2, [pc, #488]	@ (800388c <HAL_RCC_OscConfig+0x784>)
 80036a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036a6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0320 	and.w	r3, r3, #32
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d03c      	beq.n	800372e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d01c      	beq.n	80036f6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80036bc:	4b73      	ldr	r3, [pc, #460]	@ (800388c <HAL_RCC_OscConfig+0x784>)
 80036be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036c2:	4a72      	ldr	r2, [pc, #456]	@ (800388c <HAL_RCC_OscConfig+0x784>)
 80036c4:	f043 0301 	orr.w	r3, r3, #1
 80036c8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036cc:	f7fe f90e 	bl	80018ec <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036d4:	f7fe f90a 	bl	80018ec <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e122      	b.n	800392c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036e6:	4b69      	ldr	r3, [pc, #420]	@ (800388c <HAL_RCC_OscConfig+0x784>)
 80036e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0ef      	beq.n	80036d4 <HAL_RCC_OscConfig+0x5cc>
 80036f4:	e01b      	b.n	800372e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036f6:	4b65      	ldr	r3, [pc, #404]	@ (800388c <HAL_RCC_OscConfig+0x784>)
 80036f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036fc:	4a63      	ldr	r2, [pc, #396]	@ (800388c <HAL_RCC_OscConfig+0x784>)
 80036fe:	f023 0301 	bic.w	r3, r3, #1
 8003702:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003706:	f7fe f8f1 	bl	80018ec <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800370c:	e008      	b.n	8003720 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800370e:	f7fe f8ed 	bl	80018ec <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e105      	b.n	800392c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003720:	4b5a      	ldr	r3, [pc, #360]	@ (800388c <HAL_RCC_OscConfig+0x784>)
 8003722:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1ef      	bne.n	800370e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 80f9 	beq.w	800392a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800373c:	2b02      	cmp	r3, #2
 800373e:	f040 80cf 	bne.w	80038e0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003742:	4b52      	ldr	r3, [pc, #328]	@ (800388c <HAL_RCC_OscConfig+0x784>)
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	f003 0203 	and.w	r2, r3, #3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003752:	429a      	cmp	r2, r3
 8003754:	d12c      	bne.n	80037b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003760:	3b01      	subs	r3, #1
 8003762:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003764:	429a      	cmp	r2, r3
 8003766:	d123      	bne.n	80037b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003772:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003774:	429a      	cmp	r2, r3
 8003776:	d11b      	bne.n	80037b0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003782:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003784:	429a      	cmp	r2, r3
 8003786:	d113      	bne.n	80037b0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003792:	085b      	lsrs	r3, r3, #1
 8003794:	3b01      	subs	r3, #1
 8003796:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003798:	429a      	cmp	r2, r3
 800379a:	d109      	bne.n	80037b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a6:	085b      	lsrs	r3, r3, #1
 80037a8:	3b01      	subs	r3, #1
 80037aa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d071      	beq.n	8003894 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	2b0c      	cmp	r3, #12
 80037b4:	d068      	beq.n	8003888 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80037b6:	4b35      	ldr	r3, [pc, #212]	@ (800388c <HAL_RCC_OscConfig+0x784>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d105      	bne.n	80037ce <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80037c2:	4b32      	ldr	r3, [pc, #200]	@ (800388c <HAL_RCC_OscConfig+0x784>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e0ac      	b.n	800392c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80037d2:	4b2e      	ldr	r3, [pc, #184]	@ (800388c <HAL_RCC_OscConfig+0x784>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a2d      	ldr	r2, [pc, #180]	@ (800388c <HAL_RCC_OscConfig+0x784>)
 80037d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037dc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037de:	f7fe f885 	bl	80018ec <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037e4:	e008      	b.n	80037f8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e6:	f7fe f881 	bl	80018ec <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e099      	b.n	800392c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037f8:	4b24      	ldr	r3, [pc, #144]	@ (800388c <HAL_RCC_OscConfig+0x784>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1f0      	bne.n	80037e6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003804:	4b21      	ldr	r3, [pc, #132]	@ (800388c <HAL_RCC_OscConfig+0x784>)
 8003806:	68da      	ldr	r2, [r3, #12]
 8003808:	4b21      	ldr	r3, [pc, #132]	@ (8003890 <HAL_RCC_OscConfig+0x788>)
 800380a:	4013      	ands	r3, r2
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003814:	3a01      	subs	r2, #1
 8003816:	0112      	lsls	r2, r2, #4
 8003818:	4311      	orrs	r1, r2
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800381e:	0212      	lsls	r2, r2, #8
 8003820:	4311      	orrs	r1, r2
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003826:	0852      	lsrs	r2, r2, #1
 8003828:	3a01      	subs	r2, #1
 800382a:	0552      	lsls	r2, r2, #21
 800382c:	4311      	orrs	r1, r2
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003832:	0852      	lsrs	r2, r2, #1
 8003834:	3a01      	subs	r2, #1
 8003836:	0652      	lsls	r2, r2, #25
 8003838:	4311      	orrs	r1, r2
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800383e:	06d2      	lsls	r2, r2, #27
 8003840:	430a      	orrs	r2, r1
 8003842:	4912      	ldr	r1, [pc, #72]	@ (800388c <HAL_RCC_OscConfig+0x784>)
 8003844:	4313      	orrs	r3, r2
 8003846:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003848:	4b10      	ldr	r3, [pc, #64]	@ (800388c <HAL_RCC_OscConfig+0x784>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a0f      	ldr	r2, [pc, #60]	@ (800388c <HAL_RCC_OscConfig+0x784>)
 800384e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003852:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003854:	4b0d      	ldr	r3, [pc, #52]	@ (800388c <HAL_RCC_OscConfig+0x784>)
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	4a0c      	ldr	r2, [pc, #48]	@ (800388c <HAL_RCC_OscConfig+0x784>)
 800385a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800385e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003860:	f7fe f844 	bl	80018ec <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003868:	f7fe f840 	bl	80018ec <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e058      	b.n	800392c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800387a:	4b04      	ldr	r3, [pc, #16]	@ (800388c <HAL_RCC_OscConfig+0x784>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0f0      	beq.n	8003868 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003886:	e050      	b.n	800392a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e04f      	b.n	800392c <HAL_RCC_OscConfig+0x824>
 800388c:	40021000 	.word	0x40021000
 8003890:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003894:	4b27      	ldr	r3, [pc, #156]	@ (8003934 <HAL_RCC_OscConfig+0x82c>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d144      	bne.n	800392a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80038a0:	4b24      	ldr	r3, [pc, #144]	@ (8003934 <HAL_RCC_OscConfig+0x82c>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a23      	ldr	r2, [pc, #140]	@ (8003934 <HAL_RCC_OscConfig+0x82c>)
 80038a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038ac:	4b21      	ldr	r3, [pc, #132]	@ (8003934 <HAL_RCC_OscConfig+0x82c>)
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	4a20      	ldr	r2, [pc, #128]	@ (8003934 <HAL_RCC_OscConfig+0x82c>)
 80038b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80038b8:	f7fe f818 	bl	80018ec <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c0:	f7fe f814 	bl	80018ec <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e02c      	b.n	800392c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038d2:	4b18      	ldr	r3, [pc, #96]	@ (8003934 <HAL_RCC_OscConfig+0x82c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d0f0      	beq.n	80038c0 <HAL_RCC_OscConfig+0x7b8>
 80038de:	e024      	b.n	800392a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	2b0c      	cmp	r3, #12
 80038e4:	d01f      	beq.n	8003926 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038e6:	4b13      	ldr	r3, [pc, #76]	@ (8003934 <HAL_RCC_OscConfig+0x82c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a12      	ldr	r2, [pc, #72]	@ (8003934 <HAL_RCC_OscConfig+0x82c>)
 80038ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f2:	f7fd fffb 	bl	80018ec <HAL_GetTick>
 80038f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038f8:	e008      	b.n	800390c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038fa:	f7fd fff7 	bl	80018ec <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e00f      	b.n	800392c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800390c:	4b09      	ldr	r3, [pc, #36]	@ (8003934 <HAL_RCC_OscConfig+0x82c>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1f0      	bne.n	80038fa <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003918:	4b06      	ldr	r3, [pc, #24]	@ (8003934 <HAL_RCC_OscConfig+0x82c>)
 800391a:	68da      	ldr	r2, [r3, #12]
 800391c:	4905      	ldr	r1, [pc, #20]	@ (8003934 <HAL_RCC_OscConfig+0x82c>)
 800391e:	4b06      	ldr	r3, [pc, #24]	@ (8003938 <HAL_RCC_OscConfig+0x830>)
 8003920:	4013      	ands	r3, r2
 8003922:	60cb      	str	r3, [r1, #12]
 8003924:	e001      	b.n	800392a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e000      	b.n	800392c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3720      	adds	r7, #32
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40021000 	.word	0x40021000
 8003938:	feeefffc 	.word	0xfeeefffc

0800393c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003946:	2300      	movs	r3, #0
 8003948:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e11d      	b.n	8003b90 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003954:	4b90      	ldr	r3, [pc, #576]	@ (8003b98 <HAL_RCC_ClockConfig+0x25c>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 030f 	and.w	r3, r3, #15
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	429a      	cmp	r2, r3
 8003960:	d910      	bls.n	8003984 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003962:	4b8d      	ldr	r3, [pc, #564]	@ (8003b98 <HAL_RCC_ClockConfig+0x25c>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f023 020f 	bic.w	r2, r3, #15
 800396a:	498b      	ldr	r1, [pc, #556]	@ (8003b98 <HAL_RCC_ClockConfig+0x25c>)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	4313      	orrs	r3, r2
 8003970:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003972:	4b89      	ldr	r3, [pc, #548]	@ (8003b98 <HAL_RCC_ClockConfig+0x25c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 030f 	and.w	r3, r3, #15
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	429a      	cmp	r2, r3
 800397e:	d001      	beq.n	8003984 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e105      	b.n	8003b90 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d010      	beq.n	80039b2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	4b81      	ldr	r3, [pc, #516]	@ (8003b9c <HAL_RCC_ClockConfig+0x260>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800399c:	429a      	cmp	r2, r3
 800399e:	d908      	bls.n	80039b2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039a0:	4b7e      	ldr	r3, [pc, #504]	@ (8003b9c <HAL_RCC_ClockConfig+0x260>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	497b      	ldr	r1, [pc, #492]	@ (8003b9c <HAL_RCC_ClockConfig+0x260>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d079      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b03      	cmp	r3, #3
 80039c4:	d11e      	bne.n	8003a04 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039c6:	4b75      	ldr	r3, [pc, #468]	@ (8003b9c <HAL_RCC_ClockConfig+0x260>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e0dc      	b.n	8003b90 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80039d6:	f000 fa09 	bl	8003dec <RCC_GetSysClockFreqFromPLLSource>
 80039da:	4603      	mov	r3, r0
 80039dc:	4a70      	ldr	r2, [pc, #448]	@ (8003ba0 <HAL_RCC_ClockConfig+0x264>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d946      	bls.n	8003a70 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80039e2:	4b6e      	ldr	r3, [pc, #440]	@ (8003b9c <HAL_RCC_ClockConfig+0x260>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d140      	bne.n	8003a70 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80039ee:	4b6b      	ldr	r3, [pc, #428]	@ (8003b9c <HAL_RCC_ClockConfig+0x260>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039f6:	4a69      	ldr	r2, [pc, #420]	@ (8003b9c <HAL_RCC_ClockConfig+0x260>)
 80039f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039fc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80039fe:	2380      	movs	r3, #128	@ 0x80
 8003a00:	617b      	str	r3, [r7, #20]
 8003a02:	e035      	b.n	8003a70 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d107      	bne.n	8003a1c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a0c:	4b63      	ldr	r3, [pc, #396]	@ (8003b9c <HAL_RCC_ClockConfig+0x260>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d115      	bne.n	8003a44 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e0b9      	b.n	8003b90 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d107      	bne.n	8003a34 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a24:	4b5d      	ldr	r3, [pc, #372]	@ (8003b9c <HAL_RCC_ClockConfig+0x260>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d109      	bne.n	8003a44 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e0ad      	b.n	8003b90 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a34:	4b59      	ldr	r3, [pc, #356]	@ (8003b9c <HAL_RCC_ClockConfig+0x260>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d101      	bne.n	8003a44 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e0a5      	b.n	8003b90 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003a44:	f000 f8b4 	bl	8003bb0 <HAL_RCC_GetSysClockFreq>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	4a55      	ldr	r2, [pc, #340]	@ (8003ba0 <HAL_RCC_ClockConfig+0x264>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d90f      	bls.n	8003a70 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003a50:	4b52      	ldr	r3, [pc, #328]	@ (8003b9c <HAL_RCC_ClockConfig+0x260>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d109      	bne.n	8003a70 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a5c:	4b4f      	ldr	r3, [pc, #316]	@ (8003b9c <HAL_RCC_ClockConfig+0x260>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a64:	4a4d      	ldr	r2, [pc, #308]	@ (8003b9c <HAL_RCC_ClockConfig+0x260>)
 8003a66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a6a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a6c:	2380      	movs	r3, #128	@ 0x80
 8003a6e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a70:	4b4a      	ldr	r3, [pc, #296]	@ (8003b9c <HAL_RCC_ClockConfig+0x260>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f023 0203 	bic.w	r2, r3, #3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	4947      	ldr	r1, [pc, #284]	@ (8003b9c <HAL_RCC_ClockConfig+0x260>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a82:	f7fd ff33 	bl	80018ec <HAL_GetTick>
 8003a86:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a88:	e00a      	b.n	8003aa0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a8a:	f7fd ff2f 	bl	80018ec <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e077      	b.n	8003b90 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aa0:	4b3e      	ldr	r3, [pc, #248]	@ (8003b9c <HAL_RCC_ClockConfig+0x260>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f003 020c 	and.w	r2, r3, #12
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d1eb      	bne.n	8003a8a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2b80      	cmp	r3, #128	@ 0x80
 8003ab6:	d105      	bne.n	8003ac4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003ab8:	4b38      	ldr	r3, [pc, #224]	@ (8003b9c <HAL_RCC_ClockConfig+0x260>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	4a37      	ldr	r2, [pc, #220]	@ (8003b9c <HAL_RCC_ClockConfig+0x260>)
 8003abe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ac2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d010      	beq.n	8003af2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	4b31      	ldr	r3, [pc, #196]	@ (8003b9c <HAL_RCC_ClockConfig+0x260>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d208      	bcs.n	8003af2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ae0:	4b2e      	ldr	r3, [pc, #184]	@ (8003b9c <HAL_RCC_ClockConfig+0x260>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	492b      	ldr	r1, [pc, #172]	@ (8003b9c <HAL_RCC_ClockConfig+0x260>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003af2:	4b29      	ldr	r3, [pc, #164]	@ (8003b98 <HAL_RCC_ClockConfig+0x25c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 030f 	and.w	r3, r3, #15
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d210      	bcs.n	8003b22 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b00:	4b25      	ldr	r3, [pc, #148]	@ (8003b98 <HAL_RCC_ClockConfig+0x25c>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f023 020f 	bic.w	r2, r3, #15
 8003b08:	4923      	ldr	r1, [pc, #140]	@ (8003b98 <HAL_RCC_ClockConfig+0x25c>)
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b10:	4b21      	ldr	r3, [pc, #132]	@ (8003b98 <HAL_RCC_ClockConfig+0x25c>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 030f 	and.w	r3, r3, #15
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d001      	beq.n	8003b22 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e036      	b.n	8003b90 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0304 	and.w	r3, r3, #4
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d008      	beq.n	8003b40 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b2e:	4b1b      	ldr	r3, [pc, #108]	@ (8003b9c <HAL_RCC_ClockConfig+0x260>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	4918      	ldr	r1, [pc, #96]	@ (8003b9c <HAL_RCC_ClockConfig+0x260>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0308 	and.w	r3, r3, #8
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d009      	beq.n	8003b60 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b4c:	4b13      	ldr	r3, [pc, #76]	@ (8003b9c <HAL_RCC_ClockConfig+0x260>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	00db      	lsls	r3, r3, #3
 8003b5a:	4910      	ldr	r1, [pc, #64]	@ (8003b9c <HAL_RCC_ClockConfig+0x260>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b60:	f000 f826 	bl	8003bb0 <HAL_RCC_GetSysClockFreq>
 8003b64:	4602      	mov	r2, r0
 8003b66:	4b0d      	ldr	r3, [pc, #52]	@ (8003b9c <HAL_RCC_ClockConfig+0x260>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	091b      	lsrs	r3, r3, #4
 8003b6c:	f003 030f 	and.w	r3, r3, #15
 8003b70:	490c      	ldr	r1, [pc, #48]	@ (8003ba4 <HAL_RCC_ClockConfig+0x268>)
 8003b72:	5ccb      	ldrb	r3, [r1, r3]
 8003b74:	f003 031f 	and.w	r3, r3, #31
 8003b78:	fa22 f303 	lsr.w	r3, r2, r3
 8003b7c:	4a0a      	ldr	r2, [pc, #40]	@ (8003ba8 <HAL_RCC_ClockConfig+0x26c>)
 8003b7e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b80:	4b0a      	ldr	r3, [pc, #40]	@ (8003bac <HAL_RCC_ClockConfig+0x270>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7fd fe61 	bl	800184c <HAL_InitTick>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	73fb      	strb	r3, [r7, #15]

  return status;
 8003b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3718      	adds	r7, #24
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	40022000 	.word	0x40022000
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	04c4b400 	.word	0x04c4b400
 8003ba4:	08009f18 	.word	0x08009f18
 8003ba8:	20000000 	.word	0x20000000
 8003bac:	20000004 	.word	0x20000004

08003bb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b089      	sub	sp, #36	@ 0x24
 8003bb4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	61fb      	str	r3, [r7, #28]
 8003bba:	2300      	movs	r3, #0
 8003bbc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bbe:	4b3e      	ldr	r3, [pc, #248]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 030c 	and.w	r3, r3, #12
 8003bc6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bc8:	4b3b      	ldr	r3, [pc, #236]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	f003 0303 	and.w	r3, r3, #3
 8003bd0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d005      	beq.n	8003be4 <HAL_RCC_GetSysClockFreq+0x34>
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	2b0c      	cmp	r3, #12
 8003bdc:	d121      	bne.n	8003c22 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d11e      	bne.n	8003c22 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003be4:	4b34      	ldr	r3, [pc, #208]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0308 	and.w	r3, r3, #8
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d107      	bne.n	8003c00 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003bf0:	4b31      	ldr	r3, [pc, #196]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bf6:	0a1b      	lsrs	r3, r3, #8
 8003bf8:	f003 030f 	and.w	r3, r3, #15
 8003bfc:	61fb      	str	r3, [r7, #28]
 8003bfe:	e005      	b.n	8003c0c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c00:	4b2d      	ldr	r3, [pc, #180]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	091b      	lsrs	r3, r3, #4
 8003c06:	f003 030f 	and.w	r3, r3, #15
 8003c0a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c0c:	4a2b      	ldr	r2, [pc, #172]	@ (8003cbc <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c14:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10d      	bne.n	8003c38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c20:	e00a      	b.n	8003c38 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	2b04      	cmp	r3, #4
 8003c26:	d102      	bne.n	8003c2e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c28:	4b25      	ldr	r3, [pc, #148]	@ (8003cc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c2a:	61bb      	str	r3, [r7, #24]
 8003c2c:	e004      	b.n	8003c38 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	2b08      	cmp	r3, #8
 8003c32:	d101      	bne.n	8003c38 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c34:	4b23      	ldr	r3, [pc, #140]	@ (8003cc4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c36:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	2b0c      	cmp	r3, #12
 8003c3c:	d134      	bne.n	8003ca8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	f003 0303 	and.w	r3, r3, #3
 8003c46:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d003      	beq.n	8003c56 <HAL_RCC_GetSysClockFreq+0xa6>
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	2b03      	cmp	r3, #3
 8003c52:	d003      	beq.n	8003c5c <HAL_RCC_GetSysClockFreq+0xac>
 8003c54:	e005      	b.n	8003c62 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003c56:	4b1a      	ldr	r3, [pc, #104]	@ (8003cc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c58:	617b      	str	r3, [r7, #20]
      break;
 8003c5a:	e005      	b.n	8003c68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003c5c:	4b19      	ldr	r3, [pc, #100]	@ (8003cc4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c5e:	617b      	str	r3, [r7, #20]
      break;
 8003c60:	e002      	b.n	8003c68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	617b      	str	r3, [r7, #20]
      break;
 8003c66:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c68:	4b13      	ldr	r3, [pc, #76]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	091b      	lsrs	r3, r3, #4
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	3301      	adds	r3, #1
 8003c74:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003c76:	4b10      	ldr	r3, [pc, #64]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	0a1b      	lsrs	r3, r3, #8
 8003c7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	fb03 f202 	mul.w	r2, r3, r2
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c8c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	0e5b      	lsrs	r3, r3, #25
 8003c94:	f003 0303 	and.w	r3, r3, #3
 8003c98:	3301      	adds	r3, #1
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ca8:	69bb      	ldr	r3, [r7, #24]
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3724      	adds	r7, #36	@ 0x24
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	08009f30 	.word	0x08009f30
 8003cc0:	00f42400 	.word	0x00f42400
 8003cc4:	007a1200 	.word	0x007a1200

08003cc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ccc:	4b03      	ldr	r3, [pc, #12]	@ (8003cdc <HAL_RCC_GetHCLKFreq+0x14>)
 8003cce:	681b      	ldr	r3, [r3, #0]
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	20000000 	.word	0x20000000

08003ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ce4:	f7ff fff0 	bl	8003cc8 <HAL_RCC_GetHCLKFreq>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	4b06      	ldr	r3, [pc, #24]	@ (8003d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	0a1b      	lsrs	r3, r3, #8
 8003cf0:	f003 0307 	and.w	r3, r3, #7
 8003cf4:	4904      	ldr	r1, [pc, #16]	@ (8003d08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003cf6:	5ccb      	ldrb	r3, [r1, r3]
 8003cf8:	f003 031f 	and.w	r3, r3, #31
 8003cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	40021000 	.word	0x40021000
 8003d08:	08009f28 	.word	0x08009f28

08003d0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d10:	f7ff ffda 	bl	8003cc8 <HAL_RCC_GetHCLKFreq>
 8003d14:	4602      	mov	r2, r0
 8003d16:	4b06      	ldr	r3, [pc, #24]	@ (8003d30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	0adb      	lsrs	r3, r3, #11
 8003d1c:	f003 0307 	and.w	r3, r3, #7
 8003d20:	4904      	ldr	r1, [pc, #16]	@ (8003d34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d22:	5ccb      	ldrb	r3, [r1, r3]
 8003d24:	f003 031f 	and.w	r3, r3, #31
 8003d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	40021000 	.word	0x40021000
 8003d34:	08009f28 	.word	0x08009f28

08003d38 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d40:	2300      	movs	r3, #0
 8003d42:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d44:	4b27      	ldr	r3, [pc, #156]	@ (8003de4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d003      	beq.n	8003d58 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003d50:	f7ff f916 	bl	8002f80 <HAL_PWREx_GetVoltageRange>
 8003d54:	6178      	str	r0, [r7, #20]
 8003d56:	e014      	b.n	8003d82 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d58:	4b22      	ldr	r3, [pc, #136]	@ (8003de4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d5c:	4a21      	ldr	r2, [pc, #132]	@ (8003de4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d62:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d64:	4b1f      	ldr	r3, [pc, #124]	@ (8003de4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d6c:	60fb      	str	r3, [r7, #12]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003d70:	f7ff f906 	bl	8002f80 <HAL_PWREx_GetVoltageRange>
 8003d74:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003d76:	4b1b      	ldr	r3, [pc, #108]	@ (8003de4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d7a:	4a1a      	ldr	r2, [pc, #104]	@ (8003de4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d80:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d88:	d10b      	bne.n	8003da2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b80      	cmp	r3, #128	@ 0x80
 8003d8e:	d913      	bls.n	8003db8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2ba0      	cmp	r3, #160	@ 0xa0
 8003d94:	d902      	bls.n	8003d9c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d96:	2302      	movs	r3, #2
 8003d98:	613b      	str	r3, [r7, #16]
 8003d9a:	e00d      	b.n	8003db8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	613b      	str	r3, [r7, #16]
 8003da0:	e00a      	b.n	8003db8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2b7f      	cmp	r3, #127	@ 0x7f
 8003da6:	d902      	bls.n	8003dae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003da8:	2302      	movs	r3, #2
 8003daa:	613b      	str	r3, [r7, #16]
 8003dac:	e004      	b.n	8003db8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b70      	cmp	r3, #112	@ 0x70
 8003db2:	d101      	bne.n	8003db8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003db4:	2301      	movs	r3, #1
 8003db6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003db8:	4b0b      	ldr	r3, [pc, #44]	@ (8003de8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f023 020f 	bic.w	r2, r3, #15
 8003dc0:	4909      	ldr	r1, [pc, #36]	@ (8003de8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003dc8:	4b07      	ldr	r3, [pc, #28]	@ (8003de8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 030f 	and.w	r3, r3, #15
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d001      	beq.n	8003dda <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e000      	b.n	8003ddc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3718      	adds	r7, #24
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40021000 	.word	0x40021000
 8003de8:	40022000 	.word	0x40022000

08003dec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b087      	sub	sp, #28
 8003df0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003df2:	4b2d      	ldr	r3, [pc, #180]	@ (8003ea8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	f003 0303 	and.w	r3, r3, #3
 8003dfa:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2b03      	cmp	r3, #3
 8003e00:	d00b      	beq.n	8003e1a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2b03      	cmp	r3, #3
 8003e06:	d825      	bhi.n	8003e54 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d008      	beq.n	8003e20 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d11f      	bne.n	8003e54 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003e14:	4b25      	ldr	r3, [pc, #148]	@ (8003eac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003e16:	613b      	str	r3, [r7, #16]
    break;
 8003e18:	e01f      	b.n	8003e5a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003e1a:	4b25      	ldr	r3, [pc, #148]	@ (8003eb0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003e1c:	613b      	str	r3, [r7, #16]
    break;
 8003e1e:	e01c      	b.n	8003e5a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e20:	4b21      	ldr	r3, [pc, #132]	@ (8003ea8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0308 	and.w	r3, r3, #8
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d107      	bne.n	8003e3c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e2c:	4b1e      	ldr	r3, [pc, #120]	@ (8003ea8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e32:	0a1b      	lsrs	r3, r3, #8
 8003e34:	f003 030f 	and.w	r3, r3, #15
 8003e38:	617b      	str	r3, [r7, #20]
 8003e3a:	e005      	b.n	8003e48 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e3c:	4b1a      	ldr	r3, [pc, #104]	@ (8003ea8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	091b      	lsrs	r3, r3, #4
 8003e42:	f003 030f 	and.w	r3, r3, #15
 8003e46:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003e48:	4a1a      	ldr	r2, [pc, #104]	@ (8003eb4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e50:	613b      	str	r3, [r7, #16]
    break;
 8003e52:	e002      	b.n	8003e5a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003e54:	2300      	movs	r3, #0
 8003e56:	613b      	str	r3, [r7, #16]
    break;
 8003e58:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e5a:	4b13      	ldr	r3, [pc, #76]	@ (8003ea8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	091b      	lsrs	r3, r3, #4
 8003e60:	f003 030f 	and.w	r3, r3, #15
 8003e64:	3301      	adds	r3, #1
 8003e66:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e68:	4b0f      	ldr	r3, [pc, #60]	@ (8003ea8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	0a1b      	lsrs	r3, r3, #8
 8003e6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	fb03 f202 	mul.w	r2, r3, r2
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e7e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e80:	4b09      	ldr	r3, [pc, #36]	@ (8003ea8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	0e5b      	lsrs	r3, r3, #25
 8003e86:	f003 0303 	and.w	r3, r3, #3
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e98:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003e9a:	683b      	ldr	r3, [r7, #0]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	371c      	adds	r7, #28
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	00f42400 	.word	0x00f42400
 8003eb0:	007a1200 	.word	0x007a1200
 8003eb4:	08009f30 	.word	0x08009f30

08003eb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d040      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ed8:	2b80      	cmp	r3, #128	@ 0x80
 8003eda:	d02a      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003edc:	2b80      	cmp	r3, #128	@ 0x80
 8003ede:	d825      	bhi.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003ee0:	2b60      	cmp	r3, #96	@ 0x60
 8003ee2:	d026      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003ee4:	2b60      	cmp	r3, #96	@ 0x60
 8003ee6:	d821      	bhi.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003ee8:	2b40      	cmp	r3, #64	@ 0x40
 8003eea:	d006      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003eec:	2b40      	cmp	r3, #64	@ 0x40
 8003eee:	d81d      	bhi.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d009      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003ef4:	2b20      	cmp	r3, #32
 8003ef6:	d010      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003ef8:	e018      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003efa:	4b89      	ldr	r3, [pc, #548]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	4a88      	ldr	r2, [pc, #544]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f04:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f06:	e015      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	3304      	adds	r3, #4
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 fb02 	bl	8004518 <RCCEx_PLLSAI1_Config>
 8003f14:	4603      	mov	r3, r0
 8003f16:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f18:	e00c      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	3320      	adds	r3, #32
 8003f1e:	2100      	movs	r1, #0
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 fbed 	bl	8004700 <RCCEx_PLLSAI2_Config>
 8003f26:	4603      	mov	r3, r0
 8003f28:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f2a:	e003      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	74fb      	strb	r3, [r7, #19]
      break;
 8003f30:	e000      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003f32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f34:	7cfb      	ldrb	r3, [r7, #19]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10b      	bne.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f3a:	4b79      	ldr	r3, [pc, #484]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f40:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f48:	4975      	ldr	r1, [pc, #468]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003f50:	e001      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f52:	7cfb      	ldrb	r3, [r7, #19]
 8003f54:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d047      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f6a:	d030      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003f6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f70:	d82a      	bhi.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003f72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f76:	d02a      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003f78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f7c:	d824      	bhi.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003f7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f82:	d008      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003f84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f88:	d81e      	bhi.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00a      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003f8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f92:	d010      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003f94:	e018      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f96:	4b62      	ldr	r3, [pc, #392]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	4a61      	ldr	r2, [pc, #388]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fa0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fa2:	e015      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	3304      	adds	r3, #4
 8003fa8:	2100      	movs	r1, #0
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 fab4 	bl	8004518 <RCCEx_PLLSAI1_Config>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fb4:	e00c      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	3320      	adds	r3, #32
 8003fba:	2100      	movs	r1, #0
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 fb9f 	bl	8004700 <RCCEx_PLLSAI2_Config>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fc6:	e003      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	74fb      	strb	r3, [r7, #19]
      break;
 8003fcc:	e000      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003fce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fd0:	7cfb      	ldrb	r3, [r7, #19]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10b      	bne.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003fd6:	4b52      	ldr	r3, [pc, #328]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003fdc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fe4:	494e      	ldr	r1, [pc, #312]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003fec:	e001      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fee:	7cfb      	ldrb	r3, [r7, #19]
 8003ff0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 809f 	beq.w	800413e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004000:	2300      	movs	r3, #0
 8004002:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004004:	4b46      	ldr	r3, [pc, #280]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004008:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004010:	2301      	movs	r3, #1
 8004012:	e000      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004014:	2300      	movs	r3, #0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00d      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800401a:	4b41      	ldr	r3, [pc, #260]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800401c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800401e:	4a40      	ldr	r2, [pc, #256]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004020:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004024:	6593      	str	r3, [r2, #88]	@ 0x58
 8004026:	4b3e      	ldr	r3, [pc, #248]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800402a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800402e:	60bb      	str	r3, [r7, #8]
 8004030:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004032:	2301      	movs	r3, #1
 8004034:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004036:	4b3b      	ldr	r3, [pc, #236]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a3a      	ldr	r2, [pc, #232]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800403c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004040:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004042:	f7fd fc53 	bl	80018ec <HAL_GetTick>
 8004046:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004048:	e009      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800404a:	f7fd fc4f 	bl	80018ec <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b02      	cmp	r3, #2
 8004056:	d902      	bls.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	74fb      	strb	r3, [r7, #19]
        break;
 800405c:	e005      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800405e:	4b31      	ldr	r3, [pc, #196]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004066:	2b00      	cmp	r3, #0
 8004068:	d0ef      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800406a:	7cfb      	ldrb	r3, [r7, #19]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d15b      	bne.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004070:	4b2b      	ldr	r3, [pc, #172]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004072:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004076:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800407a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d01f      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	429a      	cmp	r2, r3
 800408c:	d019      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800408e:	4b24      	ldr	r3, [pc, #144]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004094:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004098:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800409a:	4b21      	ldr	r3, [pc, #132]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800409c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040a0:	4a1f      	ldr	r2, [pc, #124]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040aa:	4b1d      	ldr	r3, [pc, #116]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040b0:	4a1b      	ldr	r2, [pc, #108]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040ba:	4a19      	ldr	r2, [pc, #100]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d016      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040cc:	f7fd fc0e 	bl	80018ec <HAL_GetTick>
 80040d0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040d2:	e00b      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040d4:	f7fd fc0a 	bl	80018ec <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d902      	bls.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	74fb      	strb	r3, [r7, #19]
            break;
 80040ea:	e006      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d0ec      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80040fa:	7cfb      	ldrb	r3, [r7, #19]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d10c      	bne.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004100:	4b07      	ldr	r3, [pc, #28]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004106:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004110:	4903      	ldr	r1, [pc, #12]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004112:	4313      	orrs	r3, r2
 8004114:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004118:	e008      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800411a:	7cfb      	ldrb	r3, [r7, #19]
 800411c:	74bb      	strb	r3, [r7, #18]
 800411e:	e005      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004120:	40021000 	.word	0x40021000
 8004124:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004128:	7cfb      	ldrb	r3, [r7, #19]
 800412a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800412c:	7c7b      	ldrb	r3, [r7, #17]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d105      	bne.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004132:	4ba0      	ldr	r3, [pc, #640]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004136:	4a9f      	ldr	r2, [pc, #636]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004138:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800413c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00a      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800414a:	4b9a      	ldr	r3, [pc, #616]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800414c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004150:	f023 0203 	bic.w	r2, r3, #3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004158:	4996      	ldr	r1, [pc, #600]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800415a:	4313      	orrs	r3, r2
 800415c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00a      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800416c:	4b91      	ldr	r3, [pc, #580]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800416e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004172:	f023 020c 	bic.w	r2, r3, #12
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417a:	498e      	ldr	r1, [pc, #568]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800417c:	4313      	orrs	r3, r2
 800417e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0304 	and.w	r3, r3, #4
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00a      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800418e:	4b89      	ldr	r3, [pc, #548]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004194:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800419c:	4985      	ldr	r1, [pc, #532]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0308 	and.w	r3, r3, #8
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00a      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041b0:	4b80      	ldr	r3, [pc, #512]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041b6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041be:	497d      	ldr	r1, [pc, #500]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0310 	and.w	r3, r3, #16
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041d2:	4b78      	ldr	r3, [pc, #480]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041e0:	4974      	ldr	r1, [pc, #464]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0320 	and.w	r3, r3, #32
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00a      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041f4:	4b6f      	ldr	r3, [pc, #444]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041fa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004202:	496c      	ldr	r1, [pc, #432]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004204:	4313      	orrs	r3, r2
 8004206:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00a      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004216:	4b67      	ldr	r3, [pc, #412]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004218:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800421c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004224:	4963      	ldr	r1, [pc, #396]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004226:	4313      	orrs	r3, r2
 8004228:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00a      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004238:	4b5e      	ldr	r3, [pc, #376]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800423a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800423e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004246:	495b      	ldr	r1, [pc, #364]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004248:	4313      	orrs	r3, r2
 800424a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800425a:	4b56      	ldr	r3, [pc, #344]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800425c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004260:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004268:	4952      	ldr	r1, [pc, #328]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800426a:	4313      	orrs	r3, r2
 800426c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00a      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800427c:	4b4d      	ldr	r3, [pc, #308]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800427e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004282:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800428a:	494a      	ldr	r1, [pc, #296]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800428c:	4313      	orrs	r3, r2
 800428e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00a      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800429e:	4b45      	ldr	r3, [pc, #276]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ac:	4941      	ldr	r1, [pc, #260]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00a      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80042c0:	4b3c      	ldr	r3, [pc, #240]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80042c6:	f023 0203 	bic.w	r2, r3, #3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042ce:	4939      	ldr	r1, [pc, #228]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d028      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042e2:	4b34      	ldr	r3, [pc, #208]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042e8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042f0:	4930      	ldr	r1, [pc, #192]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004300:	d106      	bne.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004302:	4b2c      	ldr	r3, [pc, #176]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	4a2b      	ldr	r2, [pc, #172]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004308:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800430c:	60d3      	str	r3, [r2, #12]
 800430e:	e011      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004314:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004318:	d10c      	bne.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	3304      	adds	r3, #4
 800431e:	2101      	movs	r1, #1
 8004320:	4618      	mov	r0, r3
 8004322:	f000 f8f9 	bl	8004518 <RCCEx_PLLSAI1_Config>
 8004326:	4603      	mov	r3, r0
 8004328:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800432a:	7cfb      	ldrb	r3, [r7, #19]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d001      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004330:	7cfb      	ldrb	r3, [r7, #19]
 8004332:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d04d      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004344:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004348:	d108      	bne.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800434a:	4b1a      	ldr	r3, [pc, #104]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800434c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004350:	4a18      	ldr	r2, [pc, #96]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004352:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004356:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800435a:	e012      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800435c:	4b15      	ldr	r3, [pc, #84]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800435e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004362:	4a14      	ldr	r2, [pc, #80]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004364:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004368:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800436c:	4b11      	ldr	r3, [pc, #68]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800436e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004372:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800437a:	490e      	ldr	r1, [pc, #56]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800437c:	4313      	orrs	r3, r2
 800437e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004386:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800438a:	d106      	bne.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800438c:	4b09      	ldr	r3, [pc, #36]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	4a08      	ldr	r2, [pc, #32]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004392:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004396:	60d3      	str	r3, [r2, #12]
 8004398:	e020      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800439e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043a2:	d109      	bne.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80043a4:	4b03      	ldr	r3, [pc, #12]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	4a02      	ldr	r2, [pc, #8]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043ae:	60d3      	str	r3, [r2, #12]
 80043b0:	e014      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x524>
 80043b2:	bf00      	nop
 80043b4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80043c0:	d10c      	bne.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	3304      	adds	r3, #4
 80043c6:	2101      	movs	r1, #1
 80043c8:	4618      	mov	r0, r3
 80043ca:	f000 f8a5 	bl	8004518 <RCCEx_PLLSAI1_Config>
 80043ce:	4603      	mov	r3, r0
 80043d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043d2:	7cfb      	ldrb	r3, [r7, #19]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d001      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80043d8:	7cfb      	ldrb	r3, [r7, #19]
 80043da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d028      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043e8:	4b4a      	ldr	r3, [pc, #296]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043f6:	4947      	ldr	r1, [pc, #284]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004402:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004406:	d106      	bne.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004408:	4b42      	ldr	r3, [pc, #264]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	4a41      	ldr	r2, [pc, #260]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800440e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004412:	60d3      	str	r3, [r2, #12]
 8004414:	e011      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800441a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800441e:	d10c      	bne.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	3304      	adds	r3, #4
 8004424:	2101      	movs	r1, #1
 8004426:	4618      	mov	r0, r3
 8004428:	f000 f876 	bl	8004518 <RCCEx_PLLSAI1_Config>
 800442c:	4603      	mov	r3, r0
 800442e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004430:	7cfb      	ldrb	r3, [r7, #19]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004436:	7cfb      	ldrb	r3, [r7, #19]
 8004438:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d01e      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004446:	4b33      	ldr	r3, [pc, #204]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004448:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800444c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004456:	492f      	ldr	r1, [pc, #188]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004458:	4313      	orrs	r3, r2
 800445a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004464:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004468:	d10c      	bne.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	3304      	adds	r3, #4
 800446e:	2102      	movs	r1, #2
 8004470:	4618      	mov	r0, r3
 8004472:	f000 f851 	bl	8004518 <RCCEx_PLLSAI1_Config>
 8004476:	4603      	mov	r3, r0
 8004478:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800447a:	7cfb      	ldrb	r3, [r7, #19]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004480:	7cfb      	ldrb	r3, [r7, #19]
 8004482:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00b      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004490:	4b20      	ldr	r3, [pc, #128]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004492:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004496:	f023 0204 	bic.w	r2, r3, #4
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044a0:	491c      	ldr	r1, [pc, #112]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00b      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80044b4:	4b17      	ldr	r3, [pc, #92]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80044ba:	f023 0218 	bic.w	r2, r3, #24
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044c4:	4913      	ldr	r1, [pc, #76]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d017      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80044d8:	4b0e      	ldr	r3, [pc, #56]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80044de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044e8:	490a      	ldr	r1, [pc, #40]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80044fa:	d105      	bne.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044fc:	4b05      	ldr	r3, [pc, #20]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	4a04      	ldr	r2, [pc, #16]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004502:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004506:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004508:	7cbb      	ldrb	r3, [r7, #18]
}
 800450a:	4618      	mov	r0, r3
 800450c:	3718      	adds	r7, #24
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	40021000 	.word	0x40021000

08004518 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004522:	2300      	movs	r3, #0
 8004524:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004526:	4b72      	ldr	r3, [pc, #456]	@ (80046f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	f003 0303 	and.w	r3, r3, #3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00e      	beq.n	8004550 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004532:	4b6f      	ldr	r3, [pc, #444]	@ (80046f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	f003 0203 	and.w	r2, r3, #3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	429a      	cmp	r2, r3
 8004540:	d103      	bne.n	800454a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
       ||
 8004546:	2b00      	cmp	r3, #0
 8004548:	d142      	bne.n	80045d0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	73fb      	strb	r3, [r7, #15]
 800454e:	e03f      	b.n	80045d0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2b03      	cmp	r3, #3
 8004556:	d018      	beq.n	800458a <RCCEx_PLLSAI1_Config+0x72>
 8004558:	2b03      	cmp	r3, #3
 800455a:	d825      	bhi.n	80045a8 <RCCEx_PLLSAI1_Config+0x90>
 800455c:	2b01      	cmp	r3, #1
 800455e:	d002      	beq.n	8004566 <RCCEx_PLLSAI1_Config+0x4e>
 8004560:	2b02      	cmp	r3, #2
 8004562:	d009      	beq.n	8004578 <RCCEx_PLLSAI1_Config+0x60>
 8004564:	e020      	b.n	80045a8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004566:	4b62      	ldr	r3, [pc, #392]	@ (80046f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d11d      	bne.n	80045ae <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004576:	e01a      	b.n	80045ae <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004578:	4b5d      	ldr	r3, [pc, #372]	@ (80046f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004580:	2b00      	cmp	r3, #0
 8004582:	d116      	bne.n	80045b2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004588:	e013      	b.n	80045b2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800458a:	4b59      	ldr	r3, [pc, #356]	@ (80046f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10f      	bne.n	80045b6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004596:	4b56      	ldr	r3, [pc, #344]	@ (80046f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d109      	bne.n	80045b6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80045a6:	e006      	b.n	80045b6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	73fb      	strb	r3, [r7, #15]
      break;
 80045ac:	e004      	b.n	80045b8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80045ae:	bf00      	nop
 80045b0:	e002      	b.n	80045b8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80045b2:	bf00      	nop
 80045b4:	e000      	b.n	80045b8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80045b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80045b8:	7bfb      	ldrb	r3, [r7, #15]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d108      	bne.n	80045d0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80045be:	4b4c      	ldr	r3, [pc, #304]	@ (80046f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	f023 0203 	bic.w	r2, r3, #3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4949      	ldr	r1, [pc, #292]	@ (80046f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80045d0:	7bfb      	ldrb	r3, [r7, #15]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f040 8086 	bne.w	80046e4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80045d8:	4b45      	ldr	r3, [pc, #276]	@ (80046f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a44      	ldr	r2, [pc, #272]	@ (80046f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80045e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045e4:	f7fd f982 	bl	80018ec <HAL_GetTick>
 80045e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045ea:	e009      	b.n	8004600 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045ec:	f7fd f97e 	bl	80018ec <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d902      	bls.n	8004600 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	73fb      	strb	r3, [r7, #15]
        break;
 80045fe:	e005      	b.n	800460c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004600:	4b3b      	ldr	r3, [pc, #236]	@ (80046f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1ef      	bne.n	80045ec <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800460c:	7bfb      	ldrb	r3, [r7, #15]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d168      	bne.n	80046e4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d113      	bne.n	8004640 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004618:	4b35      	ldr	r3, [pc, #212]	@ (80046f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800461a:	691a      	ldr	r2, [r3, #16]
 800461c:	4b35      	ldr	r3, [pc, #212]	@ (80046f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800461e:	4013      	ands	r3, r2
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	6892      	ldr	r2, [r2, #8]
 8004624:	0211      	lsls	r1, r2, #8
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	68d2      	ldr	r2, [r2, #12]
 800462a:	06d2      	lsls	r2, r2, #27
 800462c:	4311      	orrs	r1, r2
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	6852      	ldr	r2, [r2, #4]
 8004632:	3a01      	subs	r2, #1
 8004634:	0112      	lsls	r2, r2, #4
 8004636:	430a      	orrs	r2, r1
 8004638:	492d      	ldr	r1, [pc, #180]	@ (80046f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800463a:	4313      	orrs	r3, r2
 800463c:	610b      	str	r3, [r1, #16]
 800463e:	e02d      	b.n	800469c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d115      	bne.n	8004672 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004646:	4b2a      	ldr	r3, [pc, #168]	@ (80046f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004648:	691a      	ldr	r2, [r3, #16]
 800464a:	4b2b      	ldr	r3, [pc, #172]	@ (80046f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800464c:	4013      	ands	r3, r2
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	6892      	ldr	r2, [r2, #8]
 8004652:	0211      	lsls	r1, r2, #8
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	6912      	ldr	r2, [r2, #16]
 8004658:	0852      	lsrs	r2, r2, #1
 800465a:	3a01      	subs	r2, #1
 800465c:	0552      	lsls	r2, r2, #21
 800465e:	4311      	orrs	r1, r2
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	6852      	ldr	r2, [r2, #4]
 8004664:	3a01      	subs	r2, #1
 8004666:	0112      	lsls	r2, r2, #4
 8004668:	430a      	orrs	r2, r1
 800466a:	4921      	ldr	r1, [pc, #132]	@ (80046f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800466c:	4313      	orrs	r3, r2
 800466e:	610b      	str	r3, [r1, #16]
 8004670:	e014      	b.n	800469c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004672:	4b1f      	ldr	r3, [pc, #124]	@ (80046f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004674:	691a      	ldr	r2, [r3, #16]
 8004676:	4b21      	ldr	r3, [pc, #132]	@ (80046fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004678:	4013      	ands	r3, r2
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	6892      	ldr	r2, [r2, #8]
 800467e:	0211      	lsls	r1, r2, #8
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	6952      	ldr	r2, [r2, #20]
 8004684:	0852      	lsrs	r2, r2, #1
 8004686:	3a01      	subs	r2, #1
 8004688:	0652      	lsls	r2, r2, #25
 800468a:	4311      	orrs	r1, r2
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	6852      	ldr	r2, [r2, #4]
 8004690:	3a01      	subs	r2, #1
 8004692:	0112      	lsls	r2, r2, #4
 8004694:	430a      	orrs	r2, r1
 8004696:	4916      	ldr	r1, [pc, #88]	@ (80046f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004698:	4313      	orrs	r3, r2
 800469a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800469c:	4b14      	ldr	r3, [pc, #80]	@ (80046f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a13      	ldr	r2, [pc, #76]	@ (80046f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046a2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80046a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a8:	f7fd f920 	bl	80018ec <HAL_GetTick>
 80046ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046ae:	e009      	b.n	80046c4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046b0:	f7fd f91c 	bl	80018ec <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d902      	bls.n	80046c4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	73fb      	strb	r3, [r7, #15]
          break;
 80046c2:	e005      	b.n	80046d0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046c4:	4b0a      	ldr	r3, [pc, #40]	@ (80046f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d0ef      	beq.n	80046b0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80046d0:	7bfb      	ldrb	r3, [r7, #15]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d106      	bne.n	80046e4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80046d6:	4b06      	ldr	r3, [pc, #24]	@ (80046f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046d8:	691a      	ldr	r2, [r3, #16]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	4904      	ldr	r1, [pc, #16]	@ (80046f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80046e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	40021000 	.word	0x40021000
 80046f4:	07ff800f 	.word	0x07ff800f
 80046f8:	ff9f800f 	.word	0xff9f800f
 80046fc:	f9ff800f 	.word	0xf9ff800f

08004700 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800470a:	2300      	movs	r3, #0
 800470c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800470e:	4b72      	ldr	r3, [pc, #456]	@ (80048d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	f003 0303 	and.w	r3, r3, #3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00e      	beq.n	8004738 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800471a:	4b6f      	ldr	r3, [pc, #444]	@ (80048d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	f003 0203 	and.w	r2, r3, #3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	429a      	cmp	r2, r3
 8004728:	d103      	bne.n	8004732 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
       ||
 800472e:	2b00      	cmp	r3, #0
 8004730:	d142      	bne.n	80047b8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	73fb      	strb	r3, [r7, #15]
 8004736:	e03f      	b.n	80047b8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2b03      	cmp	r3, #3
 800473e:	d018      	beq.n	8004772 <RCCEx_PLLSAI2_Config+0x72>
 8004740:	2b03      	cmp	r3, #3
 8004742:	d825      	bhi.n	8004790 <RCCEx_PLLSAI2_Config+0x90>
 8004744:	2b01      	cmp	r3, #1
 8004746:	d002      	beq.n	800474e <RCCEx_PLLSAI2_Config+0x4e>
 8004748:	2b02      	cmp	r3, #2
 800474a:	d009      	beq.n	8004760 <RCCEx_PLLSAI2_Config+0x60>
 800474c:	e020      	b.n	8004790 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800474e:	4b62      	ldr	r3, [pc, #392]	@ (80048d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d11d      	bne.n	8004796 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800475e:	e01a      	b.n	8004796 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004760:	4b5d      	ldr	r3, [pc, #372]	@ (80048d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004768:	2b00      	cmp	r3, #0
 800476a:	d116      	bne.n	800479a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004770:	e013      	b.n	800479a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004772:	4b59      	ldr	r3, [pc, #356]	@ (80048d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10f      	bne.n	800479e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800477e:	4b56      	ldr	r3, [pc, #344]	@ (80048d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d109      	bne.n	800479e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800478e:	e006      	b.n	800479e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	73fb      	strb	r3, [r7, #15]
      break;
 8004794:	e004      	b.n	80047a0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004796:	bf00      	nop
 8004798:	e002      	b.n	80047a0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800479a:	bf00      	nop
 800479c:	e000      	b.n	80047a0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800479e:	bf00      	nop
    }

    if(status == HAL_OK)
 80047a0:	7bfb      	ldrb	r3, [r7, #15]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d108      	bne.n	80047b8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80047a6:	4b4c      	ldr	r3, [pc, #304]	@ (80048d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	f023 0203 	bic.w	r2, r3, #3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4949      	ldr	r1, [pc, #292]	@ (80048d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80047b8:	7bfb      	ldrb	r3, [r7, #15]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f040 8086 	bne.w	80048cc <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80047c0:	4b45      	ldr	r3, [pc, #276]	@ (80048d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a44      	ldr	r2, [pc, #272]	@ (80048d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047cc:	f7fd f88e 	bl	80018ec <HAL_GetTick>
 80047d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047d2:	e009      	b.n	80047e8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047d4:	f7fd f88a 	bl	80018ec <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d902      	bls.n	80047e8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	73fb      	strb	r3, [r7, #15]
        break;
 80047e6:	e005      	b.n	80047f4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047e8:	4b3b      	ldr	r3, [pc, #236]	@ (80048d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d1ef      	bne.n	80047d4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80047f4:	7bfb      	ldrb	r3, [r7, #15]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d168      	bne.n	80048cc <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d113      	bne.n	8004828 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004800:	4b35      	ldr	r3, [pc, #212]	@ (80048d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004802:	695a      	ldr	r2, [r3, #20]
 8004804:	4b35      	ldr	r3, [pc, #212]	@ (80048dc <RCCEx_PLLSAI2_Config+0x1dc>)
 8004806:	4013      	ands	r3, r2
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	6892      	ldr	r2, [r2, #8]
 800480c:	0211      	lsls	r1, r2, #8
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	68d2      	ldr	r2, [r2, #12]
 8004812:	06d2      	lsls	r2, r2, #27
 8004814:	4311      	orrs	r1, r2
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	6852      	ldr	r2, [r2, #4]
 800481a:	3a01      	subs	r2, #1
 800481c:	0112      	lsls	r2, r2, #4
 800481e:	430a      	orrs	r2, r1
 8004820:	492d      	ldr	r1, [pc, #180]	@ (80048d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004822:	4313      	orrs	r3, r2
 8004824:	614b      	str	r3, [r1, #20]
 8004826:	e02d      	b.n	8004884 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d115      	bne.n	800485a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800482e:	4b2a      	ldr	r3, [pc, #168]	@ (80048d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004830:	695a      	ldr	r2, [r3, #20]
 8004832:	4b2b      	ldr	r3, [pc, #172]	@ (80048e0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004834:	4013      	ands	r3, r2
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	6892      	ldr	r2, [r2, #8]
 800483a:	0211      	lsls	r1, r2, #8
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	6912      	ldr	r2, [r2, #16]
 8004840:	0852      	lsrs	r2, r2, #1
 8004842:	3a01      	subs	r2, #1
 8004844:	0552      	lsls	r2, r2, #21
 8004846:	4311      	orrs	r1, r2
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	6852      	ldr	r2, [r2, #4]
 800484c:	3a01      	subs	r2, #1
 800484e:	0112      	lsls	r2, r2, #4
 8004850:	430a      	orrs	r2, r1
 8004852:	4921      	ldr	r1, [pc, #132]	@ (80048d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004854:	4313      	orrs	r3, r2
 8004856:	614b      	str	r3, [r1, #20]
 8004858:	e014      	b.n	8004884 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800485a:	4b1f      	ldr	r3, [pc, #124]	@ (80048d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800485c:	695a      	ldr	r2, [r3, #20]
 800485e:	4b21      	ldr	r3, [pc, #132]	@ (80048e4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004860:	4013      	ands	r3, r2
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	6892      	ldr	r2, [r2, #8]
 8004866:	0211      	lsls	r1, r2, #8
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	6952      	ldr	r2, [r2, #20]
 800486c:	0852      	lsrs	r2, r2, #1
 800486e:	3a01      	subs	r2, #1
 8004870:	0652      	lsls	r2, r2, #25
 8004872:	4311      	orrs	r1, r2
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	6852      	ldr	r2, [r2, #4]
 8004878:	3a01      	subs	r2, #1
 800487a:	0112      	lsls	r2, r2, #4
 800487c:	430a      	orrs	r2, r1
 800487e:	4916      	ldr	r1, [pc, #88]	@ (80048d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004880:	4313      	orrs	r3, r2
 8004882:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004884:	4b14      	ldr	r3, [pc, #80]	@ (80048d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a13      	ldr	r2, [pc, #76]	@ (80048d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800488a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800488e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004890:	f7fd f82c 	bl	80018ec <HAL_GetTick>
 8004894:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004896:	e009      	b.n	80048ac <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004898:	f7fd f828 	bl	80018ec <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d902      	bls.n	80048ac <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	73fb      	strb	r3, [r7, #15]
          break;
 80048aa:	e005      	b.n	80048b8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80048ac:	4b0a      	ldr	r3, [pc, #40]	@ (80048d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d0ef      	beq.n	8004898 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80048b8:	7bfb      	ldrb	r3, [r7, #15]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d106      	bne.n	80048cc <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80048be:	4b06      	ldr	r3, [pc, #24]	@ (80048d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048c0:	695a      	ldr	r2, [r3, #20]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	4904      	ldr	r1, [pc, #16]	@ (80048d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80048cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	40021000 	.word	0x40021000
 80048dc:	07ff800f 	.word	0x07ff800f
 80048e0:	ff9f800f 	.word	0xff9f800f
 80048e4:	f9ff800f 	.word	0xf9ff800f

080048e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e042      	b.n	8004980 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004900:	2b00      	cmp	r3, #0
 8004902:	d106      	bne.n	8004912 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f7fc fdf5 	bl	80014fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2224      	movs	r2, #36	@ 0x24
 8004916:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f022 0201 	bic.w	r2, r2, #1
 8004928:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800492e:	2b00      	cmp	r3, #0
 8004930:	d002      	beq.n	8004938 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 fbb2 	bl	800509c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f8b3 	bl	8004aa4 <UART_SetConfig>
 800493e:	4603      	mov	r3, r0
 8004940:	2b01      	cmp	r3, #1
 8004942:	d101      	bne.n	8004948 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e01b      	b.n	8004980 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004956:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689a      	ldr	r2, [r3, #8]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004966:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f042 0201 	orr.w	r2, r2, #1
 8004976:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 fc31 	bl	80051e0 <UART_CheckIdleState>
 800497e:	4603      	mov	r3, r0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3708      	adds	r7, #8
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b08a      	sub	sp, #40	@ 0x28
 800498c:	af02      	add	r7, sp, #8
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	603b      	str	r3, [r7, #0]
 8004994:	4613      	mov	r3, r2
 8004996:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800499e:	2b20      	cmp	r3, #32
 80049a0:	d17b      	bne.n	8004a9a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d002      	beq.n	80049ae <HAL_UART_Transmit+0x26>
 80049a8:	88fb      	ldrh	r3, [r7, #6]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e074      	b.n	8004a9c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2221      	movs	r2, #33	@ 0x21
 80049be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049c2:	f7fc ff93 	bl	80018ec <HAL_GetTick>
 80049c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	88fa      	ldrh	r2, [r7, #6]
 80049cc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	88fa      	ldrh	r2, [r7, #6]
 80049d4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049e0:	d108      	bne.n	80049f4 <HAL_UART_Transmit+0x6c>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d104      	bne.n	80049f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80049ea:	2300      	movs	r3, #0
 80049ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	61bb      	str	r3, [r7, #24]
 80049f2:	e003      	b.n	80049fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049f8:	2300      	movs	r3, #0
 80049fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049fc:	e030      	b.n	8004a60 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	9300      	str	r3, [sp, #0]
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	2200      	movs	r2, #0
 8004a06:	2180      	movs	r1, #128	@ 0x80
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f000 fc93 	bl	8005334 <UART_WaitOnFlagUntilTimeout>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d005      	beq.n	8004a20 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2220      	movs	r2, #32
 8004a18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e03d      	b.n	8004a9c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10b      	bne.n	8004a3e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	881a      	ldrh	r2, [r3, #0]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a32:	b292      	uxth	r2, r2
 8004a34:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	3302      	adds	r3, #2
 8004a3a:	61bb      	str	r3, [r7, #24]
 8004a3c:	e007      	b.n	8004a4e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	781a      	ldrb	r2, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	3b01      	subs	r3, #1
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1c8      	bne.n	80049fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	2200      	movs	r2, #0
 8004a74:	2140      	movs	r1, #64	@ 0x40
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f000 fc5c 	bl	8005334 <UART_WaitOnFlagUntilTimeout>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d005      	beq.n	8004a8e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2220      	movs	r2, #32
 8004a86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e006      	b.n	8004a9c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2220      	movs	r2, #32
 8004a92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004a96:	2300      	movs	r3, #0
 8004a98:	e000      	b.n	8004a9c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004a9a:	2302      	movs	r3, #2
  }
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3720      	adds	r7, #32
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004aa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004aa8:	b08c      	sub	sp, #48	@ 0x30
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	689a      	ldr	r2, [r3, #8]
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	431a      	orrs	r2, r3
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	69db      	ldr	r3, [r3, #28]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	4baa      	ldr	r3, [pc, #680]	@ (8004d7c <UART_SetConfig+0x2d8>)
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	6812      	ldr	r2, [r2, #0]
 8004ada:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004adc:	430b      	orrs	r3, r1
 8004ade:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	68da      	ldr	r2, [r3, #12]
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a9f      	ldr	r2, [pc, #636]	@ (8004d80 <UART_SetConfig+0x2dc>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d004      	beq.n	8004b10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004b1a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	6812      	ldr	r2, [r2, #0]
 8004b22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b24:	430b      	orrs	r3, r1
 8004b26:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b2e:	f023 010f 	bic.w	r1, r3, #15
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a90      	ldr	r2, [pc, #576]	@ (8004d84 <UART_SetConfig+0x2e0>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d125      	bne.n	8004b94 <UART_SetConfig+0xf0>
 8004b48:	4b8f      	ldr	r3, [pc, #572]	@ (8004d88 <UART_SetConfig+0x2e4>)
 8004b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b4e:	f003 0303 	and.w	r3, r3, #3
 8004b52:	2b03      	cmp	r3, #3
 8004b54:	d81a      	bhi.n	8004b8c <UART_SetConfig+0xe8>
 8004b56:	a201      	add	r2, pc, #4	@ (adr r2, 8004b5c <UART_SetConfig+0xb8>)
 8004b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b5c:	08004b6d 	.word	0x08004b6d
 8004b60:	08004b7d 	.word	0x08004b7d
 8004b64:	08004b75 	.word	0x08004b75
 8004b68:	08004b85 	.word	0x08004b85
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b72:	e116      	b.n	8004da2 <UART_SetConfig+0x2fe>
 8004b74:	2302      	movs	r3, #2
 8004b76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b7a:	e112      	b.n	8004da2 <UART_SetConfig+0x2fe>
 8004b7c:	2304      	movs	r3, #4
 8004b7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b82:	e10e      	b.n	8004da2 <UART_SetConfig+0x2fe>
 8004b84:	2308      	movs	r3, #8
 8004b86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b8a:	e10a      	b.n	8004da2 <UART_SetConfig+0x2fe>
 8004b8c:	2310      	movs	r3, #16
 8004b8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b92:	e106      	b.n	8004da2 <UART_SetConfig+0x2fe>
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a7c      	ldr	r2, [pc, #496]	@ (8004d8c <UART_SetConfig+0x2e8>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d138      	bne.n	8004c10 <UART_SetConfig+0x16c>
 8004b9e:	4b7a      	ldr	r3, [pc, #488]	@ (8004d88 <UART_SetConfig+0x2e4>)
 8004ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ba4:	f003 030c 	and.w	r3, r3, #12
 8004ba8:	2b0c      	cmp	r3, #12
 8004baa:	d82d      	bhi.n	8004c08 <UART_SetConfig+0x164>
 8004bac:	a201      	add	r2, pc, #4	@ (adr r2, 8004bb4 <UART_SetConfig+0x110>)
 8004bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb2:	bf00      	nop
 8004bb4:	08004be9 	.word	0x08004be9
 8004bb8:	08004c09 	.word	0x08004c09
 8004bbc:	08004c09 	.word	0x08004c09
 8004bc0:	08004c09 	.word	0x08004c09
 8004bc4:	08004bf9 	.word	0x08004bf9
 8004bc8:	08004c09 	.word	0x08004c09
 8004bcc:	08004c09 	.word	0x08004c09
 8004bd0:	08004c09 	.word	0x08004c09
 8004bd4:	08004bf1 	.word	0x08004bf1
 8004bd8:	08004c09 	.word	0x08004c09
 8004bdc:	08004c09 	.word	0x08004c09
 8004be0:	08004c09 	.word	0x08004c09
 8004be4:	08004c01 	.word	0x08004c01
 8004be8:	2300      	movs	r3, #0
 8004bea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bee:	e0d8      	b.n	8004da2 <UART_SetConfig+0x2fe>
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bf6:	e0d4      	b.n	8004da2 <UART_SetConfig+0x2fe>
 8004bf8:	2304      	movs	r3, #4
 8004bfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bfe:	e0d0      	b.n	8004da2 <UART_SetConfig+0x2fe>
 8004c00:	2308      	movs	r3, #8
 8004c02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c06:	e0cc      	b.n	8004da2 <UART_SetConfig+0x2fe>
 8004c08:	2310      	movs	r3, #16
 8004c0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c0e:	e0c8      	b.n	8004da2 <UART_SetConfig+0x2fe>
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a5e      	ldr	r2, [pc, #376]	@ (8004d90 <UART_SetConfig+0x2ec>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d125      	bne.n	8004c66 <UART_SetConfig+0x1c2>
 8004c1a:	4b5b      	ldr	r3, [pc, #364]	@ (8004d88 <UART_SetConfig+0x2e4>)
 8004c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c20:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004c24:	2b30      	cmp	r3, #48	@ 0x30
 8004c26:	d016      	beq.n	8004c56 <UART_SetConfig+0x1b2>
 8004c28:	2b30      	cmp	r3, #48	@ 0x30
 8004c2a:	d818      	bhi.n	8004c5e <UART_SetConfig+0x1ba>
 8004c2c:	2b20      	cmp	r3, #32
 8004c2e:	d00a      	beq.n	8004c46 <UART_SetConfig+0x1a2>
 8004c30:	2b20      	cmp	r3, #32
 8004c32:	d814      	bhi.n	8004c5e <UART_SetConfig+0x1ba>
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d002      	beq.n	8004c3e <UART_SetConfig+0x19a>
 8004c38:	2b10      	cmp	r3, #16
 8004c3a:	d008      	beq.n	8004c4e <UART_SetConfig+0x1aa>
 8004c3c:	e00f      	b.n	8004c5e <UART_SetConfig+0x1ba>
 8004c3e:	2300      	movs	r3, #0
 8004c40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c44:	e0ad      	b.n	8004da2 <UART_SetConfig+0x2fe>
 8004c46:	2302      	movs	r3, #2
 8004c48:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c4c:	e0a9      	b.n	8004da2 <UART_SetConfig+0x2fe>
 8004c4e:	2304      	movs	r3, #4
 8004c50:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c54:	e0a5      	b.n	8004da2 <UART_SetConfig+0x2fe>
 8004c56:	2308      	movs	r3, #8
 8004c58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c5c:	e0a1      	b.n	8004da2 <UART_SetConfig+0x2fe>
 8004c5e:	2310      	movs	r3, #16
 8004c60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c64:	e09d      	b.n	8004da2 <UART_SetConfig+0x2fe>
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a4a      	ldr	r2, [pc, #296]	@ (8004d94 <UART_SetConfig+0x2f0>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d125      	bne.n	8004cbc <UART_SetConfig+0x218>
 8004c70:	4b45      	ldr	r3, [pc, #276]	@ (8004d88 <UART_SetConfig+0x2e4>)
 8004c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c76:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004c7a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c7c:	d016      	beq.n	8004cac <UART_SetConfig+0x208>
 8004c7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c80:	d818      	bhi.n	8004cb4 <UART_SetConfig+0x210>
 8004c82:	2b80      	cmp	r3, #128	@ 0x80
 8004c84:	d00a      	beq.n	8004c9c <UART_SetConfig+0x1f8>
 8004c86:	2b80      	cmp	r3, #128	@ 0x80
 8004c88:	d814      	bhi.n	8004cb4 <UART_SetConfig+0x210>
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d002      	beq.n	8004c94 <UART_SetConfig+0x1f0>
 8004c8e:	2b40      	cmp	r3, #64	@ 0x40
 8004c90:	d008      	beq.n	8004ca4 <UART_SetConfig+0x200>
 8004c92:	e00f      	b.n	8004cb4 <UART_SetConfig+0x210>
 8004c94:	2300      	movs	r3, #0
 8004c96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c9a:	e082      	b.n	8004da2 <UART_SetConfig+0x2fe>
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ca2:	e07e      	b.n	8004da2 <UART_SetConfig+0x2fe>
 8004ca4:	2304      	movs	r3, #4
 8004ca6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004caa:	e07a      	b.n	8004da2 <UART_SetConfig+0x2fe>
 8004cac:	2308      	movs	r3, #8
 8004cae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cb2:	e076      	b.n	8004da2 <UART_SetConfig+0x2fe>
 8004cb4:	2310      	movs	r3, #16
 8004cb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cba:	e072      	b.n	8004da2 <UART_SetConfig+0x2fe>
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a35      	ldr	r2, [pc, #212]	@ (8004d98 <UART_SetConfig+0x2f4>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d12a      	bne.n	8004d1c <UART_SetConfig+0x278>
 8004cc6:	4b30      	ldr	r3, [pc, #192]	@ (8004d88 <UART_SetConfig+0x2e4>)
 8004cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ccc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cd0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cd4:	d01a      	beq.n	8004d0c <UART_SetConfig+0x268>
 8004cd6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cda:	d81b      	bhi.n	8004d14 <UART_SetConfig+0x270>
 8004cdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ce0:	d00c      	beq.n	8004cfc <UART_SetConfig+0x258>
 8004ce2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ce6:	d815      	bhi.n	8004d14 <UART_SetConfig+0x270>
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <UART_SetConfig+0x250>
 8004cec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cf0:	d008      	beq.n	8004d04 <UART_SetConfig+0x260>
 8004cf2:	e00f      	b.n	8004d14 <UART_SetConfig+0x270>
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cfa:	e052      	b.n	8004da2 <UART_SetConfig+0x2fe>
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d02:	e04e      	b.n	8004da2 <UART_SetConfig+0x2fe>
 8004d04:	2304      	movs	r3, #4
 8004d06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d0a:	e04a      	b.n	8004da2 <UART_SetConfig+0x2fe>
 8004d0c:	2308      	movs	r3, #8
 8004d0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d12:	e046      	b.n	8004da2 <UART_SetConfig+0x2fe>
 8004d14:	2310      	movs	r3, #16
 8004d16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d1a:	e042      	b.n	8004da2 <UART_SetConfig+0x2fe>
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a17      	ldr	r2, [pc, #92]	@ (8004d80 <UART_SetConfig+0x2dc>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d13a      	bne.n	8004d9c <UART_SetConfig+0x2f8>
 8004d26:	4b18      	ldr	r3, [pc, #96]	@ (8004d88 <UART_SetConfig+0x2e4>)
 8004d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d2c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004d30:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d34:	d01a      	beq.n	8004d6c <UART_SetConfig+0x2c8>
 8004d36:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d3a:	d81b      	bhi.n	8004d74 <UART_SetConfig+0x2d0>
 8004d3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d40:	d00c      	beq.n	8004d5c <UART_SetConfig+0x2b8>
 8004d42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d46:	d815      	bhi.n	8004d74 <UART_SetConfig+0x2d0>
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d003      	beq.n	8004d54 <UART_SetConfig+0x2b0>
 8004d4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d50:	d008      	beq.n	8004d64 <UART_SetConfig+0x2c0>
 8004d52:	e00f      	b.n	8004d74 <UART_SetConfig+0x2d0>
 8004d54:	2300      	movs	r3, #0
 8004d56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d5a:	e022      	b.n	8004da2 <UART_SetConfig+0x2fe>
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d62:	e01e      	b.n	8004da2 <UART_SetConfig+0x2fe>
 8004d64:	2304      	movs	r3, #4
 8004d66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d6a:	e01a      	b.n	8004da2 <UART_SetConfig+0x2fe>
 8004d6c:	2308      	movs	r3, #8
 8004d6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d72:	e016      	b.n	8004da2 <UART_SetConfig+0x2fe>
 8004d74:	2310      	movs	r3, #16
 8004d76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d7a:	e012      	b.n	8004da2 <UART_SetConfig+0x2fe>
 8004d7c:	cfff69f3 	.word	0xcfff69f3
 8004d80:	40008000 	.word	0x40008000
 8004d84:	40013800 	.word	0x40013800
 8004d88:	40021000 	.word	0x40021000
 8004d8c:	40004400 	.word	0x40004400
 8004d90:	40004800 	.word	0x40004800
 8004d94:	40004c00 	.word	0x40004c00
 8004d98:	40005000 	.word	0x40005000
 8004d9c:	2310      	movs	r3, #16
 8004d9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4aae      	ldr	r2, [pc, #696]	@ (8005060 <UART_SetConfig+0x5bc>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	f040 8097 	bne.w	8004edc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004dae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004db2:	2b08      	cmp	r3, #8
 8004db4:	d823      	bhi.n	8004dfe <UART_SetConfig+0x35a>
 8004db6:	a201      	add	r2, pc, #4	@ (adr r2, 8004dbc <UART_SetConfig+0x318>)
 8004db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dbc:	08004de1 	.word	0x08004de1
 8004dc0:	08004dff 	.word	0x08004dff
 8004dc4:	08004de9 	.word	0x08004de9
 8004dc8:	08004dff 	.word	0x08004dff
 8004dcc:	08004def 	.word	0x08004def
 8004dd0:	08004dff 	.word	0x08004dff
 8004dd4:	08004dff 	.word	0x08004dff
 8004dd8:	08004dff 	.word	0x08004dff
 8004ddc:	08004df7 	.word	0x08004df7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004de0:	f7fe ff7e 	bl	8003ce0 <HAL_RCC_GetPCLK1Freq>
 8004de4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004de6:	e010      	b.n	8004e0a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004de8:	4b9e      	ldr	r3, [pc, #632]	@ (8005064 <UART_SetConfig+0x5c0>)
 8004dea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004dec:	e00d      	b.n	8004e0a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dee:	f7fe fedf 	bl	8003bb0 <HAL_RCC_GetSysClockFreq>
 8004df2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004df4:	e009      	b.n	8004e0a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004df6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dfa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004dfc:	e005      	b.n	8004e0a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004e08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 8130 	beq.w	8005072 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e16:	4a94      	ldr	r2, [pc, #592]	@ (8005068 <UART_SetConfig+0x5c4>)
 8004e18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e20:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e24:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	005b      	lsls	r3, r3, #1
 8004e2e:	4413      	add	r3, r2
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d305      	bcc.n	8004e42 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d903      	bls.n	8004e4a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004e48:	e113      	b.n	8005072 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	60bb      	str	r3, [r7, #8]
 8004e50:	60fa      	str	r2, [r7, #12]
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e56:	4a84      	ldr	r2, [pc, #528]	@ (8005068 <UART_SetConfig+0x5c4>)
 8004e58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	2200      	movs	r2, #0
 8004e60:	603b      	str	r3, [r7, #0]
 8004e62:	607a      	str	r2, [r7, #4]
 8004e64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e68:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e6c:	f7fb ff24 	bl	8000cb8 <__aeabi_uldivmod>
 8004e70:	4602      	mov	r2, r0
 8004e72:	460b      	mov	r3, r1
 8004e74:	4610      	mov	r0, r2
 8004e76:	4619      	mov	r1, r3
 8004e78:	f04f 0200 	mov.w	r2, #0
 8004e7c:	f04f 0300 	mov.w	r3, #0
 8004e80:	020b      	lsls	r3, r1, #8
 8004e82:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004e86:	0202      	lsls	r2, r0, #8
 8004e88:	6979      	ldr	r1, [r7, #20]
 8004e8a:	6849      	ldr	r1, [r1, #4]
 8004e8c:	0849      	lsrs	r1, r1, #1
 8004e8e:	2000      	movs	r0, #0
 8004e90:	460c      	mov	r4, r1
 8004e92:	4605      	mov	r5, r0
 8004e94:	eb12 0804 	adds.w	r8, r2, r4
 8004e98:	eb43 0905 	adc.w	r9, r3, r5
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	469a      	mov	sl, r3
 8004ea4:	4693      	mov	fp, r2
 8004ea6:	4652      	mov	r2, sl
 8004ea8:	465b      	mov	r3, fp
 8004eaa:	4640      	mov	r0, r8
 8004eac:	4649      	mov	r1, r9
 8004eae:	f7fb ff03 	bl	8000cb8 <__aeabi_uldivmod>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004eba:	6a3b      	ldr	r3, [r7, #32]
 8004ebc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ec0:	d308      	bcc.n	8004ed4 <UART_SetConfig+0x430>
 8004ec2:	6a3b      	ldr	r3, [r7, #32]
 8004ec4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ec8:	d204      	bcs.n	8004ed4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	6a3a      	ldr	r2, [r7, #32]
 8004ed0:	60da      	str	r2, [r3, #12]
 8004ed2:	e0ce      	b.n	8005072 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004eda:	e0ca      	b.n	8005072 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	69db      	ldr	r3, [r3, #28]
 8004ee0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ee4:	d166      	bne.n	8004fb4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004ee6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004eea:	2b08      	cmp	r3, #8
 8004eec:	d827      	bhi.n	8004f3e <UART_SetConfig+0x49a>
 8004eee:	a201      	add	r2, pc, #4	@ (adr r2, 8004ef4 <UART_SetConfig+0x450>)
 8004ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef4:	08004f19 	.word	0x08004f19
 8004ef8:	08004f21 	.word	0x08004f21
 8004efc:	08004f29 	.word	0x08004f29
 8004f00:	08004f3f 	.word	0x08004f3f
 8004f04:	08004f2f 	.word	0x08004f2f
 8004f08:	08004f3f 	.word	0x08004f3f
 8004f0c:	08004f3f 	.word	0x08004f3f
 8004f10:	08004f3f 	.word	0x08004f3f
 8004f14:	08004f37 	.word	0x08004f37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f18:	f7fe fee2 	bl	8003ce0 <HAL_RCC_GetPCLK1Freq>
 8004f1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f1e:	e014      	b.n	8004f4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f20:	f7fe fef4 	bl	8003d0c <HAL_RCC_GetPCLK2Freq>
 8004f24:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f26:	e010      	b.n	8004f4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f28:	4b4e      	ldr	r3, [pc, #312]	@ (8005064 <UART_SetConfig+0x5c0>)
 8004f2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f2c:	e00d      	b.n	8004f4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f2e:	f7fe fe3f 	bl	8003bb0 <HAL_RCC_GetSysClockFreq>
 8004f32:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f34:	e009      	b.n	8004f4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f3c:	e005      	b.n	8004f4a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004f48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f000 8090 	beq.w	8005072 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f56:	4a44      	ldr	r2, [pc, #272]	@ (8005068 <UART_SetConfig+0x5c4>)
 8004f58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f60:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f64:	005a      	lsls	r2, r3, #1
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	085b      	lsrs	r3, r3, #1
 8004f6c:	441a      	add	r2, r3
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f76:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f78:	6a3b      	ldr	r3, [r7, #32]
 8004f7a:	2b0f      	cmp	r3, #15
 8004f7c:	d916      	bls.n	8004fac <UART_SetConfig+0x508>
 8004f7e:	6a3b      	ldr	r3, [r7, #32]
 8004f80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f84:	d212      	bcs.n	8004fac <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f86:	6a3b      	ldr	r3, [r7, #32]
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	f023 030f 	bic.w	r3, r3, #15
 8004f8e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f90:	6a3b      	ldr	r3, [r7, #32]
 8004f92:	085b      	lsrs	r3, r3, #1
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	f003 0307 	and.w	r3, r3, #7
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	8bfb      	ldrh	r3, [r7, #30]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	8bfa      	ldrh	r2, [r7, #30]
 8004fa8:	60da      	str	r2, [r3, #12]
 8004faa:	e062      	b.n	8005072 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004fb2:	e05e      	b.n	8005072 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fb4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004fb8:	2b08      	cmp	r3, #8
 8004fba:	d828      	bhi.n	800500e <UART_SetConfig+0x56a>
 8004fbc:	a201      	add	r2, pc, #4	@ (adr r2, 8004fc4 <UART_SetConfig+0x520>)
 8004fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc2:	bf00      	nop
 8004fc4:	08004fe9 	.word	0x08004fe9
 8004fc8:	08004ff1 	.word	0x08004ff1
 8004fcc:	08004ff9 	.word	0x08004ff9
 8004fd0:	0800500f 	.word	0x0800500f
 8004fd4:	08004fff 	.word	0x08004fff
 8004fd8:	0800500f 	.word	0x0800500f
 8004fdc:	0800500f 	.word	0x0800500f
 8004fe0:	0800500f 	.word	0x0800500f
 8004fe4:	08005007 	.word	0x08005007
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fe8:	f7fe fe7a 	bl	8003ce0 <HAL_RCC_GetPCLK1Freq>
 8004fec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004fee:	e014      	b.n	800501a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ff0:	f7fe fe8c 	bl	8003d0c <HAL_RCC_GetPCLK2Freq>
 8004ff4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ff6:	e010      	b.n	800501a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ff8:	4b1a      	ldr	r3, [pc, #104]	@ (8005064 <UART_SetConfig+0x5c0>)
 8004ffa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ffc:	e00d      	b.n	800501a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ffe:	f7fe fdd7 	bl	8003bb0 <HAL_RCC_GetSysClockFreq>
 8005002:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005004:	e009      	b.n	800501a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005006:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800500a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800500c:	e005      	b.n	800501a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800500e:	2300      	movs	r3, #0
 8005010:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005018:	bf00      	nop
    }

    if (pclk != 0U)
 800501a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501c:	2b00      	cmp	r3, #0
 800501e:	d028      	beq.n	8005072 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005024:	4a10      	ldr	r2, [pc, #64]	@ (8005068 <UART_SetConfig+0x5c4>)
 8005026:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800502a:	461a      	mov	r2, r3
 800502c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	085b      	lsrs	r3, r3, #1
 8005038:	441a      	add	r2, r3
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005042:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005044:	6a3b      	ldr	r3, [r7, #32]
 8005046:	2b0f      	cmp	r3, #15
 8005048:	d910      	bls.n	800506c <UART_SetConfig+0x5c8>
 800504a:	6a3b      	ldr	r3, [r7, #32]
 800504c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005050:	d20c      	bcs.n	800506c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005052:	6a3b      	ldr	r3, [r7, #32]
 8005054:	b29a      	uxth	r2, r3
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	60da      	str	r2, [r3, #12]
 800505c:	e009      	b.n	8005072 <UART_SetConfig+0x5ce>
 800505e:	bf00      	nop
 8005060:	40008000 	.word	0x40008000
 8005064:	00f42400 	.word	0x00f42400
 8005068:	08009f60 	.word	0x08009f60
      }
      else
      {
        ret = HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	2201      	movs	r2, #1
 8005076:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	2201      	movs	r2, #1
 800507e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	2200      	movs	r2, #0
 8005086:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	2200      	movs	r2, #0
 800508c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800508e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005092:	4618      	mov	r0, r3
 8005094:	3730      	adds	r7, #48	@ 0x30
 8005096:	46bd      	mov	sp, r7
 8005098:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800509c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050a8:	f003 0308 	and.w	r3, r3, #8
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00a      	beq.n	80050c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	430a      	orrs	r2, r1
 80050c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00a      	beq.n	80050e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	430a      	orrs	r2, r1
 80050e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00a      	beq.n	800510a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	430a      	orrs	r2, r1
 8005108:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800510e:	f003 0304 	and.w	r3, r3, #4
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00a      	beq.n	800512c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	430a      	orrs	r2, r1
 800512a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005130:	f003 0310 	and.w	r3, r3, #16
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00a      	beq.n	800514e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	430a      	orrs	r2, r1
 800514c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005152:	f003 0320 	and.w	r3, r3, #32
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00a      	beq.n	8005170 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	430a      	orrs	r2, r1
 800516e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005178:	2b00      	cmp	r3, #0
 800517a:	d01a      	beq.n	80051b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	430a      	orrs	r2, r1
 8005190:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005196:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800519a:	d10a      	bne.n	80051b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00a      	beq.n	80051d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	430a      	orrs	r2, r1
 80051d2:	605a      	str	r2, [r3, #4]
  }
}
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b098      	sub	sp, #96	@ 0x60
 80051e4:	af02      	add	r7, sp, #8
 80051e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051f0:	f7fc fb7c 	bl	80018ec <HAL_GetTick>
 80051f4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0308 	and.w	r3, r3, #8
 8005200:	2b08      	cmp	r3, #8
 8005202:	d12f      	bne.n	8005264 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005204:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005208:	9300      	str	r3, [sp, #0]
 800520a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800520c:	2200      	movs	r2, #0
 800520e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 f88e 	bl	8005334 <UART_WaitOnFlagUntilTimeout>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d022      	beq.n	8005264 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005226:	e853 3f00 	ldrex	r3, [r3]
 800522a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800522c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800522e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005232:	653b      	str	r3, [r7, #80]	@ 0x50
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	461a      	mov	r2, r3
 800523a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800523c:	647b      	str	r3, [r7, #68]	@ 0x44
 800523e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005240:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005242:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005244:	e841 2300 	strex	r3, r2, [r1]
 8005248:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800524a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1e6      	bne.n	800521e <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2220      	movs	r2, #32
 8005254:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e063      	b.n	800532c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0304 	and.w	r3, r3, #4
 800526e:	2b04      	cmp	r3, #4
 8005270:	d149      	bne.n	8005306 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005272:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005276:	9300      	str	r3, [sp, #0]
 8005278:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800527a:	2200      	movs	r2, #0
 800527c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 f857 	bl	8005334 <UART_WaitOnFlagUntilTimeout>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d03c      	beq.n	8005306 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005294:	e853 3f00 	ldrex	r3, [r3]
 8005298:	623b      	str	r3, [r7, #32]
   return(result);
 800529a:	6a3b      	ldr	r3, [r7, #32]
 800529c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	461a      	mov	r2, r3
 80052a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80052ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052b2:	e841 2300 	strex	r3, r2, [r1]
 80052b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1e6      	bne.n	800528c <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	3308      	adds	r3, #8
 80052c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	e853 3f00 	ldrex	r3, [r3]
 80052cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f023 0301 	bic.w	r3, r3, #1
 80052d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	3308      	adds	r3, #8
 80052dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052de:	61fa      	str	r2, [r7, #28]
 80052e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e2:	69b9      	ldr	r1, [r7, #24]
 80052e4:	69fa      	ldr	r2, [r7, #28]
 80052e6:	e841 2300 	strex	r3, r2, [r1]
 80052ea:	617b      	str	r3, [r7, #20]
   return(result);
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1e5      	bne.n	80052be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2220      	movs	r2, #32
 80052f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e012      	b.n	800532c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2220      	movs	r2, #32
 800530a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2220      	movs	r2, #32
 8005312:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3758      	adds	r7, #88	@ 0x58
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	603b      	str	r3, [r7, #0]
 8005340:	4613      	mov	r3, r2
 8005342:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005344:	e04f      	b.n	80053e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800534c:	d04b      	beq.n	80053e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800534e:	f7fc facd 	bl	80018ec <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	429a      	cmp	r2, r3
 800535c:	d302      	bcc.n	8005364 <UART_WaitOnFlagUntilTimeout+0x30>
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d101      	bne.n	8005368 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e04e      	b.n	8005406 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0304 	and.w	r3, r3, #4
 8005372:	2b00      	cmp	r3, #0
 8005374:	d037      	beq.n	80053e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	2b80      	cmp	r3, #128	@ 0x80
 800537a:	d034      	beq.n	80053e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	2b40      	cmp	r3, #64	@ 0x40
 8005380:	d031      	beq.n	80053e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	69db      	ldr	r3, [r3, #28]
 8005388:	f003 0308 	and.w	r3, r3, #8
 800538c:	2b08      	cmp	r3, #8
 800538e:	d110      	bne.n	80053b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2208      	movs	r2, #8
 8005396:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f000 f838 	bl	800540e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2208      	movs	r2, #8
 80053a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e029      	b.n	8005406 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	69db      	ldr	r3, [r3, #28]
 80053b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053c0:	d111      	bne.n	80053e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80053ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f000 f81e 	bl	800540e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2220      	movs	r2, #32
 80053d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e00f      	b.n	8005406 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	69da      	ldr	r2, [r3, #28]
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	4013      	ands	r3, r2
 80053f0:	68ba      	ldr	r2, [r7, #8]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	bf0c      	ite	eq
 80053f6:	2301      	moveq	r3, #1
 80053f8:	2300      	movne	r3, #0
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	461a      	mov	r2, r3
 80053fe:	79fb      	ldrb	r3, [r7, #7]
 8005400:	429a      	cmp	r2, r3
 8005402:	d0a0      	beq.n	8005346 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800540e:	b480      	push	{r7}
 8005410:	b095      	sub	sp, #84	@ 0x54
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800541e:	e853 3f00 	ldrex	r3, [r3]
 8005422:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005426:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800542a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	461a      	mov	r2, r3
 8005432:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005434:	643b      	str	r3, [r7, #64]	@ 0x40
 8005436:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005438:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800543a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800543c:	e841 2300 	strex	r3, r2, [r1]
 8005440:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1e6      	bne.n	8005416 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	3308      	adds	r3, #8
 800544e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005450:	6a3b      	ldr	r3, [r7, #32]
 8005452:	e853 3f00 	ldrex	r3, [r3]
 8005456:	61fb      	str	r3, [r7, #28]
   return(result);
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800545e:	f023 0301 	bic.w	r3, r3, #1
 8005462:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	3308      	adds	r3, #8
 800546a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800546c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800546e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005470:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005472:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005474:	e841 2300 	strex	r3, r2, [r1]
 8005478:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800547a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1e3      	bne.n	8005448 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005484:	2b01      	cmp	r3, #1
 8005486:	d118      	bne.n	80054ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	e853 3f00 	ldrex	r3, [r3]
 8005494:	60bb      	str	r3, [r7, #8]
   return(result);
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	f023 0310 	bic.w	r3, r3, #16
 800549c:	647b      	str	r3, [r7, #68]	@ 0x44
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	461a      	mov	r2, r3
 80054a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054a6:	61bb      	str	r3, [r7, #24]
 80054a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054aa:	6979      	ldr	r1, [r7, #20]
 80054ac:	69ba      	ldr	r2, [r7, #24]
 80054ae:	e841 2300 	strex	r3, r2, [r1]
 80054b2:	613b      	str	r3, [r7, #16]
   return(result);
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1e6      	bne.n	8005488 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2220      	movs	r2, #32
 80054be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80054ce:	bf00      	nop
 80054d0:	3754      	adds	r7, #84	@ 0x54
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80054da:	b480      	push	{r7}
 80054dc:	b085      	sub	sp, #20
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d101      	bne.n	80054f0 <HAL_UARTEx_DisableFifoMode+0x16>
 80054ec:	2302      	movs	r3, #2
 80054ee:	e027      	b.n	8005540 <HAL_UARTEx_DisableFifoMode+0x66>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2224      	movs	r2, #36	@ 0x24
 80054fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f022 0201 	bic.w	r2, r2, #1
 8005516:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800551e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2220      	movs	r2, #32
 8005532:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3714      	adds	r7, #20
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800555c:	2b01      	cmp	r3, #1
 800555e:	d101      	bne.n	8005564 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005560:	2302      	movs	r3, #2
 8005562:	e02d      	b.n	80055c0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2224      	movs	r2, #36	@ 0x24
 8005570:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f022 0201 	bic.w	r2, r2, #1
 800558a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	683a      	ldr	r2, [r7, #0]
 800559c:	430a      	orrs	r2, r1
 800559e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 f84f 	bl	8005644 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2220      	movs	r2, #32
 80055b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d101      	bne.n	80055e0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80055dc:	2302      	movs	r3, #2
 80055de:	e02d      	b.n	800563c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2224      	movs	r2, #36	@ 0x24
 80055ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 0201 	bic.w	r2, r2, #1
 8005606:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	430a      	orrs	r2, r1
 800561a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 f811 	bl	8005644 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2220      	movs	r2, #32
 800562e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3710      	adds	r7, #16
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005650:	2b00      	cmp	r3, #0
 8005652:	d108      	bne.n	8005666 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005664:	e031      	b.n	80056ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005666:	2308      	movs	r3, #8
 8005668:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800566a:	2308      	movs	r3, #8
 800566c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	0e5b      	lsrs	r3, r3, #25
 8005676:	b2db      	uxtb	r3, r3
 8005678:	f003 0307 	and.w	r3, r3, #7
 800567c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	0f5b      	lsrs	r3, r3, #29
 8005686:	b2db      	uxtb	r3, r3
 8005688:	f003 0307 	and.w	r3, r3, #7
 800568c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800568e:	7bbb      	ldrb	r3, [r7, #14]
 8005690:	7b3a      	ldrb	r2, [r7, #12]
 8005692:	4911      	ldr	r1, [pc, #68]	@ (80056d8 <UARTEx_SetNbDataToProcess+0x94>)
 8005694:	5c8a      	ldrb	r2, [r1, r2]
 8005696:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800569a:	7b3a      	ldrb	r2, [r7, #12]
 800569c:	490f      	ldr	r1, [pc, #60]	@ (80056dc <UARTEx_SetNbDataToProcess+0x98>)
 800569e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056ac:	7bfb      	ldrb	r3, [r7, #15]
 80056ae:	7b7a      	ldrb	r2, [r7, #13]
 80056b0:	4909      	ldr	r1, [pc, #36]	@ (80056d8 <UARTEx_SetNbDataToProcess+0x94>)
 80056b2:	5c8a      	ldrb	r2, [r1, r2]
 80056b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80056b8:	7b7a      	ldrb	r2, [r7, #13]
 80056ba:	4908      	ldr	r1, [pc, #32]	@ (80056dc <UARTEx_SetNbDataToProcess+0x98>)
 80056bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056be:	fb93 f3f2 	sdiv	r3, r3, r2
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80056ca:	bf00      	nop
 80056cc:	3714      	adds	r7, #20
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	08009f78 	.word	0x08009f78
 80056dc:	08009f80 	.word	0x08009f80

080056e0 <__cvt>:
 80056e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056e4:	ec57 6b10 	vmov	r6, r7, d0
 80056e8:	2f00      	cmp	r7, #0
 80056ea:	460c      	mov	r4, r1
 80056ec:	4619      	mov	r1, r3
 80056ee:	463b      	mov	r3, r7
 80056f0:	bfbb      	ittet	lt
 80056f2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80056f6:	461f      	movlt	r7, r3
 80056f8:	2300      	movge	r3, #0
 80056fa:	232d      	movlt	r3, #45	@ 0x2d
 80056fc:	700b      	strb	r3, [r1, #0]
 80056fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005700:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005704:	4691      	mov	r9, r2
 8005706:	f023 0820 	bic.w	r8, r3, #32
 800570a:	bfbc      	itt	lt
 800570c:	4632      	movlt	r2, r6
 800570e:	4616      	movlt	r6, r2
 8005710:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005714:	d005      	beq.n	8005722 <__cvt+0x42>
 8005716:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800571a:	d100      	bne.n	800571e <__cvt+0x3e>
 800571c:	3401      	adds	r4, #1
 800571e:	2102      	movs	r1, #2
 8005720:	e000      	b.n	8005724 <__cvt+0x44>
 8005722:	2103      	movs	r1, #3
 8005724:	ab03      	add	r3, sp, #12
 8005726:	9301      	str	r3, [sp, #4]
 8005728:	ab02      	add	r3, sp, #8
 800572a:	9300      	str	r3, [sp, #0]
 800572c:	ec47 6b10 	vmov	d0, r6, r7
 8005730:	4653      	mov	r3, sl
 8005732:	4622      	mov	r2, r4
 8005734:	f001 f968 	bl	8006a08 <_dtoa_r>
 8005738:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800573c:	4605      	mov	r5, r0
 800573e:	d119      	bne.n	8005774 <__cvt+0x94>
 8005740:	f019 0f01 	tst.w	r9, #1
 8005744:	d00e      	beq.n	8005764 <__cvt+0x84>
 8005746:	eb00 0904 	add.w	r9, r0, r4
 800574a:	2200      	movs	r2, #0
 800574c:	2300      	movs	r3, #0
 800574e:	4630      	mov	r0, r6
 8005750:	4639      	mov	r1, r7
 8005752:	f7fb f9d1 	bl	8000af8 <__aeabi_dcmpeq>
 8005756:	b108      	cbz	r0, 800575c <__cvt+0x7c>
 8005758:	f8cd 900c 	str.w	r9, [sp, #12]
 800575c:	2230      	movs	r2, #48	@ 0x30
 800575e:	9b03      	ldr	r3, [sp, #12]
 8005760:	454b      	cmp	r3, r9
 8005762:	d31e      	bcc.n	80057a2 <__cvt+0xc2>
 8005764:	9b03      	ldr	r3, [sp, #12]
 8005766:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005768:	1b5b      	subs	r3, r3, r5
 800576a:	4628      	mov	r0, r5
 800576c:	6013      	str	r3, [r2, #0]
 800576e:	b004      	add	sp, #16
 8005770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005774:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005778:	eb00 0904 	add.w	r9, r0, r4
 800577c:	d1e5      	bne.n	800574a <__cvt+0x6a>
 800577e:	7803      	ldrb	r3, [r0, #0]
 8005780:	2b30      	cmp	r3, #48	@ 0x30
 8005782:	d10a      	bne.n	800579a <__cvt+0xba>
 8005784:	2200      	movs	r2, #0
 8005786:	2300      	movs	r3, #0
 8005788:	4630      	mov	r0, r6
 800578a:	4639      	mov	r1, r7
 800578c:	f7fb f9b4 	bl	8000af8 <__aeabi_dcmpeq>
 8005790:	b918      	cbnz	r0, 800579a <__cvt+0xba>
 8005792:	f1c4 0401 	rsb	r4, r4, #1
 8005796:	f8ca 4000 	str.w	r4, [sl]
 800579a:	f8da 3000 	ldr.w	r3, [sl]
 800579e:	4499      	add	r9, r3
 80057a0:	e7d3      	b.n	800574a <__cvt+0x6a>
 80057a2:	1c59      	adds	r1, r3, #1
 80057a4:	9103      	str	r1, [sp, #12]
 80057a6:	701a      	strb	r2, [r3, #0]
 80057a8:	e7d9      	b.n	800575e <__cvt+0x7e>

080057aa <__exponent>:
 80057aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057ac:	2900      	cmp	r1, #0
 80057ae:	bfba      	itte	lt
 80057b0:	4249      	neglt	r1, r1
 80057b2:	232d      	movlt	r3, #45	@ 0x2d
 80057b4:	232b      	movge	r3, #43	@ 0x2b
 80057b6:	2909      	cmp	r1, #9
 80057b8:	7002      	strb	r2, [r0, #0]
 80057ba:	7043      	strb	r3, [r0, #1]
 80057bc:	dd29      	ble.n	8005812 <__exponent+0x68>
 80057be:	f10d 0307 	add.w	r3, sp, #7
 80057c2:	461d      	mov	r5, r3
 80057c4:	270a      	movs	r7, #10
 80057c6:	461a      	mov	r2, r3
 80057c8:	fbb1 f6f7 	udiv	r6, r1, r7
 80057cc:	fb07 1416 	mls	r4, r7, r6, r1
 80057d0:	3430      	adds	r4, #48	@ 0x30
 80057d2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80057d6:	460c      	mov	r4, r1
 80057d8:	2c63      	cmp	r4, #99	@ 0x63
 80057da:	f103 33ff 	add.w	r3, r3, #4294967295
 80057de:	4631      	mov	r1, r6
 80057e0:	dcf1      	bgt.n	80057c6 <__exponent+0x1c>
 80057e2:	3130      	adds	r1, #48	@ 0x30
 80057e4:	1e94      	subs	r4, r2, #2
 80057e6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80057ea:	1c41      	adds	r1, r0, #1
 80057ec:	4623      	mov	r3, r4
 80057ee:	42ab      	cmp	r3, r5
 80057f0:	d30a      	bcc.n	8005808 <__exponent+0x5e>
 80057f2:	f10d 0309 	add.w	r3, sp, #9
 80057f6:	1a9b      	subs	r3, r3, r2
 80057f8:	42ac      	cmp	r4, r5
 80057fa:	bf88      	it	hi
 80057fc:	2300      	movhi	r3, #0
 80057fe:	3302      	adds	r3, #2
 8005800:	4403      	add	r3, r0
 8005802:	1a18      	subs	r0, r3, r0
 8005804:	b003      	add	sp, #12
 8005806:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005808:	f813 6b01 	ldrb.w	r6, [r3], #1
 800580c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005810:	e7ed      	b.n	80057ee <__exponent+0x44>
 8005812:	2330      	movs	r3, #48	@ 0x30
 8005814:	3130      	adds	r1, #48	@ 0x30
 8005816:	7083      	strb	r3, [r0, #2]
 8005818:	70c1      	strb	r1, [r0, #3]
 800581a:	1d03      	adds	r3, r0, #4
 800581c:	e7f1      	b.n	8005802 <__exponent+0x58>
	...

08005820 <_printf_float>:
 8005820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005824:	b08d      	sub	sp, #52	@ 0x34
 8005826:	460c      	mov	r4, r1
 8005828:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800582c:	4616      	mov	r6, r2
 800582e:	461f      	mov	r7, r3
 8005830:	4605      	mov	r5, r0
 8005832:	f000 ffe1 	bl	80067f8 <_localeconv_r>
 8005836:	6803      	ldr	r3, [r0, #0]
 8005838:	9304      	str	r3, [sp, #16]
 800583a:	4618      	mov	r0, r3
 800583c:	f7fa fd30 	bl	80002a0 <strlen>
 8005840:	2300      	movs	r3, #0
 8005842:	930a      	str	r3, [sp, #40]	@ 0x28
 8005844:	f8d8 3000 	ldr.w	r3, [r8]
 8005848:	9005      	str	r0, [sp, #20]
 800584a:	3307      	adds	r3, #7
 800584c:	f023 0307 	bic.w	r3, r3, #7
 8005850:	f103 0208 	add.w	r2, r3, #8
 8005854:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005858:	f8d4 b000 	ldr.w	fp, [r4]
 800585c:	f8c8 2000 	str.w	r2, [r8]
 8005860:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005864:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005868:	9307      	str	r3, [sp, #28]
 800586a:	f8cd 8018 	str.w	r8, [sp, #24]
 800586e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005872:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005876:	4b9c      	ldr	r3, [pc, #624]	@ (8005ae8 <_printf_float+0x2c8>)
 8005878:	f04f 32ff 	mov.w	r2, #4294967295
 800587c:	f7fb f96e 	bl	8000b5c <__aeabi_dcmpun>
 8005880:	bb70      	cbnz	r0, 80058e0 <_printf_float+0xc0>
 8005882:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005886:	4b98      	ldr	r3, [pc, #608]	@ (8005ae8 <_printf_float+0x2c8>)
 8005888:	f04f 32ff 	mov.w	r2, #4294967295
 800588c:	f7fb f948 	bl	8000b20 <__aeabi_dcmple>
 8005890:	bb30      	cbnz	r0, 80058e0 <_printf_float+0xc0>
 8005892:	2200      	movs	r2, #0
 8005894:	2300      	movs	r3, #0
 8005896:	4640      	mov	r0, r8
 8005898:	4649      	mov	r1, r9
 800589a:	f7fb f937 	bl	8000b0c <__aeabi_dcmplt>
 800589e:	b110      	cbz	r0, 80058a6 <_printf_float+0x86>
 80058a0:	232d      	movs	r3, #45	@ 0x2d
 80058a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058a6:	4a91      	ldr	r2, [pc, #580]	@ (8005aec <_printf_float+0x2cc>)
 80058a8:	4b91      	ldr	r3, [pc, #580]	@ (8005af0 <_printf_float+0x2d0>)
 80058aa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80058ae:	bf94      	ite	ls
 80058b0:	4690      	movls	r8, r2
 80058b2:	4698      	movhi	r8, r3
 80058b4:	2303      	movs	r3, #3
 80058b6:	6123      	str	r3, [r4, #16]
 80058b8:	f02b 0304 	bic.w	r3, fp, #4
 80058bc:	6023      	str	r3, [r4, #0]
 80058be:	f04f 0900 	mov.w	r9, #0
 80058c2:	9700      	str	r7, [sp, #0]
 80058c4:	4633      	mov	r3, r6
 80058c6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80058c8:	4621      	mov	r1, r4
 80058ca:	4628      	mov	r0, r5
 80058cc:	f000 f9d2 	bl	8005c74 <_printf_common>
 80058d0:	3001      	adds	r0, #1
 80058d2:	f040 808d 	bne.w	80059f0 <_printf_float+0x1d0>
 80058d6:	f04f 30ff 	mov.w	r0, #4294967295
 80058da:	b00d      	add	sp, #52	@ 0x34
 80058dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058e0:	4642      	mov	r2, r8
 80058e2:	464b      	mov	r3, r9
 80058e4:	4640      	mov	r0, r8
 80058e6:	4649      	mov	r1, r9
 80058e8:	f7fb f938 	bl	8000b5c <__aeabi_dcmpun>
 80058ec:	b140      	cbz	r0, 8005900 <_printf_float+0xe0>
 80058ee:	464b      	mov	r3, r9
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	bfbc      	itt	lt
 80058f4:	232d      	movlt	r3, #45	@ 0x2d
 80058f6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80058fa:	4a7e      	ldr	r2, [pc, #504]	@ (8005af4 <_printf_float+0x2d4>)
 80058fc:	4b7e      	ldr	r3, [pc, #504]	@ (8005af8 <_printf_float+0x2d8>)
 80058fe:	e7d4      	b.n	80058aa <_printf_float+0x8a>
 8005900:	6863      	ldr	r3, [r4, #4]
 8005902:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005906:	9206      	str	r2, [sp, #24]
 8005908:	1c5a      	adds	r2, r3, #1
 800590a:	d13b      	bne.n	8005984 <_printf_float+0x164>
 800590c:	2306      	movs	r3, #6
 800590e:	6063      	str	r3, [r4, #4]
 8005910:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005914:	2300      	movs	r3, #0
 8005916:	6022      	str	r2, [r4, #0]
 8005918:	9303      	str	r3, [sp, #12]
 800591a:	ab0a      	add	r3, sp, #40	@ 0x28
 800591c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005920:	ab09      	add	r3, sp, #36	@ 0x24
 8005922:	9300      	str	r3, [sp, #0]
 8005924:	6861      	ldr	r1, [r4, #4]
 8005926:	ec49 8b10 	vmov	d0, r8, r9
 800592a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800592e:	4628      	mov	r0, r5
 8005930:	f7ff fed6 	bl	80056e0 <__cvt>
 8005934:	9b06      	ldr	r3, [sp, #24]
 8005936:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005938:	2b47      	cmp	r3, #71	@ 0x47
 800593a:	4680      	mov	r8, r0
 800593c:	d129      	bne.n	8005992 <_printf_float+0x172>
 800593e:	1cc8      	adds	r0, r1, #3
 8005940:	db02      	blt.n	8005948 <_printf_float+0x128>
 8005942:	6863      	ldr	r3, [r4, #4]
 8005944:	4299      	cmp	r1, r3
 8005946:	dd41      	ble.n	80059cc <_printf_float+0x1ac>
 8005948:	f1aa 0a02 	sub.w	sl, sl, #2
 800594c:	fa5f fa8a 	uxtb.w	sl, sl
 8005950:	3901      	subs	r1, #1
 8005952:	4652      	mov	r2, sl
 8005954:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005958:	9109      	str	r1, [sp, #36]	@ 0x24
 800595a:	f7ff ff26 	bl	80057aa <__exponent>
 800595e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005960:	1813      	adds	r3, r2, r0
 8005962:	2a01      	cmp	r2, #1
 8005964:	4681      	mov	r9, r0
 8005966:	6123      	str	r3, [r4, #16]
 8005968:	dc02      	bgt.n	8005970 <_printf_float+0x150>
 800596a:	6822      	ldr	r2, [r4, #0]
 800596c:	07d2      	lsls	r2, r2, #31
 800596e:	d501      	bpl.n	8005974 <_printf_float+0x154>
 8005970:	3301      	adds	r3, #1
 8005972:	6123      	str	r3, [r4, #16]
 8005974:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005978:	2b00      	cmp	r3, #0
 800597a:	d0a2      	beq.n	80058c2 <_printf_float+0xa2>
 800597c:	232d      	movs	r3, #45	@ 0x2d
 800597e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005982:	e79e      	b.n	80058c2 <_printf_float+0xa2>
 8005984:	9a06      	ldr	r2, [sp, #24]
 8005986:	2a47      	cmp	r2, #71	@ 0x47
 8005988:	d1c2      	bne.n	8005910 <_printf_float+0xf0>
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1c0      	bne.n	8005910 <_printf_float+0xf0>
 800598e:	2301      	movs	r3, #1
 8005990:	e7bd      	b.n	800590e <_printf_float+0xee>
 8005992:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005996:	d9db      	bls.n	8005950 <_printf_float+0x130>
 8005998:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800599c:	d118      	bne.n	80059d0 <_printf_float+0x1b0>
 800599e:	2900      	cmp	r1, #0
 80059a0:	6863      	ldr	r3, [r4, #4]
 80059a2:	dd0b      	ble.n	80059bc <_printf_float+0x19c>
 80059a4:	6121      	str	r1, [r4, #16]
 80059a6:	b913      	cbnz	r3, 80059ae <_printf_float+0x18e>
 80059a8:	6822      	ldr	r2, [r4, #0]
 80059aa:	07d0      	lsls	r0, r2, #31
 80059ac:	d502      	bpl.n	80059b4 <_printf_float+0x194>
 80059ae:	3301      	adds	r3, #1
 80059b0:	440b      	add	r3, r1
 80059b2:	6123      	str	r3, [r4, #16]
 80059b4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80059b6:	f04f 0900 	mov.w	r9, #0
 80059ba:	e7db      	b.n	8005974 <_printf_float+0x154>
 80059bc:	b913      	cbnz	r3, 80059c4 <_printf_float+0x1a4>
 80059be:	6822      	ldr	r2, [r4, #0]
 80059c0:	07d2      	lsls	r2, r2, #31
 80059c2:	d501      	bpl.n	80059c8 <_printf_float+0x1a8>
 80059c4:	3302      	adds	r3, #2
 80059c6:	e7f4      	b.n	80059b2 <_printf_float+0x192>
 80059c8:	2301      	movs	r3, #1
 80059ca:	e7f2      	b.n	80059b2 <_printf_float+0x192>
 80059cc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80059d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80059d2:	4299      	cmp	r1, r3
 80059d4:	db05      	blt.n	80059e2 <_printf_float+0x1c2>
 80059d6:	6823      	ldr	r3, [r4, #0]
 80059d8:	6121      	str	r1, [r4, #16]
 80059da:	07d8      	lsls	r0, r3, #31
 80059dc:	d5ea      	bpl.n	80059b4 <_printf_float+0x194>
 80059de:	1c4b      	adds	r3, r1, #1
 80059e0:	e7e7      	b.n	80059b2 <_printf_float+0x192>
 80059e2:	2900      	cmp	r1, #0
 80059e4:	bfd4      	ite	le
 80059e6:	f1c1 0202 	rsble	r2, r1, #2
 80059ea:	2201      	movgt	r2, #1
 80059ec:	4413      	add	r3, r2
 80059ee:	e7e0      	b.n	80059b2 <_printf_float+0x192>
 80059f0:	6823      	ldr	r3, [r4, #0]
 80059f2:	055a      	lsls	r2, r3, #21
 80059f4:	d407      	bmi.n	8005a06 <_printf_float+0x1e6>
 80059f6:	6923      	ldr	r3, [r4, #16]
 80059f8:	4642      	mov	r2, r8
 80059fa:	4631      	mov	r1, r6
 80059fc:	4628      	mov	r0, r5
 80059fe:	47b8      	blx	r7
 8005a00:	3001      	adds	r0, #1
 8005a02:	d12b      	bne.n	8005a5c <_printf_float+0x23c>
 8005a04:	e767      	b.n	80058d6 <_printf_float+0xb6>
 8005a06:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005a0a:	f240 80dd 	bls.w	8005bc8 <_printf_float+0x3a8>
 8005a0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005a12:	2200      	movs	r2, #0
 8005a14:	2300      	movs	r3, #0
 8005a16:	f7fb f86f 	bl	8000af8 <__aeabi_dcmpeq>
 8005a1a:	2800      	cmp	r0, #0
 8005a1c:	d033      	beq.n	8005a86 <_printf_float+0x266>
 8005a1e:	4a37      	ldr	r2, [pc, #220]	@ (8005afc <_printf_float+0x2dc>)
 8005a20:	2301      	movs	r3, #1
 8005a22:	4631      	mov	r1, r6
 8005a24:	4628      	mov	r0, r5
 8005a26:	47b8      	blx	r7
 8005a28:	3001      	adds	r0, #1
 8005a2a:	f43f af54 	beq.w	80058d6 <_printf_float+0xb6>
 8005a2e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005a32:	4543      	cmp	r3, r8
 8005a34:	db02      	blt.n	8005a3c <_printf_float+0x21c>
 8005a36:	6823      	ldr	r3, [r4, #0]
 8005a38:	07d8      	lsls	r0, r3, #31
 8005a3a:	d50f      	bpl.n	8005a5c <_printf_float+0x23c>
 8005a3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a40:	4631      	mov	r1, r6
 8005a42:	4628      	mov	r0, r5
 8005a44:	47b8      	blx	r7
 8005a46:	3001      	adds	r0, #1
 8005a48:	f43f af45 	beq.w	80058d6 <_printf_float+0xb6>
 8005a4c:	f04f 0900 	mov.w	r9, #0
 8005a50:	f108 38ff 	add.w	r8, r8, #4294967295
 8005a54:	f104 0a1a 	add.w	sl, r4, #26
 8005a58:	45c8      	cmp	r8, r9
 8005a5a:	dc09      	bgt.n	8005a70 <_printf_float+0x250>
 8005a5c:	6823      	ldr	r3, [r4, #0]
 8005a5e:	079b      	lsls	r3, r3, #30
 8005a60:	f100 8103 	bmi.w	8005c6a <_printf_float+0x44a>
 8005a64:	68e0      	ldr	r0, [r4, #12]
 8005a66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a68:	4298      	cmp	r0, r3
 8005a6a:	bfb8      	it	lt
 8005a6c:	4618      	movlt	r0, r3
 8005a6e:	e734      	b.n	80058da <_printf_float+0xba>
 8005a70:	2301      	movs	r3, #1
 8005a72:	4652      	mov	r2, sl
 8005a74:	4631      	mov	r1, r6
 8005a76:	4628      	mov	r0, r5
 8005a78:	47b8      	blx	r7
 8005a7a:	3001      	adds	r0, #1
 8005a7c:	f43f af2b 	beq.w	80058d6 <_printf_float+0xb6>
 8005a80:	f109 0901 	add.w	r9, r9, #1
 8005a84:	e7e8      	b.n	8005a58 <_printf_float+0x238>
 8005a86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	dc39      	bgt.n	8005b00 <_printf_float+0x2e0>
 8005a8c:	4a1b      	ldr	r2, [pc, #108]	@ (8005afc <_printf_float+0x2dc>)
 8005a8e:	2301      	movs	r3, #1
 8005a90:	4631      	mov	r1, r6
 8005a92:	4628      	mov	r0, r5
 8005a94:	47b8      	blx	r7
 8005a96:	3001      	adds	r0, #1
 8005a98:	f43f af1d 	beq.w	80058d6 <_printf_float+0xb6>
 8005a9c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005aa0:	ea59 0303 	orrs.w	r3, r9, r3
 8005aa4:	d102      	bne.n	8005aac <_printf_float+0x28c>
 8005aa6:	6823      	ldr	r3, [r4, #0]
 8005aa8:	07d9      	lsls	r1, r3, #31
 8005aaa:	d5d7      	bpl.n	8005a5c <_printf_float+0x23c>
 8005aac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ab0:	4631      	mov	r1, r6
 8005ab2:	4628      	mov	r0, r5
 8005ab4:	47b8      	blx	r7
 8005ab6:	3001      	adds	r0, #1
 8005ab8:	f43f af0d 	beq.w	80058d6 <_printf_float+0xb6>
 8005abc:	f04f 0a00 	mov.w	sl, #0
 8005ac0:	f104 0b1a 	add.w	fp, r4, #26
 8005ac4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ac6:	425b      	negs	r3, r3
 8005ac8:	4553      	cmp	r3, sl
 8005aca:	dc01      	bgt.n	8005ad0 <_printf_float+0x2b0>
 8005acc:	464b      	mov	r3, r9
 8005ace:	e793      	b.n	80059f8 <_printf_float+0x1d8>
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	465a      	mov	r2, fp
 8005ad4:	4631      	mov	r1, r6
 8005ad6:	4628      	mov	r0, r5
 8005ad8:	47b8      	blx	r7
 8005ada:	3001      	adds	r0, #1
 8005adc:	f43f aefb 	beq.w	80058d6 <_printf_float+0xb6>
 8005ae0:	f10a 0a01 	add.w	sl, sl, #1
 8005ae4:	e7ee      	b.n	8005ac4 <_printf_float+0x2a4>
 8005ae6:	bf00      	nop
 8005ae8:	7fefffff 	.word	0x7fefffff
 8005aec:	08009f88 	.word	0x08009f88
 8005af0:	08009f8c 	.word	0x08009f8c
 8005af4:	08009f90 	.word	0x08009f90
 8005af8:	08009f94 	.word	0x08009f94
 8005afc:	08009f98 	.word	0x08009f98
 8005b00:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005b02:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005b06:	4553      	cmp	r3, sl
 8005b08:	bfa8      	it	ge
 8005b0a:	4653      	movge	r3, sl
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	4699      	mov	r9, r3
 8005b10:	dc36      	bgt.n	8005b80 <_printf_float+0x360>
 8005b12:	f04f 0b00 	mov.w	fp, #0
 8005b16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b1a:	f104 021a 	add.w	r2, r4, #26
 8005b1e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005b20:	9306      	str	r3, [sp, #24]
 8005b22:	eba3 0309 	sub.w	r3, r3, r9
 8005b26:	455b      	cmp	r3, fp
 8005b28:	dc31      	bgt.n	8005b8e <_printf_float+0x36e>
 8005b2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b2c:	459a      	cmp	sl, r3
 8005b2e:	dc3a      	bgt.n	8005ba6 <_printf_float+0x386>
 8005b30:	6823      	ldr	r3, [r4, #0]
 8005b32:	07da      	lsls	r2, r3, #31
 8005b34:	d437      	bmi.n	8005ba6 <_printf_float+0x386>
 8005b36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b38:	ebaa 0903 	sub.w	r9, sl, r3
 8005b3c:	9b06      	ldr	r3, [sp, #24]
 8005b3e:	ebaa 0303 	sub.w	r3, sl, r3
 8005b42:	4599      	cmp	r9, r3
 8005b44:	bfa8      	it	ge
 8005b46:	4699      	movge	r9, r3
 8005b48:	f1b9 0f00 	cmp.w	r9, #0
 8005b4c:	dc33      	bgt.n	8005bb6 <_printf_float+0x396>
 8005b4e:	f04f 0800 	mov.w	r8, #0
 8005b52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b56:	f104 0b1a 	add.w	fp, r4, #26
 8005b5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b5c:	ebaa 0303 	sub.w	r3, sl, r3
 8005b60:	eba3 0309 	sub.w	r3, r3, r9
 8005b64:	4543      	cmp	r3, r8
 8005b66:	f77f af79 	ble.w	8005a5c <_printf_float+0x23c>
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	465a      	mov	r2, fp
 8005b6e:	4631      	mov	r1, r6
 8005b70:	4628      	mov	r0, r5
 8005b72:	47b8      	blx	r7
 8005b74:	3001      	adds	r0, #1
 8005b76:	f43f aeae 	beq.w	80058d6 <_printf_float+0xb6>
 8005b7a:	f108 0801 	add.w	r8, r8, #1
 8005b7e:	e7ec      	b.n	8005b5a <_printf_float+0x33a>
 8005b80:	4642      	mov	r2, r8
 8005b82:	4631      	mov	r1, r6
 8005b84:	4628      	mov	r0, r5
 8005b86:	47b8      	blx	r7
 8005b88:	3001      	adds	r0, #1
 8005b8a:	d1c2      	bne.n	8005b12 <_printf_float+0x2f2>
 8005b8c:	e6a3      	b.n	80058d6 <_printf_float+0xb6>
 8005b8e:	2301      	movs	r3, #1
 8005b90:	4631      	mov	r1, r6
 8005b92:	4628      	mov	r0, r5
 8005b94:	9206      	str	r2, [sp, #24]
 8005b96:	47b8      	blx	r7
 8005b98:	3001      	adds	r0, #1
 8005b9a:	f43f ae9c 	beq.w	80058d6 <_printf_float+0xb6>
 8005b9e:	9a06      	ldr	r2, [sp, #24]
 8005ba0:	f10b 0b01 	add.w	fp, fp, #1
 8005ba4:	e7bb      	b.n	8005b1e <_printf_float+0x2fe>
 8005ba6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005baa:	4631      	mov	r1, r6
 8005bac:	4628      	mov	r0, r5
 8005bae:	47b8      	blx	r7
 8005bb0:	3001      	adds	r0, #1
 8005bb2:	d1c0      	bne.n	8005b36 <_printf_float+0x316>
 8005bb4:	e68f      	b.n	80058d6 <_printf_float+0xb6>
 8005bb6:	9a06      	ldr	r2, [sp, #24]
 8005bb8:	464b      	mov	r3, r9
 8005bba:	4442      	add	r2, r8
 8005bbc:	4631      	mov	r1, r6
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	47b8      	blx	r7
 8005bc2:	3001      	adds	r0, #1
 8005bc4:	d1c3      	bne.n	8005b4e <_printf_float+0x32e>
 8005bc6:	e686      	b.n	80058d6 <_printf_float+0xb6>
 8005bc8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005bcc:	f1ba 0f01 	cmp.w	sl, #1
 8005bd0:	dc01      	bgt.n	8005bd6 <_printf_float+0x3b6>
 8005bd2:	07db      	lsls	r3, r3, #31
 8005bd4:	d536      	bpl.n	8005c44 <_printf_float+0x424>
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	4642      	mov	r2, r8
 8005bda:	4631      	mov	r1, r6
 8005bdc:	4628      	mov	r0, r5
 8005bde:	47b8      	blx	r7
 8005be0:	3001      	adds	r0, #1
 8005be2:	f43f ae78 	beq.w	80058d6 <_printf_float+0xb6>
 8005be6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bea:	4631      	mov	r1, r6
 8005bec:	4628      	mov	r0, r5
 8005bee:	47b8      	blx	r7
 8005bf0:	3001      	adds	r0, #1
 8005bf2:	f43f ae70 	beq.w	80058d6 <_printf_float+0xb6>
 8005bf6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c02:	f7fa ff79 	bl	8000af8 <__aeabi_dcmpeq>
 8005c06:	b9c0      	cbnz	r0, 8005c3a <_printf_float+0x41a>
 8005c08:	4653      	mov	r3, sl
 8005c0a:	f108 0201 	add.w	r2, r8, #1
 8005c0e:	4631      	mov	r1, r6
 8005c10:	4628      	mov	r0, r5
 8005c12:	47b8      	blx	r7
 8005c14:	3001      	adds	r0, #1
 8005c16:	d10c      	bne.n	8005c32 <_printf_float+0x412>
 8005c18:	e65d      	b.n	80058d6 <_printf_float+0xb6>
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	465a      	mov	r2, fp
 8005c1e:	4631      	mov	r1, r6
 8005c20:	4628      	mov	r0, r5
 8005c22:	47b8      	blx	r7
 8005c24:	3001      	adds	r0, #1
 8005c26:	f43f ae56 	beq.w	80058d6 <_printf_float+0xb6>
 8005c2a:	f108 0801 	add.w	r8, r8, #1
 8005c2e:	45d0      	cmp	r8, sl
 8005c30:	dbf3      	blt.n	8005c1a <_printf_float+0x3fa>
 8005c32:	464b      	mov	r3, r9
 8005c34:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005c38:	e6df      	b.n	80059fa <_printf_float+0x1da>
 8005c3a:	f04f 0800 	mov.w	r8, #0
 8005c3e:	f104 0b1a 	add.w	fp, r4, #26
 8005c42:	e7f4      	b.n	8005c2e <_printf_float+0x40e>
 8005c44:	2301      	movs	r3, #1
 8005c46:	4642      	mov	r2, r8
 8005c48:	e7e1      	b.n	8005c0e <_printf_float+0x3ee>
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	464a      	mov	r2, r9
 8005c4e:	4631      	mov	r1, r6
 8005c50:	4628      	mov	r0, r5
 8005c52:	47b8      	blx	r7
 8005c54:	3001      	adds	r0, #1
 8005c56:	f43f ae3e 	beq.w	80058d6 <_printf_float+0xb6>
 8005c5a:	f108 0801 	add.w	r8, r8, #1
 8005c5e:	68e3      	ldr	r3, [r4, #12]
 8005c60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005c62:	1a5b      	subs	r3, r3, r1
 8005c64:	4543      	cmp	r3, r8
 8005c66:	dcf0      	bgt.n	8005c4a <_printf_float+0x42a>
 8005c68:	e6fc      	b.n	8005a64 <_printf_float+0x244>
 8005c6a:	f04f 0800 	mov.w	r8, #0
 8005c6e:	f104 0919 	add.w	r9, r4, #25
 8005c72:	e7f4      	b.n	8005c5e <_printf_float+0x43e>

08005c74 <_printf_common>:
 8005c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c78:	4616      	mov	r6, r2
 8005c7a:	4698      	mov	r8, r3
 8005c7c:	688a      	ldr	r2, [r1, #8]
 8005c7e:	690b      	ldr	r3, [r1, #16]
 8005c80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c84:	4293      	cmp	r3, r2
 8005c86:	bfb8      	it	lt
 8005c88:	4613      	movlt	r3, r2
 8005c8a:	6033      	str	r3, [r6, #0]
 8005c8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005c90:	4607      	mov	r7, r0
 8005c92:	460c      	mov	r4, r1
 8005c94:	b10a      	cbz	r2, 8005c9a <_printf_common+0x26>
 8005c96:	3301      	adds	r3, #1
 8005c98:	6033      	str	r3, [r6, #0]
 8005c9a:	6823      	ldr	r3, [r4, #0]
 8005c9c:	0699      	lsls	r1, r3, #26
 8005c9e:	bf42      	ittt	mi
 8005ca0:	6833      	ldrmi	r3, [r6, #0]
 8005ca2:	3302      	addmi	r3, #2
 8005ca4:	6033      	strmi	r3, [r6, #0]
 8005ca6:	6825      	ldr	r5, [r4, #0]
 8005ca8:	f015 0506 	ands.w	r5, r5, #6
 8005cac:	d106      	bne.n	8005cbc <_printf_common+0x48>
 8005cae:	f104 0a19 	add.w	sl, r4, #25
 8005cb2:	68e3      	ldr	r3, [r4, #12]
 8005cb4:	6832      	ldr	r2, [r6, #0]
 8005cb6:	1a9b      	subs	r3, r3, r2
 8005cb8:	42ab      	cmp	r3, r5
 8005cba:	dc26      	bgt.n	8005d0a <_printf_common+0x96>
 8005cbc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005cc0:	6822      	ldr	r2, [r4, #0]
 8005cc2:	3b00      	subs	r3, #0
 8005cc4:	bf18      	it	ne
 8005cc6:	2301      	movne	r3, #1
 8005cc8:	0692      	lsls	r2, r2, #26
 8005cca:	d42b      	bmi.n	8005d24 <_printf_common+0xb0>
 8005ccc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005cd0:	4641      	mov	r1, r8
 8005cd2:	4638      	mov	r0, r7
 8005cd4:	47c8      	blx	r9
 8005cd6:	3001      	adds	r0, #1
 8005cd8:	d01e      	beq.n	8005d18 <_printf_common+0xa4>
 8005cda:	6823      	ldr	r3, [r4, #0]
 8005cdc:	6922      	ldr	r2, [r4, #16]
 8005cde:	f003 0306 	and.w	r3, r3, #6
 8005ce2:	2b04      	cmp	r3, #4
 8005ce4:	bf02      	ittt	eq
 8005ce6:	68e5      	ldreq	r5, [r4, #12]
 8005ce8:	6833      	ldreq	r3, [r6, #0]
 8005cea:	1aed      	subeq	r5, r5, r3
 8005cec:	68a3      	ldr	r3, [r4, #8]
 8005cee:	bf0c      	ite	eq
 8005cf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cf4:	2500      	movne	r5, #0
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	bfc4      	itt	gt
 8005cfa:	1a9b      	subgt	r3, r3, r2
 8005cfc:	18ed      	addgt	r5, r5, r3
 8005cfe:	2600      	movs	r6, #0
 8005d00:	341a      	adds	r4, #26
 8005d02:	42b5      	cmp	r5, r6
 8005d04:	d11a      	bne.n	8005d3c <_printf_common+0xc8>
 8005d06:	2000      	movs	r0, #0
 8005d08:	e008      	b.n	8005d1c <_printf_common+0xa8>
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	4652      	mov	r2, sl
 8005d0e:	4641      	mov	r1, r8
 8005d10:	4638      	mov	r0, r7
 8005d12:	47c8      	blx	r9
 8005d14:	3001      	adds	r0, #1
 8005d16:	d103      	bne.n	8005d20 <_printf_common+0xac>
 8005d18:	f04f 30ff 	mov.w	r0, #4294967295
 8005d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d20:	3501      	adds	r5, #1
 8005d22:	e7c6      	b.n	8005cb2 <_printf_common+0x3e>
 8005d24:	18e1      	adds	r1, r4, r3
 8005d26:	1c5a      	adds	r2, r3, #1
 8005d28:	2030      	movs	r0, #48	@ 0x30
 8005d2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d2e:	4422      	add	r2, r4
 8005d30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d38:	3302      	adds	r3, #2
 8005d3a:	e7c7      	b.n	8005ccc <_printf_common+0x58>
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	4622      	mov	r2, r4
 8005d40:	4641      	mov	r1, r8
 8005d42:	4638      	mov	r0, r7
 8005d44:	47c8      	blx	r9
 8005d46:	3001      	adds	r0, #1
 8005d48:	d0e6      	beq.n	8005d18 <_printf_common+0xa4>
 8005d4a:	3601      	adds	r6, #1
 8005d4c:	e7d9      	b.n	8005d02 <_printf_common+0x8e>
	...

08005d50 <_printf_i>:
 8005d50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d54:	7e0f      	ldrb	r7, [r1, #24]
 8005d56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d58:	2f78      	cmp	r7, #120	@ 0x78
 8005d5a:	4691      	mov	r9, r2
 8005d5c:	4680      	mov	r8, r0
 8005d5e:	460c      	mov	r4, r1
 8005d60:	469a      	mov	sl, r3
 8005d62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d66:	d807      	bhi.n	8005d78 <_printf_i+0x28>
 8005d68:	2f62      	cmp	r7, #98	@ 0x62
 8005d6a:	d80a      	bhi.n	8005d82 <_printf_i+0x32>
 8005d6c:	2f00      	cmp	r7, #0
 8005d6e:	f000 80d2 	beq.w	8005f16 <_printf_i+0x1c6>
 8005d72:	2f58      	cmp	r7, #88	@ 0x58
 8005d74:	f000 80b9 	beq.w	8005eea <_printf_i+0x19a>
 8005d78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d80:	e03a      	b.n	8005df8 <_printf_i+0xa8>
 8005d82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005d86:	2b15      	cmp	r3, #21
 8005d88:	d8f6      	bhi.n	8005d78 <_printf_i+0x28>
 8005d8a:	a101      	add	r1, pc, #4	@ (adr r1, 8005d90 <_printf_i+0x40>)
 8005d8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d90:	08005de9 	.word	0x08005de9
 8005d94:	08005dfd 	.word	0x08005dfd
 8005d98:	08005d79 	.word	0x08005d79
 8005d9c:	08005d79 	.word	0x08005d79
 8005da0:	08005d79 	.word	0x08005d79
 8005da4:	08005d79 	.word	0x08005d79
 8005da8:	08005dfd 	.word	0x08005dfd
 8005dac:	08005d79 	.word	0x08005d79
 8005db0:	08005d79 	.word	0x08005d79
 8005db4:	08005d79 	.word	0x08005d79
 8005db8:	08005d79 	.word	0x08005d79
 8005dbc:	08005efd 	.word	0x08005efd
 8005dc0:	08005e27 	.word	0x08005e27
 8005dc4:	08005eb7 	.word	0x08005eb7
 8005dc8:	08005d79 	.word	0x08005d79
 8005dcc:	08005d79 	.word	0x08005d79
 8005dd0:	08005f1f 	.word	0x08005f1f
 8005dd4:	08005d79 	.word	0x08005d79
 8005dd8:	08005e27 	.word	0x08005e27
 8005ddc:	08005d79 	.word	0x08005d79
 8005de0:	08005d79 	.word	0x08005d79
 8005de4:	08005ebf 	.word	0x08005ebf
 8005de8:	6833      	ldr	r3, [r6, #0]
 8005dea:	1d1a      	adds	r2, r3, #4
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	6032      	str	r2, [r6, #0]
 8005df0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005df4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e09d      	b.n	8005f38 <_printf_i+0x1e8>
 8005dfc:	6833      	ldr	r3, [r6, #0]
 8005dfe:	6820      	ldr	r0, [r4, #0]
 8005e00:	1d19      	adds	r1, r3, #4
 8005e02:	6031      	str	r1, [r6, #0]
 8005e04:	0606      	lsls	r6, r0, #24
 8005e06:	d501      	bpl.n	8005e0c <_printf_i+0xbc>
 8005e08:	681d      	ldr	r5, [r3, #0]
 8005e0a:	e003      	b.n	8005e14 <_printf_i+0xc4>
 8005e0c:	0645      	lsls	r5, r0, #25
 8005e0e:	d5fb      	bpl.n	8005e08 <_printf_i+0xb8>
 8005e10:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e14:	2d00      	cmp	r5, #0
 8005e16:	da03      	bge.n	8005e20 <_printf_i+0xd0>
 8005e18:	232d      	movs	r3, #45	@ 0x2d
 8005e1a:	426d      	negs	r5, r5
 8005e1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e20:	4859      	ldr	r0, [pc, #356]	@ (8005f88 <_printf_i+0x238>)
 8005e22:	230a      	movs	r3, #10
 8005e24:	e011      	b.n	8005e4a <_printf_i+0xfa>
 8005e26:	6821      	ldr	r1, [r4, #0]
 8005e28:	6833      	ldr	r3, [r6, #0]
 8005e2a:	0608      	lsls	r0, r1, #24
 8005e2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e30:	d402      	bmi.n	8005e38 <_printf_i+0xe8>
 8005e32:	0649      	lsls	r1, r1, #25
 8005e34:	bf48      	it	mi
 8005e36:	b2ad      	uxthmi	r5, r5
 8005e38:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e3a:	4853      	ldr	r0, [pc, #332]	@ (8005f88 <_printf_i+0x238>)
 8005e3c:	6033      	str	r3, [r6, #0]
 8005e3e:	bf14      	ite	ne
 8005e40:	230a      	movne	r3, #10
 8005e42:	2308      	moveq	r3, #8
 8005e44:	2100      	movs	r1, #0
 8005e46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e4a:	6866      	ldr	r6, [r4, #4]
 8005e4c:	60a6      	str	r6, [r4, #8]
 8005e4e:	2e00      	cmp	r6, #0
 8005e50:	bfa2      	ittt	ge
 8005e52:	6821      	ldrge	r1, [r4, #0]
 8005e54:	f021 0104 	bicge.w	r1, r1, #4
 8005e58:	6021      	strge	r1, [r4, #0]
 8005e5a:	b90d      	cbnz	r5, 8005e60 <_printf_i+0x110>
 8005e5c:	2e00      	cmp	r6, #0
 8005e5e:	d04b      	beq.n	8005ef8 <_printf_i+0x1a8>
 8005e60:	4616      	mov	r6, r2
 8005e62:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e66:	fb03 5711 	mls	r7, r3, r1, r5
 8005e6a:	5dc7      	ldrb	r7, [r0, r7]
 8005e6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e70:	462f      	mov	r7, r5
 8005e72:	42bb      	cmp	r3, r7
 8005e74:	460d      	mov	r5, r1
 8005e76:	d9f4      	bls.n	8005e62 <_printf_i+0x112>
 8005e78:	2b08      	cmp	r3, #8
 8005e7a:	d10b      	bne.n	8005e94 <_printf_i+0x144>
 8005e7c:	6823      	ldr	r3, [r4, #0]
 8005e7e:	07df      	lsls	r7, r3, #31
 8005e80:	d508      	bpl.n	8005e94 <_printf_i+0x144>
 8005e82:	6923      	ldr	r3, [r4, #16]
 8005e84:	6861      	ldr	r1, [r4, #4]
 8005e86:	4299      	cmp	r1, r3
 8005e88:	bfde      	ittt	le
 8005e8a:	2330      	movle	r3, #48	@ 0x30
 8005e8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e90:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e94:	1b92      	subs	r2, r2, r6
 8005e96:	6122      	str	r2, [r4, #16]
 8005e98:	f8cd a000 	str.w	sl, [sp]
 8005e9c:	464b      	mov	r3, r9
 8005e9e:	aa03      	add	r2, sp, #12
 8005ea0:	4621      	mov	r1, r4
 8005ea2:	4640      	mov	r0, r8
 8005ea4:	f7ff fee6 	bl	8005c74 <_printf_common>
 8005ea8:	3001      	adds	r0, #1
 8005eaa:	d14a      	bne.n	8005f42 <_printf_i+0x1f2>
 8005eac:	f04f 30ff 	mov.w	r0, #4294967295
 8005eb0:	b004      	add	sp, #16
 8005eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eb6:	6823      	ldr	r3, [r4, #0]
 8005eb8:	f043 0320 	orr.w	r3, r3, #32
 8005ebc:	6023      	str	r3, [r4, #0]
 8005ebe:	4833      	ldr	r0, [pc, #204]	@ (8005f8c <_printf_i+0x23c>)
 8005ec0:	2778      	movs	r7, #120	@ 0x78
 8005ec2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005ec6:	6823      	ldr	r3, [r4, #0]
 8005ec8:	6831      	ldr	r1, [r6, #0]
 8005eca:	061f      	lsls	r7, r3, #24
 8005ecc:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ed0:	d402      	bmi.n	8005ed8 <_printf_i+0x188>
 8005ed2:	065f      	lsls	r7, r3, #25
 8005ed4:	bf48      	it	mi
 8005ed6:	b2ad      	uxthmi	r5, r5
 8005ed8:	6031      	str	r1, [r6, #0]
 8005eda:	07d9      	lsls	r1, r3, #31
 8005edc:	bf44      	itt	mi
 8005ede:	f043 0320 	orrmi.w	r3, r3, #32
 8005ee2:	6023      	strmi	r3, [r4, #0]
 8005ee4:	b11d      	cbz	r5, 8005eee <_printf_i+0x19e>
 8005ee6:	2310      	movs	r3, #16
 8005ee8:	e7ac      	b.n	8005e44 <_printf_i+0xf4>
 8005eea:	4827      	ldr	r0, [pc, #156]	@ (8005f88 <_printf_i+0x238>)
 8005eec:	e7e9      	b.n	8005ec2 <_printf_i+0x172>
 8005eee:	6823      	ldr	r3, [r4, #0]
 8005ef0:	f023 0320 	bic.w	r3, r3, #32
 8005ef4:	6023      	str	r3, [r4, #0]
 8005ef6:	e7f6      	b.n	8005ee6 <_printf_i+0x196>
 8005ef8:	4616      	mov	r6, r2
 8005efa:	e7bd      	b.n	8005e78 <_printf_i+0x128>
 8005efc:	6833      	ldr	r3, [r6, #0]
 8005efe:	6825      	ldr	r5, [r4, #0]
 8005f00:	6961      	ldr	r1, [r4, #20]
 8005f02:	1d18      	adds	r0, r3, #4
 8005f04:	6030      	str	r0, [r6, #0]
 8005f06:	062e      	lsls	r6, r5, #24
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	d501      	bpl.n	8005f10 <_printf_i+0x1c0>
 8005f0c:	6019      	str	r1, [r3, #0]
 8005f0e:	e002      	b.n	8005f16 <_printf_i+0x1c6>
 8005f10:	0668      	lsls	r0, r5, #25
 8005f12:	d5fb      	bpl.n	8005f0c <_printf_i+0x1bc>
 8005f14:	8019      	strh	r1, [r3, #0]
 8005f16:	2300      	movs	r3, #0
 8005f18:	6123      	str	r3, [r4, #16]
 8005f1a:	4616      	mov	r6, r2
 8005f1c:	e7bc      	b.n	8005e98 <_printf_i+0x148>
 8005f1e:	6833      	ldr	r3, [r6, #0]
 8005f20:	1d1a      	adds	r2, r3, #4
 8005f22:	6032      	str	r2, [r6, #0]
 8005f24:	681e      	ldr	r6, [r3, #0]
 8005f26:	6862      	ldr	r2, [r4, #4]
 8005f28:	2100      	movs	r1, #0
 8005f2a:	4630      	mov	r0, r6
 8005f2c:	f7fa f968 	bl	8000200 <memchr>
 8005f30:	b108      	cbz	r0, 8005f36 <_printf_i+0x1e6>
 8005f32:	1b80      	subs	r0, r0, r6
 8005f34:	6060      	str	r0, [r4, #4]
 8005f36:	6863      	ldr	r3, [r4, #4]
 8005f38:	6123      	str	r3, [r4, #16]
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f40:	e7aa      	b.n	8005e98 <_printf_i+0x148>
 8005f42:	6923      	ldr	r3, [r4, #16]
 8005f44:	4632      	mov	r2, r6
 8005f46:	4649      	mov	r1, r9
 8005f48:	4640      	mov	r0, r8
 8005f4a:	47d0      	blx	sl
 8005f4c:	3001      	adds	r0, #1
 8005f4e:	d0ad      	beq.n	8005eac <_printf_i+0x15c>
 8005f50:	6823      	ldr	r3, [r4, #0]
 8005f52:	079b      	lsls	r3, r3, #30
 8005f54:	d413      	bmi.n	8005f7e <_printf_i+0x22e>
 8005f56:	68e0      	ldr	r0, [r4, #12]
 8005f58:	9b03      	ldr	r3, [sp, #12]
 8005f5a:	4298      	cmp	r0, r3
 8005f5c:	bfb8      	it	lt
 8005f5e:	4618      	movlt	r0, r3
 8005f60:	e7a6      	b.n	8005eb0 <_printf_i+0x160>
 8005f62:	2301      	movs	r3, #1
 8005f64:	4632      	mov	r2, r6
 8005f66:	4649      	mov	r1, r9
 8005f68:	4640      	mov	r0, r8
 8005f6a:	47d0      	blx	sl
 8005f6c:	3001      	adds	r0, #1
 8005f6e:	d09d      	beq.n	8005eac <_printf_i+0x15c>
 8005f70:	3501      	adds	r5, #1
 8005f72:	68e3      	ldr	r3, [r4, #12]
 8005f74:	9903      	ldr	r1, [sp, #12]
 8005f76:	1a5b      	subs	r3, r3, r1
 8005f78:	42ab      	cmp	r3, r5
 8005f7a:	dcf2      	bgt.n	8005f62 <_printf_i+0x212>
 8005f7c:	e7eb      	b.n	8005f56 <_printf_i+0x206>
 8005f7e:	2500      	movs	r5, #0
 8005f80:	f104 0619 	add.w	r6, r4, #25
 8005f84:	e7f5      	b.n	8005f72 <_printf_i+0x222>
 8005f86:	bf00      	nop
 8005f88:	08009f9a 	.word	0x08009f9a
 8005f8c:	08009fab 	.word	0x08009fab

08005f90 <_scanf_float>:
 8005f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f94:	b087      	sub	sp, #28
 8005f96:	4617      	mov	r7, r2
 8005f98:	9303      	str	r3, [sp, #12]
 8005f9a:	688b      	ldr	r3, [r1, #8]
 8005f9c:	1e5a      	subs	r2, r3, #1
 8005f9e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005fa2:	bf81      	itttt	hi
 8005fa4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005fa8:	eb03 0b05 	addhi.w	fp, r3, r5
 8005fac:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005fb0:	608b      	strhi	r3, [r1, #8]
 8005fb2:	680b      	ldr	r3, [r1, #0]
 8005fb4:	460a      	mov	r2, r1
 8005fb6:	f04f 0500 	mov.w	r5, #0
 8005fba:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005fbe:	f842 3b1c 	str.w	r3, [r2], #28
 8005fc2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005fc6:	4680      	mov	r8, r0
 8005fc8:	460c      	mov	r4, r1
 8005fca:	bf98      	it	ls
 8005fcc:	f04f 0b00 	movls.w	fp, #0
 8005fd0:	9201      	str	r2, [sp, #4]
 8005fd2:	4616      	mov	r6, r2
 8005fd4:	46aa      	mov	sl, r5
 8005fd6:	46a9      	mov	r9, r5
 8005fd8:	9502      	str	r5, [sp, #8]
 8005fda:	68a2      	ldr	r2, [r4, #8]
 8005fdc:	b152      	cbz	r2, 8005ff4 <_scanf_float+0x64>
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	2b4e      	cmp	r3, #78	@ 0x4e
 8005fe4:	d864      	bhi.n	80060b0 <_scanf_float+0x120>
 8005fe6:	2b40      	cmp	r3, #64	@ 0x40
 8005fe8:	d83c      	bhi.n	8006064 <_scanf_float+0xd4>
 8005fea:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005fee:	b2c8      	uxtb	r0, r1
 8005ff0:	280e      	cmp	r0, #14
 8005ff2:	d93a      	bls.n	800606a <_scanf_float+0xda>
 8005ff4:	f1b9 0f00 	cmp.w	r9, #0
 8005ff8:	d003      	beq.n	8006002 <_scanf_float+0x72>
 8005ffa:	6823      	ldr	r3, [r4, #0]
 8005ffc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006000:	6023      	str	r3, [r4, #0]
 8006002:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006006:	f1ba 0f01 	cmp.w	sl, #1
 800600a:	f200 8117 	bhi.w	800623c <_scanf_float+0x2ac>
 800600e:	9b01      	ldr	r3, [sp, #4]
 8006010:	429e      	cmp	r6, r3
 8006012:	f200 8108 	bhi.w	8006226 <_scanf_float+0x296>
 8006016:	2001      	movs	r0, #1
 8006018:	b007      	add	sp, #28
 800601a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800601e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006022:	2a0d      	cmp	r2, #13
 8006024:	d8e6      	bhi.n	8005ff4 <_scanf_float+0x64>
 8006026:	a101      	add	r1, pc, #4	@ (adr r1, 800602c <_scanf_float+0x9c>)
 8006028:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800602c:	08006173 	.word	0x08006173
 8006030:	08005ff5 	.word	0x08005ff5
 8006034:	08005ff5 	.word	0x08005ff5
 8006038:	08005ff5 	.word	0x08005ff5
 800603c:	080061d3 	.word	0x080061d3
 8006040:	080061ab 	.word	0x080061ab
 8006044:	08005ff5 	.word	0x08005ff5
 8006048:	08005ff5 	.word	0x08005ff5
 800604c:	08006181 	.word	0x08006181
 8006050:	08005ff5 	.word	0x08005ff5
 8006054:	08005ff5 	.word	0x08005ff5
 8006058:	08005ff5 	.word	0x08005ff5
 800605c:	08005ff5 	.word	0x08005ff5
 8006060:	08006139 	.word	0x08006139
 8006064:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006068:	e7db      	b.n	8006022 <_scanf_float+0x92>
 800606a:	290e      	cmp	r1, #14
 800606c:	d8c2      	bhi.n	8005ff4 <_scanf_float+0x64>
 800606e:	a001      	add	r0, pc, #4	@ (adr r0, 8006074 <_scanf_float+0xe4>)
 8006070:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006074:	08006129 	.word	0x08006129
 8006078:	08005ff5 	.word	0x08005ff5
 800607c:	08006129 	.word	0x08006129
 8006080:	080061bf 	.word	0x080061bf
 8006084:	08005ff5 	.word	0x08005ff5
 8006088:	080060d1 	.word	0x080060d1
 800608c:	0800610f 	.word	0x0800610f
 8006090:	0800610f 	.word	0x0800610f
 8006094:	0800610f 	.word	0x0800610f
 8006098:	0800610f 	.word	0x0800610f
 800609c:	0800610f 	.word	0x0800610f
 80060a0:	0800610f 	.word	0x0800610f
 80060a4:	0800610f 	.word	0x0800610f
 80060a8:	0800610f 	.word	0x0800610f
 80060ac:	0800610f 	.word	0x0800610f
 80060b0:	2b6e      	cmp	r3, #110	@ 0x6e
 80060b2:	d809      	bhi.n	80060c8 <_scanf_float+0x138>
 80060b4:	2b60      	cmp	r3, #96	@ 0x60
 80060b6:	d8b2      	bhi.n	800601e <_scanf_float+0x8e>
 80060b8:	2b54      	cmp	r3, #84	@ 0x54
 80060ba:	d07b      	beq.n	80061b4 <_scanf_float+0x224>
 80060bc:	2b59      	cmp	r3, #89	@ 0x59
 80060be:	d199      	bne.n	8005ff4 <_scanf_float+0x64>
 80060c0:	2d07      	cmp	r5, #7
 80060c2:	d197      	bne.n	8005ff4 <_scanf_float+0x64>
 80060c4:	2508      	movs	r5, #8
 80060c6:	e02c      	b.n	8006122 <_scanf_float+0x192>
 80060c8:	2b74      	cmp	r3, #116	@ 0x74
 80060ca:	d073      	beq.n	80061b4 <_scanf_float+0x224>
 80060cc:	2b79      	cmp	r3, #121	@ 0x79
 80060ce:	e7f6      	b.n	80060be <_scanf_float+0x12e>
 80060d0:	6821      	ldr	r1, [r4, #0]
 80060d2:	05c8      	lsls	r0, r1, #23
 80060d4:	d51b      	bpl.n	800610e <_scanf_float+0x17e>
 80060d6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80060da:	6021      	str	r1, [r4, #0]
 80060dc:	f109 0901 	add.w	r9, r9, #1
 80060e0:	f1bb 0f00 	cmp.w	fp, #0
 80060e4:	d003      	beq.n	80060ee <_scanf_float+0x15e>
 80060e6:	3201      	adds	r2, #1
 80060e8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80060ec:	60a2      	str	r2, [r4, #8]
 80060ee:	68a3      	ldr	r3, [r4, #8]
 80060f0:	3b01      	subs	r3, #1
 80060f2:	60a3      	str	r3, [r4, #8]
 80060f4:	6923      	ldr	r3, [r4, #16]
 80060f6:	3301      	adds	r3, #1
 80060f8:	6123      	str	r3, [r4, #16]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	3b01      	subs	r3, #1
 80060fe:	2b00      	cmp	r3, #0
 8006100:	607b      	str	r3, [r7, #4]
 8006102:	f340 8087 	ble.w	8006214 <_scanf_float+0x284>
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	3301      	adds	r3, #1
 800610a:	603b      	str	r3, [r7, #0]
 800610c:	e765      	b.n	8005fda <_scanf_float+0x4a>
 800610e:	eb1a 0105 	adds.w	r1, sl, r5
 8006112:	f47f af6f 	bne.w	8005ff4 <_scanf_float+0x64>
 8006116:	6822      	ldr	r2, [r4, #0]
 8006118:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800611c:	6022      	str	r2, [r4, #0]
 800611e:	460d      	mov	r5, r1
 8006120:	468a      	mov	sl, r1
 8006122:	f806 3b01 	strb.w	r3, [r6], #1
 8006126:	e7e2      	b.n	80060ee <_scanf_float+0x15e>
 8006128:	6822      	ldr	r2, [r4, #0]
 800612a:	0610      	lsls	r0, r2, #24
 800612c:	f57f af62 	bpl.w	8005ff4 <_scanf_float+0x64>
 8006130:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006134:	6022      	str	r2, [r4, #0]
 8006136:	e7f4      	b.n	8006122 <_scanf_float+0x192>
 8006138:	f1ba 0f00 	cmp.w	sl, #0
 800613c:	d10e      	bne.n	800615c <_scanf_float+0x1cc>
 800613e:	f1b9 0f00 	cmp.w	r9, #0
 8006142:	d10e      	bne.n	8006162 <_scanf_float+0x1d2>
 8006144:	6822      	ldr	r2, [r4, #0]
 8006146:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800614a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800614e:	d108      	bne.n	8006162 <_scanf_float+0x1d2>
 8006150:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006154:	6022      	str	r2, [r4, #0]
 8006156:	f04f 0a01 	mov.w	sl, #1
 800615a:	e7e2      	b.n	8006122 <_scanf_float+0x192>
 800615c:	f1ba 0f02 	cmp.w	sl, #2
 8006160:	d055      	beq.n	800620e <_scanf_float+0x27e>
 8006162:	2d01      	cmp	r5, #1
 8006164:	d002      	beq.n	800616c <_scanf_float+0x1dc>
 8006166:	2d04      	cmp	r5, #4
 8006168:	f47f af44 	bne.w	8005ff4 <_scanf_float+0x64>
 800616c:	3501      	adds	r5, #1
 800616e:	b2ed      	uxtb	r5, r5
 8006170:	e7d7      	b.n	8006122 <_scanf_float+0x192>
 8006172:	f1ba 0f01 	cmp.w	sl, #1
 8006176:	f47f af3d 	bne.w	8005ff4 <_scanf_float+0x64>
 800617a:	f04f 0a02 	mov.w	sl, #2
 800617e:	e7d0      	b.n	8006122 <_scanf_float+0x192>
 8006180:	b97d      	cbnz	r5, 80061a2 <_scanf_float+0x212>
 8006182:	f1b9 0f00 	cmp.w	r9, #0
 8006186:	f47f af38 	bne.w	8005ffa <_scanf_float+0x6a>
 800618a:	6822      	ldr	r2, [r4, #0]
 800618c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006190:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006194:	f040 8108 	bne.w	80063a8 <_scanf_float+0x418>
 8006198:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800619c:	6022      	str	r2, [r4, #0]
 800619e:	2501      	movs	r5, #1
 80061a0:	e7bf      	b.n	8006122 <_scanf_float+0x192>
 80061a2:	2d03      	cmp	r5, #3
 80061a4:	d0e2      	beq.n	800616c <_scanf_float+0x1dc>
 80061a6:	2d05      	cmp	r5, #5
 80061a8:	e7de      	b.n	8006168 <_scanf_float+0x1d8>
 80061aa:	2d02      	cmp	r5, #2
 80061ac:	f47f af22 	bne.w	8005ff4 <_scanf_float+0x64>
 80061b0:	2503      	movs	r5, #3
 80061b2:	e7b6      	b.n	8006122 <_scanf_float+0x192>
 80061b4:	2d06      	cmp	r5, #6
 80061b6:	f47f af1d 	bne.w	8005ff4 <_scanf_float+0x64>
 80061ba:	2507      	movs	r5, #7
 80061bc:	e7b1      	b.n	8006122 <_scanf_float+0x192>
 80061be:	6822      	ldr	r2, [r4, #0]
 80061c0:	0591      	lsls	r1, r2, #22
 80061c2:	f57f af17 	bpl.w	8005ff4 <_scanf_float+0x64>
 80061c6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80061ca:	6022      	str	r2, [r4, #0]
 80061cc:	f8cd 9008 	str.w	r9, [sp, #8]
 80061d0:	e7a7      	b.n	8006122 <_scanf_float+0x192>
 80061d2:	6822      	ldr	r2, [r4, #0]
 80061d4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80061d8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80061dc:	d006      	beq.n	80061ec <_scanf_float+0x25c>
 80061de:	0550      	lsls	r0, r2, #21
 80061e0:	f57f af08 	bpl.w	8005ff4 <_scanf_float+0x64>
 80061e4:	f1b9 0f00 	cmp.w	r9, #0
 80061e8:	f000 80de 	beq.w	80063a8 <_scanf_float+0x418>
 80061ec:	0591      	lsls	r1, r2, #22
 80061ee:	bf58      	it	pl
 80061f0:	9902      	ldrpl	r1, [sp, #8]
 80061f2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80061f6:	bf58      	it	pl
 80061f8:	eba9 0101 	subpl.w	r1, r9, r1
 80061fc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006200:	bf58      	it	pl
 8006202:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006206:	6022      	str	r2, [r4, #0]
 8006208:	f04f 0900 	mov.w	r9, #0
 800620c:	e789      	b.n	8006122 <_scanf_float+0x192>
 800620e:	f04f 0a03 	mov.w	sl, #3
 8006212:	e786      	b.n	8006122 <_scanf_float+0x192>
 8006214:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006218:	4639      	mov	r1, r7
 800621a:	4640      	mov	r0, r8
 800621c:	4798      	blx	r3
 800621e:	2800      	cmp	r0, #0
 8006220:	f43f aedb 	beq.w	8005fda <_scanf_float+0x4a>
 8006224:	e6e6      	b.n	8005ff4 <_scanf_float+0x64>
 8006226:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800622a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800622e:	463a      	mov	r2, r7
 8006230:	4640      	mov	r0, r8
 8006232:	4798      	blx	r3
 8006234:	6923      	ldr	r3, [r4, #16]
 8006236:	3b01      	subs	r3, #1
 8006238:	6123      	str	r3, [r4, #16]
 800623a:	e6e8      	b.n	800600e <_scanf_float+0x7e>
 800623c:	1e6b      	subs	r3, r5, #1
 800623e:	2b06      	cmp	r3, #6
 8006240:	d824      	bhi.n	800628c <_scanf_float+0x2fc>
 8006242:	2d02      	cmp	r5, #2
 8006244:	d836      	bhi.n	80062b4 <_scanf_float+0x324>
 8006246:	9b01      	ldr	r3, [sp, #4]
 8006248:	429e      	cmp	r6, r3
 800624a:	f67f aee4 	bls.w	8006016 <_scanf_float+0x86>
 800624e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006252:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006256:	463a      	mov	r2, r7
 8006258:	4640      	mov	r0, r8
 800625a:	4798      	blx	r3
 800625c:	6923      	ldr	r3, [r4, #16]
 800625e:	3b01      	subs	r3, #1
 8006260:	6123      	str	r3, [r4, #16]
 8006262:	e7f0      	b.n	8006246 <_scanf_float+0x2b6>
 8006264:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006268:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800626c:	463a      	mov	r2, r7
 800626e:	4640      	mov	r0, r8
 8006270:	4798      	blx	r3
 8006272:	6923      	ldr	r3, [r4, #16]
 8006274:	3b01      	subs	r3, #1
 8006276:	6123      	str	r3, [r4, #16]
 8006278:	f10a 3aff 	add.w	sl, sl, #4294967295
 800627c:	fa5f fa8a 	uxtb.w	sl, sl
 8006280:	f1ba 0f02 	cmp.w	sl, #2
 8006284:	d1ee      	bne.n	8006264 <_scanf_float+0x2d4>
 8006286:	3d03      	subs	r5, #3
 8006288:	b2ed      	uxtb	r5, r5
 800628a:	1b76      	subs	r6, r6, r5
 800628c:	6823      	ldr	r3, [r4, #0]
 800628e:	05da      	lsls	r2, r3, #23
 8006290:	d530      	bpl.n	80062f4 <_scanf_float+0x364>
 8006292:	055b      	lsls	r3, r3, #21
 8006294:	d511      	bpl.n	80062ba <_scanf_float+0x32a>
 8006296:	9b01      	ldr	r3, [sp, #4]
 8006298:	429e      	cmp	r6, r3
 800629a:	f67f aebc 	bls.w	8006016 <_scanf_float+0x86>
 800629e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80062a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80062a6:	463a      	mov	r2, r7
 80062a8:	4640      	mov	r0, r8
 80062aa:	4798      	blx	r3
 80062ac:	6923      	ldr	r3, [r4, #16]
 80062ae:	3b01      	subs	r3, #1
 80062b0:	6123      	str	r3, [r4, #16]
 80062b2:	e7f0      	b.n	8006296 <_scanf_float+0x306>
 80062b4:	46aa      	mov	sl, r5
 80062b6:	46b3      	mov	fp, r6
 80062b8:	e7de      	b.n	8006278 <_scanf_float+0x2e8>
 80062ba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80062be:	6923      	ldr	r3, [r4, #16]
 80062c0:	2965      	cmp	r1, #101	@ 0x65
 80062c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80062c6:	f106 35ff 	add.w	r5, r6, #4294967295
 80062ca:	6123      	str	r3, [r4, #16]
 80062cc:	d00c      	beq.n	80062e8 <_scanf_float+0x358>
 80062ce:	2945      	cmp	r1, #69	@ 0x45
 80062d0:	d00a      	beq.n	80062e8 <_scanf_float+0x358>
 80062d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80062d6:	463a      	mov	r2, r7
 80062d8:	4640      	mov	r0, r8
 80062da:	4798      	blx	r3
 80062dc:	6923      	ldr	r3, [r4, #16]
 80062de:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80062e2:	3b01      	subs	r3, #1
 80062e4:	1eb5      	subs	r5, r6, #2
 80062e6:	6123      	str	r3, [r4, #16]
 80062e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80062ec:	463a      	mov	r2, r7
 80062ee:	4640      	mov	r0, r8
 80062f0:	4798      	blx	r3
 80062f2:	462e      	mov	r6, r5
 80062f4:	6822      	ldr	r2, [r4, #0]
 80062f6:	f012 0210 	ands.w	r2, r2, #16
 80062fa:	d001      	beq.n	8006300 <_scanf_float+0x370>
 80062fc:	2000      	movs	r0, #0
 80062fe:	e68b      	b.n	8006018 <_scanf_float+0x88>
 8006300:	7032      	strb	r2, [r6, #0]
 8006302:	6823      	ldr	r3, [r4, #0]
 8006304:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006308:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800630c:	d11c      	bne.n	8006348 <_scanf_float+0x3b8>
 800630e:	9b02      	ldr	r3, [sp, #8]
 8006310:	454b      	cmp	r3, r9
 8006312:	eba3 0209 	sub.w	r2, r3, r9
 8006316:	d123      	bne.n	8006360 <_scanf_float+0x3d0>
 8006318:	9901      	ldr	r1, [sp, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	4640      	mov	r0, r8
 800631e:	f002 fceb 	bl	8008cf8 <_strtod_r>
 8006322:	9b03      	ldr	r3, [sp, #12]
 8006324:	6821      	ldr	r1, [r4, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f011 0f02 	tst.w	r1, #2
 800632c:	ec57 6b10 	vmov	r6, r7, d0
 8006330:	f103 0204 	add.w	r2, r3, #4
 8006334:	d01f      	beq.n	8006376 <_scanf_float+0x3e6>
 8006336:	9903      	ldr	r1, [sp, #12]
 8006338:	600a      	str	r2, [r1, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	e9c3 6700 	strd	r6, r7, [r3]
 8006340:	68e3      	ldr	r3, [r4, #12]
 8006342:	3301      	adds	r3, #1
 8006344:	60e3      	str	r3, [r4, #12]
 8006346:	e7d9      	b.n	80062fc <_scanf_float+0x36c>
 8006348:	9b04      	ldr	r3, [sp, #16]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d0e4      	beq.n	8006318 <_scanf_float+0x388>
 800634e:	9905      	ldr	r1, [sp, #20]
 8006350:	230a      	movs	r3, #10
 8006352:	3101      	adds	r1, #1
 8006354:	4640      	mov	r0, r8
 8006356:	f002 fd4f 	bl	8008df8 <_strtol_r>
 800635a:	9b04      	ldr	r3, [sp, #16]
 800635c:	9e05      	ldr	r6, [sp, #20]
 800635e:	1ac2      	subs	r2, r0, r3
 8006360:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006364:	429e      	cmp	r6, r3
 8006366:	bf28      	it	cs
 8006368:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800636c:	4910      	ldr	r1, [pc, #64]	@ (80063b0 <_scanf_float+0x420>)
 800636e:	4630      	mov	r0, r6
 8006370:	f000 f942 	bl	80065f8 <siprintf>
 8006374:	e7d0      	b.n	8006318 <_scanf_float+0x388>
 8006376:	f011 0f04 	tst.w	r1, #4
 800637a:	9903      	ldr	r1, [sp, #12]
 800637c:	600a      	str	r2, [r1, #0]
 800637e:	d1dc      	bne.n	800633a <_scanf_float+0x3aa>
 8006380:	681d      	ldr	r5, [r3, #0]
 8006382:	4632      	mov	r2, r6
 8006384:	463b      	mov	r3, r7
 8006386:	4630      	mov	r0, r6
 8006388:	4639      	mov	r1, r7
 800638a:	f7fa fbe7 	bl	8000b5c <__aeabi_dcmpun>
 800638e:	b128      	cbz	r0, 800639c <_scanf_float+0x40c>
 8006390:	4808      	ldr	r0, [pc, #32]	@ (80063b4 <_scanf_float+0x424>)
 8006392:	f000 faa9 	bl	80068e8 <nanf>
 8006396:	ed85 0a00 	vstr	s0, [r5]
 800639a:	e7d1      	b.n	8006340 <_scanf_float+0x3b0>
 800639c:	4630      	mov	r0, r6
 800639e:	4639      	mov	r1, r7
 80063a0:	f7fa fc3a 	bl	8000c18 <__aeabi_d2f>
 80063a4:	6028      	str	r0, [r5, #0]
 80063a6:	e7cb      	b.n	8006340 <_scanf_float+0x3b0>
 80063a8:	f04f 0900 	mov.w	r9, #0
 80063ac:	e629      	b.n	8006002 <_scanf_float+0x72>
 80063ae:	bf00      	nop
 80063b0:	08009fbc 	.word	0x08009fbc
 80063b4:	0800a355 	.word	0x0800a355

080063b8 <std>:
 80063b8:	2300      	movs	r3, #0
 80063ba:	b510      	push	{r4, lr}
 80063bc:	4604      	mov	r4, r0
 80063be:	e9c0 3300 	strd	r3, r3, [r0]
 80063c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80063c6:	6083      	str	r3, [r0, #8]
 80063c8:	8181      	strh	r1, [r0, #12]
 80063ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80063cc:	81c2      	strh	r2, [r0, #14]
 80063ce:	6183      	str	r3, [r0, #24]
 80063d0:	4619      	mov	r1, r3
 80063d2:	2208      	movs	r2, #8
 80063d4:	305c      	adds	r0, #92	@ 0x5c
 80063d6:	f000 fa07 	bl	80067e8 <memset>
 80063da:	4b0d      	ldr	r3, [pc, #52]	@ (8006410 <std+0x58>)
 80063dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80063de:	4b0d      	ldr	r3, [pc, #52]	@ (8006414 <std+0x5c>)
 80063e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80063e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006418 <std+0x60>)
 80063e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80063e6:	4b0d      	ldr	r3, [pc, #52]	@ (800641c <std+0x64>)
 80063e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80063ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006420 <std+0x68>)
 80063ec:	6224      	str	r4, [r4, #32]
 80063ee:	429c      	cmp	r4, r3
 80063f0:	d006      	beq.n	8006400 <std+0x48>
 80063f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80063f6:	4294      	cmp	r4, r2
 80063f8:	d002      	beq.n	8006400 <std+0x48>
 80063fa:	33d0      	adds	r3, #208	@ 0xd0
 80063fc:	429c      	cmp	r4, r3
 80063fe:	d105      	bne.n	800640c <std+0x54>
 8006400:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006408:	f000 ba6a 	b.w	80068e0 <__retarget_lock_init_recursive>
 800640c:	bd10      	pop	{r4, pc}
 800640e:	bf00      	nop
 8006410:	08006639 	.word	0x08006639
 8006414:	0800665b 	.word	0x0800665b
 8006418:	08006693 	.word	0x08006693
 800641c:	080066b7 	.word	0x080066b7
 8006420:	20000304 	.word	0x20000304

08006424 <stdio_exit_handler>:
 8006424:	4a02      	ldr	r2, [pc, #8]	@ (8006430 <stdio_exit_handler+0xc>)
 8006426:	4903      	ldr	r1, [pc, #12]	@ (8006434 <stdio_exit_handler+0x10>)
 8006428:	4803      	ldr	r0, [pc, #12]	@ (8006438 <stdio_exit_handler+0x14>)
 800642a:	f000 b869 	b.w	8006500 <_fwalk_sglue>
 800642e:	bf00      	nop
 8006430:	2000000c 	.word	0x2000000c
 8006434:	080091b5 	.word	0x080091b5
 8006438:	2000001c 	.word	0x2000001c

0800643c <cleanup_stdio>:
 800643c:	6841      	ldr	r1, [r0, #4]
 800643e:	4b0c      	ldr	r3, [pc, #48]	@ (8006470 <cleanup_stdio+0x34>)
 8006440:	4299      	cmp	r1, r3
 8006442:	b510      	push	{r4, lr}
 8006444:	4604      	mov	r4, r0
 8006446:	d001      	beq.n	800644c <cleanup_stdio+0x10>
 8006448:	f002 feb4 	bl	80091b4 <_fflush_r>
 800644c:	68a1      	ldr	r1, [r4, #8]
 800644e:	4b09      	ldr	r3, [pc, #36]	@ (8006474 <cleanup_stdio+0x38>)
 8006450:	4299      	cmp	r1, r3
 8006452:	d002      	beq.n	800645a <cleanup_stdio+0x1e>
 8006454:	4620      	mov	r0, r4
 8006456:	f002 fead 	bl	80091b4 <_fflush_r>
 800645a:	68e1      	ldr	r1, [r4, #12]
 800645c:	4b06      	ldr	r3, [pc, #24]	@ (8006478 <cleanup_stdio+0x3c>)
 800645e:	4299      	cmp	r1, r3
 8006460:	d004      	beq.n	800646c <cleanup_stdio+0x30>
 8006462:	4620      	mov	r0, r4
 8006464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006468:	f002 bea4 	b.w	80091b4 <_fflush_r>
 800646c:	bd10      	pop	{r4, pc}
 800646e:	bf00      	nop
 8006470:	20000304 	.word	0x20000304
 8006474:	2000036c 	.word	0x2000036c
 8006478:	200003d4 	.word	0x200003d4

0800647c <global_stdio_init.part.0>:
 800647c:	b510      	push	{r4, lr}
 800647e:	4b0b      	ldr	r3, [pc, #44]	@ (80064ac <global_stdio_init.part.0+0x30>)
 8006480:	4c0b      	ldr	r4, [pc, #44]	@ (80064b0 <global_stdio_init.part.0+0x34>)
 8006482:	4a0c      	ldr	r2, [pc, #48]	@ (80064b4 <global_stdio_init.part.0+0x38>)
 8006484:	601a      	str	r2, [r3, #0]
 8006486:	4620      	mov	r0, r4
 8006488:	2200      	movs	r2, #0
 800648a:	2104      	movs	r1, #4
 800648c:	f7ff ff94 	bl	80063b8 <std>
 8006490:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006494:	2201      	movs	r2, #1
 8006496:	2109      	movs	r1, #9
 8006498:	f7ff ff8e 	bl	80063b8 <std>
 800649c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80064a0:	2202      	movs	r2, #2
 80064a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064a6:	2112      	movs	r1, #18
 80064a8:	f7ff bf86 	b.w	80063b8 <std>
 80064ac:	2000043c 	.word	0x2000043c
 80064b0:	20000304 	.word	0x20000304
 80064b4:	08006425 	.word	0x08006425

080064b8 <__sfp_lock_acquire>:
 80064b8:	4801      	ldr	r0, [pc, #4]	@ (80064c0 <__sfp_lock_acquire+0x8>)
 80064ba:	f000 ba12 	b.w	80068e2 <__retarget_lock_acquire_recursive>
 80064be:	bf00      	nop
 80064c0:	20000445 	.word	0x20000445

080064c4 <__sfp_lock_release>:
 80064c4:	4801      	ldr	r0, [pc, #4]	@ (80064cc <__sfp_lock_release+0x8>)
 80064c6:	f000 ba0d 	b.w	80068e4 <__retarget_lock_release_recursive>
 80064ca:	bf00      	nop
 80064cc:	20000445 	.word	0x20000445

080064d0 <__sinit>:
 80064d0:	b510      	push	{r4, lr}
 80064d2:	4604      	mov	r4, r0
 80064d4:	f7ff fff0 	bl	80064b8 <__sfp_lock_acquire>
 80064d8:	6a23      	ldr	r3, [r4, #32]
 80064da:	b11b      	cbz	r3, 80064e4 <__sinit+0x14>
 80064dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064e0:	f7ff bff0 	b.w	80064c4 <__sfp_lock_release>
 80064e4:	4b04      	ldr	r3, [pc, #16]	@ (80064f8 <__sinit+0x28>)
 80064e6:	6223      	str	r3, [r4, #32]
 80064e8:	4b04      	ldr	r3, [pc, #16]	@ (80064fc <__sinit+0x2c>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1f5      	bne.n	80064dc <__sinit+0xc>
 80064f0:	f7ff ffc4 	bl	800647c <global_stdio_init.part.0>
 80064f4:	e7f2      	b.n	80064dc <__sinit+0xc>
 80064f6:	bf00      	nop
 80064f8:	0800643d 	.word	0x0800643d
 80064fc:	2000043c 	.word	0x2000043c

08006500 <_fwalk_sglue>:
 8006500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006504:	4607      	mov	r7, r0
 8006506:	4688      	mov	r8, r1
 8006508:	4614      	mov	r4, r2
 800650a:	2600      	movs	r6, #0
 800650c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006510:	f1b9 0901 	subs.w	r9, r9, #1
 8006514:	d505      	bpl.n	8006522 <_fwalk_sglue+0x22>
 8006516:	6824      	ldr	r4, [r4, #0]
 8006518:	2c00      	cmp	r4, #0
 800651a:	d1f7      	bne.n	800650c <_fwalk_sglue+0xc>
 800651c:	4630      	mov	r0, r6
 800651e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006522:	89ab      	ldrh	r3, [r5, #12]
 8006524:	2b01      	cmp	r3, #1
 8006526:	d907      	bls.n	8006538 <_fwalk_sglue+0x38>
 8006528:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800652c:	3301      	adds	r3, #1
 800652e:	d003      	beq.n	8006538 <_fwalk_sglue+0x38>
 8006530:	4629      	mov	r1, r5
 8006532:	4638      	mov	r0, r7
 8006534:	47c0      	blx	r8
 8006536:	4306      	orrs	r6, r0
 8006538:	3568      	adds	r5, #104	@ 0x68
 800653a:	e7e9      	b.n	8006510 <_fwalk_sglue+0x10>

0800653c <_puts_r>:
 800653c:	6a03      	ldr	r3, [r0, #32]
 800653e:	b570      	push	{r4, r5, r6, lr}
 8006540:	6884      	ldr	r4, [r0, #8]
 8006542:	4605      	mov	r5, r0
 8006544:	460e      	mov	r6, r1
 8006546:	b90b      	cbnz	r3, 800654c <_puts_r+0x10>
 8006548:	f7ff ffc2 	bl	80064d0 <__sinit>
 800654c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800654e:	07db      	lsls	r3, r3, #31
 8006550:	d405      	bmi.n	800655e <_puts_r+0x22>
 8006552:	89a3      	ldrh	r3, [r4, #12]
 8006554:	0598      	lsls	r0, r3, #22
 8006556:	d402      	bmi.n	800655e <_puts_r+0x22>
 8006558:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800655a:	f000 f9c2 	bl	80068e2 <__retarget_lock_acquire_recursive>
 800655e:	89a3      	ldrh	r3, [r4, #12]
 8006560:	0719      	lsls	r1, r3, #28
 8006562:	d502      	bpl.n	800656a <_puts_r+0x2e>
 8006564:	6923      	ldr	r3, [r4, #16]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d135      	bne.n	80065d6 <_puts_r+0x9a>
 800656a:	4621      	mov	r1, r4
 800656c:	4628      	mov	r0, r5
 800656e:	f000 f8e5 	bl	800673c <__swsetup_r>
 8006572:	b380      	cbz	r0, 80065d6 <_puts_r+0x9a>
 8006574:	f04f 35ff 	mov.w	r5, #4294967295
 8006578:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800657a:	07da      	lsls	r2, r3, #31
 800657c:	d405      	bmi.n	800658a <_puts_r+0x4e>
 800657e:	89a3      	ldrh	r3, [r4, #12]
 8006580:	059b      	lsls	r3, r3, #22
 8006582:	d402      	bmi.n	800658a <_puts_r+0x4e>
 8006584:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006586:	f000 f9ad 	bl	80068e4 <__retarget_lock_release_recursive>
 800658a:	4628      	mov	r0, r5
 800658c:	bd70      	pop	{r4, r5, r6, pc}
 800658e:	2b00      	cmp	r3, #0
 8006590:	da04      	bge.n	800659c <_puts_r+0x60>
 8006592:	69a2      	ldr	r2, [r4, #24]
 8006594:	429a      	cmp	r2, r3
 8006596:	dc17      	bgt.n	80065c8 <_puts_r+0x8c>
 8006598:	290a      	cmp	r1, #10
 800659a:	d015      	beq.n	80065c8 <_puts_r+0x8c>
 800659c:	6823      	ldr	r3, [r4, #0]
 800659e:	1c5a      	adds	r2, r3, #1
 80065a0:	6022      	str	r2, [r4, #0]
 80065a2:	7019      	strb	r1, [r3, #0]
 80065a4:	68a3      	ldr	r3, [r4, #8]
 80065a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80065aa:	3b01      	subs	r3, #1
 80065ac:	60a3      	str	r3, [r4, #8]
 80065ae:	2900      	cmp	r1, #0
 80065b0:	d1ed      	bne.n	800658e <_puts_r+0x52>
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	da11      	bge.n	80065da <_puts_r+0x9e>
 80065b6:	4622      	mov	r2, r4
 80065b8:	210a      	movs	r1, #10
 80065ba:	4628      	mov	r0, r5
 80065bc:	f000 f87f 	bl	80066be <__swbuf_r>
 80065c0:	3001      	adds	r0, #1
 80065c2:	d0d7      	beq.n	8006574 <_puts_r+0x38>
 80065c4:	250a      	movs	r5, #10
 80065c6:	e7d7      	b.n	8006578 <_puts_r+0x3c>
 80065c8:	4622      	mov	r2, r4
 80065ca:	4628      	mov	r0, r5
 80065cc:	f000 f877 	bl	80066be <__swbuf_r>
 80065d0:	3001      	adds	r0, #1
 80065d2:	d1e7      	bne.n	80065a4 <_puts_r+0x68>
 80065d4:	e7ce      	b.n	8006574 <_puts_r+0x38>
 80065d6:	3e01      	subs	r6, #1
 80065d8:	e7e4      	b.n	80065a4 <_puts_r+0x68>
 80065da:	6823      	ldr	r3, [r4, #0]
 80065dc:	1c5a      	adds	r2, r3, #1
 80065de:	6022      	str	r2, [r4, #0]
 80065e0:	220a      	movs	r2, #10
 80065e2:	701a      	strb	r2, [r3, #0]
 80065e4:	e7ee      	b.n	80065c4 <_puts_r+0x88>
	...

080065e8 <puts>:
 80065e8:	4b02      	ldr	r3, [pc, #8]	@ (80065f4 <puts+0xc>)
 80065ea:	4601      	mov	r1, r0
 80065ec:	6818      	ldr	r0, [r3, #0]
 80065ee:	f7ff bfa5 	b.w	800653c <_puts_r>
 80065f2:	bf00      	nop
 80065f4:	20000018 	.word	0x20000018

080065f8 <siprintf>:
 80065f8:	b40e      	push	{r1, r2, r3}
 80065fa:	b500      	push	{lr}
 80065fc:	b09c      	sub	sp, #112	@ 0x70
 80065fe:	ab1d      	add	r3, sp, #116	@ 0x74
 8006600:	9002      	str	r0, [sp, #8]
 8006602:	9006      	str	r0, [sp, #24]
 8006604:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006608:	4809      	ldr	r0, [pc, #36]	@ (8006630 <siprintf+0x38>)
 800660a:	9107      	str	r1, [sp, #28]
 800660c:	9104      	str	r1, [sp, #16]
 800660e:	4909      	ldr	r1, [pc, #36]	@ (8006634 <siprintf+0x3c>)
 8006610:	f853 2b04 	ldr.w	r2, [r3], #4
 8006614:	9105      	str	r1, [sp, #20]
 8006616:	6800      	ldr	r0, [r0, #0]
 8006618:	9301      	str	r3, [sp, #4]
 800661a:	a902      	add	r1, sp, #8
 800661c:	f002 fc4a 	bl	8008eb4 <_svfiprintf_r>
 8006620:	9b02      	ldr	r3, [sp, #8]
 8006622:	2200      	movs	r2, #0
 8006624:	701a      	strb	r2, [r3, #0]
 8006626:	b01c      	add	sp, #112	@ 0x70
 8006628:	f85d eb04 	ldr.w	lr, [sp], #4
 800662c:	b003      	add	sp, #12
 800662e:	4770      	bx	lr
 8006630:	20000018 	.word	0x20000018
 8006634:	ffff0208 	.word	0xffff0208

08006638 <__sread>:
 8006638:	b510      	push	{r4, lr}
 800663a:	460c      	mov	r4, r1
 800663c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006640:	f000 f900 	bl	8006844 <_read_r>
 8006644:	2800      	cmp	r0, #0
 8006646:	bfab      	itete	ge
 8006648:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800664a:	89a3      	ldrhlt	r3, [r4, #12]
 800664c:	181b      	addge	r3, r3, r0
 800664e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006652:	bfac      	ite	ge
 8006654:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006656:	81a3      	strhlt	r3, [r4, #12]
 8006658:	bd10      	pop	{r4, pc}

0800665a <__swrite>:
 800665a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800665e:	461f      	mov	r7, r3
 8006660:	898b      	ldrh	r3, [r1, #12]
 8006662:	05db      	lsls	r3, r3, #23
 8006664:	4605      	mov	r5, r0
 8006666:	460c      	mov	r4, r1
 8006668:	4616      	mov	r6, r2
 800666a:	d505      	bpl.n	8006678 <__swrite+0x1e>
 800666c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006670:	2302      	movs	r3, #2
 8006672:	2200      	movs	r2, #0
 8006674:	f000 f8d4 	bl	8006820 <_lseek_r>
 8006678:	89a3      	ldrh	r3, [r4, #12]
 800667a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800667e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006682:	81a3      	strh	r3, [r4, #12]
 8006684:	4632      	mov	r2, r6
 8006686:	463b      	mov	r3, r7
 8006688:	4628      	mov	r0, r5
 800668a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800668e:	f000 b8eb 	b.w	8006868 <_write_r>

08006692 <__sseek>:
 8006692:	b510      	push	{r4, lr}
 8006694:	460c      	mov	r4, r1
 8006696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800669a:	f000 f8c1 	bl	8006820 <_lseek_r>
 800669e:	1c43      	adds	r3, r0, #1
 80066a0:	89a3      	ldrh	r3, [r4, #12]
 80066a2:	bf15      	itete	ne
 80066a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80066a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80066aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80066ae:	81a3      	strheq	r3, [r4, #12]
 80066b0:	bf18      	it	ne
 80066b2:	81a3      	strhne	r3, [r4, #12]
 80066b4:	bd10      	pop	{r4, pc}

080066b6 <__sclose>:
 80066b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ba:	f000 b8a1 	b.w	8006800 <_close_r>

080066be <__swbuf_r>:
 80066be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066c0:	460e      	mov	r6, r1
 80066c2:	4614      	mov	r4, r2
 80066c4:	4605      	mov	r5, r0
 80066c6:	b118      	cbz	r0, 80066d0 <__swbuf_r+0x12>
 80066c8:	6a03      	ldr	r3, [r0, #32]
 80066ca:	b90b      	cbnz	r3, 80066d0 <__swbuf_r+0x12>
 80066cc:	f7ff ff00 	bl	80064d0 <__sinit>
 80066d0:	69a3      	ldr	r3, [r4, #24]
 80066d2:	60a3      	str	r3, [r4, #8]
 80066d4:	89a3      	ldrh	r3, [r4, #12]
 80066d6:	071a      	lsls	r2, r3, #28
 80066d8:	d501      	bpl.n	80066de <__swbuf_r+0x20>
 80066da:	6923      	ldr	r3, [r4, #16]
 80066dc:	b943      	cbnz	r3, 80066f0 <__swbuf_r+0x32>
 80066de:	4621      	mov	r1, r4
 80066e0:	4628      	mov	r0, r5
 80066e2:	f000 f82b 	bl	800673c <__swsetup_r>
 80066e6:	b118      	cbz	r0, 80066f0 <__swbuf_r+0x32>
 80066e8:	f04f 37ff 	mov.w	r7, #4294967295
 80066ec:	4638      	mov	r0, r7
 80066ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066f0:	6823      	ldr	r3, [r4, #0]
 80066f2:	6922      	ldr	r2, [r4, #16]
 80066f4:	1a98      	subs	r0, r3, r2
 80066f6:	6963      	ldr	r3, [r4, #20]
 80066f8:	b2f6      	uxtb	r6, r6
 80066fa:	4283      	cmp	r3, r0
 80066fc:	4637      	mov	r7, r6
 80066fe:	dc05      	bgt.n	800670c <__swbuf_r+0x4e>
 8006700:	4621      	mov	r1, r4
 8006702:	4628      	mov	r0, r5
 8006704:	f002 fd56 	bl	80091b4 <_fflush_r>
 8006708:	2800      	cmp	r0, #0
 800670a:	d1ed      	bne.n	80066e8 <__swbuf_r+0x2a>
 800670c:	68a3      	ldr	r3, [r4, #8]
 800670e:	3b01      	subs	r3, #1
 8006710:	60a3      	str	r3, [r4, #8]
 8006712:	6823      	ldr	r3, [r4, #0]
 8006714:	1c5a      	adds	r2, r3, #1
 8006716:	6022      	str	r2, [r4, #0]
 8006718:	701e      	strb	r6, [r3, #0]
 800671a:	6962      	ldr	r2, [r4, #20]
 800671c:	1c43      	adds	r3, r0, #1
 800671e:	429a      	cmp	r2, r3
 8006720:	d004      	beq.n	800672c <__swbuf_r+0x6e>
 8006722:	89a3      	ldrh	r3, [r4, #12]
 8006724:	07db      	lsls	r3, r3, #31
 8006726:	d5e1      	bpl.n	80066ec <__swbuf_r+0x2e>
 8006728:	2e0a      	cmp	r6, #10
 800672a:	d1df      	bne.n	80066ec <__swbuf_r+0x2e>
 800672c:	4621      	mov	r1, r4
 800672e:	4628      	mov	r0, r5
 8006730:	f002 fd40 	bl	80091b4 <_fflush_r>
 8006734:	2800      	cmp	r0, #0
 8006736:	d0d9      	beq.n	80066ec <__swbuf_r+0x2e>
 8006738:	e7d6      	b.n	80066e8 <__swbuf_r+0x2a>
	...

0800673c <__swsetup_r>:
 800673c:	b538      	push	{r3, r4, r5, lr}
 800673e:	4b29      	ldr	r3, [pc, #164]	@ (80067e4 <__swsetup_r+0xa8>)
 8006740:	4605      	mov	r5, r0
 8006742:	6818      	ldr	r0, [r3, #0]
 8006744:	460c      	mov	r4, r1
 8006746:	b118      	cbz	r0, 8006750 <__swsetup_r+0x14>
 8006748:	6a03      	ldr	r3, [r0, #32]
 800674a:	b90b      	cbnz	r3, 8006750 <__swsetup_r+0x14>
 800674c:	f7ff fec0 	bl	80064d0 <__sinit>
 8006750:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006754:	0719      	lsls	r1, r3, #28
 8006756:	d422      	bmi.n	800679e <__swsetup_r+0x62>
 8006758:	06da      	lsls	r2, r3, #27
 800675a:	d407      	bmi.n	800676c <__swsetup_r+0x30>
 800675c:	2209      	movs	r2, #9
 800675e:	602a      	str	r2, [r5, #0]
 8006760:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006764:	81a3      	strh	r3, [r4, #12]
 8006766:	f04f 30ff 	mov.w	r0, #4294967295
 800676a:	e033      	b.n	80067d4 <__swsetup_r+0x98>
 800676c:	0758      	lsls	r0, r3, #29
 800676e:	d512      	bpl.n	8006796 <__swsetup_r+0x5a>
 8006770:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006772:	b141      	cbz	r1, 8006786 <__swsetup_r+0x4a>
 8006774:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006778:	4299      	cmp	r1, r3
 800677a:	d002      	beq.n	8006782 <__swsetup_r+0x46>
 800677c:	4628      	mov	r0, r5
 800677e:	f000 ff07 	bl	8007590 <_free_r>
 8006782:	2300      	movs	r3, #0
 8006784:	6363      	str	r3, [r4, #52]	@ 0x34
 8006786:	89a3      	ldrh	r3, [r4, #12]
 8006788:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800678c:	81a3      	strh	r3, [r4, #12]
 800678e:	2300      	movs	r3, #0
 8006790:	6063      	str	r3, [r4, #4]
 8006792:	6923      	ldr	r3, [r4, #16]
 8006794:	6023      	str	r3, [r4, #0]
 8006796:	89a3      	ldrh	r3, [r4, #12]
 8006798:	f043 0308 	orr.w	r3, r3, #8
 800679c:	81a3      	strh	r3, [r4, #12]
 800679e:	6923      	ldr	r3, [r4, #16]
 80067a0:	b94b      	cbnz	r3, 80067b6 <__swsetup_r+0x7a>
 80067a2:	89a3      	ldrh	r3, [r4, #12]
 80067a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80067a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067ac:	d003      	beq.n	80067b6 <__swsetup_r+0x7a>
 80067ae:	4621      	mov	r1, r4
 80067b0:	4628      	mov	r0, r5
 80067b2:	f002 fd4d 	bl	8009250 <__smakebuf_r>
 80067b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067ba:	f013 0201 	ands.w	r2, r3, #1
 80067be:	d00a      	beq.n	80067d6 <__swsetup_r+0x9a>
 80067c0:	2200      	movs	r2, #0
 80067c2:	60a2      	str	r2, [r4, #8]
 80067c4:	6962      	ldr	r2, [r4, #20]
 80067c6:	4252      	negs	r2, r2
 80067c8:	61a2      	str	r2, [r4, #24]
 80067ca:	6922      	ldr	r2, [r4, #16]
 80067cc:	b942      	cbnz	r2, 80067e0 <__swsetup_r+0xa4>
 80067ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80067d2:	d1c5      	bne.n	8006760 <__swsetup_r+0x24>
 80067d4:	bd38      	pop	{r3, r4, r5, pc}
 80067d6:	0799      	lsls	r1, r3, #30
 80067d8:	bf58      	it	pl
 80067da:	6962      	ldrpl	r2, [r4, #20]
 80067dc:	60a2      	str	r2, [r4, #8]
 80067de:	e7f4      	b.n	80067ca <__swsetup_r+0x8e>
 80067e0:	2000      	movs	r0, #0
 80067e2:	e7f7      	b.n	80067d4 <__swsetup_r+0x98>
 80067e4:	20000018 	.word	0x20000018

080067e8 <memset>:
 80067e8:	4402      	add	r2, r0
 80067ea:	4603      	mov	r3, r0
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d100      	bne.n	80067f2 <memset+0xa>
 80067f0:	4770      	bx	lr
 80067f2:	f803 1b01 	strb.w	r1, [r3], #1
 80067f6:	e7f9      	b.n	80067ec <memset+0x4>

080067f8 <_localeconv_r>:
 80067f8:	4800      	ldr	r0, [pc, #0]	@ (80067fc <_localeconv_r+0x4>)
 80067fa:	4770      	bx	lr
 80067fc:	20000158 	.word	0x20000158

08006800 <_close_r>:
 8006800:	b538      	push	{r3, r4, r5, lr}
 8006802:	4d06      	ldr	r5, [pc, #24]	@ (800681c <_close_r+0x1c>)
 8006804:	2300      	movs	r3, #0
 8006806:	4604      	mov	r4, r0
 8006808:	4608      	mov	r0, r1
 800680a:	602b      	str	r3, [r5, #0]
 800680c:	f7fa ff5f 	bl	80016ce <_close>
 8006810:	1c43      	adds	r3, r0, #1
 8006812:	d102      	bne.n	800681a <_close_r+0x1a>
 8006814:	682b      	ldr	r3, [r5, #0]
 8006816:	b103      	cbz	r3, 800681a <_close_r+0x1a>
 8006818:	6023      	str	r3, [r4, #0]
 800681a:	bd38      	pop	{r3, r4, r5, pc}
 800681c:	20000440 	.word	0x20000440

08006820 <_lseek_r>:
 8006820:	b538      	push	{r3, r4, r5, lr}
 8006822:	4d07      	ldr	r5, [pc, #28]	@ (8006840 <_lseek_r+0x20>)
 8006824:	4604      	mov	r4, r0
 8006826:	4608      	mov	r0, r1
 8006828:	4611      	mov	r1, r2
 800682a:	2200      	movs	r2, #0
 800682c:	602a      	str	r2, [r5, #0]
 800682e:	461a      	mov	r2, r3
 8006830:	f7fa ff74 	bl	800171c <_lseek>
 8006834:	1c43      	adds	r3, r0, #1
 8006836:	d102      	bne.n	800683e <_lseek_r+0x1e>
 8006838:	682b      	ldr	r3, [r5, #0]
 800683a:	b103      	cbz	r3, 800683e <_lseek_r+0x1e>
 800683c:	6023      	str	r3, [r4, #0]
 800683e:	bd38      	pop	{r3, r4, r5, pc}
 8006840:	20000440 	.word	0x20000440

08006844 <_read_r>:
 8006844:	b538      	push	{r3, r4, r5, lr}
 8006846:	4d07      	ldr	r5, [pc, #28]	@ (8006864 <_read_r+0x20>)
 8006848:	4604      	mov	r4, r0
 800684a:	4608      	mov	r0, r1
 800684c:	4611      	mov	r1, r2
 800684e:	2200      	movs	r2, #0
 8006850:	602a      	str	r2, [r5, #0]
 8006852:	461a      	mov	r2, r3
 8006854:	f7fa ff02 	bl	800165c <_read>
 8006858:	1c43      	adds	r3, r0, #1
 800685a:	d102      	bne.n	8006862 <_read_r+0x1e>
 800685c:	682b      	ldr	r3, [r5, #0]
 800685e:	b103      	cbz	r3, 8006862 <_read_r+0x1e>
 8006860:	6023      	str	r3, [r4, #0]
 8006862:	bd38      	pop	{r3, r4, r5, pc}
 8006864:	20000440 	.word	0x20000440

08006868 <_write_r>:
 8006868:	b538      	push	{r3, r4, r5, lr}
 800686a:	4d07      	ldr	r5, [pc, #28]	@ (8006888 <_write_r+0x20>)
 800686c:	4604      	mov	r4, r0
 800686e:	4608      	mov	r0, r1
 8006870:	4611      	mov	r1, r2
 8006872:	2200      	movs	r2, #0
 8006874:	602a      	str	r2, [r5, #0]
 8006876:	461a      	mov	r2, r3
 8006878:	f7fa ff0d 	bl	8001696 <_write>
 800687c:	1c43      	adds	r3, r0, #1
 800687e:	d102      	bne.n	8006886 <_write_r+0x1e>
 8006880:	682b      	ldr	r3, [r5, #0]
 8006882:	b103      	cbz	r3, 8006886 <_write_r+0x1e>
 8006884:	6023      	str	r3, [r4, #0]
 8006886:	bd38      	pop	{r3, r4, r5, pc}
 8006888:	20000440 	.word	0x20000440

0800688c <__errno>:
 800688c:	4b01      	ldr	r3, [pc, #4]	@ (8006894 <__errno+0x8>)
 800688e:	6818      	ldr	r0, [r3, #0]
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	20000018 	.word	0x20000018

08006898 <__libc_init_array>:
 8006898:	b570      	push	{r4, r5, r6, lr}
 800689a:	4d0d      	ldr	r5, [pc, #52]	@ (80068d0 <__libc_init_array+0x38>)
 800689c:	4c0d      	ldr	r4, [pc, #52]	@ (80068d4 <__libc_init_array+0x3c>)
 800689e:	1b64      	subs	r4, r4, r5
 80068a0:	10a4      	asrs	r4, r4, #2
 80068a2:	2600      	movs	r6, #0
 80068a4:	42a6      	cmp	r6, r4
 80068a6:	d109      	bne.n	80068bc <__libc_init_array+0x24>
 80068a8:	4d0b      	ldr	r5, [pc, #44]	@ (80068d8 <__libc_init_array+0x40>)
 80068aa:	4c0c      	ldr	r4, [pc, #48]	@ (80068dc <__libc_init_array+0x44>)
 80068ac:	f003 fade 	bl	8009e6c <_init>
 80068b0:	1b64      	subs	r4, r4, r5
 80068b2:	10a4      	asrs	r4, r4, #2
 80068b4:	2600      	movs	r6, #0
 80068b6:	42a6      	cmp	r6, r4
 80068b8:	d105      	bne.n	80068c6 <__libc_init_array+0x2e>
 80068ba:	bd70      	pop	{r4, r5, r6, pc}
 80068bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80068c0:	4798      	blx	r3
 80068c2:	3601      	adds	r6, #1
 80068c4:	e7ee      	b.n	80068a4 <__libc_init_array+0xc>
 80068c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80068ca:	4798      	blx	r3
 80068cc:	3601      	adds	r6, #1
 80068ce:	e7f2      	b.n	80068b6 <__libc_init_array+0x1e>
 80068d0:	0800a3c0 	.word	0x0800a3c0
 80068d4:	0800a3c0 	.word	0x0800a3c0
 80068d8:	0800a3c0 	.word	0x0800a3c0
 80068dc:	0800a3c4 	.word	0x0800a3c4

080068e0 <__retarget_lock_init_recursive>:
 80068e0:	4770      	bx	lr

080068e2 <__retarget_lock_acquire_recursive>:
 80068e2:	4770      	bx	lr

080068e4 <__retarget_lock_release_recursive>:
 80068e4:	4770      	bx	lr
	...

080068e8 <nanf>:
 80068e8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80068f0 <nanf+0x8>
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	7fc00000 	.word	0x7fc00000

080068f4 <quorem>:
 80068f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068f8:	6903      	ldr	r3, [r0, #16]
 80068fa:	690c      	ldr	r4, [r1, #16]
 80068fc:	42a3      	cmp	r3, r4
 80068fe:	4607      	mov	r7, r0
 8006900:	db7e      	blt.n	8006a00 <quorem+0x10c>
 8006902:	3c01      	subs	r4, #1
 8006904:	f101 0814 	add.w	r8, r1, #20
 8006908:	00a3      	lsls	r3, r4, #2
 800690a:	f100 0514 	add.w	r5, r0, #20
 800690e:	9300      	str	r3, [sp, #0]
 8006910:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006914:	9301      	str	r3, [sp, #4]
 8006916:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800691a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800691e:	3301      	adds	r3, #1
 8006920:	429a      	cmp	r2, r3
 8006922:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006926:	fbb2 f6f3 	udiv	r6, r2, r3
 800692a:	d32e      	bcc.n	800698a <quorem+0x96>
 800692c:	f04f 0a00 	mov.w	sl, #0
 8006930:	46c4      	mov	ip, r8
 8006932:	46ae      	mov	lr, r5
 8006934:	46d3      	mov	fp, sl
 8006936:	f85c 3b04 	ldr.w	r3, [ip], #4
 800693a:	b298      	uxth	r0, r3
 800693c:	fb06 a000 	mla	r0, r6, r0, sl
 8006940:	0c02      	lsrs	r2, r0, #16
 8006942:	0c1b      	lsrs	r3, r3, #16
 8006944:	fb06 2303 	mla	r3, r6, r3, r2
 8006948:	f8de 2000 	ldr.w	r2, [lr]
 800694c:	b280      	uxth	r0, r0
 800694e:	b292      	uxth	r2, r2
 8006950:	1a12      	subs	r2, r2, r0
 8006952:	445a      	add	r2, fp
 8006954:	f8de 0000 	ldr.w	r0, [lr]
 8006958:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800695c:	b29b      	uxth	r3, r3
 800695e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006962:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006966:	b292      	uxth	r2, r2
 8006968:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800696c:	45e1      	cmp	r9, ip
 800696e:	f84e 2b04 	str.w	r2, [lr], #4
 8006972:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006976:	d2de      	bcs.n	8006936 <quorem+0x42>
 8006978:	9b00      	ldr	r3, [sp, #0]
 800697a:	58eb      	ldr	r3, [r5, r3]
 800697c:	b92b      	cbnz	r3, 800698a <quorem+0x96>
 800697e:	9b01      	ldr	r3, [sp, #4]
 8006980:	3b04      	subs	r3, #4
 8006982:	429d      	cmp	r5, r3
 8006984:	461a      	mov	r2, r3
 8006986:	d32f      	bcc.n	80069e8 <quorem+0xf4>
 8006988:	613c      	str	r4, [r7, #16]
 800698a:	4638      	mov	r0, r7
 800698c:	f001 f9c4 	bl	8007d18 <__mcmp>
 8006990:	2800      	cmp	r0, #0
 8006992:	db25      	blt.n	80069e0 <quorem+0xec>
 8006994:	4629      	mov	r1, r5
 8006996:	2000      	movs	r0, #0
 8006998:	f858 2b04 	ldr.w	r2, [r8], #4
 800699c:	f8d1 c000 	ldr.w	ip, [r1]
 80069a0:	fa1f fe82 	uxth.w	lr, r2
 80069a4:	fa1f f38c 	uxth.w	r3, ip
 80069a8:	eba3 030e 	sub.w	r3, r3, lr
 80069ac:	4403      	add	r3, r0
 80069ae:	0c12      	lsrs	r2, r2, #16
 80069b0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80069b4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069be:	45c1      	cmp	r9, r8
 80069c0:	f841 3b04 	str.w	r3, [r1], #4
 80069c4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80069c8:	d2e6      	bcs.n	8006998 <quorem+0xa4>
 80069ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069d2:	b922      	cbnz	r2, 80069de <quorem+0xea>
 80069d4:	3b04      	subs	r3, #4
 80069d6:	429d      	cmp	r5, r3
 80069d8:	461a      	mov	r2, r3
 80069da:	d30b      	bcc.n	80069f4 <quorem+0x100>
 80069dc:	613c      	str	r4, [r7, #16]
 80069de:	3601      	adds	r6, #1
 80069e0:	4630      	mov	r0, r6
 80069e2:	b003      	add	sp, #12
 80069e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069e8:	6812      	ldr	r2, [r2, #0]
 80069ea:	3b04      	subs	r3, #4
 80069ec:	2a00      	cmp	r2, #0
 80069ee:	d1cb      	bne.n	8006988 <quorem+0x94>
 80069f0:	3c01      	subs	r4, #1
 80069f2:	e7c6      	b.n	8006982 <quorem+0x8e>
 80069f4:	6812      	ldr	r2, [r2, #0]
 80069f6:	3b04      	subs	r3, #4
 80069f8:	2a00      	cmp	r2, #0
 80069fa:	d1ef      	bne.n	80069dc <quorem+0xe8>
 80069fc:	3c01      	subs	r4, #1
 80069fe:	e7ea      	b.n	80069d6 <quorem+0xe2>
 8006a00:	2000      	movs	r0, #0
 8006a02:	e7ee      	b.n	80069e2 <quorem+0xee>
 8006a04:	0000      	movs	r0, r0
	...

08006a08 <_dtoa_r>:
 8006a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a0c:	69c7      	ldr	r7, [r0, #28]
 8006a0e:	b099      	sub	sp, #100	@ 0x64
 8006a10:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006a14:	ec55 4b10 	vmov	r4, r5, d0
 8006a18:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006a1a:	9109      	str	r1, [sp, #36]	@ 0x24
 8006a1c:	4683      	mov	fp, r0
 8006a1e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006a20:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006a22:	b97f      	cbnz	r7, 8006a44 <_dtoa_r+0x3c>
 8006a24:	2010      	movs	r0, #16
 8006a26:	f000 fdfd 	bl	8007624 <malloc>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006a30:	b920      	cbnz	r0, 8006a3c <_dtoa_r+0x34>
 8006a32:	4ba7      	ldr	r3, [pc, #668]	@ (8006cd0 <_dtoa_r+0x2c8>)
 8006a34:	21ef      	movs	r1, #239	@ 0xef
 8006a36:	48a7      	ldr	r0, [pc, #668]	@ (8006cd4 <_dtoa_r+0x2cc>)
 8006a38:	f002 fcba 	bl	80093b0 <__assert_func>
 8006a3c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006a40:	6007      	str	r7, [r0, #0]
 8006a42:	60c7      	str	r7, [r0, #12]
 8006a44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006a48:	6819      	ldr	r1, [r3, #0]
 8006a4a:	b159      	cbz	r1, 8006a64 <_dtoa_r+0x5c>
 8006a4c:	685a      	ldr	r2, [r3, #4]
 8006a4e:	604a      	str	r2, [r1, #4]
 8006a50:	2301      	movs	r3, #1
 8006a52:	4093      	lsls	r3, r2
 8006a54:	608b      	str	r3, [r1, #8]
 8006a56:	4658      	mov	r0, fp
 8006a58:	f000 feda 	bl	8007810 <_Bfree>
 8006a5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006a60:	2200      	movs	r2, #0
 8006a62:	601a      	str	r2, [r3, #0]
 8006a64:	1e2b      	subs	r3, r5, #0
 8006a66:	bfb9      	ittee	lt
 8006a68:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006a6c:	9303      	strlt	r3, [sp, #12]
 8006a6e:	2300      	movge	r3, #0
 8006a70:	6033      	strge	r3, [r6, #0]
 8006a72:	9f03      	ldr	r7, [sp, #12]
 8006a74:	4b98      	ldr	r3, [pc, #608]	@ (8006cd8 <_dtoa_r+0x2d0>)
 8006a76:	bfbc      	itt	lt
 8006a78:	2201      	movlt	r2, #1
 8006a7a:	6032      	strlt	r2, [r6, #0]
 8006a7c:	43bb      	bics	r3, r7
 8006a7e:	d112      	bne.n	8006aa6 <_dtoa_r+0x9e>
 8006a80:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006a82:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006a86:	6013      	str	r3, [r2, #0]
 8006a88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006a8c:	4323      	orrs	r3, r4
 8006a8e:	f000 854d 	beq.w	800752c <_dtoa_r+0xb24>
 8006a92:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006a94:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006cec <_dtoa_r+0x2e4>
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f000 854f 	beq.w	800753c <_dtoa_r+0xb34>
 8006a9e:	f10a 0303 	add.w	r3, sl, #3
 8006aa2:	f000 bd49 	b.w	8007538 <_dtoa_r+0xb30>
 8006aa6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	ec51 0b17 	vmov	r0, r1, d7
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006ab6:	f7fa f81f 	bl	8000af8 <__aeabi_dcmpeq>
 8006aba:	4680      	mov	r8, r0
 8006abc:	b158      	cbz	r0, 8006ad6 <_dtoa_r+0xce>
 8006abe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	6013      	str	r3, [r2, #0]
 8006ac4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006ac6:	b113      	cbz	r3, 8006ace <_dtoa_r+0xc6>
 8006ac8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006aca:	4b84      	ldr	r3, [pc, #528]	@ (8006cdc <_dtoa_r+0x2d4>)
 8006acc:	6013      	str	r3, [r2, #0]
 8006ace:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006cf0 <_dtoa_r+0x2e8>
 8006ad2:	f000 bd33 	b.w	800753c <_dtoa_r+0xb34>
 8006ad6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006ada:	aa16      	add	r2, sp, #88	@ 0x58
 8006adc:	a917      	add	r1, sp, #92	@ 0x5c
 8006ade:	4658      	mov	r0, fp
 8006ae0:	f001 fa3a 	bl	8007f58 <__d2b>
 8006ae4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006ae8:	4681      	mov	r9, r0
 8006aea:	2e00      	cmp	r6, #0
 8006aec:	d077      	beq.n	8006bde <_dtoa_r+0x1d6>
 8006aee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006af0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006af4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006af8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006afc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006b00:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006b04:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006b08:	4619      	mov	r1, r3
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	4b74      	ldr	r3, [pc, #464]	@ (8006ce0 <_dtoa_r+0x2d8>)
 8006b0e:	f7f9 fbd3 	bl	80002b8 <__aeabi_dsub>
 8006b12:	a369      	add	r3, pc, #420	@ (adr r3, 8006cb8 <_dtoa_r+0x2b0>)
 8006b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b18:	f7f9 fd86 	bl	8000628 <__aeabi_dmul>
 8006b1c:	a368      	add	r3, pc, #416	@ (adr r3, 8006cc0 <_dtoa_r+0x2b8>)
 8006b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b22:	f7f9 fbcb 	bl	80002bc <__adddf3>
 8006b26:	4604      	mov	r4, r0
 8006b28:	4630      	mov	r0, r6
 8006b2a:	460d      	mov	r5, r1
 8006b2c:	f7f9 fd12 	bl	8000554 <__aeabi_i2d>
 8006b30:	a365      	add	r3, pc, #404	@ (adr r3, 8006cc8 <_dtoa_r+0x2c0>)
 8006b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b36:	f7f9 fd77 	bl	8000628 <__aeabi_dmul>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	4620      	mov	r0, r4
 8006b40:	4629      	mov	r1, r5
 8006b42:	f7f9 fbbb 	bl	80002bc <__adddf3>
 8006b46:	4604      	mov	r4, r0
 8006b48:	460d      	mov	r5, r1
 8006b4a:	f7fa f81d 	bl	8000b88 <__aeabi_d2iz>
 8006b4e:	2200      	movs	r2, #0
 8006b50:	4607      	mov	r7, r0
 8006b52:	2300      	movs	r3, #0
 8006b54:	4620      	mov	r0, r4
 8006b56:	4629      	mov	r1, r5
 8006b58:	f7f9 ffd8 	bl	8000b0c <__aeabi_dcmplt>
 8006b5c:	b140      	cbz	r0, 8006b70 <_dtoa_r+0x168>
 8006b5e:	4638      	mov	r0, r7
 8006b60:	f7f9 fcf8 	bl	8000554 <__aeabi_i2d>
 8006b64:	4622      	mov	r2, r4
 8006b66:	462b      	mov	r3, r5
 8006b68:	f7f9 ffc6 	bl	8000af8 <__aeabi_dcmpeq>
 8006b6c:	b900      	cbnz	r0, 8006b70 <_dtoa_r+0x168>
 8006b6e:	3f01      	subs	r7, #1
 8006b70:	2f16      	cmp	r7, #22
 8006b72:	d851      	bhi.n	8006c18 <_dtoa_r+0x210>
 8006b74:	4b5b      	ldr	r3, [pc, #364]	@ (8006ce4 <_dtoa_r+0x2dc>)
 8006b76:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b82:	f7f9 ffc3 	bl	8000b0c <__aeabi_dcmplt>
 8006b86:	2800      	cmp	r0, #0
 8006b88:	d048      	beq.n	8006c1c <_dtoa_r+0x214>
 8006b8a:	3f01      	subs	r7, #1
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006b90:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006b92:	1b9b      	subs	r3, r3, r6
 8006b94:	1e5a      	subs	r2, r3, #1
 8006b96:	bf44      	itt	mi
 8006b98:	f1c3 0801 	rsbmi	r8, r3, #1
 8006b9c:	2300      	movmi	r3, #0
 8006b9e:	9208      	str	r2, [sp, #32]
 8006ba0:	bf54      	ite	pl
 8006ba2:	f04f 0800 	movpl.w	r8, #0
 8006ba6:	9308      	strmi	r3, [sp, #32]
 8006ba8:	2f00      	cmp	r7, #0
 8006baa:	db39      	blt.n	8006c20 <_dtoa_r+0x218>
 8006bac:	9b08      	ldr	r3, [sp, #32]
 8006bae:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006bb0:	443b      	add	r3, r7
 8006bb2:	9308      	str	r3, [sp, #32]
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006bb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bba:	2b09      	cmp	r3, #9
 8006bbc:	d864      	bhi.n	8006c88 <_dtoa_r+0x280>
 8006bbe:	2b05      	cmp	r3, #5
 8006bc0:	bfc4      	itt	gt
 8006bc2:	3b04      	subgt	r3, #4
 8006bc4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006bc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bc8:	f1a3 0302 	sub.w	r3, r3, #2
 8006bcc:	bfcc      	ite	gt
 8006bce:	2400      	movgt	r4, #0
 8006bd0:	2401      	movle	r4, #1
 8006bd2:	2b03      	cmp	r3, #3
 8006bd4:	d863      	bhi.n	8006c9e <_dtoa_r+0x296>
 8006bd6:	e8df f003 	tbb	[pc, r3]
 8006bda:	372a      	.short	0x372a
 8006bdc:	5535      	.short	0x5535
 8006bde:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006be2:	441e      	add	r6, r3
 8006be4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006be8:	2b20      	cmp	r3, #32
 8006bea:	bfc1      	itttt	gt
 8006bec:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006bf0:	409f      	lslgt	r7, r3
 8006bf2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006bf6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006bfa:	bfd6      	itet	le
 8006bfc:	f1c3 0320 	rsble	r3, r3, #32
 8006c00:	ea47 0003 	orrgt.w	r0, r7, r3
 8006c04:	fa04 f003 	lslle.w	r0, r4, r3
 8006c08:	f7f9 fc94 	bl	8000534 <__aeabi_ui2d>
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006c12:	3e01      	subs	r6, #1
 8006c14:	9214      	str	r2, [sp, #80]	@ 0x50
 8006c16:	e777      	b.n	8006b08 <_dtoa_r+0x100>
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e7b8      	b.n	8006b8e <_dtoa_r+0x186>
 8006c1c:	9012      	str	r0, [sp, #72]	@ 0x48
 8006c1e:	e7b7      	b.n	8006b90 <_dtoa_r+0x188>
 8006c20:	427b      	negs	r3, r7
 8006c22:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c24:	2300      	movs	r3, #0
 8006c26:	eba8 0807 	sub.w	r8, r8, r7
 8006c2a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006c2c:	e7c4      	b.n	8006bb8 <_dtoa_r+0x1b0>
 8006c2e:	2300      	movs	r3, #0
 8006c30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	dc35      	bgt.n	8006ca4 <_dtoa_r+0x29c>
 8006c38:	2301      	movs	r3, #1
 8006c3a:	9300      	str	r3, [sp, #0]
 8006c3c:	9307      	str	r3, [sp, #28]
 8006c3e:	461a      	mov	r2, r3
 8006c40:	920e      	str	r2, [sp, #56]	@ 0x38
 8006c42:	e00b      	b.n	8006c5c <_dtoa_r+0x254>
 8006c44:	2301      	movs	r3, #1
 8006c46:	e7f3      	b.n	8006c30 <_dtoa_r+0x228>
 8006c48:	2300      	movs	r3, #0
 8006c4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c4e:	18fb      	adds	r3, r7, r3
 8006c50:	9300      	str	r3, [sp, #0]
 8006c52:	3301      	adds	r3, #1
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	9307      	str	r3, [sp, #28]
 8006c58:	bfb8      	it	lt
 8006c5a:	2301      	movlt	r3, #1
 8006c5c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006c60:	2100      	movs	r1, #0
 8006c62:	2204      	movs	r2, #4
 8006c64:	f102 0514 	add.w	r5, r2, #20
 8006c68:	429d      	cmp	r5, r3
 8006c6a:	d91f      	bls.n	8006cac <_dtoa_r+0x2a4>
 8006c6c:	6041      	str	r1, [r0, #4]
 8006c6e:	4658      	mov	r0, fp
 8006c70:	f000 fd8e 	bl	8007790 <_Balloc>
 8006c74:	4682      	mov	sl, r0
 8006c76:	2800      	cmp	r0, #0
 8006c78:	d13c      	bne.n	8006cf4 <_dtoa_r+0x2ec>
 8006c7a:	4b1b      	ldr	r3, [pc, #108]	@ (8006ce8 <_dtoa_r+0x2e0>)
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006c82:	e6d8      	b.n	8006a36 <_dtoa_r+0x2e>
 8006c84:	2301      	movs	r3, #1
 8006c86:	e7e0      	b.n	8006c4a <_dtoa_r+0x242>
 8006c88:	2401      	movs	r4, #1
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c8e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006c90:	f04f 33ff 	mov.w	r3, #4294967295
 8006c94:	9300      	str	r3, [sp, #0]
 8006c96:	9307      	str	r3, [sp, #28]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	2312      	movs	r3, #18
 8006c9c:	e7d0      	b.n	8006c40 <_dtoa_r+0x238>
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ca2:	e7f5      	b.n	8006c90 <_dtoa_r+0x288>
 8006ca4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ca6:	9300      	str	r3, [sp, #0]
 8006ca8:	9307      	str	r3, [sp, #28]
 8006caa:	e7d7      	b.n	8006c5c <_dtoa_r+0x254>
 8006cac:	3101      	adds	r1, #1
 8006cae:	0052      	lsls	r2, r2, #1
 8006cb0:	e7d8      	b.n	8006c64 <_dtoa_r+0x25c>
 8006cb2:	bf00      	nop
 8006cb4:	f3af 8000 	nop.w
 8006cb8:	636f4361 	.word	0x636f4361
 8006cbc:	3fd287a7 	.word	0x3fd287a7
 8006cc0:	8b60c8b3 	.word	0x8b60c8b3
 8006cc4:	3fc68a28 	.word	0x3fc68a28
 8006cc8:	509f79fb 	.word	0x509f79fb
 8006ccc:	3fd34413 	.word	0x3fd34413
 8006cd0:	08009fce 	.word	0x08009fce
 8006cd4:	08009fe5 	.word	0x08009fe5
 8006cd8:	7ff00000 	.word	0x7ff00000
 8006cdc:	08009f99 	.word	0x08009f99
 8006ce0:	3ff80000 	.word	0x3ff80000
 8006ce4:	0800a0e0 	.word	0x0800a0e0
 8006ce8:	0800a03d 	.word	0x0800a03d
 8006cec:	08009fca 	.word	0x08009fca
 8006cf0:	08009f98 	.word	0x08009f98
 8006cf4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006cf8:	6018      	str	r0, [r3, #0]
 8006cfa:	9b07      	ldr	r3, [sp, #28]
 8006cfc:	2b0e      	cmp	r3, #14
 8006cfe:	f200 80a4 	bhi.w	8006e4a <_dtoa_r+0x442>
 8006d02:	2c00      	cmp	r4, #0
 8006d04:	f000 80a1 	beq.w	8006e4a <_dtoa_r+0x442>
 8006d08:	2f00      	cmp	r7, #0
 8006d0a:	dd33      	ble.n	8006d74 <_dtoa_r+0x36c>
 8006d0c:	4bad      	ldr	r3, [pc, #692]	@ (8006fc4 <_dtoa_r+0x5bc>)
 8006d0e:	f007 020f 	and.w	r2, r7, #15
 8006d12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d16:	ed93 7b00 	vldr	d7, [r3]
 8006d1a:	05f8      	lsls	r0, r7, #23
 8006d1c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006d20:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006d24:	d516      	bpl.n	8006d54 <_dtoa_r+0x34c>
 8006d26:	4ba8      	ldr	r3, [pc, #672]	@ (8006fc8 <_dtoa_r+0x5c0>)
 8006d28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d30:	f7f9 fda4 	bl	800087c <__aeabi_ddiv>
 8006d34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d38:	f004 040f 	and.w	r4, r4, #15
 8006d3c:	2603      	movs	r6, #3
 8006d3e:	4da2      	ldr	r5, [pc, #648]	@ (8006fc8 <_dtoa_r+0x5c0>)
 8006d40:	b954      	cbnz	r4, 8006d58 <_dtoa_r+0x350>
 8006d42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d4a:	f7f9 fd97 	bl	800087c <__aeabi_ddiv>
 8006d4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d52:	e028      	b.n	8006da6 <_dtoa_r+0x39e>
 8006d54:	2602      	movs	r6, #2
 8006d56:	e7f2      	b.n	8006d3e <_dtoa_r+0x336>
 8006d58:	07e1      	lsls	r1, r4, #31
 8006d5a:	d508      	bpl.n	8006d6e <_dtoa_r+0x366>
 8006d5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d60:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006d64:	f7f9 fc60 	bl	8000628 <__aeabi_dmul>
 8006d68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d6c:	3601      	adds	r6, #1
 8006d6e:	1064      	asrs	r4, r4, #1
 8006d70:	3508      	adds	r5, #8
 8006d72:	e7e5      	b.n	8006d40 <_dtoa_r+0x338>
 8006d74:	f000 80d2 	beq.w	8006f1c <_dtoa_r+0x514>
 8006d78:	427c      	negs	r4, r7
 8006d7a:	4b92      	ldr	r3, [pc, #584]	@ (8006fc4 <_dtoa_r+0x5bc>)
 8006d7c:	4d92      	ldr	r5, [pc, #584]	@ (8006fc8 <_dtoa_r+0x5c0>)
 8006d7e:	f004 020f 	and.w	r2, r4, #15
 8006d82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d8e:	f7f9 fc4b 	bl	8000628 <__aeabi_dmul>
 8006d92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d96:	1124      	asrs	r4, r4, #4
 8006d98:	2300      	movs	r3, #0
 8006d9a:	2602      	movs	r6, #2
 8006d9c:	2c00      	cmp	r4, #0
 8006d9e:	f040 80b2 	bne.w	8006f06 <_dtoa_r+0x4fe>
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d1d3      	bne.n	8006d4e <_dtoa_r+0x346>
 8006da6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006da8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f000 80b7 	beq.w	8006f20 <_dtoa_r+0x518>
 8006db2:	4b86      	ldr	r3, [pc, #536]	@ (8006fcc <_dtoa_r+0x5c4>)
 8006db4:	2200      	movs	r2, #0
 8006db6:	4620      	mov	r0, r4
 8006db8:	4629      	mov	r1, r5
 8006dba:	f7f9 fea7 	bl	8000b0c <__aeabi_dcmplt>
 8006dbe:	2800      	cmp	r0, #0
 8006dc0:	f000 80ae 	beq.w	8006f20 <_dtoa_r+0x518>
 8006dc4:	9b07      	ldr	r3, [sp, #28]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	f000 80aa 	beq.w	8006f20 <_dtoa_r+0x518>
 8006dcc:	9b00      	ldr	r3, [sp, #0]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	dd37      	ble.n	8006e42 <_dtoa_r+0x43a>
 8006dd2:	1e7b      	subs	r3, r7, #1
 8006dd4:	9304      	str	r3, [sp, #16]
 8006dd6:	4620      	mov	r0, r4
 8006dd8:	4b7d      	ldr	r3, [pc, #500]	@ (8006fd0 <_dtoa_r+0x5c8>)
 8006dda:	2200      	movs	r2, #0
 8006ddc:	4629      	mov	r1, r5
 8006dde:	f7f9 fc23 	bl	8000628 <__aeabi_dmul>
 8006de2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006de6:	9c00      	ldr	r4, [sp, #0]
 8006de8:	3601      	adds	r6, #1
 8006dea:	4630      	mov	r0, r6
 8006dec:	f7f9 fbb2 	bl	8000554 <__aeabi_i2d>
 8006df0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006df4:	f7f9 fc18 	bl	8000628 <__aeabi_dmul>
 8006df8:	4b76      	ldr	r3, [pc, #472]	@ (8006fd4 <_dtoa_r+0x5cc>)
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f7f9 fa5e 	bl	80002bc <__adddf3>
 8006e00:	4605      	mov	r5, r0
 8006e02:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006e06:	2c00      	cmp	r4, #0
 8006e08:	f040 808d 	bne.w	8006f26 <_dtoa_r+0x51e>
 8006e0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e10:	4b71      	ldr	r3, [pc, #452]	@ (8006fd8 <_dtoa_r+0x5d0>)
 8006e12:	2200      	movs	r2, #0
 8006e14:	f7f9 fa50 	bl	80002b8 <__aeabi_dsub>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006e20:	462a      	mov	r2, r5
 8006e22:	4633      	mov	r3, r6
 8006e24:	f7f9 fe90 	bl	8000b48 <__aeabi_dcmpgt>
 8006e28:	2800      	cmp	r0, #0
 8006e2a:	f040 828b 	bne.w	8007344 <_dtoa_r+0x93c>
 8006e2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e32:	462a      	mov	r2, r5
 8006e34:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006e38:	f7f9 fe68 	bl	8000b0c <__aeabi_dcmplt>
 8006e3c:	2800      	cmp	r0, #0
 8006e3e:	f040 8128 	bne.w	8007092 <_dtoa_r+0x68a>
 8006e42:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006e46:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006e4a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f2c0 815a 	blt.w	8007106 <_dtoa_r+0x6fe>
 8006e52:	2f0e      	cmp	r7, #14
 8006e54:	f300 8157 	bgt.w	8007106 <_dtoa_r+0x6fe>
 8006e58:	4b5a      	ldr	r3, [pc, #360]	@ (8006fc4 <_dtoa_r+0x5bc>)
 8006e5a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006e5e:	ed93 7b00 	vldr	d7, [r3]
 8006e62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	ed8d 7b00 	vstr	d7, [sp]
 8006e6a:	da03      	bge.n	8006e74 <_dtoa_r+0x46c>
 8006e6c:	9b07      	ldr	r3, [sp, #28]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	f340 8101 	ble.w	8007076 <_dtoa_r+0x66e>
 8006e74:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006e78:	4656      	mov	r6, sl
 8006e7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e7e:	4620      	mov	r0, r4
 8006e80:	4629      	mov	r1, r5
 8006e82:	f7f9 fcfb 	bl	800087c <__aeabi_ddiv>
 8006e86:	f7f9 fe7f 	bl	8000b88 <__aeabi_d2iz>
 8006e8a:	4680      	mov	r8, r0
 8006e8c:	f7f9 fb62 	bl	8000554 <__aeabi_i2d>
 8006e90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e94:	f7f9 fbc8 	bl	8000628 <__aeabi_dmul>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	4629      	mov	r1, r5
 8006ea0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006ea4:	f7f9 fa08 	bl	80002b8 <__aeabi_dsub>
 8006ea8:	f806 4b01 	strb.w	r4, [r6], #1
 8006eac:	9d07      	ldr	r5, [sp, #28]
 8006eae:	eba6 040a 	sub.w	r4, r6, sl
 8006eb2:	42a5      	cmp	r5, r4
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	f040 8117 	bne.w	80070ea <_dtoa_r+0x6e2>
 8006ebc:	f7f9 f9fe 	bl	80002bc <__adddf3>
 8006ec0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ec4:	4604      	mov	r4, r0
 8006ec6:	460d      	mov	r5, r1
 8006ec8:	f7f9 fe3e 	bl	8000b48 <__aeabi_dcmpgt>
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	f040 80f9 	bne.w	80070c4 <_dtoa_r+0x6bc>
 8006ed2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	4629      	mov	r1, r5
 8006eda:	f7f9 fe0d 	bl	8000af8 <__aeabi_dcmpeq>
 8006ede:	b118      	cbz	r0, 8006ee8 <_dtoa_r+0x4e0>
 8006ee0:	f018 0f01 	tst.w	r8, #1
 8006ee4:	f040 80ee 	bne.w	80070c4 <_dtoa_r+0x6bc>
 8006ee8:	4649      	mov	r1, r9
 8006eea:	4658      	mov	r0, fp
 8006eec:	f000 fc90 	bl	8007810 <_Bfree>
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	7033      	strb	r3, [r6, #0]
 8006ef4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006ef6:	3701      	adds	r7, #1
 8006ef8:	601f      	str	r7, [r3, #0]
 8006efa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	f000 831d 	beq.w	800753c <_dtoa_r+0xb34>
 8006f02:	601e      	str	r6, [r3, #0]
 8006f04:	e31a      	b.n	800753c <_dtoa_r+0xb34>
 8006f06:	07e2      	lsls	r2, r4, #31
 8006f08:	d505      	bpl.n	8006f16 <_dtoa_r+0x50e>
 8006f0a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006f0e:	f7f9 fb8b 	bl	8000628 <__aeabi_dmul>
 8006f12:	3601      	adds	r6, #1
 8006f14:	2301      	movs	r3, #1
 8006f16:	1064      	asrs	r4, r4, #1
 8006f18:	3508      	adds	r5, #8
 8006f1a:	e73f      	b.n	8006d9c <_dtoa_r+0x394>
 8006f1c:	2602      	movs	r6, #2
 8006f1e:	e742      	b.n	8006da6 <_dtoa_r+0x39e>
 8006f20:	9c07      	ldr	r4, [sp, #28]
 8006f22:	9704      	str	r7, [sp, #16]
 8006f24:	e761      	b.n	8006dea <_dtoa_r+0x3e2>
 8006f26:	4b27      	ldr	r3, [pc, #156]	@ (8006fc4 <_dtoa_r+0x5bc>)
 8006f28:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f2a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006f2e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f32:	4454      	add	r4, sl
 8006f34:	2900      	cmp	r1, #0
 8006f36:	d053      	beq.n	8006fe0 <_dtoa_r+0x5d8>
 8006f38:	4928      	ldr	r1, [pc, #160]	@ (8006fdc <_dtoa_r+0x5d4>)
 8006f3a:	2000      	movs	r0, #0
 8006f3c:	f7f9 fc9e 	bl	800087c <__aeabi_ddiv>
 8006f40:	4633      	mov	r3, r6
 8006f42:	462a      	mov	r2, r5
 8006f44:	f7f9 f9b8 	bl	80002b8 <__aeabi_dsub>
 8006f48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006f4c:	4656      	mov	r6, sl
 8006f4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f52:	f7f9 fe19 	bl	8000b88 <__aeabi_d2iz>
 8006f56:	4605      	mov	r5, r0
 8006f58:	f7f9 fafc 	bl	8000554 <__aeabi_i2d>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	460b      	mov	r3, r1
 8006f60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f64:	f7f9 f9a8 	bl	80002b8 <__aeabi_dsub>
 8006f68:	3530      	adds	r5, #48	@ 0x30
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f72:	f806 5b01 	strb.w	r5, [r6], #1
 8006f76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006f7a:	f7f9 fdc7 	bl	8000b0c <__aeabi_dcmplt>
 8006f7e:	2800      	cmp	r0, #0
 8006f80:	d171      	bne.n	8007066 <_dtoa_r+0x65e>
 8006f82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f86:	4911      	ldr	r1, [pc, #68]	@ (8006fcc <_dtoa_r+0x5c4>)
 8006f88:	2000      	movs	r0, #0
 8006f8a:	f7f9 f995 	bl	80002b8 <__aeabi_dsub>
 8006f8e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006f92:	f7f9 fdbb 	bl	8000b0c <__aeabi_dcmplt>
 8006f96:	2800      	cmp	r0, #0
 8006f98:	f040 8095 	bne.w	80070c6 <_dtoa_r+0x6be>
 8006f9c:	42a6      	cmp	r6, r4
 8006f9e:	f43f af50 	beq.w	8006e42 <_dtoa_r+0x43a>
 8006fa2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8006fd0 <_dtoa_r+0x5c8>)
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f7f9 fb3d 	bl	8000628 <__aeabi_dmul>
 8006fae:	4b08      	ldr	r3, [pc, #32]	@ (8006fd0 <_dtoa_r+0x5c8>)
 8006fb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fba:	f7f9 fb35 	bl	8000628 <__aeabi_dmul>
 8006fbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fc2:	e7c4      	b.n	8006f4e <_dtoa_r+0x546>
 8006fc4:	0800a0e0 	.word	0x0800a0e0
 8006fc8:	0800a0b8 	.word	0x0800a0b8
 8006fcc:	3ff00000 	.word	0x3ff00000
 8006fd0:	40240000 	.word	0x40240000
 8006fd4:	401c0000 	.word	0x401c0000
 8006fd8:	40140000 	.word	0x40140000
 8006fdc:	3fe00000 	.word	0x3fe00000
 8006fe0:	4631      	mov	r1, r6
 8006fe2:	4628      	mov	r0, r5
 8006fe4:	f7f9 fb20 	bl	8000628 <__aeabi_dmul>
 8006fe8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006fec:	9415      	str	r4, [sp, #84]	@ 0x54
 8006fee:	4656      	mov	r6, sl
 8006ff0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ff4:	f7f9 fdc8 	bl	8000b88 <__aeabi_d2iz>
 8006ff8:	4605      	mov	r5, r0
 8006ffa:	f7f9 faab 	bl	8000554 <__aeabi_i2d>
 8006ffe:	4602      	mov	r2, r0
 8007000:	460b      	mov	r3, r1
 8007002:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007006:	f7f9 f957 	bl	80002b8 <__aeabi_dsub>
 800700a:	3530      	adds	r5, #48	@ 0x30
 800700c:	f806 5b01 	strb.w	r5, [r6], #1
 8007010:	4602      	mov	r2, r0
 8007012:	460b      	mov	r3, r1
 8007014:	42a6      	cmp	r6, r4
 8007016:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800701a:	f04f 0200 	mov.w	r2, #0
 800701e:	d124      	bne.n	800706a <_dtoa_r+0x662>
 8007020:	4bac      	ldr	r3, [pc, #688]	@ (80072d4 <_dtoa_r+0x8cc>)
 8007022:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007026:	f7f9 f949 	bl	80002bc <__adddf3>
 800702a:	4602      	mov	r2, r0
 800702c:	460b      	mov	r3, r1
 800702e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007032:	f7f9 fd89 	bl	8000b48 <__aeabi_dcmpgt>
 8007036:	2800      	cmp	r0, #0
 8007038:	d145      	bne.n	80070c6 <_dtoa_r+0x6be>
 800703a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800703e:	49a5      	ldr	r1, [pc, #660]	@ (80072d4 <_dtoa_r+0x8cc>)
 8007040:	2000      	movs	r0, #0
 8007042:	f7f9 f939 	bl	80002b8 <__aeabi_dsub>
 8007046:	4602      	mov	r2, r0
 8007048:	460b      	mov	r3, r1
 800704a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800704e:	f7f9 fd5d 	bl	8000b0c <__aeabi_dcmplt>
 8007052:	2800      	cmp	r0, #0
 8007054:	f43f aef5 	beq.w	8006e42 <_dtoa_r+0x43a>
 8007058:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800705a:	1e73      	subs	r3, r6, #1
 800705c:	9315      	str	r3, [sp, #84]	@ 0x54
 800705e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007062:	2b30      	cmp	r3, #48	@ 0x30
 8007064:	d0f8      	beq.n	8007058 <_dtoa_r+0x650>
 8007066:	9f04      	ldr	r7, [sp, #16]
 8007068:	e73e      	b.n	8006ee8 <_dtoa_r+0x4e0>
 800706a:	4b9b      	ldr	r3, [pc, #620]	@ (80072d8 <_dtoa_r+0x8d0>)
 800706c:	f7f9 fadc 	bl	8000628 <__aeabi_dmul>
 8007070:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007074:	e7bc      	b.n	8006ff0 <_dtoa_r+0x5e8>
 8007076:	d10c      	bne.n	8007092 <_dtoa_r+0x68a>
 8007078:	4b98      	ldr	r3, [pc, #608]	@ (80072dc <_dtoa_r+0x8d4>)
 800707a:	2200      	movs	r2, #0
 800707c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007080:	f7f9 fad2 	bl	8000628 <__aeabi_dmul>
 8007084:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007088:	f7f9 fd54 	bl	8000b34 <__aeabi_dcmpge>
 800708c:	2800      	cmp	r0, #0
 800708e:	f000 8157 	beq.w	8007340 <_dtoa_r+0x938>
 8007092:	2400      	movs	r4, #0
 8007094:	4625      	mov	r5, r4
 8007096:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007098:	43db      	mvns	r3, r3
 800709a:	9304      	str	r3, [sp, #16]
 800709c:	4656      	mov	r6, sl
 800709e:	2700      	movs	r7, #0
 80070a0:	4621      	mov	r1, r4
 80070a2:	4658      	mov	r0, fp
 80070a4:	f000 fbb4 	bl	8007810 <_Bfree>
 80070a8:	2d00      	cmp	r5, #0
 80070aa:	d0dc      	beq.n	8007066 <_dtoa_r+0x65e>
 80070ac:	b12f      	cbz	r7, 80070ba <_dtoa_r+0x6b2>
 80070ae:	42af      	cmp	r7, r5
 80070b0:	d003      	beq.n	80070ba <_dtoa_r+0x6b2>
 80070b2:	4639      	mov	r1, r7
 80070b4:	4658      	mov	r0, fp
 80070b6:	f000 fbab 	bl	8007810 <_Bfree>
 80070ba:	4629      	mov	r1, r5
 80070bc:	4658      	mov	r0, fp
 80070be:	f000 fba7 	bl	8007810 <_Bfree>
 80070c2:	e7d0      	b.n	8007066 <_dtoa_r+0x65e>
 80070c4:	9704      	str	r7, [sp, #16]
 80070c6:	4633      	mov	r3, r6
 80070c8:	461e      	mov	r6, r3
 80070ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070ce:	2a39      	cmp	r2, #57	@ 0x39
 80070d0:	d107      	bne.n	80070e2 <_dtoa_r+0x6da>
 80070d2:	459a      	cmp	sl, r3
 80070d4:	d1f8      	bne.n	80070c8 <_dtoa_r+0x6c0>
 80070d6:	9a04      	ldr	r2, [sp, #16]
 80070d8:	3201      	adds	r2, #1
 80070da:	9204      	str	r2, [sp, #16]
 80070dc:	2230      	movs	r2, #48	@ 0x30
 80070de:	f88a 2000 	strb.w	r2, [sl]
 80070e2:	781a      	ldrb	r2, [r3, #0]
 80070e4:	3201      	adds	r2, #1
 80070e6:	701a      	strb	r2, [r3, #0]
 80070e8:	e7bd      	b.n	8007066 <_dtoa_r+0x65e>
 80070ea:	4b7b      	ldr	r3, [pc, #492]	@ (80072d8 <_dtoa_r+0x8d0>)
 80070ec:	2200      	movs	r2, #0
 80070ee:	f7f9 fa9b 	bl	8000628 <__aeabi_dmul>
 80070f2:	2200      	movs	r2, #0
 80070f4:	2300      	movs	r3, #0
 80070f6:	4604      	mov	r4, r0
 80070f8:	460d      	mov	r5, r1
 80070fa:	f7f9 fcfd 	bl	8000af8 <__aeabi_dcmpeq>
 80070fe:	2800      	cmp	r0, #0
 8007100:	f43f aebb 	beq.w	8006e7a <_dtoa_r+0x472>
 8007104:	e6f0      	b.n	8006ee8 <_dtoa_r+0x4e0>
 8007106:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007108:	2a00      	cmp	r2, #0
 800710a:	f000 80db 	beq.w	80072c4 <_dtoa_r+0x8bc>
 800710e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007110:	2a01      	cmp	r2, #1
 8007112:	f300 80bf 	bgt.w	8007294 <_dtoa_r+0x88c>
 8007116:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007118:	2a00      	cmp	r2, #0
 800711a:	f000 80b7 	beq.w	800728c <_dtoa_r+0x884>
 800711e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007122:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007124:	4646      	mov	r6, r8
 8007126:	9a08      	ldr	r2, [sp, #32]
 8007128:	2101      	movs	r1, #1
 800712a:	441a      	add	r2, r3
 800712c:	4658      	mov	r0, fp
 800712e:	4498      	add	r8, r3
 8007130:	9208      	str	r2, [sp, #32]
 8007132:	f000 fc6b 	bl	8007a0c <__i2b>
 8007136:	4605      	mov	r5, r0
 8007138:	b15e      	cbz	r6, 8007152 <_dtoa_r+0x74a>
 800713a:	9b08      	ldr	r3, [sp, #32]
 800713c:	2b00      	cmp	r3, #0
 800713e:	dd08      	ble.n	8007152 <_dtoa_r+0x74a>
 8007140:	42b3      	cmp	r3, r6
 8007142:	9a08      	ldr	r2, [sp, #32]
 8007144:	bfa8      	it	ge
 8007146:	4633      	movge	r3, r6
 8007148:	eba8 0803 	sub.w	r8, r8, r3
 800714c:	1af6      	subs	r6, r6, r3
 800714e:	1ad3      	subs	r3, r2, r3
 8007150:	9308      	str	r3, [sp, #32]
 8007152:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007154:	b1f3      	cbz	r3, 8007194 <_dtoa_r+0x78c>
 8007156:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007158:	2b00      	cmp	r3, #0
 800715a:	f000 80b7 	beq.w	80072cc <_dtoa_r+0x8c4>
 800715e:	b18c      	cbz	r4, 8007184 <_dtoa_r+0x77c>
 8007160:	4629      	mov	r1, r5
 8007162:	4622      	mov	r2, r4
 8007164:	4658      	mov	r0, fp
 8007166:	f000 fd11 	bl	8007b8c <__pow5mult>
 800716a:	464a      	mov	r2, r9
 800716c:	4601      	mov	r1, r0
 800716e:	4605      	mov	r5, r0
 8007170:	4658      	mov	r0, fp
 8007172:	f000 fc61 	bl	8007a38 <__multiply>
 8007176:	4649      	mov	r1, r9
 8007178:	9004      	str	r0, [sp, #16]
 800717a:	4658      	mov	r0, fp
 800717c:	f000 fb48 	bl	8007810 <_Bfree>
 8007180:	9b04      	ldr	r3, [sp, #16]
 8007182:	4699      	mov	r9, r3
 8007184:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007186:	1b1a      	subs	r2, r3, r4
 8007188:	d004      	beq.n	8007194 <_dtoa_r+0x78c>
 800718a:	4649      	mov	r1, r9
 800718c:	4658      	mov	r0, fp
 800718e:	f000 fcfd 	bl	8007b8c <__pow5mult>
 8007192:	4681      	mov	r9, r0
 8007194:	2101      	movs	r1, #1
 8007196:	4658      	mov	r0, fp
 8007198:	f000 fc38 	bl	8007a0c <__i2b>
 800719c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800719e:	4604      	mov	r4, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f000 81cf 	beq.w	8007544 <_dtoa_r+0xb3c>
 80071a6:	461a      	mov	r2, r3
 80071a8:	4601      	mov	r1, r0
 80071aa:	4658      	mov	r0, fp
 80071ac:	f000 fcee 	bl	8007b8c <__pow5mult>
 80071b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	4604      	mov	r4, r0
 80071b6:	f300 8095 	bgt.w	80072e4 <_dtoa_r+0x8dc>
 80071ba:	9b02      	ldr	r3, [sp, #8]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f040 8087 	bne.w	80072d0 <_dtoa_r+0x8c8>
 80071c2:	9b03      	ldr	r3, [sp, #12]
 80071c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f040 8089 	bne.w	80072e0 <_dtoa_r+0x8d8>
 80071ce:	9b03      	ldr	r3, [sp, #12]
 80071d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80071d4:	0d1b      	lsrs	r3, r3, #20
 80071d6:	051b      	lsls	r3, r3, #20
 80071d8:	b12b      	cbz	r3, 80071e6 <_dtoa_r+0x7de>
 80071da:	9b08      	ldr	r3, [sp, #32]
 80071dc:	3301      	adds	r3, #1
 80071de:	9308      	str	r3, [sp, #32]
 80071e0:	f108 0801 	add.w	r8, r8, #1
 80071e4:	2301      	movs	r3, #1
 80071e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80071e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	f000 81b0 	beq.w	8007550 <_dtoa_r+0xb48>
 80071f0:	6923      	ldr	r3, [r4, #16]
 80071f2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80071f6:	6918      	ldr	r0, [r3, #16]
 80071f8:	f000 fbbc 	bl	8007974 <__hi0bits>
 80071fc:	f1c0 0020 	rsb	r0, r0, #32
 8007200:	9b08      	ldr	r3, [sp, #32]
 8007202:	4418      	add	r0, r3
 8007204:	f010 001f 	ands.w	r0, r0, #31
 8007208:	d077      	beq.n	80072fa <_dtoa_r+0x8f2>
 800720a:	f1c0 0320 	rsb	r3, r0, #32
 800720e:	2b04      	cmp	r3, #4
 8007210:	dd6b      	ble.n	80072ea <_dtoa_r+0x8e2>
 8007212:	9b08      	ldr	r3, [sp, #32]
 8007214:	f1c0 001c 	rsb	r0, r0, #28
 8007218:	4403      	add	r3, r0
 800721a:	4480      	add	r8, r0
 800721c:	4406      	add	r6, r0
 800721e:	9308      	str	r3, [sp, #32]
 8007220:	f1b8 0f00 	cmp.w	r8, #0
 8007224:	dd05      	ble.n	8007232 <_dtoa_r+0x82a>
 8007226:	4649      	mov	r1, r9
 8007228:	4642      	mov	r2, r8
 800722a:	4658      	mov	r0, fp
 800722c:	f000 fd08 	bl	8007c40 <__lshift>
 8007230:	4681      	mov	r9, r0
 8007232:	9b08      	ldr	r3, [sp, #32]
 8007234:	2b00      	cmp	r3, #0
 8007236:	dd05      	ble.n	8007244 <_dtoa_r+0x83c>
 8007238:	4621      	mov	r1, r4
 800723a:	461a      	mov	r2, r3
 800723c:	4658      	mov	r0, fp
 800723e:	f000 fcff 	bl	8007c40 <__lshift>
 8007242:	4604      	mov	r4, r0
 8007244:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007246:	2b00      	cmp	r3, #0
 8007248:	d059      	beq.n	80072fe <_dtoa_r+0x8f6>
 800724a:	4621      	mov	r1, r4
 800724c:	4648      	mov	r0, r9
 800724e:	f000 fd63 	bl	8007d18 <__mcmp>
 8007252:	2800      	cmp	r0, #0
 8007254:	da53      	bge.n	80072fe <_dtoa_r+0x8f6>
 8007256:	1e7b      	subs	r3, r7, #1
 8007258:	9304      	str	r3, [sp, #16]
 800725a:	4649      	mov	r1, r9
 800725c:	2300      	movs	r3, #0
 800725e:	220a      	movs	r2, #10
 8007260:	4658      	mov	r0, fp
 8007262:	f000 faf7 	bl	8007854 <__multadd>
 8007266:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007268:	4681      	mov	r9, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	f000 8172 	beq.w	8007554 <_dtoa_r+0xb4c>
 8007270:	2300      	movs	r3, #0
 8007272:	4629      	mov	r1, r5
 8007274:	220a      	movs	r2, #10
 8007276:	4658      	mov	r0, fp
 8007278:	f000 faec 	bl	8007854 <__multadd>
 800727c:	9b00      	ldr	r3, [sp, #0]
 800727e:	2b00      	cmp	r3, #0
 8007280:	4605      	mov	r5, r0
 8007282:	dc67      	bgt.n	8007354 <_dtoa_r+0x94c>
 8007284:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007286:	2b02      	cmp	r3, #2
 8007288:	dc41      	bgt.n	800730e <_dtoa_r+0x906>
 800728a:	e063      	b.n	8007354 <_dtoa_r+0x94c>
 800728c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800728e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007292:	e746      	b.n	8007122 <_dtoa_r+0x71a>
 8007294:	9b07      	ldr	r3, [sp, #28]
 8007296:	1e5c      	subs	r4, r3, #1
 8007298:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800729a:	42a3      	cmp	r3, r4
 800729c:	bfbf      	itttt	lt
 800729e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80072a0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80072a2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80072a4:	1ae3      	sublt	r3, r4, r3
 80072a6:	bfb4      	ite	lt
 80072a8:	18d2      	addlt	r2, r2, r3
 80072aa:	1b1c      	subge	r4, r3, r4
 80072ac:	9b07      	ldr	r3, [sp, #28]
 80072ae:	bfbc      	itt	lt
 80072b0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80072b2:	2400      	movlt	r4, #0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	bfb5      	itete	lt
 80072b8:	eba8 0603 	sublt.w	r6, r8, r3
 80072bc:	9b07      	ldrge	r3, [sp, #28]
 80072be:	2300      	movlt	r3, #0
 80072c0:	4646      	movge	r6, r8
 80072c2:	e730      	b.n	8007126 <_dtoa_r+0x71e>
 80072c4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80072c6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80072c8:	4646      	mov	r6, r8
 80072ca:	e735      	b.n	8007138 <_dtoa_r+0x730>
 80072cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80072ce:	e75c      	b.n	800718a <_dtoa_r+0x782>
 80072d0:	2300      	movs	r3, #0
 80072d2:	e788      	b.n	80071e6 <_dtoa_r+0x7de>
 80072d4:	3fe00000 	.word	0x3fe00000
 80072d8:	40240000 	.word	0x40240000
 80072dc:	40140000 	.word	0x40140000
 80072e0:	9b02      	ldr	r3, [sp, #8]
 80072e2:	e780      	b.n	80071e6 <_dtoa_r+0x7de>
 80072e4:	2300      	movs	r3, #0
 80072e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80072e8:	e782      	b.n	80071f0 <_dtoa_r+0x7e8>
 80072ea:	d099      	beq.n	8007220 <_dtoa_r+0x818>
 80072ec:	9a08      	ldr	r2, [sp, #32]
 80072ee:	331c      	adds	r3, #28
 80072f0:	441a      	add	r2, r3
 80072f2:	4498      	add	r8, r3
 80072f4:	441e      	add	r6, r3
 80072f6:	9208      	str	r2, [sp, #32]
 80072f8:	e792      	b.n	8007220 <_dtoa_r+0x818>
 80072fa:	4603      	mov	r3, r0
 80072fc:	e7f6      	b.n	80072ec <_dtoa_r+0x8e4>
 80072fe:	9b07      	ldr	r3, [sp, #28]
 8007300:	9704      	str	r7, [sp, #16]
 8007302:	2b00      	cmp	r3, #0
 8007304:	dc20      	bgt.n	8007348 <_dtoa_r+0x940>
 8007306:	9300      	str	r3, [sp, #0]
 8007308:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800730a:	2b02      	cmp	r3, #2
 800730c:	dd1e      	ble.n	800734c <_dtoa_r+0x944>
 800730e:	9b00      	ldr	r3, [sp, #0]
 8007310:	2b00      	cmp	r3, #0
 8007312:	f47f aec0 	bne.w	8007096 <_dtoa_r+0x68e>
 8007316:	4621      	mov	r1, r4
 8007318:	2205      	movs	r2, #5
 800731a:	4658      	mov	r0, fp
 800731c:	f000 fa9a 	bl	8007854 <__multadd>
 8007320:	4601      	mov	r1, r0
 8007322:	4604      	mov	r4, r0
 8007324:	4648      	mov	r0, r9
 8007326:	f000 fcf7 	bl	8007d18 <__mcmp>
 800732a:	2800      	cmp	r0, #0
 800732c:	f77f aeb3 	ble.w	8007096 <_dtoa_r+0x68e>
 8007330:	4656      	mov	r6, sl
 8007332:	2331      	movs	r3, #49	@ 0x31
 8007334:	f806 3b01 	strb.w	r3, [r6], #1
 8007338:	9b04      	ldr	r3, [sp, #16]
 800733a:	3301      	adds	r3, #1
 800733c:	9304      	str	r3, [sp, #16]
 800733e:	e6ae      	b.n	800709e <_dtoa_r+0x696>
 8007340:	9c07      	ldr	r4, [sp, #28]
 8007342:	9704      	str	r7, [sp, #16]
 8007344:	4625      	mov	r5, r4
 8007346:	e7f3      	b.n	8007330 <_dtoa_r+0x928>
 8007348:	9b07      	ldr	r3, [sp, #28]
 800734a:	9300      	str	r3, [sp, #0]
 800734c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800734e:	2b00      	cmp	r3, #0
 8007350:	f000 8104 	beq.w	800755c <_dtoa_r+0xb54>
 8007354:	2e00      	cmp	r6, #0
 8007356:	dd05      	ble.n	8007364 <_dtoa_r+0x95c>
 8007358:	4629      	mov	r1, r5
 800735a:	4632      	mov	r2, r6
 800735c:	4658      	mov	r0, fp
 800735e:	f000 fc6f 	bl	8007c40 <__lshift>
 8007362:	4605      	mov	r5, r0
 8007364:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007366:	2b00      	cmp	r3, #0
 8007368:	d05a      	beq.n	8007420 <_dtoa_r+0xa18>
 800736a:	6869      	ldr	r1, [r5, #4]
 800736c:	4658      	mov	r0, fp
 800736e:	f000 fa0f 	bl	8007790 <_Balloc>
 8007372:	4606      	mov	r6, r0
 8007374:	b928      	cbnz	r0, 8007382 <_dtoa_r+0x97a>
 8007376:	4b84      	ldr	r3, [pc, #528]	@ (8007588 <_dtoa_r+0xb80>)
 8007378:	4602      	mov	r2, r0
 800737a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800737e:	f7ff bb5a 	b.w	8006a36 <_dtoa_r+0x2e>
 8007382:	692a      	ldr	r2, [r5, #16]
 8007384:	3202      	adds	r2, #2
 8007386:	0092      	lsls	r2, r2, #2
 8007388:	f105 010c 	add.w	r1, r5, #12
 800738c:	300c      	adds	r0, #12
 800738e:	f001 fff9 	bl	8009384 <memcpy>
 8007392:	2201      	movs	r2, #1
 8007394:	4631      	mov	r1, r6
 8007396:	4658      	mov	r0, fp
 8007398:	f000 fc52 	bl	8007c40 <__lshift>
 800739c:	f10a 0301 	add.w	r3, sl, #1
 80073a0:	9307      	str	r3, [sp, #28]
 80073a2:	9b00      	ldr	r3, [sp, #0]
 80073a4:	4453      	add	r3, sl
 80073a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80073a8:	9b02      	ldr	r3, [sp, #8]
 80073aa:	f003 0301 	and.w	r3, r3, #1
 80073ae:	462f      	mov	r7, r5
 80073b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80073b2:	4605      	mov	r5, r0
 80073b4:	9b07      	ldr	r3, [sp, #28]
 80073b6:	4621      	mov	r1, r4
 80073b8:	3b01      	subs	r3, #1
 80073ba:	4648      	mov	r0, r9
 80073bc:	9300      	str	r3, [sp, #0]
 80073be:	f7ff fa99 	bl	80068f4 <quorem>
 80073c2:	4639      	mov	r1, r7
 80073c4:	9002      	str	r0, [sp, #8]
 80073c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80073ca:	4648      	mov	r0, r9
 80073cc:	f000 fca4 	bl	8007d18 <__mcmp>
 80073d0:	462a      	mov	r2, r5
 80073d2:	9008      	str	r0, [sp, #32]
 80073d4:	4621      	mov	r1, r4
 80073d6:	4658      	mov	r0, fp
 80073d8:	f000 fcba 	bl	8007d50 <__mdiff>
 80073dc:	68c2      	ldr	r2, [r0, #12]
 80073de:	4606      	mov	r6, r0
 80073e0:	bb02      	cbnz	r2, 8007424 <_dtoa_r+0xa1c>
 80073e2:	4601      	mov	r1, r0
 80073e4:	4648      	mov	r0, r9
 80073e6:	f000 fc97 	bl	8007d18 <__mcmp>
 80073ea:	4602      	mov	r2, r0
 80073ec:	4631      	mov	r1, r6
 80073ee:	4658      	mov	r0, fp
 80073f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80073f2:	f000 fa0d 	bl	8007810 <_Bfree>
 80073f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80073fa:	9e07      	ldr	r6, [sp, #28]
 80073fc:	ea43 0102 	orr.w	r1, r3, r2
 8007400:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007402:	4319      	orrs	r1, r3
 8007404:	d110      	bne.n	8007428 <_dtoa_r+0xa20>
 8007406:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800740a:	d029      	beq.n	8007460 <_dtoa_r+0xa58>
 800740c:	9b08      	ldr	r3, [sp, #32]
 800740e:	2b00      	cmp	r3, #0
 8007410:	dd02      	ble.n	8007418 <_dtoa_r+0xa10>
 8007412:	9b02      	ldr	r3, [sp, #8]
 8007414:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007418:	9b00      	ldr	r3, [sp, #0]
 800741a:	f883 8000 	strb.w	r8, [r3]
 800741e:	e63f      	b.n	80070a0 <_dtoa_r+0x698>
 8007420:	4628      	mov	r0, r5
 8007422:	e7bb      	b.n	800739c <_dtoa_r+0x994>
 8007424:	2201      	movs	r2, #1
 8007426:	e7e1      	b.n	80073ec <_dtoa_r+0x9e4>
 8007428:	9b08      	ldr	r3, [sp, #32]
 800742a:	2b00      	cmp	r3, #0
 800742c:	db04      	blt.n	8007438 <_dtoa_r+0xa30>
 800742e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007430:	430b      	orrs	r3, r1
 8007432:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007434:	430b      	orrs	r3, r1
 8007436:	d120      	bne.n	800747a <_dtoa_r+0xa72>
 8007438:	2a00      	cmp	r2, #0
 800743a:	dded      	ble.n	8007418 <_dtoa_r+0xa10>
 800743c:	4649      	mov	r1, r9
 800743e:	2201      	movs	r2, #1
 8007440:	4658      	mov	r0, fp
 8007442:	f000 fbfd 	bl	8007c40 <__lshift>
 8007446:	4621      	mov	r1, r4
 8007448:	4681      	mov	r9, r0
 800744a:	f000 fc65 	bl	8007d18 <__mcmp>
 800744e:	2800      	cmp	r0, #0
 8007450:	dc03      	bgt.n	800745a <_dtoa_r+0xa52>
 8007452:	d1e1      	bne.n	8007418 <_dtoa_r+0xa10>
 8007454:	f018 0f01 	tst.w	r8, #1
 8007458:	d0de      	beq.n	8007418 <_dtoa_r+0xa10>
 800745a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800745e:	d1d8      	bne.n	8007412 <_dtoa_r+0xa0a>
 8007460:	9a00      	ldr	r2, [sp, #0]
 8007462:	2339      	movs	r3, #57	@ 0x39
 8007464:	7013      	strb	r3, [r2, #0]
 8007466:	4633      	mov	r3, r6
 8007468:	461e      	mov	r6, r3
 800746a:	3b01      	subs	r3, #1
 800746c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007470:	2a39      	cmp	r2, #57	@ 0x39
 8007472:	d052      	beq.n	800751a <_dtoa_r+0xb12>
 8007474:	3201      	adds	r2, #1
 8007476:	701a      	strb	r2, [r3, #0]
 8007478:	e612      	b.n	80070a0 <_dtoa_r+0x698>
 800747a:	2a00      	cmp	r2, #0
 800747c:	dd07      	ble.n	800748e <_dtoa_r+0xa86>
 800747e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007482:	d0ed      	beq.n	8007460 <_dtoa_r+0xa58>
 8007484:	9a00      	ldr	r2, [sp, #0]
 8007486:	f108 0301 	add.w	r3, r8, #1
 800748a:	7013      	strb	r3, [r2, #0]
 800748c:	e608      	b.n	80070a0 <_dtoa_r+0x698>
 800748e:	9b07      	ldr	r3, [sp, #28]
 8007490:	9a07      	ldr	r2, [sp, #28]
 8007492:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007496:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007498:	4293      	cmp	r3, r2
 800749a:	d028      	beq.n	80074ee <_dtoa_r+0xae6>
 800749c:	4649      	mov	r1, r9
 800749e:	2300      	movs	r3, #0
 80074a0:	220a      	movs	r2, #10
 80074a2:	4658      	mov	r0, fp
 80074a4:	f000 f9d6 	bl	8007854 <__multadd>
 80074a8:	42af      	cmp	r7, r5
 80074aa:	4681      	mov	r9, r0
 80074ac:	f04f 0300 	mov.w	r3, #0
 80074b0:	f04f 020a 	mov.w	r2, #10
 80074b4:	4639      	mov	r1, r7
 80074b6:	4658      	mov	r0, fp
 80074b8:	d107      	bne.n	80074ca <_dtoa_r+0xac2>
 80074ba:	f000 f9cb 	bl	8007854 <__multadd>
 80074be:	4607      	mov	r7, r0
 80074c0:	4605      	mov	r5, r0
 80074c2:	9b07      	ldr	r3, [sp, #28]
 80074c4:	3301      	adds	r3, #1
 80074c6:	9307      	str	r3, [sp, #28]
 80074c8:	e774      	b.n	80073b4 <_dtoa_r+0x9ac>
 80074ca:	f000 f9c3 	bl	8007854 <__multadd>
 80074ce:	4629      	mov	r1, r5
 80074d0:	4607      	mov	r7, r0
 80074d2:	2300      	movs	r3, #0
 80074d4:	220a      	movs	r2, #10
 80074d6:	4658      	mov	r0, fp
 80074d8:	f000 f9bc 	bl	8007854 <__multadd>
 80074dc:	4605      	mov	r5, r0
 80074de:	e7f0      	b.n	80074c2 <_dtoa_r+0xaba>
 80074e0:	9b00      	ldr	r3, [sp, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	bfcc      	ite	gt
 80074e6:	461e      	movgt	r6, r3
 80074e8:	2601      	movle	r6, #1
 80074ea:	4456      	add	r6, sl
 80074ec:	2700      	movs	r7, #0
 80074ee:	4649      	mov	r1, r9
 80074f0:	2201      	movs	r2, #1
 80074f2:	4658      	mov	r0, fp
 80074f4:	f000 fba4 	bl	8007c40 <__lshift>
 80074f8:	4621      	mov	r1, r4
 80074fa:	4681      	mov	r9, r0
 80074fc:	f000 fc0c 	bl	8007d18 <__mcmp>
 8007500:	2800      	cmp	r0, #0
 8007502:	dcb0      	bgt.n	8007466 <_dtoa_r+0xa5e>
 8007504:	d102      	bne.n	800750c <_dtoa_r+0xb04>
 8007506:	f018 0f01 	tst.w	r8, #1
 800750a:	d1ac      	bne.n	8007466 <_dtoa_r+0xa5e>
 800750c:	4633      	mov	r3, r6
 800750e:	461e      	mov	r6, r3
 8007510:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007514:	2a30      	cmp	r2, #48	@ 0x30
 8007516:	d0fa      	beq.n	800750e <_dtoa_r+0xb06>
 8007518:	e5c2      	b.n	80070a0 <_dtoa_r+0x698>
 800751a:	459a      	cmp	sl, r3
 800751c:	d1a4      	bne.n	8007468 <_dtoa_r+0xa60>
 800751e:	9b04      	ldr	r3, [sp, #16]
 8007520:	3301      	adds	r3, #1
 8007522:	9304      	str	r3, [sp, #16]
 8007524:	2331      	movs	r3, #49	@ 0x31
 8007526:	f88a 3000 	strb.w	r3, [sl]
 800752a:	e5b9      	b.n	80070a0 <_dtoa_r+0x698>
 800752c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800752e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800758c <_dtoa_r+0xb84>
 8007532:	b11b      	cbz	r3, 800753c <_dtoa_r+0xb34>
 8007534:	f10a 0308 	add.w	r3, sl, #8
 8007538:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800753a:	6013      	str	r3, [r2, #0]
 800753c:	4650      	mov	r0, sl
 800753e:	b019      	add	sp, #100	@ 0x64
 8007540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007544:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007546:	2b01      	cmp	r3, #1
 8007548:	f77f ae37 	ble.w	80071ba <_dtoa_r+0x7b2>
 800754c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800754e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007550:	2001      	movs	r0, #1
 8007552:	e655      	b.n	8007200 <_dtoa_r+0x7f8>
 8007554:	9b00      	ldr	r3, [sp, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	f77f aed6 	ble.w	8007308 <_dtoa_r+0x900>
 800755c:	4656      	mov	r6, sl
 800755e:	4621      	mov	r1, r4
 8007560:	4648      	mov	r0, r9
 8007562:	f7ff f9c7 	bl	80068f4 <quorem>
 8007566:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800756a:	f806 8b01 	strb.w	r8, [r6], #1
 800756e:	9b00      	ldr	r3, [sp, #0]
 8007570:	eba6 020a 	sub.w	r2, r6, sl
 8007574:	4293      	cmp	r3, r2
 8007576:	ddb3      	ble.n	80074e0 <_dtoa_r+0xad8>
 8007578:	4649      	mov	r1, r9
 800757a:	2300      	movs	r3, #0
 800757c:	220a      	movs	r2, #10
 800757e:	4658      	mov	r0, fp
 8007580:	f000 f968 	bl	8007854 <__multadd>
 8007584:	4681      	mov	r9, r0
 8007586:	e7ea      	b.n	800755e <_dtoa_r+0xb56>
 8007588:	0800a03d 	.word	0x0800a03d
 800758c:	08009fc1 	.word	0x08009fc1

08007590 <_free_r>:
 8007590:	b538      	push	{r3, r4, r5, lr}
 8007592:	4605      	mov	r5, r0
 8007594:	2900      	cmp	r1, #0
 8007596:	d041      	beq.n	800761c <_free_r+0x8c>
 8007598:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800759c:	1f0c      	subs	r4, r1, #4
 800759e:	2b00      	cmp	r3, #0
 80075a0:	bfb8      	it	lt
 80075a2:	18e4      	addlt	r4, r4, r3
 80075a4:	f000 f8e8 	bl	8007778 <__malloc_lock>
 80075a8:	4a1d      	ldr	r2, [pc, #116]	@ (8007620 <_free_r+0x90>)
 80075aa:	6813      	ldr	r3, [r2, #0]
 80075ac:	b933      	cbnz	r3, 80075bc <_free_r+0x2c>
 80075ae:	6063      	str	r3, [r4, #4]
 80075b0:	6014      	str	r4, [r2, #0]
 80075b2:	4628      	mov	r0, r5
 80075b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075b8:	f000 b8e4 	b.w	8007784 <__malloc_unlock>
 80075bc:	42a3      	cmp	r3, r4
 80075be:	d908      	bls.n	80075d2 <_free_r+0x42>
 80075c0:	6820      	ldr	r0, [r4, #0]
 80075c2:	1821      	adds	r1, r4, r0
 80075c4:	428b      	cmp	r3, r1
 80075c6:	bf01      	itttt	eq
 80075c8:	6819      	ldreq	r1, [r3, #0]
 80075ca:	685b      	ldreq	r3, [r3, #4]
 80075cc:	1809      	addeq	r1, r1, r0
 80075ce:	6021      	streq	r1, [r4, #0]
 80075d0:	e7ed      	b.n	80075ae <_free_r+0x1e>
 80075d2:	461a      	mov	r2, r3
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	b10b      	cbz	r3, 80075dc <_free_r+0x4c>
 80075d8:	42a3      	cmp	r3, r4
 80075da:	d9fa      	bls.n	80075d2 <_free_r+0x42>
 80075dc:	6811      	ldr	r1, [r2, #0]
 80075de:	1850      	adds	r0, r2, r1
 80075e0:	42a0      	cmp	r0, r4
 80075e2:	d10b      	bne.n	80075fc <_free_r+0x6c>
 80075e4:	6820      	ldr	r0, [r4, #0]
 80075e6:	4401      	add	r1, r0
 80075e8:	1850      	adds	r0, r2, r1
 80075ea:	4283      	cmp	r3, r0
 80075ec:	6011      	str	r1, [r2, #0]
 80075ee:	d1e0      	bne.n	80075b2 <_free_r+0x22>
 80075f0:	6818      	ldr	r0, [r3, #0]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	6053      	str	r3, [r2, #4]
 80075f6:	4408      	add	r0, r1
 80075f8:	6010      	str	r0, [r2, #0]
 80075fa:	e7da      	b.n	80075b2 <_free_r+0x22>
 80075fc:	d902      	bls.n	8007604 <_free_r+0x74>
 80075fe:	230c      	movs	r3, #12
 8007600:	602b      	str	r3, [r5, #0]
 8007602:	e7d6      	b.n	80075b2 <_free_r+0x22>
 8007604:	6820      	ldr	r0, [r4, #0]
 8007606:	1821      	adds	r1, r4, r0
 8007608:	428b      	cmp	r3, r1
 800760a:	bf04      	itt	eq
 800760c:	6819      	ldreq	r1, [r3, #0]
 800760e:	685b      	ldreq	r3, [r3, #4]
 8007610:	6063      	str	r3, [r4, #4]
 8007612:	bf04      	itt	eq
 8007614:	1809      	addeq	r1, r1, r0
 8007616:	6021      	streq	r1, [r4, #0]
 8007618:	6054      	str	r4, [r2, #4]
 800761a:	e7ca      	b.n	80075b2 <_free_r+0x22>
 800761c:	bd38      	pop	{r3, r4, r5, pc}
 800761e:	bf00      	nop
 8007620:	2000044c 	.word	0x2000044c

08007624 <malloc>:
 8007624:	4b02      	ldr	r3, [pc, #8]	@ (8007630 <malloc+0xc>)
 8007626:	4601      	mov	r1, r0
 8007628:	6818      	ldr	r0, [r3, #0]
 800762a:	f000 b825 	b.w	8007678 <_malloc_r>
 800762e:	bf00      	nop
 8007630:	20000018 	.word	0x20000018

08007634 <sbrk_aligned>:
 8007634:	b570      	push	{r4, r5, r6, lr}
 8007636:	4e0f      	ldr	r6, [pc, #60]	@ (8007674 <sbrk_aligned+0x40>)
 8007638:	460c      	mov	r4, r1
 800763a:	6831      	ldr	r1, [r6, #0]
 800763c:	4605      	mov	r5, r0
 800763e:	b911      	cbnz	r1, 8007646 <sbrk_aligned+0x12>
 8007640:	f001 fe90 	bl	8009364 <_sbrk_r>
 8007644:	6030      	str	r0, [r6, #0]
 8007646:	4621      	mov	r1, r4
 8007648:	4628      	mov	r0, r5
 800764a:	f001 fe8b 	bl	8009364 <_sbrk_r>
 800764e:	1c43      	adds	r3, r0, #1
 8007650:	d103      	bne.n	800765a <sbrk_aligned+0x26>
 8007652:	f04f 34ff 	mov.w	r4, #4294967295
 8007656:	4620      	mov	r0, r4
 8007658:	bd70      	pop	{r4, r5, r6, pc}
 800765a:	1cc4      	adds	r4, r0, #3
 800765c:	f024 0403 	bic.w	r4, r4, #3
 8007660:	42a0      	cmp	r0, r4
 8007662:	d0f8      	beq.n	8007656 <sbrk_aligned+0x22>
 8007664:	1a21      	subs	r1, r4, r0
 8007666:	4628      	mov	r0, r5
 8007668:	f001 fe7c 	bl	8009364 <_sbrk_r>
 800766c:	3001      	adds	r0, #1
 800766e:	d1f2      	bne.n	8007656 <sbrk_aligned+0x22>
 8007670:	e7ef      	b.n	8007652 <sbrk_aligned+0x1e>
 8007672:	bf00      	nop
 8007674:	20000448 	.word	0x20000448

08007678 <_malloc_r>:
 8007678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800767c:	1ccd      	adds	r5, r1, #3
 800767e:	f025 0503 	bic.w	r5, r5, #3
 8007682:	3508      	adds	r5, #8
 8007684:	2d0c      	cmp	r5, #12
 8007686:	bf38      	it	cc
 8007688:	250c      	movcc	r5, #12
 800768a:	2d00      	cmp	r5, #0
 800768c:	4606      	mov	r6, r0
 800768e:	db01      	blt.n	8007694 <_malloc_r+0x1c>
 8007690:	42a9      	cmp	r1, r5
 8007692:	d904      	bls.n	800769e <_malloc_r+0x26>
 8007694:	230c      	movs	r3, #12
 8007696:	6033      	str	r3, [r6, #0]
 8007698:	2000      	movs	r0, #0
 800769a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800769e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007774 <_malloc_r+0xfc>
 80076a2:	f000 f869 	bl	8007778 <__malloc_lock>
 80076a6:	f8d8 3000 	ldr.w	r3, [r8]
 80076aa:	461c      	mov	r4, r3
 80076ac:	bb44      	cbnz	r4, 8007700 <_malloc_r+0x88>
 80076ae:	4629      	mov	r1, r5
 80076b0:	4630      	mov	r0, r6
 80076b2:	f7ff ffbf 	bl	8007634 <sbrk_aligned>
 80076b6:	1c43      	adds	r3, r0, #1
 80076b8:	4604      	mov	r4, r0
 80076ba:	d158      	bne.n	800776e <_malloc_r+0xf6>
 80076bc:	f8d8 4000 	ldr.w	r4, [r8]
 80076c0:	4627      	mov	r7, r4
 80076c2:	2f00      	cmp	r7, #0
 80076c4:	d143      	bne.n	800774e <_malloc_r+0xd6>
 80076c6:	2c00      	cmp	r4, #0
 80076c8:	d04b      	beq.n	8007762 <_malloc_r+0xea>
 80076ca:	6823      	ldr	r3, [r4, #0]
 80076cc:	4639      	mov	r1, r7
 80076ce:	4630      	mov	r0, r6
 80076d0:	eb04 0903 	add.w	r9, r4, r3
 80076d4:	f001 fe46 	bl	8009364 <_sbrk_r>
 80076d8:	4581      	cmp	r9, r0
 80076da:	d142      	bne.n	8007762 <_malloc_r+0xea>
 80076dc:	6821      	ldr	r1, [r4, #0]
 80076de:	1a6d      	subs	r5, r5, r1
 80076e0:	4629      	mov	r1, r5
 80076e2:	4630      	mov	r0, r6
 80076e4:	f7ff ffa6 	bl	8007634 <sbrk_aligned>
 80076e8:	3001      	adds	r0, #1
 80076ea:	d03a      	beq.n	8007762 <_malloc_r+0xea>
 80076ec:	6823      	ldr	r3, [r4, #0]
 80076ee:	442b      	add	r3, r5
 80076f0:	6023      	str	r3, [r4, #0]
 80076f2:	f8d8 3000 	ldr.w	r3, [r8]
 80076f6:	685a      	ldr	r2, [r3, #4]
 80076f8:	bb62      	cbnz	r2, 8007754 <_malloc_r+0xdc>
 80076fa:	f8c8 7000 	str.w	r7, [r8]
 80076fe:	e00f      	b.n	8007720 <_malloc_r+0xa8>
 8007700:	6822      	ldr	r2, [r4, #0]
 8007702:	1b52      	subs	r2, r2, r5
 8007704:	d420      	bmi.n	8007748 <_malloc_r+0xd0>
 8007706:	2a0b      	cmp	r2, #11
 8007708:	d917      	bls.n	800773a <_malloc_r+0xc2>
 800770a:	1961      	adds	r1, r4, r5
 800770c:	42a3      	cmp	r3, r4
 800770e:	6025      	str	r5, [r4, #0]
 8007710:	bf18      	it	ne
 8007712:	6059      	strne	r1, [r3, #4]
 8007714:	6863      	ldr	r3, [r4, #4]
 8007716:	bf08      	it	eq
 8007718:	f8c8 1000 	streq.w	r1, [r8]
 800771c:	5162      	str	r2, [r4, r5]
 800771e:	604b      	str	r3, [r1, #4]
 8007720:	4630      	mov	r0, r6
 8007722:	f000 f82f 	bl	8007784 <__malloc_unlock>
 8007726:	f104 000b 	add.w	r0, r4, #11
 800772a:	1d23      	adds	r3, r4, #4
 800772c:	f020 0007 	bic.w	r0, r0, #7
 8007730:	1ac2      	subs	r2, r0, r3
 8007732:	bf1c      	itt	ne
 8007734:	1a1b      	subne	r3, r3, r0
 8007736:	50a3      	strne	r3, [r4, r2]
 8007738:	e7af      	b.n	800769a <_malloc_r+0x22>
 800773a:	6862      	ldr	r2, [r4, #4]
 800773c:	42a3      	cmp	r3, r4
 800773e:	bf0c      	ite	eq
 8007740:	f8c8 2000 	streq.w	r2, [r8]
 8007744:	605a      	strne	r2, [r3, #4]
 8007746:	e7eb      	b.n	8007720 <_malloc_r+0xa8>
 8007748:	4623      	mov	r3, r4
 800774a:	6864      	ldr	r4, [r4, #4]
 800774c:	e7ae      	b.n	80076ac <_malloc_r+0x34>
 800774e:	463c      	mov	r4, r7
 8007750:	687f      	ldr	r7, [r7, #4]
 8007752:	e7b6      	b.n	80076c2 <_malloc_r+0x4a>
 8007754:	461a      	mov	r2, r3
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	42a3      	cmp	r3, r4
 800775a:	d1fb      	bne.n	8007754 <_malloc_r+0xdc>
 800775c:	2300      	movs	r3, #0
 800775e:	6053      	str	r3, [r2, #4]
 8007760:	e7de      	b.n	8007720 <_malloc_r+0xa8>
 8007762:	230c      	movs	r3, #12
 8007764:	6033      	str	r3, [r6, #0]
 8007766:	4630      	mov	r0, r6
 8007768:	f000 f80c 	bl	8007784 <__malloc_unlock>
 800776c:	e794      	b.n	8007698 <_malloc_r+0x20>
 800776e:	6005      	str	r5, [r0, #0]
 8007770:	e7d6      	b.n	8007720 <_malloc_r+0xa8>
 8007772:	bf00      	nop
 8007774:	2000044c 	.word	0x2000044c

08007778 <__malloc_lock>:
 8007778:	4801      	ldr	r0, [pc, #4]	@ (8007780 <__malloc_lock+0x8>)
 800777a:	f7ff b8b2 	b.w	80068e2 <__retarget_lock_acquire_recursive>
 800777e:	bf00      	nop
 8007780:	20000444 	.word	0x20000444

08007784 <__malloc_unlock>:
 8007784:	4801      	ldr	r0, [pc, #4]	@ (800778c <__malloc_unlock+0x8>)
 8007786:	f7ff b8ad 	b.w	80068e4 <__retarget_lock_release_recursive>
 800778a:	bf00      	nop
 800778c:	20000444 	.word	0x20000444

08007790 <_Balloc>:
 8007790:	b570      	push	{r4, r5, r6, lr}
 8007792:	69c6      	ldr	r6, [r0, #28]
 8007794:	4604      	mov	r4, r0
 8007796:	460d      	mov	r5, r1
 8007798:	b976      	cbnz	r6, 80077b8 <_Balloc+0x28>
 800779a:	2010      	movs	r0, #16
 800779c:	f7ff ff42 	bl	8007624 <malloc>
 80077a0:	4602      	mov	r2, r0
 80077a2:	61e0      	str	r0, [r4, #28]
 80077a4:	b920      	cbnz	r0, 80077b0 <_Balloc+0x20>
 80077a6:	4b18      	ldr	r3, [pc, #96]	@ (8007808 <_Balloc+0x78>)
 80077a8:	4818      	ldr	r0, [pc, #96]	@ (800780c <_Balloc+0x7c>)
 80077aa:	216b      	movs	r1, #107	@ 0x6b
 80077ac:	f001 fe00 	bl	80093b0 <__assert_func>
 80077b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077b4:	6006      	str	r6, [r0, #0]
 80077b6:	60c6      	str	r6, [r0, #12]
 80077b8:	69e6      	ldr	r6, [r4, #28]
 80077ba:	68f3      	ldr	r3, [r6, #12]
 80077bc:	b183      	cbz	r3, 80077e0 <_Balloc+0x50>
 80077be:	69e3      	ldr	r3, [r4, #28]
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80077c6:	b9b8      	cbnz	r0, 80077f8 <_Balloc+0x68>
 80077c8:	2101      	movs	r1, #1
 80077ca:	fa01 f605 	lsl.w	r6, r1, r5
 80077ce:	1d72      	adds	r2, r6, #5
 80077d0:	0092      	lsls	r2, r2, #2
 80077d2:	4620      	mov	r0, r4
 80077d4:	f001 fe0a 	bl	80093ec <_calloc_r>
 80077d8:	b160      	cbz	r0, 80077f4 <_Balloc+0x64>
 80077da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80077de:	e00e      	b.n	80077fe <_Balloc+0x6e>
 80077e0:	2221      	movs	r2, #33	@ 0x21
 80077e2:	2104      	movs	r1, #4
 80077e4:	4620      	mov	r0, r4
 80077e6:	f001 fe01 	bl	80093ec <_calloc_r>
 80077ea:	69e3      	ldr	r3, [r4, #28]
 80077ec:	60f0      	str	r0, [r6, #12]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d1e4      	bne.n	80077be <_Balloc+0x2e>
 80077f4:	2000      	movs	r0, #0
 80077f6:	bd70      	pop	{r4, r5, r6, pc}
 80077f8:	6802      	ldr	r2, [r0, #0]
 80077fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80077fe:	2300      	movs	r3, #0
 8007800:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007804:	e7f7      	b.n	80077f6 <_Balloc+0x66>
 8007806:	bf00      	nop
 8007808:	08009fce 	.word	0x08009fce
 800780c:	0800a04e 	.word	0x0800a04e

08007810 <_Bfree>:
 8007810:	b570      	push	{r4, r5, r6, lr}
 8007812:	69c6      	ldr	r6, [r0, #28]
 8007814:	4605      	mov	r5, r0
 8007816:	460c      	mov	r4, r1
 8007818:	b976      	cbnz	r6, 8007838 <_Bfree+0x28>
 800781a:	2010      	movs	r0, #16
 800781c:	f7ff ff02 	bl	8007624 <malloc>
 8007820:	4602      	mov	r2, r0
 8007822:	61e8      	str	r0, [r5, #28]
 8007824:	b920      	cbnz	r0, 8007830 <_Bfree+0x20>
 8007826:	4b09      	ldr	r3, [pc, #36]	@ (800784c <_Bfree+0x3c>)
 8007828:	4809      	ldr	r0, [pc, #36]	@ (8007850 <_Bfree+0x40>)
 800782a:	218f      	movs	r1, #143	@ 0x8f
 800782c:	f001 fdc0 	bl	80093b0 <__assert_func>
 8007830:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007834:	6006      	str	r6, [r0, #0]
 8007836:	60c6      	str	r6, [r0, #12]
 8007838:	b13c      	cbz	r4, 800784a <_Bfree+0x3a>
 800783a:	69eb      	ldr	r3, [r5, #28]
 800783c:	6862      	ldr	r2, [r4, #4]
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007844:	6021      	str	r1, [r4, #0]
 8007846:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800784a:	bd70      	pop	{r4, r5, r6, pc}
 800784c:	08009fce 	.word	0x08009fce
 8007850:	0800a04e 	.word	0x0800a04e

08007854 <__multadd>:
 8007854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007858:	690d      	ldr	r5, [r1, #16]
 800785a:	4607      	mov	r7, r0
 800785c:	460c      	mov	r4, r1
 800785e:	461e      	mov	r6, r3
 8007860:	f101 0c14 	add.w	ip, r1, #20
 8007864:	2000      	movs	r0, #0
 8007866:	f8dc 3000 	ldr.w	r3, [ip]
 800786a:	b299      	uxth	r1, r3
 800786c:	fb02 6101 	mla	r1, r2, r1, r6
 8007870:	0c1e      	lsrs	r6, r3, #16
 8007872:	0c0b      	lsrs	r3, r1, #16
 8007874:	fb02 3306 	mla	r3, r2, r6, r3
 8007878:	b289      	uxth	r1, r1
 800787a:	3001      	adds	r0, #1
 800787c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007880:	4285      	cmp	r5, r0
 8007882:	f84c 1b04 	str.w	r1, [ip], #4
 8007886:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800788a:	dcec      	bgt.n	8007866 <__multadd+0x12>
 800788c:	b30e      	cbz	r6, 80078d2 <__multadd+0x7e>
 800788e:	68a3      	ldr	r3, [r4, #8]
 8007890:	42ab      	cmp	r3, r5
 8007892:	dc19      	bgt.n	80078c8 <__multadd+0x74>
 8007894:	6861      	ldr	r1, [r4, #4]
 8007896:	4638      	mov	r0, r7
 8007898:	3101      	adds	r1, #1
 800789a:	f7ff ff79 	bl	8007790 <_Balloc>
 800789e:	4680      	mov	r8, r0
 80078a0:	b928      	cbnz	r0, 80078ae <__multadd+0x5a>
 80078a2:	4602      	mov	r2, r0
 80078a4:	4b0c      	ldr	r3, [pc, #48]	@ (80078d8 <__multadd+0x84>)
 80078a6:	480d      	ldr	r0, [pc, #52]	@ (80078dc <__multadd+0x88>)
 80078a8:	21ba      	movs	r1, #186	@ 0xba
 80078aa:	f001 fd81 	bl	80093b0 <__assert_func>
 80078ae:	6922      	ldr	r2, [r4, #16]
 80078b0:	3202      	adds	r2, #2
 80078b2:	f104 010c 	add.w	r1, r4, #12
 80078b6:	0092      	lsls	r2, r2, #2
 80078b8:	300c      	adds	r0, #12
 80078ba:	f001 fd63 	bl	8009384 <memcpy>
 80078be:	4621      	mov	r1, r4
 80078c0:	4638      	mov	r0, r7
 80078c2:	f7ff ffa5 	bl	8007810 <_Bfree>
 80078c6:	4644      	mov	r4, r8
 80078c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80078cc:	3501      	adds	r5, #1
 80078ce:	615e      	str	r6, [r3, #20]
 80078d0:	6125      	str	r5, [r4, #16]
 80078d2:	4620      	mov	r0, r4
 80078d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078d8:	0800a03d 	.word	0x0800a03d
 80078dc:	0800a04e 	.word	0x0800a04e

080078e0 <__s2b>:
 80078e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078e4:	460c      	mov	r4, r1
 80078e6:	4615      	mov	r5, r2
 80078e8:	461f      	mov	r7, r3
 80078ea:	2209      	movs	r2, #9
 80078ec:	3308      	adds	r3, #8
 80078ee:	4606      	mov	r6, r0
 80078f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80078f4:	2100      	movs	r1, #0
 80078f6:	2201      	movs	r2, #1
 80078f8:	429a      	cmp	r2, r3
 80078fa:	db09      	blt.n	8007910 <__s2b+0x30>
 80078fc:	4630      	mov	r0, r6
 80078fe:	f7ff ff47 	bl	8007790 <_Balloc>
 8007902:	b940      	cbnz	r0, 8007916 <__s2b+0x36>
 8007904:	4602      	mov	r2, r0
 8007906:	4b19      	ldr	r3, [pc, #100]	@ (800796c <__s2b+0x8c>)
 8007908:	4819      	ldr	r0, [pc, #100]	@ (8007970 <__s2b+0x90>)
 800790a:	21d3      	movs	r1, #211	@ 0xd3
 800790c:	f001 fd50 	bl	80093b0 <__assert_func>
 8007910:	0052      	lsls	r2, r2, #1
 8007912:	3101      	adds	r1, #1
 8007914:	e7f0      	b.n	80078f8 <__s2b+0x18>
 8007916:	9b08      	ldr	r3, [sp, #32]
 8007918:	6143      	str	r3, [r0, #20]
 800791a:	2d09      	cmp	r5, #9
 800791c:	f04f 0301 	mov.w	r3, #1
 8007920:	6103      	str	r3, [r0, #16]
 8007922:	dd16      	ble.n	8007952 <__s2b+0x72>
 8007924:	f104 0909 	add.w	r9, r4, #9
 8007928:	46c8      	mov	r8, r9
 800792a:	442c      	add	r4, r5
 800792c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007930:	4601      	mov	r1, r0
 8007932:	3b30      	subs	r3, #48	@ 0x30
 8007934:	220a      	movs	r2, #10
 8007936:	4630      	mov	r0, r6
 8007938:	f7ff ff8c 	bl	8007854 <__multadd>
 800793c:	45a0      	cmp	r8, r4
 800793e:	d1f5      	bne.n	800792c <__s2b+0x4c>
 8007940:	f1a5 0408 	sub.w	r4, r5, #8
 8007944:	444c      	add	r4, r9
 8007946:	1b2d      	subs	r5, r5, r4
 8007948:	1963      	adds	r3, r4, r5
 800794a:	42bb      	cmp	r3, r7
 800794c:	db04      	blt.n	8007958 <__s2b+0x78>
 800794e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007952:	340a      	adds	r4, #10
 8007954:	2509      	movs	r5, #9
 8007956:	e7f6      	b.n	8007946 <__s2b+0x66>
 8007958:	f814 3b01 	ldrb.w	r3, [r4], #1
 800795c:	4601      	mov	r1, r0
 800795e:	3b30      	subs	r3, #48	@ 0x30
 8007960:	220a      	movs	r2, #10
 8007962:	4630      	mov	r0, r6
 8007964:	f7ff ff76 	bl	8007854 <__multadd>
 8007968:	e7ee      	b.n	8007948 <__s2b+0x68>
 800796a:	bf00      	nop
 800796c:	0800a03d 	.word	0x0800a03d
 8007970:	0800a04e 	.word	0x0800a04e

08007974 <__hi0bits>:
 8007974:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007978:	4603      	mov	r3, r0
 800797a:	bf36      	itet	cc
 800797c:	0403      	lslcc	r3, r0, #16
 800797e:	2000      	movcs	r0, #0
 8007980:	2010      	movcc	r0, #16
 8007982:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007986:	bf3c      	itt	cc
 8007988:	021b      	lslcc	r3, r3, #8
 800798a:	3008      	addcc	r0, #8
 800798c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007990:	bf3c      	itt	cc
 8007992:	011b      	lslcc	r3, r3, #4
 8007994:	3004      	addcc	r0, #4
 8007996:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800799a:	bf3c      	itt	cc
 800799c:	009b      	lslcc	r3, r3, #2
 800799e:	3002      	addcc	r0, #2
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	db05      	blt.n	80079b0 <__hi0bits+0x3c>
 80079a4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80079a8:	f100 0001 	add.w	r0, r0, #1
 80079ac:	bf08      	it	eq
 80079ae:	2020      	moveq	r0, #32
 80079b0:	4770      	bx	lr

080079b2 <__lo0bits>:
 80079b2:	6803      	ldr	r3, [r0, #0]
 80079b4:	4602      	mov	r2, r0
 80079b6:	f013 0007 	ands.w	r0, r3, #7
 80079ba:	d00b      	beq.n	80079d4 <__lo0bits+0x22>
 80079bc:	07d9      	lsls	r1, r3, #31
 80079be:	d421      	bmi.n	8007a04 <__lo0bits+0x52>
 80079c0:	0798      	lsls	r0, r3, #30
 80079c2:	bf49      	itett	mi
 80079c4:	085b      	lsrmi	r3, r3, #1
 80079c6:	089b      	lsrpl	r3, r3, #2
 80079c8:	2001      	movmi	r0, #1
 80079ca:	6013      	strmi	r3, [r2, #0]
 80079cc:	bf5c      	itt	pl
 80079ce:	6013      	strpl	r3, [r2, #0]
 80079d0:	2002      	movpl	r0, #2
 80079d2:	4770      	bx	lr
 80079d4:	b299      	uxth	r1, r3
 80079d6:	b909      	cbnz	r1, 80079dc <__lo0bits+0x2a>
 80079d8:	0c1b      	lsrs	r3, r3, #16
 80079da:	2010      	movs	r0, #16
 80079dc:	b2d9      	uxtb	r1, r3
 80079de:	b909      	cbnz	r1, 80079e4 <__lo0bits+0x32>
 80079e0:	3008      	adds	r0, #8
 80079e2:	0a1b      	lsrs	r3, r3, #8
 80079e4:	0719      	lsls	r1, r3, #28
 80079e6:	bf04      	itt	eq
 80079e8:	091b      	lsreq	r3, r3, #4
 80079ea:	3004      	addeq	r0, #4
 80079ec:	0799      	lsls	r1, r3, #30
 80079ee:	bf04      	itt	eq
 80079f0:	089b      	lsreq	r3, r3, #2
 80079f2:	3002      	addeq	r0, #2
 80079f4:	07d9      	lsls	r1, r3, #31
 80079f6:	d403      	bmi.n	8007a00 <__lo0bits+0x4e>
 80079f8:	085b      	lsrs	r3, r3, #1
 80079fa:	f100 0001 	add.w	r0, r0, #1
 80079fe:	d003      	beq.n	8007a08 <__lo0bits+0x56>
 8007a00:	6013      	str	r3, [r2, #0]
 8007a02:	4770      	bx	lr
 8007a04:	2000      	movs	r0, #0
 8007a06:	4770      	bx	lr
 8007a08:	2020      	movs	r0, #32
 8007a0a:	4770      	bx	lr

08007a0c <__i2b>:
 8007a0c:	b510      	push	{r4, lr}
 8007a0e:	460c      	mov	r4, r1
 8007a10:	2101      	movs	r1, #1
 8007a12:	f7ff febd 	bl	8007790 <_Balloc>
 8007a16:	4602      	mov	r2, r0
 8007a18:	b928      	cbnz	r0, 8007a26 <__i2b+0x1a>
 8007a1a:	4b05      	ldr	r3, [pc, #20]	@ (8007a30 <__i2b+0x24>)
 8007a1c:	4805      	ldr	r0, [pc, #20]	@ (8007a34 <__i2b+0x28>)
 8007a1e:	f240 1145 	movw	r1, #325	@ 0x145
 8007a22:	f001 fcc5 	bl	80093b0 <__assert_func>
 8007a26:	2301      	movs	r3, #1
 8007a28:	6144      	str	r4, [r0, #20]
 8007a2a:	6103      	str	r3, [r0, #16]
 8007a2c:	bd10      	pop	{r4, pc}
 8007a2e:	bf00      	nop
 8007a30:	0800a03d 	.word	0x0800a03d
 8007a34:	0800a04e 	.word	0x0800a04e

08007a38 <__multiply>:
 8007a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a3c:	4614      	mov	r4, r2
 8007a3e:	690a      	ldr	r2, [r1, #16]
 8007a40:	6923      	ldr	r3, [r4, #16]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	bfa8      	it	ge
 8007a46:	4623      	movge	r3, r4
 8007a48:	460f      	mov	r7, r1
 8007a4a:	bfa4      	itt	ge
 8007a4c:	460c      	movge	r4, r1
 8007a4e:	461f      	movge	r7, r3
 8007a50:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007a54:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007a58:	68a3      	ldr	r3, [r4, #8]
 8007a5a:	6861      	ldr	r1, [r4, #4]
 8007a5c:	eb0a 0609 	add.w	r6, sl, r9
 8007a60:	42b3      	cmp	r3, r6
 8007a62:	b085      	sub	sp, #20
 8007a64:	bfb8      	it	lt
 8007a66:	3101      	addlt	r1, #1
 8007a68:	f7ff fe92 	bl	8007790 <_Balloc>
 8007a6c:	b930      	cbnz	r0, 8007a7c <__multiply+0x44>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	4b44      	ldr	r3, [pc, #272]	@ (8007b84 <__multiply+0x14c>)
 8007a72:	4845      	ldr	r0, [pc, #276]	@ (8007b88 <__multiply+0x150>)
 8007a74:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007a78:	f001 fc9a 	bl	80093b0 <__assert_func>
 8007a7c:	f100 0514 	add.w	r5, r0, #20
 8007a80:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007a84:	462b      	mov	r3, r5
 8007a86:	2200      	movs	r2, #0
 8007a88:	4543      	cmp	r3, r8
 8007a8a:	d321      	bcc.n	8007ad0 <__multiply+0x98>
 8007a8c:	f107 0114 	add.w	r1, r7, #20
 8007a90:	f104 0214 	add.w	r2, r4, #20
 8007a94:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007a98:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007a9c:	9302      	str	r3, [sp, #8]
 8007a9e:	1b13      	subs	r3, r2, r4
 8007aa0:	3b15      	subs	r3, #21
 8007aa2:	f023 0303 	bic.w	r3, r3, #3
 8007aa6:	3304      	adds	r3, #4
 8007aa8:	f104 0715 	add.w	r7, r4, #21
 8007aac:	42ba      	cmp	r2, r7
 8007aae:	bf38      	it	cc
 8007ab0:	2304      	movcc	r3, #4
 8007ab2:	9301      	str	r3, [sp, #4]
 8007ab4:	9b02      	ldr	r3, [sp, #8]
 8007ab6:	9103      	str	r1, [sp, #12]
 8007ab8:	428b      	cmp	r3, r1
 8007aba:	d80c      	bhi.n	8007ad6 <__multiply+0x9e>
 8007abc:	2e00      	cmp	r6, #0
 8007abe:	dd03      	ble.n	8007ac8 <__multiply+0x90>
 8007ac0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d05b      	beq.n	8007b80 <__multiply+0x148>
 8007ac8:	6106      	str	r6, [r0, #16]
 8007aca:	b005      	add	sp, #20
 8007acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ad0:	f843 2b04 	str.w	r2, [r3], #4
 8007ad4:	e7d8      	b.n	8007a88 <__multiply+0x50>
 8007ad6:	f8b1 a000 	ldrh.w	sl, [r1]
 8007ada:	f1ba 0f00 	cmp.w	sl, #0
 8007ade:	d024      	beq.n	8007b2a <__multiply+0xf2>
 8007ae0:	f104 0e14 	add.w	lr, r4, #20
 8007ae4:	46a9      	mov	r9, r5
 8007ae6:	f04f 0c00 	mov.w	ip, #0
 8007aea:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007aee:	f8d9 3000 	ldr.w	r3, [r9]
 8007af2:	fa1f fb87 	uxth.w	fp, r7
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	fb0a 330b 	mla	r3, sl, fp, r3
 8007afc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007b00:	f8d9 7000 	ldr.w	r7, [r9]
 8007b04:	4463      	add	r3, ip
 8007b06:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007b0a:	fb0a c70b 	mla	r7, sl, fp, ip
 8007b0e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007b18:	4572      	cmp	r2, lr
 8007b1a:	f849 3b04 	str.w	r3, [r9], #4
 8007b1e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007b22:	d8e2      	bhi.n	8007aea <__multiply+0xb2>
 8007b24:	9b01      	ldr	r3, [sp, #4]
 8007b26:	f845 c003 	str.w	ip, [r5, r3]
 8007b2a:	9b03      	ldr	r3, [sp, #12]
 8007b2c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007b30:	3104      	adds	r1, #4
 8007b32:	f1b9 0f00 	cmp.w	r9, #0
 8007b36:	d021      	beq.n	8007b7c <__multiply+0x144>
 8007b38:	682b      	ldr	r3, [r5, #0]
 8007b3a:	f104 0c14 	add.w	ip, r4, #20
 8007b3e:	46ae      	mov	lr, r5
 8007b40:	f04f 0a00 	mov.w	sl, #0
 8007b44:	f8bc b000 	ldrh.w	fp, [ip]
 8007b48:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007b4c:	fb09 770b 	mla	r7, r9, fp, r7
 8007b50:	4457      	add	r7, sl
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007b58:	f84e 3b04 	str.w	r3, [lr], #4
 8007b5c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007b60:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b64:	f8be 3000 	ldrh.w	r3, [lr]
 8007b68:	fb09 330a 	mla	r3, r9, sl, r3
 8007b6c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007b70:	4562      	cmp	r2, ip
 8007b72:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b76:	d8e5      	bhi.n	8007b44 <__multiply+0x10c>
 8007b78:	9f01      	ldr	r7, [sp, #4]
 8007b7a:	51eb      	str	r3, [r5, r7]
 8007b7c:	3504      	adds	r5, #4
 8007b7e:	e799      	b.n	8007ab4 <__multiply+0x7c>
 8007b80:	3e01      	subs	r6, #1
 8007b82:	e79b      	b.n	8007abc <__multiply+0x84>
 8007b84:	0800a03d 	.word	0x0800a03d
 8007b88:	0800a04e 	.word	0x0800a04e

08007b8c <__pow5mult>:
 8007b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b90:	4615      	mov	r5, r2
 8007b92:	f012 0203 	ands.w	r2, r2, #3
 8007b96:	4607      	mov	r7, r0
 8007b98:	460e      	mov	r6, r1
 8007b9a:	d007      	beq.n	8007bac <__pow5mult+0x20>
 8007b9c:	4c25      	ldr	r4, [pc, #148]	@ (8007c34 <__pow5mult+0xa8>)
 8007b9e:	3a01      	subs	r2, #1
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007ba6:	f7ff fe55 	bl	8007854 <__multadd>
 8007baa:	4606      	mov	r6, r0
 8007bac:	10ad      	asrs	r5, r5, #2
 8007bae:	d03d      	beq.n	8007c2c <__pow5mult+0xa0>
 8007bb0:	69fc      	ldr	r4, [r7, #28]
 8007bb2:	b97c      	cbnz	r4, 8007bd4 <__pow5mult+0x48>
 8007bb4:	2010      	movs	r0, #16
 8007bb6:	f7ff fd35 	bl	8007624 <malloc>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	61f8      	str	r0, [r7, #28]
 8007bbe:	b928      	cbnz	r0, 8007bcc <__pow5mult+0x40>
 8007bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8007c38 <__pow5mult+0xac>)
 8007bc2:	481e      	ldr	r0, [pc, #120]	@ (8007c3c <__pow5mult+0xb0>)
 8007bc4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007bc8:	f001 fbf2 	bl	80093b0 <__assert_func>
 8007bcc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007bd0:	6004      	str	r4, [r0, #0]
 8007bd2:	60c4      	str	r4, [r0, #12]
 8007bd4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007bd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007bdc:	b94c      	cbnz	r4, 8007bf2 <__pow5mult+0x66>
 8007bde:	f240 2171 	movw	r1, #625	@ 0x271
 8007be2:	4638      	mov	r0, r7
 8007be4:	f7ff ff12 	bl	8007a0c <__i2b>
 8007be8:	2300      	movs	r3, #0
 8007bea:	f8c8 0008 	str.w	r0, [r8, #8]
 8007bee:	4604      	mov	r4, r0
 8007bf0:	6003      	str	r3, [r0, #0]
 8007bf2:	f04f 0900 	mov.w	r9, #0
 8007bf6:	07eb      	lsls	r3, r5, #31
 8007bf8:	d50a      	bpl.n	8007c10 <__pow5mult+0x84>
 8007bfa:	4631      	mov	r1, r6
 8007bfc:	4622      	mov	r2, r4
 8007bfe:	4638      	mov	r0, r7
 8007c00:	f7ff ff1a 	bl	8007a38 <__multiply>
 8007c04:	4631      	mov	r1, r6
 8007c06:	4680      	mov	r8, r0
 8007c08:	4638      	mov	r0, r7
 8007c0a:	f7ff fe01 	bl	8007810 <_Bfree>
 8007c0e:	4646      	mov	r6, r8
 8007c10:	106d      	asrs	r5, r5, #1
 8007c12:	d00b      	beq.n	8007c2c <__pow5mult+0xa0>
 8007c14:	6820      	ldr	r0, [r4, #0]
 8007c16:	b938      	cbnz	r0, 8007c28 <__pow5mult+0x9c>
 8007c18:	4622      	mov	r2, r4
 8007c1a:	4621      	mov	r1, r4
 8007c1c:	4638      	mov	r0, r7
 8007c1e:	f7ff ff0b 	bl	8007a38 <__multiply>
 8007c22:	6020      	str	r0, [r4, #0]
 8007c24:	f8c0 9000 	str.w	r9, [r0]
 8007c28:	4604      	mov	r4, r0
 8007c2a:	e7e4      	b.n	8007bf6 <__pow5mult+0x6a>
 8007c2c:	4630      	mov	r0, r6
 8007c2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c32:	bf00      	nop
 8007c34:	0800a0a8 	.word	0x0800a0a8
 8007c38:	08009fce 	.word	0x08009fce
 8007c3c:	0800a04e 	.word	0x0800a04e

08007c40 <__lshift>:
 8007c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c44:	460c      	mov	r4, r1
 8007c46:	6849      	ldr	r1, [r1, #4]
 8007c48:	6923      	ldr	r3, [r4, #16]
 8007c4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007c4e:	68a3      	ldr	r3, [r4, #8]
 8007c50:	4607      	mov	r7, r0
 8007c52:	4691      	mov	r9, r2
 8007c54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c58:	f108 0601 	add.w	r6, r8, #1
 8007c5c:	42b3      	cmp	r3, r6
 8007c5e:	db0b      	blt.n	8007c78 <__lshift+0x38>
 8007c60:	4638      	mov	r0, r7
 8007c62:	f7ff fd95 	bl	8007790 <_Balloc>
 8007c66:	4605      	mov	r5, r0
 8007c68:	b948      	cbnz	r0, 8007c7e <__lshift+0x3e>
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	4b28      	ldr	r3, [pc, #160]	@ (8007d10 <__lshift+0xd0>)
 8007c6e:	4829      	ldr	r0, [pc, #164]	@ (8007d14 <__lshift+0xd4>)
 8007c70:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007c74:	f001 fb9c 	bl	80093b0 <__assert_func>
 8007c78:	3101      	adds	r1, #1
 8007c7a:	005b      	lsls	r3, r3, #1
 8007c7c:	e7ee      	b.n	8007c5c <__lshift+0x1c>
 8007c7e:	2300      	movs	r3, #0
 8007c80:	f100 0114 	add.w	r1, r0, #20
 8007c84:	f100 0210 	add.w	r2, r0, #16
 8007c88:	4618      	mov	r0, r3
 8007c8a:	4553      	cmp	r3, sl
 8007c8c:	db33      	blt.n	8007cf6 <__lshift+0xb6>
 8007c8e:	6920      	ldr	r0, [r4, #16]
 8007c90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c94:	f104 0314 	add.w	r3, r4, #20
 8007c98:	f019 091f 	ands.w	r9, r9, #31
 8007c9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007ca0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007ca4:	d02b      	beq.n	8007cfe <__lshift+0xbe>
 8007ca6:	f1c9 0e20 	rsb	lr, r9, #32
 8007caa:	468a      	mov	sl, r1
 8007cac:	2200      	movs	r2, #0
 8007cae:	6818      	ldr	r0, [r3, #0]
 8007cb0:	fa00 f009 	lsl.w	r0, r0, r9
 8007cb4:	4310      	orrs	r0, r2
 8007cb6:	f84a 0b04 	str.w	r0, [sl], #4
 8007cba:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cbe:	459c      	cmp	ip, r3
 8007cc0:	fa22 f20e 	lsr.w	r2, r2, lr
 8007cc4:	d8f3      	bhi.n	8007cae <__lshift+0x6e>
 8007cc6:	ebac 0304 	sub.w	r3, ip, r4
 8007cca:	3b15      	subs	r3, #21
 8007ccc:	f023 0303 	bic.w	r3, r3, #3
 8007cd0:	3304      	adds	r3, #4
 8007cd2:	f104 0015 	add.w	r0, r4, #21
 8007cd6:	4584      	cmp	ip, r0
 8007cd8:	bf38      	it	cc
 8007cda:	2304      	movcc	r3, #4
 8007cdc:	50ca      	str	r2, [r1, r3]
 8007cde:	b10a      	cbz	r2, 8007ce4 <__lshift+0xa4>
 8007ce0:	f108 0602 	add.w	r6, r8, #2
 8007ce4:	3e01      	subs	r6, #1
 8007ce6:	4638      	mov	r0, r7
 8007ce8:	612e      	str	r6, [r5, #16]
 8007cea:	4621      	mov	r1, r4
 8007cec:	f7ff fd90 	bl	8007810 <_Bfree>
 8007cf0:	4628      	mov	r0, r5
 8007cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cf6:	f842 0f04 	str.w	r0, [r2, #4]!
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	e7c5      	b.n	8007c8a <__lshift+0x4a>
 8007cfe:	3904      	subs	r1, #4
 8007d00:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d04:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d08:	459c      	cmp	ip, r3
 8007d0a:	d8f9      	bhi.n	8007d00 <__lshift+0xc0>
 8007d0c:	e7ea      	b.n	8007ce4 <__lshift+0xa4>
 8007d0e:	bf00      	nop
 8007d10:	0800a03d 	.word	0x0800a03d
 8007d14:	0800a04e 	.word	0x0800a04e

08007d18 <__mcmp>:
 8007d18:	690a      	ldr	r2, [r1, #16]
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	6900      	ldr	r0, [r0, #16]
 8007d1e:	1a80      	subs	r0, r0, r2
 8007d20:	b530      	push	{r4, r5, lr}
 8007d22:	d10e      	bne.n	8007d42 <__mcmp+0x2a>
 8007d24:	3314      	adds	r3, #20
 8007d26:	3114      	adds	r1, #20
 8007d28:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007d2c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007d30:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007d34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007d38:	4295      	cmp	r5, r2
 8007d3a:	d003      	beq.n	8007d44 <__mcmp+0x2c>
 8007d3c:	d205      	bcs.n	8007d4a <__mcmp+0x32>
 8007d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8007d42:	bd30      	pop	{r4, r5, pc}
 8007d44:	42a3      	cmp	r3, r4
 8007d46:	d3f3      	bcc.n	8007d30 <__mcmp+0x18>
 8007d48:	e7fb      	b.n	8007d42 <__mcmp+0x2a>
 8007d4a:	2001      	movs	r0, #1
 8007d4c:	e7f9      	b.n	8007d42 <__mcmp+0x2a>
	...

08007d50 <__mdiff>:
 8007d50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d54:	4689      	mov	r9, r1
 8007d56:	4606      	mov	r6, r0
 8007d58:	4611      	mov	r1, r2
 8007d5a:	4648      	mov	r0, r9
 8007d5c:	4614      	mov	r4, r2
 8007d5e:	f7ff ffdb 	bl	8007d18 <__mcmp>
 8007d62:	1e05      	subs	r5, r0, #0
 8007d64:	d112      	bne.n	8007d8c <__mdiff+0x3c>
 8007d66:	4629      	mov	r1, r5
 8007d68:	4630      	mov	r0, r6
 8007d6a:	f7ff fd11 	bl	8007790 <_Balloc>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	b928      	cbnz	r0, 8007d7e <__mdiff+0x2e>
 8007d72:	4b3f      	ldr	r3, [pc, #252]	@ (8007e70 <__mdiff+0x120>)
 8007d74:	f240 2137 	movw	r1, #567	@ 0x237
 8007d78:	483e      	ldr	r0, [pc, #248]	@ (8007e74 <__mdiff+0x124>)
 8007d7a:	f001 fb19 	bl	80093b0 <__assert_func>
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007d84:	4610      	mov	r0, r2
 8007d86:	b003      	add	sp, #12
 8007d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d8c:	bfbc      	itt	lt
 8007d8e:	464b      	movlt	r3, r9
 8007d90:	46a1      	movlt	r9, r4
 8007d92:	4630      	mov	r0, r6
 8007d94:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007d98:	bfba      	itte	lt
 8007d9a:	461c      	movlt	r4, r3
 8007d9c:	2501      	movlt	r5, #1
 8007d9e:	2500      	movge	r5, #0
 8007da0:	f7ff fcf6 	bl	8007790 <_Balloc>
 8007da4:	4602      	mov	r2, r0
 8007da6:	b918      	cbnz	r0, 8007db0 <__mdiff+0x60>
 8007da8:	4b31      	ldr	r3, [pc, #196]	@ (8007e70 <__mdiff+0x120>)
 8007daa:	f240 2145 	movw	r1, #581	@ 0x245
 8007dae:	e7e3      	b.n	8007d78 <__mdiff+0x28>
 8007db0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007db4:	6926      	ldr	r6, [r4, #16]
 8007db6:	60c5      	str	r5, [r0, #12]
 8007db8:	f109 0310 	add.w	r3, r9, #16
 8007dbc:	f109 0514 	add.w	r5, r9, #20
 8007dc0:	f104 0e14 	add.w	lr, r4, #20
 8007dc4:	f100 0b14 	add.w	fp, r0, #20
 8007dc8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007dcc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007dd0:	9301      	str	r3, [sp, #4]
 8007dd2:	46d9      	mov	r9, fp
 8007dd4:	f04f 0c00 	mov.w	ip, #0
 8007dd8:	9b01      	ldr	r3, [sp, #4]
 8007dda:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007dde:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007de2:	9301      	str	r3, [sp, #4]
 8007de4:	fa1f f38a 	uxth.w	r3, sl
 8007de8:	4619      	mov	r1, r3
 8007dea:	b283      	uxth	r3, r0
 8007dec:	1acb      	subs	r3, r1, r3
 8007dee:	0c00      	lsrs	r0, r0, #16
 8007df0:	4463      	add	r3, ip
 8007df2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007df6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007e00:	4576      	cmp	r6, lr
 8007e02:	f849 3b04 	str.w	r3, [r9], #4
 8007e06:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007e0a:	d8e5      	bhi.n	8007dd8 <__mdiff+0x88>
 8007e0c:	1b33      	subs	r3, r6, r4
 8007e0e:	3b15      	subs	r3, #21
 8007e10:	f023 0303 	bic.w	r3, r3, #3
 8007e14:	3415      	adds	r4, #21
 8007e16:	3304      	adds	r3, #4
 8007e18:	42a6      	cmp	r6, r4
 8007e1a:	bf38      	it	cc
 8007e1c:	2304      	movcc	r3, #4
 8007e1e:	441d      	add	r5, r3
 8007e20:	445b      	add	r3, fp
 8007e22:	461e      	mov	r6, r3
 8007e24:	462c      	mov	r4, r5
 8007e26:	4544      	cmp	r4, r8
 8007e28:	d30e      	bcc.n	8007e48 <__mdiff+0xf8>
 8007e2a:	f108 0103 	add.w	r1, r8, #3
 8007e2e:	1b49      	subs	r1, r1, r5
 8007e30:	f021 0103 	bic.w	r1, r1, #3
 8007e34:	3d03      	subs	r5, #3
 8007e36:	45a8      	cmp	r8, r5
 8007e38:	bf38      	it	cc
 8007e3a:	2100      	movcc	r1, #0
 8007e3c:	440b      	add	r3, r1
 8007e3e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007e42:	b191      	cbz	r1, 8007e6a <__mdiff+0x11a>
 8007e44:	6117      	str	r7, [r2, #16]
 8007e46:	e79d      	b.n	8007d84 <__mdiff+0x34>
 8007e48:	f854 1b04 	ldr.w	r1, [r4], #4
 8007e4c:	46e6      	mov	lr, ip
 8007e4e:	0c08      	lsrs	r0, r1, #16
 8007e50:	fa1c fc81 	uxtah	ip, ip, r1
 8007e54:	4471      	add	r1, lr
 8007e56:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007e5a:	b289      	uxth	r1, r1
 8007e5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007e60:	f846 1b04 	str.w	r1, [r6], #4
 8007e64:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007e68:	e7dd      	b.n	8007e26 <__mdiff+0xd6>
 8007e6a:	3f01      	subs	r7, #1
 8007e6c:	e7e7      	b.n	8007e3e <__mdiff+0xee>
 8007e6e:	bf00      	nop
 8007e70:	0800a03d 	.word	0x0800a03d
 8007e74:	0800a04e 	.word	0x0800a04e

08007e78 <__ulp>:
 8007e78:	b082      	sub	sp, #8
 8007e7a:	ed8d 0b00 	vstr	d0, [sp]
 8007e7e:	9a01      	ldr	r2, [sp, #4]
 8007e80:	4b0f      	ldr	r3, [pc, #60]	@ (8007ec0 <__ulp+0x48>)
 8007e82:	4013      	ands	r3, r2
 8007e84:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	dc08      	bgt.n	8007e9e <__ulp+0x26>
 8007e8c:	425b      	negs	r3, r3
 8007e8e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007e92:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007e96:	da04      	bge.n	8007ea2 <__ulp+0x2a>
 8007e98:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007e9c:	4113      	asrs	r3, r2
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	e008      	b.n	8007eb4 <__ulp+0x3c>
 8007ea2:	f1a2 0314 	sub.w	r3, r2, #20
 8007ea6:	2b1e      	cmp	r3, #30
 8007ea8:	bfda      	itte	le
 8007eaa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007eae:	40da      	lsrle	r2, r3
 8007eb0:	2201      	movgt	r2, #1
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	4610      	mov	r0, r2
 8007eb8:	ec41 0b10 	vmov	d0, r0, r1
 8007ebc:	b002      	add	sp, #8
 8007ebe:	4770      	bx	lr
 8007ec0:	7ff00000 	.word	0x7ff00000

08007ec4 <__b2d>:
 8007ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ec8:	6906      	ldr	r6, [r0, #16]
 8007eca:	f100 0814 	add.w	r8, r0, #20
 8007ece:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007ed2:	1f37      	subs	r7, r6, #4
 8007ed4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007ed8:	4610      	mov	r0, r2
 8007eda:	f7ff fd4b 	bl	8007974 <__hi0bits>
 8007ede:	f1c0 0320 	rsb	r3, r0, #32
 8007ee2:	280a      	cmp	r0, #10
 8007ee4:	600b      	str	r3, [r1, #0]
 8007ee6:	491b      	ldr	r1, [pc, #108]	@ (8007f54 <__b2d+0x90>)
 8007ee8:	dc15      	bgt.n	8007f16 <__b2d+0x52>
 8007eea:	f1c0 0c0b 	rsb	ip, r0, #11
 8007eee:	fa22 f30c 	lsr.w	r3, r2, ip
 8007ef2:	45b8      	cmp	r8, r7
 8007ef4:	ea43 0501 	orr.w	r5, r3, r1
 8007ef8:	bf34      	ite	cc
 8007efa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007efe:	2300      	movcs	r3, #0
 8007f00:	3015      	adds	r0, #21
 8007f02:	fa02 f000 	lsl.w	r0, r2, r0
 8007f06:	fa23 f30c 	lsr.w	r3, r3, ip
 8007f0a:	4303      	orrs	r3, r0
 8007f0c:	461c      	mov	r4, r3
 8007f0e:	ec45 4b10 	vmov	d0, r4, r5
 8007f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f16:	45b8      	cmp	r8, r7
 8007f18:	bf3a      	itte	cc
 8007f1a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007f1e:	f1a6 0708 	subcc.w	r7, r6, #8
 8007f22:	2300      	movcs	r3, #0
 8007f24:	380b      	subs	r0, #11
 8007f26:	d012      	beq.n	8007f4e <__b2d+0x8a>
 8007f28:	f1c0 0120 	rsb	r1, r0, #32
 8007f2c:	fa23 f401 	lsr.w	r4, r3, r1
 8007f30:	4082      	lsls	r2, r0
 8007f32:	4322      	orrs	r2, r4
 8007f34:	4547      	cmp	r7, r8
 8007f36:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007f3a:	bf8c      	ite	hi
 8007f3c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007f40:	2200      	movls	r2, #0
 8007f42:	4083      	lsls	r3, r0
 8007f44:	40ca      	lsrs	r2, r1
 8007f46:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	e7de      	b.n	8007f0c <__b2d+0x48>
 8007f4e:	ea42 0501 	orr.w	r5, r2, r1
 8007f52:	e7db      	b.n	8007f0c <__b2d+0x48>
 8007f54:	3ff00000 	.word	0x3ff00000

08007f58 <__d2b>:
 8007f58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007f5c:	460f      	mov	r7, r1
 8007f5e:	2101      	movs	r1, #1
 8007f60:	ec59 8b10 	vmov	r8, r9, d0
 8007f64:	4616      	mov	r6, r2
 8007f66:	f7ff fc13 	bl	8007790 <_Balloc>
 8007f6a:	4604      	mov	r4, r0
 8007f6c:	b930      	cbnz	r0, 8007f7c <__d2b+0x24>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	4b23      	ldr	r3, [pc, #140]	@ (8008000 <__d2b+0xa8>)
 8007f72:	4824      	ldr	r0, [pc, #144]	@ (8008004 <__d2b+0xac>)
 8007f74:	f240 310f 	movw	r1, #783	@ 0x30f
 8007f78:	f001 fa1a 	bl	80093b0 <__assert_func>
 8007f7c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007f80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f84:	b10d      	cbz	r5, 8007f8a <__d2b+0x32>
 8007f86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f8a:	9301      	str	r3, [sp, #4]
 8007f8c:	f1b8 0300 	subs.w	r3, r8, #0
 8007f90:	d023      	beq.n	8007fda <__d2b+0x82>
 8007f92:	4668      	mov	r0, sp
 8007f94:	9300      	str	r3, [sp, #0]
 8007f96:	f7ff fd0c 	bl	80079b2 <__lo0bits>
 8007f9a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007f9e:	b1d0      	cbz	r0, 8007fd6 <__d2b+0x7e>
 8007fa0:	f1c0 0320 	rsb	r3, r0, #32
 8007fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8007fa8:	430b      	orrs	r3, r1
 8007faa:	40c2      	lsrs	r2, r0
 8007fac:	6163      	str	r3, [r4, #20]
 8007fae:	9201      	str	r2, [sp, #4]
 8007fb0:	9b01      	ldr	r3, [sp, #4]
 8007fb2:	61a3      	str	r3, [r4, #24]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	bf0c      	ite	eq
 8007fb8:	2201      	moveq	r2, #1
 8007fba:	2202      	movne	r2, #2
 8007fbc:	6122      	str	r2, [r4, #16]
 8007fbe:	b1a5      	cbz	r5, 8007fea <__d2b+0x92>
 8007fc0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007fc4:	4405      	add	r5, r0
 8007fc6:	603d      	str	r5, [r7, #0]
 8007fc8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007fcc:	6030      	str	r0, [r6, #0]
 8007fce:	4620      	mov	r0, r4
 8007fd0:	b003      	add	sp, #12
 8007fd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007fd6:	6161      	str	r1, [r4, #20]
 8007fd8:	e7ea      	b.n	8007fb0 <__d2b+0x58>
 8007fda:	a801      	add	r0, sp, #4
 8007fdc:	f7ff fce9 	bl	80079b2 <__lo0bits>
 8007fe0:	9b01      	ldr	r3, [sp, #4]
 8007fe2:	6163      	str	r3, [r4, #20]
 8007fe4:	3020      	adds	r0, #32
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	e7e8      	b.n	8007fbc <__d2b+0x64>
 8007fea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007fee:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007ff2:	6038      	str	r0, [r7, #0]
 8007ff4:	6918      	ldr	r0, [r3, #16]
 8007ff6:	f7ff fcbd 	bl	8007974 <__hi0bits>
 8007ffa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007ffe:	e7e5      	b.n	8007fcc <__d2b+0x74>
 8008000:	0800a03d 	.word	0x0800a03d
 8008004:	0800a04e 	.word	0x0800a04e

08008008 <__ratio>:
 8008008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800800c:	b085      	sub	sp, #20
 800800e:	e9cd 1000 	strd	r1, r0, [sp]
 8008012:	a902      	add	r1, sp, #8
 8008014:	f7ff ff56 	bl	8007ec4 <__b2d>
 8008018:	9800      	ldr	r0, [sp, #0]
 800801a:	a903      	add	r1, sp, #12
 800801c:	ec55 4b10 	vmov	r4, r5, d0
 8008020:	f7ff ff50 	bl	8007ec4 <__b2d>
 8008024:	9b01      	ldr	r3, [sp, #4]
 8008026:	6919      	ldr	r1, [r3, #16]
 8008028:	9b00      	ldr	r3, [sp, #0]
 800802a:	691b      	ldr	r3, [r3, #16]
 800802c:	1ac9      	subs	r1, r1, r3
 800802e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008032:	1a9b      	subs	r3, r3, r2
 8008034:	ec5b ab10 	vmov	sl, fp, d0
 8008038:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800803c:	2b00      	cmp	r3, #0
 800803e:	bfce      	itee	gt
 8008040:	462a      	movgt	r2, r5
 8008042:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008046:	465a      	movle	r2, fp
 8008048:	462f      	mov	r7, r5
 800804a:	46d9      	mov	r9, fp
 800804c:	bfcc      	ite	gt
 800804e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008052:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008056:	464b      	mov	r3, r9
 8008058:	4652      	mov	r2, sl
 800805a:	4620      	mov	r0, r4
 800805c:	4639      	mov	r1, r7
 800805e:	f7f8 fc0d 	bl	800087c <__aeabi_ddiv>
 8008062:	ec41 0b10 	vmov	d0, r0, r1
 8008066:	b005      	add	sp, #20
 8008068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800806c <__copybits>:
 800806c:	3901      	subs	r1, #1
 800806e:	b570      	push	{r4, r5, r6, lr}
 8008070:	1149      	asrs	r1, r1, #5
 8008072:	6914      	ldr	r4, [r2, #16]
 8008074:	3101      	adds	r1, #1
 8008076:	f102 0314 	add.w	r3, r2, #20
 800807a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800807e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008082:	1f05      	subs	r5, r0, #4
 8008084:	42a3      	cmp	r3, r4
 8008086:	d30c      	bcc.n	80080a2 <__copybits+0x36>
 8008088:	1aa3      	subs	r3, r4, r2
 800808a:	3b11      	subs	r3, #17
 800808c:	f023 0303 	bic.w	r3, r3, #3
 8008090:	3211      	adds	r2, #17
 8008092:	42a2      	cmp	r2, r4
 8008094:	bf88      	it	hi
 8008096:	2300      	movhi	r3, #0
 8008098:	4418      	add	r0, r3
 800809a:	2300      	movs	r3, #0
 800809c:	4288      	cmp	r0, r1
 800809e:	d305      	bcc.n	80080ac <__copybits+0x40>
 80080a0:	bd70      	pop	{r4, r5, r6, pc}
 80080a2:	f853 6b04 	ldr.w	r6, [r3], #4
 80080a6:	f845 6f04 	str.w	r6, [r5, #4]!
 80080aa:	e7eb      	b.n	8008084 <__copybits+0x18>
 80080ac:	f840 3b04 	str.w	r3, [r0], #4
 80080b0:	e7f4      	b.n	800809c <__copybits+0x30>

080080b2 <__any_on>:
 80080b2:	f100 0214 	add.w	r2, r0, #20
 80080b6:	6900      	ldr	r0, [r0, #16]
 80080b8:	114b      	asrs	r3, r1, #5
 80080ba:	4298      	cmp	r0, r3
 80080bc:	b510      	push	{r4, lr}
 80080be:	db11      	blt.n	80080e4 <__any_on+0x32>
 80080c0:	dd0a      	ble.n	80080d8 <__any_on+0x26>
 80080c2:	f011 011f 	ands.w	r1, r1, #31
 80080c6:	d007      	beq.n	80080d8 <__any_on+0x26>
 80080c8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80080cc:	fa24 f001 	lsr.w	r0, r4, r1
 80080d0:	fa00 f101 	lsl.w	r1, r0, r1
 80080d4:	428c      	cmp	r4, r1
 80080d6:	d10b      	bne.n	80080f0 <__any_on+0x3e>
 80080d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80080dc:	4293      	cmp	r3, r2
 80080de:	d803      	bhi.n	80080e8 <__any_on+0x36>
 80080e0:	2000      	movs	r0, #0
 80080e2:	bd10      	pop	{r4, pc}
 80080e4:	4603      	mov	r3, r0
 80080e6:	e7f7      	b.n	80080d8 <__any_on+0x26>
 80080e8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80080ec:	2900      	cmp	r1, #0
 80080ee:	d0f5      	beq.n	80080dc <__any_on+0x2a>
 80080f0:	2001      	movs	r0, #1
 80080f2:	e7f6      	b.n	80080e2 <__any_on+0x30>

080080f4 <sulp>:
 80080f4:	b570      	push	{r4, r5, r6, lr}
 80080f6:	4604      	mov	r4, r0
 80080f8:	460d      	mov	r5, r1
 80080fa:	ec45 4b10 	vmov	d0, r4, r5
 80080fe:	4616      	mov	r6, r2
 8008100:	f7ff feba 	bl	8007e78 <__ulp>
 8008104:	ec51 0b10 	vmov	r0, r1, d0
 8008108:	b17e      	cbz	r6, 800812a <sulp+0x36>
 800810a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800810e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008112:	2b00      	cmp	r3, #0
 8008114:	dd09      	ble.n	800812a <sulp+0x36>
 8008116:	051b      	lsls	r3, r3, #20
 8008118:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800811c:	2400      	movs	r4, #0
 800811e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008122:	4622      	mov	r2, r4
 8008124:	462b      	mov	r3, r5
 8008126:	f7f8 fa7f 	bl	8000628 <__aeabi_dmul>
 800812a:	ec41 0b10 	vmov	d0, r0, r1
 800812e:	bd70      	pop	{r4, r5, r6, pc}

08008130 <_strtod_l>:
 8008130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008134:	b09f      	sub	sp, #124	@ 0x7c
 8008136:	460c      	mov	r4, r1
 8008138:	9217      	str	r2, [sp, #92]	@ 0x5c
 800813a:	2200      	movs	r2, #0
 800813c:	921a      	str	r2, [sp, #104]	@ 0x68
 800813e:	9005      	str	r0, [sp, #20]
 8008140:	f04f 0a00 	mov.w	sl, #0
 8008144:	f04f 0b00 	mov.w	fp, #0
 8008148:	460a      	mov	r2, r1
 800814a:	9219      	str	r2, [sp, #100]	@ 0x64
 800814c:	7811      	ldrb	r1, [r2, #0]
 800814e:	292b      	cmp	r1, #43	@ 0x2b
 8008150:	d04a      	beq.n	80081e8 <_strtod_l+0xb8>
 8008152:	d838      	bhi.n	80081c6 <_strtod_l+0x96>
 8008154:	290d      	cmp	r1, #13
 8008156:	d832      	bhi.n	80081be <_strtod_l+0x8e>
 8008158:	2908      	cmp	r1, #8
 800815a:	d832      	bhi.n	80081c2 <_strtod_l+0x92>
 800815c:	2900      	cmp	r1, #0
 800815e:	d03b      	beq.n	80081d8 <_strtod_l+0xa8>
 8008160:	2200      	movs	r2, #0
 8008162:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008164:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008166:	782a      	ldrb	r2, [r5, #0]
 8008168:	2a30      	cmp	r2, #48	@ 0x30
 800816a:	f040 80b3 	bne.w	80082d4 <_strtod_l+0x1a4>
 800816e:	786a      	ldrb	r2, [r5, #1]
 8008170:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008174:	2a58      	cmp	r2, #88	@ 0x58
 8008176:	d16e      	bne.n	8008256 <_strtod_l+0x126>
 8008178:	9302      	str	r3, [sp, #8]
 800817a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800817c:	9301      	str	r3, [sp, #4]
 800817e:	ab1a      	add	r3, sp, #104	@ 0x68
 8008180:	9300      	str	r3, [sp, #0]
 8008182:	4a8e      	ldr	r2, [pc, #568]	@ (80083bc <_strtod_l+0x28c>)
 8008184:	9805      	ldr	r0, [sp, #20]
 8008186:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008188:	a919      	add	r1, sp, #100	@ 0x64
 800818a:	f001 f9ab 	bl	80094e4 <__gethex>
 800818e:	f010 060f 	ands.w	r6, r0, #15
 8008192:	4604      	mov	r4, r0
 8008194:	d005      	beq.n	80081a2 <_strtod_l+0x72>
 8008196:	2e06      	cmp	r6, #6
 8008198:	d128      	bne.n	80081ec <_strtod_l+0xbc>
 800819a:	3501      	adds	r5, #1
 800819c:	2300      	movs	r3, #0
 800819e:	9519      	str	r5, [sp, #100]	@ 0x64
 80081a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80081a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	f040 858e 	bne.w	8008cc6 <_strtod_l+0xb96>
 80081aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081ac:	b1cb      	cbz	r3, 80081e2 <_strtod_l+0xb2>
 80081ae:	4652      	mov	r2, sl
 80081b0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80081b4:	ec43 2b10 	vmov	d0, r2, r3
 80081b8:	b01f      	add	sp, #124	@ 0x7c
 80081ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081be:	2920      	cmp	r1, #32
 80081c0:	d1ce      	bne.n	8008160 <_strtod_l+0x30>
 80081c2:	3201      	adds	r2, #1
 80081c4:	e7c1      	b.n	800814a <_strtod_l+0x1a>
 80081c6:	292d      	cmp	r1, #45	@ 0x2d
 80081c8:	d1ca      	bne.n	8008160 <_strtod_l+0x30>
 80081ca:	2101      	movs	r1, #1
 80081cc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80081ce:	1c51      	adds	r1, r2, #1
 80081d0:	9119      	str	r1, [sp, #100]	@ 0x64
 80081d2:	7852      	ldrb	r2, [r2, #1]
 80081d4:	2a00      	cmp	r2, #0
 80081d6:	d1c5      	bne.n	8008164 <_strtod_l+0x34>
 80081d8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80081da:	9419      	str	r4, [sp, #100]	@ 0x64
 80081dc:	2b00      	cmp	r3, #0
 80081de:	f040 8570 	bne.w	8008cc2 <_strtod_l+0xb92>
 80081e2:	4652      	mov	r2, sl
 80081e4:	465b      	mov	r3, fp
 80081e6:	e7e5      	b.n	80081b4 <_strtod_l+0x84>
 80081e8:	2100      	movs	r1, #0
 80081ea:	e7ef      	b.n	80081cc <_strtod_l+0x9c>
 80081ec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80081ee:	b13a      	cbz	r2, 8008200 <_strtod_l+0xd0>
 80081f0:	2135      	movs	r1, #53	@ 0x35
 80081f2:	a81c      	add	r0, sp, #112	@ 0x70
 80081f4:	f7ff ff3a 	bl	800806c <__copybits>
 80081f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80081fa:	9805      	ldr	r0, [sp, #20]
 80081fc:	f7ff fb08 	bl	8007810 <_Bfree>
 8008200:	3e01      	subs	r6, #1
 8008202:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008204:	2e04      	cmp	r6, #4
 8008206:	d806      	bhi.n	8008216 <_strtod_l+0xe6>
 8008208:	e8df f006 	tbb	[pc, r6]
 800820c:	201d0314 	.word	0x201d0314
 8008210:	14          	.byte	0x14
 8008211:	00          	.byte	0x00
 8008212:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008216:	05e1      	lsls	r1, r4, #23
 8008218:	bf48      	it	mi
 800821a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800821e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008222:	0d1b      	lsrs	r3, r3, #20
 8008224:	051b      	lsls	r3, r3, #20
 8008226:	2b00      	cmp	r3, #0
 8008228:	d1bb      	bne.n	80081a2 <_strtod_l+0x72>
 800822a:	f7fe fb2f 	bl	800688c <__errno>
 800822e:	2322      	movs	r3, #34	@ 0x22
 8008230:	6003      	str	r3, [r0, #0]
 8008232:	e7b6      	b.n	80081a2 <_strtod_l+0x72>
 8008234:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008238:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800823c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008240:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008244:	e7e7      	b.n	8008216 <_strtod_l+0xe6>
 8008246:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80083c4 <_strtod_l+0x294>
 800824a:	e7e4      	b.n	8008216 <_strtod_l+0xe6>
 800824c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008250:	f04f 3aff 	mov.w	sl, #4294967295
 8008254:	e7df      	b.n	8008216 <_strtod_l+0xe6>
 8008256:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008258:	1c5a      	adds	r2, r3, #1
 800825a:	9219      	str	r2, [sp, #100]	@ 0x64
 800825c:	785b      	ldrb	r3, [r3, #1]
 800825e:	2b30      	cmp	r3, #48	@ 0x30
 8008260:	d0f9      	beq.n	8008256 <_strtod_l+0x126>
 8008262:	2b00      	cmp	r3, #0
 8008264:	d09d      	beq.n	80081a2 <_strtod_l+0x72>
 8008266:	2301      	movs	r3, #1
 8008268:	9309      	str	r3, [sp, #36]	@ 0x24
 800826a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800826c:	930c      	str	r3, [sp, #48]	@ 0x30
 800826e:	2300      	movs	r3, #0
 8008270:	9308      	str	r3, [sp, #32]
 8008272:	930a      	str	r3, [sp, #40]	@ 0x28
 8008274:	461f      	mov	r7, r3
 8008276:	220a      	movs	r2, #10
 8008278:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800827a:	7805      	ldrb	r5, [r0, #0]
 800827c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008280:	b2d9      	uxtb	r1, r3
 8008282:	2909      	cmp	r1, #9
 8008284:	d928      	bls.n	80082d8 <_strtod_l+0x1a8>
 8008286:	494e      	ldr	r1, [pc, #312]	@ (80083c0 <_strtod_l+0x290>)
 8008288:	2201      	movs	r2, #1
 800828a:	f001 f837 	bl	80092fc <strncmp>
 800828e:	2800      	cmp	r0, #0
 8008290:	d032      	beq.n	80082f8 <_strtod_l+0x1c8>
 8008292:	2000      	movs	r0, #0
 8008294:	462a      	mov	r2, r5
 8008296:	4681      	mov	r9, r0
 8008298:	463d      	mov	r5, r7
 800829a:	4603      	mov	r3, r0
 800829c:	2a65      	cmp	r2, #101	@ 0x65
 800829e:	d001      	beq.n	80082a4 <_strtod_l+0x174>
 80082a0:	2a45      	cmp	r2, #69	@ 0x45
 80082a2:	d114      	bne.n	80082ce <_strtod_l+0x19e>
 80082a4:	b91d      	cbnz	r5, 80082ae <_strtod_l+0x17e>
 80082a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80082a8:	4302      	orrs	r2, r0
 80082aa:	d095      	beq.n	80081d8 <_strtod_l+0xa8>
 80082ac:	2500      	movs	r5, #0
 80082ae:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80082b0:	1c62      	adds	r2, r4, #1
 80082b2:	9219      	str	r2, [sp, #100]	@ 0x64
 80082b4:	7862      	ldrb	r2, [r4, #1]
 80082b6:	2a2b      	cmp	r2, #43	@ 0x2b
 80082b8:	d077      	beq.n	80083aa <_strtod_l+0x27a>
 80082ba:	2a2d      	cmp	r2, #45	@ 0x2d
 80082bc:	d07b      	beq.n	80083b6 <_strtod_l+0x286>
 80082be:	f04f 0c00 	mov.w	ip, #0
 80082c2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80082c6:	2909      	cmp	r1, #9
 80082c8:	f240 8082 	bls.w	80083d0 <_strtod_l+0x2a0>
 80082cc:	9419      	str	r4, [sp, #100]	@ 0x64
 80082ce:	f04f 0800 	mov.w	r8, #0
 80082d2:	e0a2      	b.n	800841a <_strtod_l+0x2ea>
 80082d4:	2300      	movs	r3, #0
 80082d6:	e7c7      	b.n	8008268 <_strtod_l+0x138>
 80082d8:	2f08      	cmp	r7, #8
 80082da:	bfd5      	itete	le
 80082dc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80082de:	9908      	ldrgt	r1, [sp, #32]
 80082e0:	fb02 3301 	mlale	r3, r2, r1, r3
 80082e4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80082e8:	f100 0001 	add.w	r0, r0, #1
 80082ec:	bfd4      	ite	le
 80082ee:	930a      	strle	r3, [sp, #40]	@ 0x28
 80082f0:	9308      	strgt	r3, [sp, #32]
 80082f2:	3701      	adds	r7, #1
 80082f4:	9019      	str	r0, [sp, #100]	@ 0x64
 80082f6:	e7bf      	b.n	8008278 <_strtod_l+0x148>
 80082f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80082fa:	1c5a      	adds	r2, r3, #1
 80082fc:	9219      	str	r2, [sp, #100]	@ 0x64
 80082fe:	785a      	ldrb	r2, [r3, #1]
 8008300:	b37f      	cbz	r7, 8008362 <_strtod_l+0x232>
 8008302:	4681      	mov	r9, r0
 8008304:	463d      	mov	r5, r7
 8008306:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800830a:	2b09      	cmp	r3, #9
 800830c:	d912      	bls.n	8008334 <_strtod_l+0x204>
 800830e:	2301      	movs	r3, #1
 8008310:	e7c4      	b.n	800829c <_strtod_l+0x16c>
 8008312:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008314:	1c5a      	adds	r2, r3, #1
 8008316:	9219      	str	r2, [sp, #100]	@ 0x64
 8008318:	785a      	ldrb	r2, [r3, #1]
 800831a:	3001      	adds	r0, #1
 800831c:	2a30      	cmp	r2, #48	@ 0x30
 800831e:	d0f8      	beq.n	8008312 <_strtod_l+0x1e2>
 8008320:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008324:	2b08      	cmp	r3, #8
 8008326:	f200 84d3 	bhi.w	8008cd0 <_strtod_l+0xba0>
 800832a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800832c:	930c      	str	r3, [sp, #48]	@ 0x30
 800832e:	4681      	mov	r9, r0
 8008330:	2000      	movs	r0, #0
 8008332:	4605      	mov	r5, r0
 8008334:	3a30      	subs	r2, #48	@ 0x30
 8008336:	f100 0301 	add.w	r3, r0, #1
 800833a:	d02a      	beq.n	8008392 <_strtod_l+0x262>
 800833c:	4499      	add	r9, r3
 800833e:	eb00 0c05 	add.w	ip, r0, r5
 8008342:	462b      	mov	r3, r5
 8008344:	210a      	movs	r1, #10
 8008346:	4563      	cmp	r3, ip
 8008348:	d10d      	bne.n	8008366 <_strtod_l+0x236>
 800834a:	1c69      	adds	r1, r5, #1
 800834c:	4401      	add	r1, r0
 800834e:	4428      	add	r0, r5
 8008350:	2808      	cmp	r0, #8
 8008352:	dc16      	bgt.n	8008382 <_strtod_l+0x252>
 8008354:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008356:	230a      	movs	r3, #10
 8008358:	fb03 2300 	mla	r3, r3, r0, r2
 800835c:	930a      	str	r3, [sp, #40]	@ 0x28
 800835e:	2300      	movs	r3, #0
 8008360:	e018      	b.n	8008394 <_strtod_l+0x264>
 8008362:	4638      	mov	r0, r7
 8008364:	e7da      	b.n	800831c <_strtod_l+0x1ec>
 8008366:	2b08      	cmp	r3, #8
 8008368:	f103 0301 	add.w	r3, r3, #1
 800836c:	dc03      	bgt.n	8008376 <_strtod_l+0x246>
 800836e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008370:	434e      	muls	r6, r1
 8008372:	960a      	str	r6, [sp, #40]	@ 0x28
 8008374:	e7e7      	b.n	8008346 <_strtod_l+0x216>
 8008376:	2b10      	cmp	r3, #16
 8008378:	bfde      	ittt	le
 800837a:	9e08      	ldrle	r6, [sp, #32]
 800837c:	434e      	mulle	r6, r1
 800837e:	9608      	strle	r6, [sp, #32]
 8008380:	e7e1      	b.n	8008346 <_strtod_l+0x216>
 8008382:	280f      	cmp	r0, #15
 8008384:	dceb      	bgt.n	800835e <_strtod_l+0x22e>
 8008386:	9808      	ldr	r0, [sp, #32]
 8008388:	230a      	movs	r3, #10
 800838a:	fb03 2300 	mla	r3, r3, r0, r2
 800838e:	9308      	str	r3, [sp, #32]
 8008390:	e7e5      	b.n	800835e <_strtod_l+0x22e>
 8008392:	4629      	mov	r1, r5
 8008394:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008396:	1c50      	adds	r0, r2, #1
 8008398:	9019      	str	r0, [sp, #100]	@ 0x64
 800839a:	7852      	ldrb	r2, [r2, #1]
 800839c:	4618      	mov	r0, r3
 800839e:	460d      	mov	r5, r1
 80083a0:	e7b1      	b.n	8008306 <_strtod_l+0x1d6>
 80083a2:	f04f 0900 	mov.w	r9, #0
 80083a6:	2301      	movs	r3, #1
 80083a8:	e77d      	b.n	80082a6 <_strtod_l+0x176>
 80083aa:	f04f 0c00 	mov.w	ip, #0
 80083ae:	1ca2      	adds	r2, r4, #2
 80083b0:	9219      	str	r2, [sp, #100]	@ 0x64
 80083b2:	78a2      	ldrb	r2, [r4, #2]
 80083b4:	e785      	b.n	80082c2 <_strtod_l+0x192>
 80083b6:	f04f 0c01 	mov.w	ip, #1
 80083ba:	e7f8      	b.n	80083ae <_strtod_l+0x27e>
 80083bc:	0800a1c0 	.word	0x0800a1c0
 80083c0:	0800a1a8 	.word	0x0800a1a8
 80083c4:	7ff00000 	.word	0x7ff00000
 80083c8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80083ca:	1c51      	adds	r1, r2, #1
 80083cc:	9119      	str	r1, [sp, #100]	@ 0x64
 80083ce:	7852      	ldrb	r2, [r2, #1]
 80083d0:	2a30      	cmp	r2, #48	@ 0x30
 80083d2:	d0f9      	beq.n	80083c8 <_strtod_l+0x298>
 80083d4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80083d8:	2908      	cmp	r1, #8
 80083da:	f63f af78 	bhi.w	80082ce <_strtod_l+0x19e>
 80083de:	3a30      	subs	r2, #48	@ 0x30
 80083e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80083e2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80083e4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80083e6:	f04f 080a 	mov.w	r8, #10
 80083ea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80083ec:	1c56      	adds	r6, r2, #1
 80083ee:	9619      	str	r6, [sp, #100]	@ 0x64
 80083f0:	7852      	ldrb	r2, [r2, #1]
 80083f2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80083f6:	f1be 0f09 	cmp.w	lr, #9
 80083fa:	d939      	bls.n	8008470 <_strtod_l+0x340>
 80083fc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80083fe:	1a76      	subs	r6, r6, r1
 8008400:	2e08      	cmp	r6, #8
 8008402:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008406:	dc03      	bgt.n	8008410 <_strtod_l+0x2e0>
 8008408:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800840a:	4588      	cmp	r8, r1
 800840c:	bfa8      	it	ge
 800840e:	4688      	movge	r8, r1
 8008410:	f1bc 0f00 	cmp.w	ip, #0
 8008414:	d001      	beq.n	800841a <_strtod_l+0x2ea>
 8008416:	f1c8 0800 	rsb	r8, r8, #0
 800841a:	2d00      	cmp	r5, #0
 800841c:	d14e      	bne.n	80084bc <_strtod_l+0x38c>
 800841e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008420:	4308      	orrs	r0, r1
 8008422:	f47f aebe 	bne.w	80081a2 <_strtod_l+0x72>
 8008426:	2b00      	cmp	r3, #0
 8008428:	f47f aed6 	bne.w	80081d8 <_strtod_l+0xa8>
 800842c:	2a69      	cmp	r2, #105	@ 0x69
 800842e:	d028      	beq.n	8008482 <_strtod_l+0x352>
 8008430:	dc25      	bgt.n	800847e <_strtod_l+0x34e>
 8008432:	2a49      	cmp	r2, #73	@ 0x49
 8008434:	d025      	beq.n	8008482 <_strtod_l+0x352>
 8008436:	2a4e      	cmp	r2, #78	@ 0x4e
 8008438:	f47f aece 	bne.w	80081d8 <_strtod_l+0xa8>
 800843c:	499b      	ldr	r1, [pc, #620]	@ (80086ac <_strtod_l+0x57c>)
 800843e:	a819      	add	r0, sp, #100	@ 0x64
 8008440:	f001 fa72 	bl	8009928 <__match>
 8008444:	2800      	cmp	r0, #0
 8008446:	f43f aec7 	beq.w	80081d8 <_strtod_l+0xa8>
 800844a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	2b28      	cmp	r3, #40	@ 0x28
 8008450:	d12e      	bne.n	80084b0 <_strtod_l+0x380>
 8008452:	4997      	ldr	r1, [pc, #604]	@ (80086b0 <_strtod_l+0x580>)
 8008454:	aa1c      	add	r2, sp, #112	@ 0x70
 8008456:	a819      	add	r0, sp, #100	@ 0x64
 8008458:	f001 fa7a 	bl	8009950 <__hexnan>
 800845c:	2805      	cmp	r0, #5
 800845e:	d127      	bne.n	80084b0 <_strtod_l+0x380>
 8008460:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008462:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008466:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800846a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800846e:	e698      	b.n	80081a2 <_strtod_l+0x72>
 8008470:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008472:	fb08 2101 	mla	r1, r8, r1, r2
 8008476:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800847a:	920e      	str	r2, [sp, #56]	@ 0x38
 800847c:	e7b5      	b.n	80083ea <_strtod_l+0x2ba>
 800847e:	2a6e      	cmp	r2, #110	@ 0x6e
 8008480:	e7da      	b.n	8008438 <_strtod_l+0x308>
 8008482:	498c      	ldr	r1, [pc, #560]	@ (80086b4 <_strtod_l+0x584>)
 8008484:	a819      	add	r0, sp, #100	@ 0x64
 8008486:	f001 fa4f 	bl	8009928 <__match>
 800848a:	2800      	cmp	r0, #0
 800848c:	f43f aea4 	beq.w	80081d8 <_strtod_l+0xa8>
 8008490:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008492:	4989      	ldr	r1, [pc, #548]	@ (80086b8 <_strtod_l+0x588>)
 8008494:	3b01      	subs	r3, #1
 8008496:	a819      	add	r0, sp, #100	@ 0x64
 8008498:	9319      	str	r3, [sp, #100]	@ 0x64
 800849a:	f001 fa45 	bl	8009928 <__match>
 800849e:	b910      	cbnz	r0, 80084a6 <_strtod_l+0x376>
 80084a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80084a2:	3301      	adds	r3, #1
 80084a4:	9319      	str	r3, [sp, #100]	@ 0x64
 80084a6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80086c8 <_strtod_l+0x598>
 80084aa:	f04f 0a00 	mov.w	sl, #0
 80084ae:	e678      	b.n	80081a2 <_strtod_l+0x72>
 80084b0:	4882      	ldr	r0, [pc, #520]	@ (80086bc <_strtod_l+0x58c>)
 80084b2:	f000 ff75 	bl	80093a0 <nan>
 80084b6:	ec5b ab10 	vmov	sl, fp, d0
 80084ba:	e672      	b.n	80081a2 <_strtod_l+0x72>
 80084bc:	eba8 0309 	sub.w	r3, r8, r9
 80084c0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80084c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80084c4:	2f00      	cmp	r7, #0
 80084c6:	bf08      	it	eq
 80084c8:	462f      	moveq	r7, r5
 80084ca:	2d10      	cmp	r5, #16
 80084cc:	462c      	mov	r4, r5
 80084ce:	bfa8      	it	ge
 80084d0:	2410      	movge	r4, #16
 80084d2:	f7f8 f82f 	bl	8000534 <__aeabi_ui2d>
 80084d6:	2d09      	cmp	r5, #9
 80084d8:	4682      	mov	sl, r0
 80084da:	468b      	mov	fp, r1
 80084dc:	dc13      	bgt.n	8008506 <_strtod_l+0x3d6>
 80084de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	f43f ae5e 	beq.w	80081a2 <_strtod_l+0x72>
 80084e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084e8:	dd78      	ble.n	80085dc <_strtod_l+0x4ac>
 80084ea:	2b16      	cmp	r3, #22
 80084ec:	dc5f      	bgt.n	80085ae <_strtod_l+0x47e>
 80084ee:	4974      	ldr	r1, [pc, #464]	@ (80086c0 <_strtod_l+0x590>)
 80084f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80084f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084f8:	4652      	mov	r2, sl
 80084fa:	465b      	mov	r3, fp
 80084fc:	f7f8 f894 	bl	8000628 <__aeabi_dmul>
 8008500:	4682      	mov	sl, r0
 8008502:	468b      	mov	fp, r1
 8008504:	e64d      	b.n	80081a2 <_strtod_l+0x72>
 8008506:	4b6e      	ldr	r3, [pc, #440]	@ (80086c0 <_strtod_l+0x590>)
 8008508:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800850c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008510:	f7f8 f88a 	bl	8000628 <__aeabi_dmul>
 8008514:	4682      	mov	sl, r0
 8008516:	9808      	ldr	r0, [sp, #32]
 8008518:	468b      	mov	fp, r1
 800851a:	f7f8 f80b 	bl	8000534 <__aeabi_ui2d>
 800851e:	4602      	mov	r2, r0
 8008520:	460b      	mov	r3, r1
 8008522:	4650      	mov	r0, sl
 8008524:	4659      	mov	r1, fp
 8008526:	f7f7 fec9 	bl	80002bc <__adddf3>
 800852a:	2d0f      	cmp	r5, #15
 800852c:	4682      	mov	sl, r0
 800852e:	468b      	mov	fp, r1
 8008530:	ddd5      	ble.n	80084de <_strtod_l+0x3ae>
 8008532:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008534:	1b2c      	subs	r4, r5, r4
 8008536:	441c      	add	r4, r3
 8008538:	2c00      	cmp	r4, #0
 800853a:	f340 8096 	ble.w	800866a <_strtod_l+0x53a>
 800853e:	f014 030f 	ands.w	r3, r4, #15
 8008542:	d00a      	beq.n	800855a <_strtod_l+0x42a>
 8008544:	495e      	ldr	r1, [pc, #376]	@ (80086c0 <_strtod_l+0x590>)
 8008546:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800854a:	4652      	mov	r2, sl
 800854c:	465b      	mov	r3, fp
 800854e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008552:	f7f8 f869 	bl	8000628 <__aeabi_dmul>
 8008556:	4682      	mov	sl, r0
 8008558:	468b      	mov	fp, r1
 800855a:	f034 040f 	bics.w	r4, r4, #15
 800855e:	d073      	beq.n	8008648 <_strtod_l+0x518>
 8008560:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008564:	dd48      	ble.n	80085f8 <_strtod_l+0x4c8>
 8008566:	2400      	movs	r4, #0
 8008568:	46a0      	mov	r8, r4
 800856a:	940a      	str	r4, [sp, #40]	@ 0x28
 800856c:	46a1      	mov	r9, r4
 800856e:	9a05      	ldr	r2, [sp, #20]
 8008570:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80086c8 <_strtod_l+0x598>
 8008574:	2322      	movs	r3, #34	@ 0x22
 8008576:	6013      	str	r3, [r2, #0]
 8008578:	f04f 0a00 	mov.w	sl, #0
 800857c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800857e:	2b00      	cmp	r3, #0
 8008580:	f43f ae0f 	beq.w	80081a2 <_strtod_l+0x72>
 8008584:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008586:	9805      	ldr	r0, [sp, #20]
 8008588:	f7ff f942 	bl	8007810 <_Bfree>
 800858c:	9805      	ldr	r0, [sp, #20]
 800858e:	4649      	mov	r1, r9
 8008590:	f7ff f93e 	bl	8007810 <_Bfree>
 8008594:	9805      	ldr	r0, [sp, #20]
 8008596:	4641      	mov	r1, r8
 8008598:	f7ff f93a 	bl	8007810 <_Bfree>
 800859c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800859e:	9805      	ldr	r0, [sp, #20]
 80085a0:	f7ff f936 	bl	8007810 <_Bfree>
 80085a4:	9805      	ldr	r0, [sp, #20]
 80085a6:	4621      	mov	r1, r4
 80085a8:	f7ff f932 	bl	8007810 <_Bfree>
 80085ac:	e5f9      	b.n	80081a2 <_strtod_l+0x72>
 80085ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085b0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80085b4:	4293      	cmp	r3, r2
 80085b6:	dbbc      	blt.n	8008532 <_strtod_l+0x402>
 80085b8:	4c41      	ldr	r4, [pc, #260]	@ (80086c0 <_strtod_l+0x590>)
 80085ba:	f1c5 050f 	rsb	r5, r5, #15
 80085be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80085c2:	4652      	mov	r2, sl
 80085c4:	465b      	mov	r3, fp
 80085c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085ca:	f7f8 f82d 	bl	8000628 <__aeabi_dmul>
 80085ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085d0:	1b5d      	subs	r5, r3, r5
 80085d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80085d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80085da:	e78f      	b.n	80084fc <_strtod_l+0x3cc>
 80085dc:	3316      	adds	r3, #22
 80085de:	dba8      	blt.n	8008532 <_strtod_l+0x402>
 80085e0:	4b37      	ldr	r3, [pc, #220]	@ (80086c0 <_strtod_l+0x590>)
 80085e2:	eba9 0808 	sub.w	r8, r9, r8
 80085e6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80085ea:	e9d8 2300 	ldrd	r2, r3, [r8]
 80085ee:	4650      	mov	r0, sl
 80085f0:	4659      	mov	r1, fp
 80085f2:	f7f8 f943 	bl	800087c <__aeabi_ddiv>
 80085f6:	e783      	b.n	8008500 <_strtod_l+0x3d0>
 80085f8:	4b32      	ldr	r3, [pc, #200]	@ (80086c4 <_strtod_l+0x594>)
 80085fa:	9308      	str	r3, [sp, #32]
 80085fc:	2300      	movs	r3, #0
 80085fe:	1124      	asrs	r4, r4, #4
 8008600:	4650      	mov	r0, sl
 8008602:	4659      	mov	r1, fp
 8008604:	461e      	mov	r6, r3
 8008606:	2c01      	cmp	r4, #1
 8008608:	dc21      	bgt.n	800864e <_strtod_l+0x51e>
 800860a:	b10b      	cbz	r3, 8008610 <_strtod_l+0x4e0>
 800860c:	4682      	mov	sl, r0
 800860e:	468b      	mov	fp, r1
 8008610:	492c      	ldr	r1, [pc, #176]	@ (80086c4 <_strtod_l+0x594>)
 8008612:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008616:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800861a:	4652      	mov	r2, sl
 800861c:	465b      	mov	r3, fp
 800861e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008622:	f7f8 f801 	bl	8000628 <__aeabi_dmul>
 8008626:	4b28      	ldr	r3, [pc, #160]	@ (80086c8 <_strtod_l+0x598>)
 8008628:	460a      	mov	r2, r1
 800862a:	400b      	ands	r3, r1
 800862c:	4927      	ldr	r1, [pc, #156]	@ (80086cc <_strtod_l+0x59c>)
 800862e:	428b      	cmp	r3, r1
 8008630:	4682      	mov	sl, r0
 8008632:	d898      	bhi.n	8008566 <_strtod_l+0x436>
 8008634:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008638:	428b      	cmp	r3, r1
 800863a:	bf86      	itte	hi
 800863c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80086d0 <_strtod_l+0x5a0>
 8008640:	f04f 3aff 	movhi.w	sl, #4294967295
 8008644:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008648:	2300      	movs	r3, #0
 800864a:	9308      	str	r3, [sp, #32]
 800864c:	e07a      	b.n	8008744 <_strtod_l+0x614>
 800864e:	07e2      	lsls	r2, r4, #31
 8008650:	d505      	bpl.n	800865e <_strtod_l+0x52e>
 8008652:	9b08      	ldr	r3, [sp, #32]
 8008654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008658:	f7f7 ffe6 	bl	8000628 <__aeabi_dmul>
 800865c:	2301      	movs	r3, #1
 800865e:	9a08      	ldr	r2, [sp, #32]
 8008660:	3208      	adds	r2, #8
 8008662:	3601      	adds	r6, #1
 8008664:	1064      	asrs	r4, r4, #1
 8008666:	9208      	str	r2, [sp, #32]
 8008668:	e7cd      	b.n	8008606 <_strtod_l+0x4d6>
 800866a:	d0ed      	beq.n	8008648 <_strtod_l+0x518>
 800866c:	4264      	negs	r4, r4
 800866e:	f014 020f 	ands.w	r2, r4, #15
 8008672:	d00a      	beq.n	800868a <_strtod_l+0x55a>
 8008674:	4b12      	ldr	r3, [pc, #72]	@ (80086c0 <_strtod_l+0x590>)
 8008676:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800867a:	4650      	mov	r0, sl
 800867c:	4659      	mov	r1, fp
 800867e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008682:	f7f8 f8fb 	bl	800087c <__aeabi_ddiv>
 8008686:	4682      	mov	sl, r0
 8008688:	468b      	mov	fp, r1
 800868a:	1124      	asrs	r4, r4, #4
 800868c:	d0dc      	beq.n	8008648 <_strtod_l+0x518>
 800868e:	2c1f      	cmp	r4, #31
 8008690:	dd20      	ble.n	80086d4 <_strtod_l+0x5a4>
 8008692:	2400      	movs	r4, #0
 8008694:	46a0      	mov	r8, r4
 8008696:	940a      	str	r4, [sp, #40]	@ 0x28
 8008698:	46a1      	mov	r9, r4
 800869a:	9a05      	ldr	r2, [sp, #20]
 800869c:	2322      	movs	r3, #34	@ 0x22
 800869e:	f04f 0a00 	mov.w	sl, #0
 80086a2:	f04f 0b00 	mov.w	fp, #0
 80086a6:	6013      	str	r3, [r2, #0]
 80086a8:	e768      	b.n	800857c <_strtod_l+0x44c>
 80086aa:	bf00      	nop
 80086ac:	08009f95 	.word	0x08009f95
 80086b0:	0800a1ac 	.word	0x0800a1ac
 80086b4:	08009f8d 	.word	0x08009f8d
 80086b8:	08009fc4 	.word	0x08009fc4
 80086bc:	0800a355 	.word	0x0800a355
 80086c0:	0800a0e0 	.word	0x0800a0e0
 80086c4:	0800a0b8 	.word	0x0800a0b8
 80086c8:	7ff00000 	.word	0x7ff00000
 80086cc:	7ca00000 	.word	0x7ca00000
 80086d0:	7fefffff 	.word	0x7fefffff
 80086d4:	f014 0310 	ands.w	r3, r4, #16
 80086d8:	bf18      	it	ne
 80086da:	236a      	movne	r3, #106	@ 0x6a
 80086dc:	4ea9      	ldr	r6, [pc, #676]	@ (8008984 <_strtod_l+0x854>)
 80086de:	9308      	str	r3, [sp, #32]
 80086e0:	4650      	mov	r0, sl
 80086e2:	4659      	mov	r1, fp
 80086e4:	2300      	movs	r3, #0
 80086e6:	07e2      	lsls	r2, r4, #31
 80086e8:	d504      	bpl.n	80086f4 <_strtod_l+0x5c4>
 80086ea:	e9d6 2300 	ldrd	r2, r3, [r6]
 80086ee:	f7f7 ff9b 	bl	8000628 <__aeabi_dmul>
 80086f2:	2301      	movs	r3, #1
 80086f4:	1064      	asrs	r4, r4, #1
 80086f6:	f106 0608 	add.w	r6, r6, #8
 80086fa:	d1f4      	bne.n	80086e6 <_strtod_l+0x5b6>
 80086fc:	b10b      	cbz	r3, 8008702 <_strtod_l+0x5d2>
 80086fe:	4682      	mov	sl, r0
 8008700:	468b      	mov	fp, r1
 8008702:	9b08      	ldr	r3, [sp, #32]
 8008704:	b1b3      	cbz	r3, 8008734 <_strtod_l+0x604>
 8008706:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800870a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800870e:	2b00      	cmp	r3, #0
 8008710:	4659      	mov	r1, fp
 8008712:	dd0f      	ble.n	8008734 <_strtod_l+0x604>
 8008714:	2b1f      	cmp	r3, #31
 8008716:	dd55      	ble.n	80087c4 <_strtod_l+0x694>
 8008718:	2b34      	cmp	r3, #52	@ 0x34
 800871a:	bfde      	ittt	le
 800871c:	f04f 33ff 	movle.w	r3, #4294967295
 8008720:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008724:	4093      	lslle	r3, r2
 8008726:	f04f 0a00 	mov.w	sl, #0
 800872a:	bfcc      	ite	gt
 800872c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008730:	ea03 0b01 	andle.w	fp, r3, r1
 8008734:	2200      	movs	r2, #0
 8008736:	2300      	movs	r3, #0
 8008738:	4650      	mov	r0, sl
 800873a:	4659      	mov	r1, fp
 800873c:	f7f8 f9dc 	bl	8000af8 <__aeabi_dcmpeq>
 8008740:	2800      	cmp	r0, #0
 8008742:	d1a6      	bne.n	8008692 <_strtod_l+0x562>
 8008744:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008746:	9300      	str	r3, [sp, #0]
 8008748:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800874a:	9805      	ldr	r0, [sp, #20]
 800874c:	462b      	mov	r3, r5
 800874e:	463a      	mov	r2, r7
 8008750:	f7ff f8c6 	bl	80078e0 <__s2b>
 8008754:	900a      	str	r0, [sp, #40]	@ 0x28
 8008756:	2800      	cmp	r0, #0
 8008758:	f43f af05 	beq.w	8008566 <_strtod_l+0x436>
 800875c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800875e:	2a00      	cmp	r2, #0
 8008760:	eba9 0308 	sub.w	r3, r9, r8
 8008764:	bfa8      	it	ge
 8008766:	2300      	movge	r3, #0
 8008768:	9312      	str	r3, [sp, #72]	@ 0x48
 800876a:	2400      	movs	r4, #0
 800876c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008770:	9316      	str	r3, [sp, #88]	@ 0x58
 8008772:	46a0      	mov	r8, r4
 8008774:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008776:	9805      	ldr	r0, [sp, #20]
 8008778:	6859      	ldr	r1, [r3, #4]
 800877a:	f7ff f809 	bl	8007790 <_Balloc>
 800877e:	4681      	mov	r9, r0
 8008780:	2800      	cmp	r0, #0
 8008782:	f43f aef4 	beq.w	800856e <_strtod_l+0x43e>
 8008786:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008788:	691a      	ldr	r2, [r3, #16]
 800878a:	3202      	adds	r2, #2
 800878c:	f103 010c 	add.w	r1, r3, #12
 8008790:	0092      	lsls	r2, r2, #2
 8008792:	300c      	adds	r0, #12
 8008794:	f000 fdf6 	bl	8009384 <memcpy>
 8008798:	ec4b ab10 	vmov	d0, sl, fp
 800879c:	9805      	ldr	r0, [sp, #20]
 800879e:	aa1c      	add	r2, sp, #112	@ 0x70
 80087a0:	a91b      	add	r1, sp, #108	@ 0x6c
 80087a2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80087a6:	f7ff fbd7 	bl	8007f58 <__d2b>
 80087aa:	901a      	str	r0, [sp, #104]	@ 0x68
 80087ac:	2800      	cmp	r0, #0
 80087ae:	f43f aede 	beq.w	800856e <_strtod_l+0x43e>
 80087b2:	9805      	ldr	r0, [sp, #20]
 80087b4:	2101      	movs	r1, #1
 80087b6:	f7ff f929 	bl	8007a0c <__i2b>
 80087ba:	4680      	mov	r8, r0
 80087bc:	b948      	cbnz	r0, 80087d2 <_strtod_l+0x6a2>
 80087be:	f04f 0800 	mov.w	r8, #0
 80087c2:	e6d4      	b.n	800856e <_strtod_l+0x43e>
 80087c4:	f04f 32ff 	mov.w	r2, #4294967295
 80087c8:	fa02 f303 	lsl.w	r3, r2, r3
 80087cc:	ea03 0a0a 	and.w	sl, r3, sl
 80087d0:	e7b0      	b.n	8008734 <_strtod_l+0x604>
 80087d2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80087d4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80087d6:	2d00      	cmp	r5, #0
 80087d8:	bfab      	itete	ge
 80087da:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80087dc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80087de:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80087e0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80087e2:	bfac      	ite	ge
 80087e4:	18ef      	addge	r7, r5, r3
 80087e6:	1b5e      	sublt	r6, r3, r5
 80087e8:	9b08      	ldr	r3, [sp, #32]
 80087ea:	1aed      	subs	r5, r5, r3
 80087ec:	4415      	add	r5, r2
 80087ee:	4b66      	ldr	r3, [pc, #408]	@ (8008988 <_strtod_l+0x858>)
 80087f0:	3d01      	subs	r5, #1
 80087f2:	429d      	cmp	r5, r3
 80087f4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80087f8:	da50      	bge.n	800889c <_strtod_l+0x76c>
 80087fa:	1b5b      	subs	r3, r3, r5
 80087fc:	2b1f      	cmp	r3, #31
 80087fe:	eba2 0203 	sub.w	r2, r2, r3
 8008802:	f04f 0101 	mov.w	r1, #1
 8008806:	dc3d      	bgt.n	8008884 <_strtod_l+0x754>
 8008808:	fa01 f303 	lsl.w	r3, r1, r3
 800880c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800880e:	2300      	movs	r3, #0
 8008810:	9310      	str	r3, [sp, #64]	@ 0x40
 8008812:	18bd      	adds	r5, r7, r2
 8008814:	9b08      	ldr	r3, [sp, #32]
 8008816:	42af      	cmp	r7, r5
 8008818:	4416      	add	r6, r2
 800881a:	441e      	add	r6, r3
 800881c:	463b      	mov	r3, r7
 800881e:	bfa8      	it	ge
 8008820:	462b      	movge	r3, r5
 8008822:	42b3      	cmp	r3, r6
 8008824:	bfa8      	it	ge
 8008826:	4633      	movge	r3, r6
 8008828:	2b00      	cmp	r3, #0
 800882a:	bfc2      	ittt	gt
 800882c:	1aed      	subgt	r5, r5, r3
 800882e:	1af6      	subgt	r6, r6, r3
 8008830:	1aff      	subgt	r7, r7, r3
 8008832:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008834:	2b00      	cmp	r3, #0
 8008836:	dd16      	ble.n	8008866 <_strtod_l+0x736>
 8008838:	4641      	mov	r1, r8
 800883a:	9805      	ldr	r0, [sp, #20]
 800883c:	461a      	mov	r2, r3
 800883e:	f7ff f9a5 	bl	8007b8c <__pow5mult>
 8008842:	4680      	mov	r8, r0
 8008844:	2800      	cmp	r0, #0
 8008846:	d0ba      	beq.n	80087be <_strtod_l+0x68e>
 8008848:	4601      	mov	r1, r0
 800884a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800884c:	9805      	ldr	r0, [sp, #20]
 800884e:	f7ff f8f3 	bl	8007a38 <__multiply>
 8008852:	900e      	str	r0, [sp, #56]	@ 0x38
 8008854:	2800      	cmp	r0, #0
 8008856:	f43f ae8a 	beq.w	800856e <_strtod_l+0x43e>
 800885a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800885c:	9805      	ldr	r0, [sp, #20]
 800885e:	f7fe ffd7 	bl	8007810 <_Bfree>
 8008862:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008864:	931a      	str	r3, [sp, #104]	@ 0x68
 8008866:	2d00      	cmp	r5, #0
 8008868:	dc1d      	bgt.n	80088a6 <_strtod_l+0x776>
 800886a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800886c:	2b00      	cmp	r3, #0
 800886e:	dd23      	ble.n	80088b8 <_strtod_l+0x788>
 8008870:	4649      	mov	r1, r9
 8008872:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008874:	9805      	ldr	r0, [sp, #20]
 8008876:	f7ff f989 	bl	8007b8c <__pow5mult>
 800887a:	4681      	mov	r9, r0
 800887c:	b9e0      	cbnz	r0, 80088b8 <_strtod_l+0x788>
 800887e:	f04f 0900 	mov.w	r9, #0
 8008882:	e674      	b.n	800856e <_strtod_l+0x43e>
 8008884:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008888:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800888c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008890:	35e2      	adds	r5, #226	@ 0xe2
 8008892:	fa01 f305 	lsl.w	r3, r1, r5
 8008896:	9310      	str	r3, [sp, #64]	@ 0x40
 8008898:	9113      	str	r1, [sp, #76]	@ 0x4c
 800889a:	e7ba      	b.n	8008812 <_strtod_l+0x6e2>
 800889c:	2300      	movs	r3, #0
 800889e:	9310      	str	r3, [sp, #64]	@ 0x40
 80088a0:	2301      	movs	r3, #1
 80088a2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80088a4:	e7b5      	b.n	8008812 <_strtod_l+0x6e2>
 80088a6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80088a8:	9805      	ldr	r0, [sp, #20]
 80088aa:	462a      	mov	r2, r5
 80088ac:	f7ff f9c8 	bl	8007c40 <__lshift>
 80088b0:	901a      	str	r0, [sp, #104]	@ 0x68
 80088b2:	2800      	cmp	r0, #0
 80088b4:	d1d9      	bne.n	800886a <_strtod_l+0x73a>
 80088b6:	e65a      	b.n	800856e <_strtod_l+0x43e>
 80088b8:	2e00      	cmp	r6, #0
 80088ba:	dd07      	ble.n	80088cc <_strtod_l+0x79c>
 80088bc:	4649      	mov	r1, r9
 80088be:	9805      	ldr	r0, [sp, #20]
 80088c0:	4632      	mov	r2, r6
 80088c2:	f7ff f9bd 	bl	8007c40 <__lshift>
 80088c6:	4681      	mov	r9, r0
 80088c8:	2800      	cmp	r0, #0
 80088ca:	d0d8      	beq.n	800887e <_strtod_l+0x74e>
 80088cc:	2f00      	cmp	r7, #0
 80088ce:	dd08      	ble.n	80088e2 <_strtod_l+0x7b2>
 80088d0:	4641      	mov	r1, r8
 80088d2:	9805      	ldr	r0, [sp, #20]
 80088d4:	463a      	mov	r2, r7
 80088d6:	f7ff f9b3 	bl	8007c40 <__lshift>
 80088da:	4680      	mov	r8, r0
 80088dc:	2800      	cmp	r0, #0
 80088de:	f43f ae46 	beq.w	800856e <_strtod_l+0x43e>
 80088e2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80088e4:	9805      	ldr	r0, [sp, #20]
 80088e6:	464a      	mov	r2, r9
 80088e8:	f7ff fa32 	bl	8007d50 <__mdiff>
 80088ec:	4604      	mov	r4, r0
 80088ee:	2800      	cmp	r0, #0
 80088f0:	f43f ae3d 	beq.w	800856e <_strtod_l+0x43e>
 80088f4:	68c3      	ldr	r3, [r0, #12]
 80088f6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80088f8:	2300      	movs	r3, #0
 80088fa:	60c3      	str	r3, [r0, #12]
 80088fc:	4641      	mov	r1, r8
 80088fe:	f7ff fa0b 	bl	8007d18 <__mcmp>
 8008902:	2800      	cmp	r0, #0
 8008904:	da46      	bge.n	8008994 <_strtod_l+0x864>
 8008906:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008908:	ea53 030a 	orrs.w	r3, r3, sl
 800890c:	d16c      	bne.n	80089e8 <_strtod_l+0x8b8>
 800890e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008912:	2b00      	cmp	r3, #0
 8008914:	d168      	bne.n	80089e8 <_strtod_l+0x8b8>
 8008916:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800891a:	0d1b      	lsrs	r3, r3, #20
 800891c:	051b      	lsls	r3, r3, #20
 800891e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008922:	d961      	bls.n	80089e8 <_strtod_l+0x8b8>
 8008924:	6963      	ldr	r3, [r4, #20]
 8008926:	b913      	cbnz	r3, 800892e <_strtod_l+0x7fe>
 8008928:	6923      	ldr	r3, [r4, #16]
 800892a:	2b01      	cmp	r3, #1
 800892c:	dd5c      	ble.n	80089e8 <_strtod_l+0x8b8>
 800892e:	4621      	mov	r1, r4
 8008930:	2201      	movs	r2, #1
 8008932:	9805      	ldr	r0, [sp, #20]
 8008934:	f7ff f984 	bl	8007c40 <__lshift>
 8008938:	4641      	mov	r1, r8
 800893a:	4604      	mov	r4, r0
 800893c:	f7ff f9ec 	bl	8007d18 <__mcmp>
 8008940:	2800      	cmp	r0, #0
 8008942:	dd51      	ble.n	80089e8 <_strtod_l+0x8b8>
 8008944:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008948:	9a08      	ldr	r2, [sp, #32]
 800894a:	0d1b      	lsrs	r3, r3, #20
 800894c:	051b      	lsls	r3, r3, #20
 800894e:	2a00      	cmp	r2, #0
 8008950:	d06b      	beq.n	8008a2a <_strtod_l+0x8fa>
 8008952:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008956:	d868      	bhi.n	8008a2a <_strtod_l+0x8fa>
 8008958:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800895c:	f67f ae9d 	bls.w	800869a <_strtod_l+0x56a>
 8008960:	4b0a      	ldr	r3, [pc, #40]	@ (800898c <_strtod_l+0x85c>)
 8008962:	4650      	mov	r0, sl
 8008964:	4659      	mov	r1, fp
 8008966:	2200      	movs	r2, #0
 8008968:	f7f7 fe5e 	bl	8000628 <__aeabi_dmul>
 800896c:	4b08      	ldr	r3, [pc, #32]	@ (8008990 <_strtod_l+0x860>)
 800896e:	400b      	ands	r3, r1
 8008970:	4682      	mov	sl, r0
 8008972:	468b      	mov	fp, r1
 8008974:	2b00      	cmp	r3, #0
 8008976:	f47f ae05 	bne.w	8008584 <_strtod_l+0x454>
 800897a:	9a05      	ldr	r2, [sp, #20]
 800897c:	2322      	movs	r3, #34	@ 0x22
 800897e:	6013      	str	r3, [r2, #0]
 8008980:	e600      	b.n	8008584 <_strtod_l+0x454>
 8008982:	bf00      	nop
 8008984:	0800a1d8 	.word	0x0800a1d8
 8008988:	fffffc02 	.word	0xfffffc02
 800898c:	39500000 	.word	0x39500000
 8008990:	7ff00000 	.word	0x7ff00000
 8008994:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008998:	d165      	bne.n	8008a66 <_strtod_l+0x936>
 800899a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800899c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80089a0:	b35a      	cbz	r2, 80089fa <_strtod_l+0x8ca>
 80089a2:	4a9f      	ldr	r2, [pc, #636]	@ (8008c20 <_strtod_l+0xaf0>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d12b      	bne.n	8008a00 <_strtod_l+0x8d0>
 80089a8:	9b08      	ldr	r3, [sp, #32]
 80089aa:	4651      	mov	r1, sl
 80089ac:	b303      	cbz	r3, 80089f0 <_strtod_l+0x8c0>
 80089ae:	4b9d      	ldr	r3, [pc, #628]	@ (8008c24 <_strtod_l+0xaf4>)
 80089b0:	465a      	mov	r2, fp
 80089b2:	4013      	ands	r3, r2
 80089b4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80089b8:	f04f 32ff 	mov.w	r2, #4294967295
 80089bc:	d81b      	bhi.n	80089f6 <_strtod_l+0x8c6>
 80089be:	0d1b      	lsrs	r3, r3, #20
 80089c0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80089c4:	fa02 f303 	lsl.w	r3, r2, r3
 80089c8:	4299      	cmp	r1, r3
 80089ca:	d119      	bne.n	8008a00 <_strtod_l+0x8d0>
 80089cc:	4b96      	ldr	r3, [pc, #600]	@ (8008c28 <_strtod_l+0xaf8>)
 80089ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d102      	bne.n	80089da <_strtod_l+0x8aa>
 80089d4:	3101      	adds	r1, #1
 80089d6:	f43f adca 	beq.w	800856e <_strtod_l+0x43e>
 80089da:	4b92      	ldr	r3, [pc, #584]	@ (8008c24 <_strtod_l+0xaf4>)
 80089dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80089de:	401a      	ands	r2, r3
 80089e0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80089e4:	f04f 0a00 	mov.w	sl, #0
 80089e8:	9b08      	ldr	r3, [sp, #32]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d1b8      	bne.n	8008960 <_strtod_l+0x830>
 80089ee:	e5c9      	b.n	8008584 <_strtod_l+0x454>
 80089f0:	f04f 33ff 	mov.w	r3, #4294967295
 80089f4:	e7e8      	b.n	80089c8 <_strtod_l+0x898>
 80089f6:	4613      	mov	r3, r2
 80089f8:	e7e6      	b.n	80089c8 <_strtod_l+0x898>
 80089fa:	ea53 030a 	orrs.w	r3, r3, sl
 80089fe:	d0a1      	beq.n	8008944 <_strtod_l+0x814>
 8008a00:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008a02:	b1db      	cbz	r3, 8008a3c <_strtod_l+0x90c>
 8008a04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a06:	4213      	tst	r3, r2
 8008a08:	d0ee      	beq.n	80089e8 <_strtod_l+0x8b8>
 8008a0a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a0c:	9a08      	ldr	r2, [sp, #32]
 8008a0e:	4650      	mov	r0, sl
 8008a10:	4659      	mov	r1, fp
 8008a12:	b1bb      	cbz	r3, 8008a44 <_strtod_l+0x914>
 8008a14:	f7ff fb6e 	bl	80080f4 <sulp>
 8008a18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a1c:	ec53 2b10 	vmov	r2, r3, d0
 8008a20:	f7f7 fc4c 	bl	80002bc <__adddf3>
 8008a24:	4682      	mov	sl, r0
 8008a26:	468b      	mov	fp, r1
 8008a28:	e7de      	b.n	80089e8 <_strtod_l+0x8b8>
 8008a2a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008a2e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008a32:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008a36:	f04f 3aff 	mov.w	sl, #4294967295
 8008a3a:	e7d5      	b.n	80089e8 <_strtod_l+0x8b8>
 8008a3c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008a3e:	ea13 0f0a 	tst.w	r3, sl
 8008a42:	e7e1      	b.n	8008a08 <_strtod_l+0x8d8>
 8008a44:	f7ff fb56 	bl	80080f4 <sulp>
 8008a48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a4c:	ec53 2b10 	vmov	r2, r3, d0
 8008a50:	f7f7 fc32 	bl	80002b8 <__aeabi_dsub>
 8008a54:	2200      	movs	r2, #0
 8008a56:	2300      	movs	r3, #0
 8008a58:	4682      	mov	sl, r0
 8008a5a:	468b      	mov	fp, r1
 8008a5c:	f7f8 f84c 	bl	8000af8 <__aeabi_dcmpeq>
 8008a60:	2800      	cmp	r0, #0
 8008a62:	d0c1      	beq.n	80089e8 <_strtod_l+0x8b8>
 8008a64:	e619      	b.n	800869a <_strtod_l+0x56a>
 8008a66:	4641      	mov	r1, r8
 8008a68:	4620      	mov	r0, r4
 8008a6a:	f7ff facd 	bl	8008008 <__ratio>
 8008a6e:	ec57 6b10 	vmov	r6, r7, d0
 8008a72:	2200      	movs	r2, #0
 8008a74:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008a78:	4630      	mov	r0, r6
 8008a7a:	4639      	mov	r1, r7
 8008a7c:	f7f8 f850 	bl	8000b20 <__aeabi_dcmple>
 8008a80:	2800      	cmp	r0, #0
 8008a82:	d06f      	beq.n	8008b64 <_strtod_l+0xa34>
 8008a84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d17a      	bne.n	8008b80 <_strtod_l+0xa50>
 8008a8a:	f1ba 0f00 	cmp.w	sl, #0
 8008a8e:	d158      	bne.n	8008b42 <_strtod_l+0xa12>
 8008a90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d15a      	bne.n	8008b50 <_strtod_l+0xa20>
 8008a9a:	4b64      	ldr	r3, [pc, #400]	@ (8008c2c <_strtod_l+0xafc>)
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	4630      	mov	r0, r6
 8008aa0:	4639      	mov	r1, r7
 8008aa2:	f7f8 f833 	bl	8000b0c <__aeabi_dcmplt>
 8008aa6:	2800      	cmp	r0, #0
 8008aa8:	d159      	bne.n	8008b5e <_strtod_l+0xa2e>
 8008aaa:	4630      	mov	r0, r6
 8008aac:	4639      	mov	r1, r7
 8008aae:	4b60      	ldr	r3, [pc, #384]	@ (8008c30 <_strtod_l+0xb00>)
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f7f7 fdb9 	bl	8000628 <__aeabi_dmul>
 8008ab6:	4606      	mov	r6, r0
 8008ab8:	460f      	mov	r7, r1
 8008aba:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008abe:	9606      	str	r6, [sp, #24]
 8008ac0:	9307      	str	r3, [sp, #28]
 8008ac2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ac6:	4d57      	ldr	r5, [pc, #348]	@ (8008c24 <_strtod_l+0xaf4>)
 8008ac8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008acc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ace:	401d      	ands	r5, r3
 8008ad0:	4b58      	ldr	r3, [pc, #352]	@ (8008c34 <_strtod_l+0xb04>)
 8008ad2:	429d      	cmp	r5, r3
 8008ad4:	f040 80b2 	bne.w	8008c3c <_strtod_l+0xb0c>
 8008ad8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ada:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008ade:	ec4b ab10 	vmov	d0, sl, fp
 8008ae2:	f7ff f9c9 	bl	8007e78 <__ulp>
 8008ae6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008aea:	ec51 0b10 	vmov	r0, r1, d0
 8008aee:	f7f7 fd9b 	bl	8000628 <__aeabi_dmul>
 8008af2:	4652      	mov	r2, sl
 8008af4:	465b      	mov	r3, fp
 8008af6:	f7f7 fbe1 	bl	80002bc <__adddf3>
 8008afa:	460b      	mov	r3, r1
 8008afc:	4949      	ldr	r1, [pc, #292]	@ (8008c24 <_strtod_l+0xaf4>)
 8008afe:	4a4e      	ldr	r2, [pc, #312]	@ (8008c38 <_strtod_l+0xb08>)
 8008b00:	4019      	ands	r1, r3
 8008b02:	4291      	cmp	r1, r2
 8008b04:	4682      	mov	sl, r0
 8008b06:	d942      	bls.n	8008b8e <_strtod_l+0xa5e>
 8008b08:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008b0a:	4b47      	ldr	r3, [pc, #284]	@ (8008c28 <_strtod_l+0xaf8>)
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d103      	bne.n	8008b18 <_strtod_l+0x9e8>
 8008b10:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008b12:	3301      	adds	r3, #1
 8008b14:	f43f ad2b 	beq.w	800856e <_strtod_l+0x43e>
 8008b18:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008c28 <_strtod_l+0xaf8>
 8008b1c:	f04f 3aff 	mov.w	sl, #4294967295
 8008b20:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008b22:	9805      	ldr	r0, [sp, #20]
 8008b24:	f7fe fe74 	bl	8007810 <_Bfree>
 8008b28:	9805      	ldr	r0, [sp, #20]
 8008b2a:	4649      	mov	r1, r9
 8008b2c:	f7fe fe70 	bl	8007810 <_Bfree>
 8008b30:	9805      	ldr	r0, [sp, #20]
 8008b32:	4641      	mov	r1, r8
 8008b34:	f7fe fe6c 	bl	8007810 <_Bfree>
 8008b38:	9805      	ldr	r0, [sp, #20]
 8008b3a:	4621      	mov	r1, r4
 8008b3c:	f7fe fe68 	bl	8007810 <_Bfree>
 8008b40:	e618      	b.n	8008774 <_strtod_l+0x644>
 8008b42:	f1ba 0f01 	cmp.w	sl, #1
 8008b46:	d103      	bne.n	8008b50 <_strtod_l+0xa20>
 8008b48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	f43f ada5 	beq.w	800869a <_strtod_l+0x56a>
 8008b50:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008c00 <_strtod_l+0xad0>
 8008b54:	4f35      	ldr	r7, [pc, #212]	@ (8008c2c <_strtod_l+0xafc>)
 8008b56:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008b5a:	2600      	movs	r6, #0
 8008b5c:	e7b1      	b.n	8008ac2 <_strtod_l+0x992>
 8008b5e:	4f34      	ldr	r7, [pc, #208]	@ (8008c30 <_strtod_l+0xb00>)
 8008b60:	2600      	movs	r6, #0
 8008b62:	e7aa      	b.n	8008aba <_strtod_l+0x98a>
 8008b64:	4b32      	ldr	r3, [pc, #200]	@ (8008c30 <_strtod_l+0xb00>)
 8008b66:	4630      	mov	r0, r6
 8008b68:	4639      	mov	r1, r7
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f7f7 fd5c 	bl	8000628 <__aeabi_dmul>
 8008b70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b72:	4606      	mov	r6, r0
 8008b74:	460f      	mov	r7, r1
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d09f      	beq.n	8008aba <_strtod_l+0x98a>
 8008b7a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008b7e:	e7a0      	b.n	8008ac2 <_strtod_l+0x992>
 8008b80:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008c08 <_strtod_l+0xad8>
 8008b84:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008b88:	ec57 6b17 	vmov	r6, r7, d7
 8008b8c:	e799      	b.n	8008ac2 <_strtod_l+0x992>
 8008b8e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008b92:	9b08      	ldr	r3, [sp, #32]
 8008b94:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d1c1      	bne.n	8008b20 <_strtod_l+0x9f0>
 8008b9c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008ba0:	0d1b      	lsrs	r3, r3, #20
 8008ba2:	051b      	lsls	r3, r3, #20
 8008ba4:	429d      	cmp	r5, r3
 8008ba6:	d1bb      	bne.n	8008b20 <_strtod_l+0x9f0>
 8008ba8:	4630      	mov	r0, r6
 8008baa:	4639      	mov	r1, r7
 8008bac:	f7f8 f89c 	bl	8000ce8 <__aeabi_d2lz>
 8008bb0:	f7f7 fd0c 	bl	80005cc <__aeabi_l2d>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	4630      	mov	r0, r6
 8008bba:	4639      	mov	r1, r7
 8008bbc:	f7f7 fb7c 	bl	80002b8 <__aeabi_dsub>
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008bc8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008bcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bce:	ea46 060a 	orr.w	r6, r6, sl
 8008bd2:	431e      	orrs	r6, r3
 8008bd4:	d06f      	beq.n	8008cb6 <_strtod_l+0xb86>
 8008bd6:	a30e      	add	r3, pc, #56	@ (adr r3, 8008c10 <_strtod_l+0xae0>)
 8008bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bdc:	f7f7 ff96 	bl	8000b0c <__aeabi_dcmplt>
 8008be0:	2800      	cmp	r0, #0
 8008be2:	f47f accf 	bne.w	8008584 <_strtod_l+0x454>
 8008be6:	a30c      	add	r3, pc, #48	@ (adr r3, 8008c18 <_strtod_l+0xae8>)
 8008be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008bf0:	f7f7 ffaa 	bl	8000b48 <__aeabi_dcmpgt>
 8008bf4:	2800      	cmp	r0, #0
 8008bf6:	d093      	beq.n	8008b20 <_strtod_l+0x9f0>
 8008bf8:	e4c4      	b.n	8008584 <_strtod_l+0x454>
 8008bfa:	bf00      	nop
 8008bfc:	f3af 8000 	nop.w
 8008c00:	00000000 	.word	0x00000000
 8008c04:	bff00000 	.word	0xbff00000
 8008c08:	00000000 	.word	0x00000000
 8008c0c:	3ff00000 	.word	0x3ff00000
 8008c10:	94a03595 	.word	0x94a03595
 8008c14:	3fdfffff 	.word	0x3fdfffff
 8008c18:	35afe535 	.word	0x35afe535
 8008c1c:	3fe00000 	.word	0x3fe00000
 8008c20:	000fffff 	.word	0x000fffff
 8008c24:	7ff00000 	.word	0x7ff00000
 8008c28:	7fefffff 	.word	0x7fefffff
 8008c2c:	3ff00000 	.word	0x3ff00000
 8008c30:	3fe00000 	.word	0x3fe00000
 8008c34:	7fe00000 	.word	0x7fe00000
 8008c38:	7c9fffff 	.word	0x7c9fffff
 8008c3c:	9b08      	ldr	r3, [sp, #32]
 8008c3e:	b323      	cbz	r3, 8008c8a <_strtod_l+0xb5a>
 8008c40:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008c44:	d821      	bhi.n	8008c8a <_strtod_l+0xb5a>
 8008c46:	a328      	add	r3, pc, #160	@ (adr r3, 8008ce8 <_strtod_l+0xbb8>)
 8008c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4c:	4630      	mov	r0, r6
 8008c4e:	4639      	mov	r1, r7
 8008c50:	f7f7 ff66 	bl	8000b20 <__aeabi_dcmple>
 8008c54:	b1a0      	cbz	r0, 8008c80 <_strtod_l+0xb50>
 8008c56:	4639      	mov	r1, r7
 8008c58:	4630      	mov	r0, r6
 8008c5a:	f7f7 ffbd 	bl	8000bd8 <__aeabi_d2uiz>
 8008c5e:	2801      	cmp	r0, #1
 8008c60:	bf38      	it	cc
 8008c62:	2001      	movcc	r0, #1
 8008c64:	f7f7 fc66 	bl	8000534 <__aeabi_ui2d>
 8008c68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c6a:	4606      	mov	r6, r0
 8008c6c:	460f      	mov	r7, r1
 8008c6e:	b9fb      	cbnz	r3, 8008cb0 <_strtod_l+0xb80>
 8008c70:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008c74:	9014      	str	r0, [sp, #80]	@ 0x50
 8008c76:	9315      	str	r3, [sp, #84]	@ 0x54
 8008c78:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008c7c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008c80:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008c82:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008c86:	1b5b      	subs	r3, r3, r5
 8008c88:	9311      	str	r3, [sp, #68]	@ 0x44
 8008c8a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008c8e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008c92:	f7ff f8f1 	bl	8007e78 <__ulp>
 8008c96:	4650      	mov	r0, sl
 8008c98:	ec53 2b10 	vmov	r2, r3, d0
 8008c9c:	4659      	mov	r1, fp
 8008c9e:	f7f7 fcc3 	bl	8000628 <__aeabi_dmul>
 8008ca2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008ca6:	f7f7 fb09 	bl	80002bc <__adddf3>
 8008caa:	4682      	mov	sl, r0
 8008cac:	468b      	mov	fp, r1
 8008cae:	e770      	b.n	8008b92 <_strtod_l+0xa62>
 8008cb0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008cb4:	e7e0      	b.n	8008c78 <_strtod_l+0xb48>
 8008cb6:	a30e      	add	r3, pc, #56	@ (adr r3, 8008cf0 <_strtod_l+0xbc0>)
 8008cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cbc:	f7f7 ff26 	bl	8000b0c <__aeabi_dcmplt>
 8008cc0:	e798      	b.n	8008bf4 <_strtod_l+0xac4>
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008cc6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008cc8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008cca:	6013      	str	r3, [r2, #0]
 8008ccc:	f7ff ba6d 	b.w	80081aa <_strtod_l+0x7a>
 8008cd0:	2a65      	cmp	r2, #101	@ 0x65
 8008cd2:	f43f ab66 	beq.w	80083a2 <_strtod_l+0x272>
 8008cd6:	2a45      	cmp	r2, #69	@ 0x45
 8008cd8:	f43f ab63 	beq.w	80083a2 <_strtod_l+0x272>
 8008cdc:	2301      	movs	r3, #1
 8008cde:	f7ff bb9e 	b.w	800841e <_strtod_l+0x2ee>
 8008ce2:	bf00      	nop
 8008ce4:	f3af 8000 	nop.w
 8008ce8:	ffc00000 	.word	0xffc00000
 8008cec:	41dfffff 	.word	0x41dfffff
 8008cf0:	94a03595 	.word	0x94a03595
 8008cf4:	3fcfffff 	.word	0x3fcfffff

08008cf8 <_strtod_r>:
 8008cf8:	4b01      	ldr	r3, [pc, #4]	@ (8008d00 <_strtod_r+0x8>)
 8008cfa:	f7ff ba19 	b.w	8008130 <_strtod_l>
 8008cfe:	bf00      	nop
 8008d00:	20000068 	.word	0x20000068

08008d04 <_strtol_l.constprop.0>:
 8008d04:	2b24      	cmp	r3, #36	@ 0x24
 8008d06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d0a:	4686      	mov	lr, r0
 8008d0c:	4690      	mov	r8, r2
 8008d0e:	d801      	bhi.n	8008d14 <_strtol_l.constprop.0+0x10>
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d106      	bne.n	8008d22 <_strtol_l.constprop.0+0x1e>
 8008d14:	f7fd fdba 	bl	800688c <__errno>
 8008d18:	2316      	movs	r3, #22
 8008d1a:	6003      	str	r3, [r0, #0]
 8008d1c:	2000      	movs	r0, #0
 8008d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d22:	4834      	ldr	r0, [pc, #208]	@ (8008df4 <_strtol_l.constprop.0+0xf0>)
 8008d24:	460d      	mov	r5, r1
 8008d26:	462a      	mov	r2, r5
 8008d28:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d2c:	5d06      	ldrb	r6, [r0, r4]
 8008d2e:	f016 0608 	ands.w	r6, r6, #8
 8008d32:	d1f8      	bne.n	8008d26 <_strtol_l.constprop.0+0x22>
 8008d34:	2c2d      	cmp	r4, #45	@ 0x2d
 8008d36:	d12d      	bne.n	8008d94 <_strtol_l.constprop.0+0x90>
 8008d38:	782c      	ldrb	r4, [r5, #0]
 8008d3a:	2601      	movs	r6, #1
 8008d3c:	1c95      	adds	r5, r2, #2
 8008d3e:	f033 0210 	bics.w	r2, r3, #16
 8008d42:	d109      	bne.n	8008d58 <_strtol_l.constprop.0+0x54>
 8008d44:	2c30      	cmp	r4, #48	@ 0x30
 8008d46:	d12a      	bne.n	8008d9e <_strtol_l.constprop.0+0x9a>
 8008d48:	782a      	ldrb	r2, [r5, #0]
 8008d4a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008d4e:	2a58      	cmp	r2, #88	@ 0x58
 8008d50:	d125      	bne.n	8008d9e <_strtol_l.constprop.0+0x9a>
 8008d52:	786c      	ldrb	r4, [r5, #1]
 8008d54:	2310      	movs	r3, #16
 8008d56:	3502      	adds	r5, #2
 8008d58:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008d5c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008d60:	2200      	movs	r2, #0
 8008d62:	fbbc f9f3 	udiv	r9, ip, r3
 8008d66:	4610      	mov	r0, r2
 8008d68:	fb03 ca19 	mls	sl, r3, r9, ip
 8008d6c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008d70:	2f09      	cmp	r7, #9
 8008d72:	d81b      	bhi.n	8008dac <_strtol_l.constprop.0+0xa8>
 8008d74:	463c      	mov	r4, r7
 8008d76:	42a3      	cmp	r3, r4
 8008d78:	dd27      	ble.n	8008dca <_strtol_l.constprop.0+0xc6>
 8008d7a:	1c57      	adds	r7, r2, #1
 8008d7c:	d007      	beq.n	8008d8e <_strtol_l.constprop.0+0x8a>
 8008d7e:	4581      	cmp	r9, r0
 8008d80:	d320      	bcc.n	8008dc4 <_strtol_l.constprop.0+0xc0>
 8008d82:	d101      	bne.n	8008d88 <_strtol_l.constprop.0+0x84>
 8008d84:	45a2      	cmp	sl, r4
 8008d86:	db1d      	blt.n	8008dc4 <_strtol_l.constprop.0+0xc0>
 8008d88:	fb00 4003 	mla	r0, r0, r3, r4
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d92:	e7eb      	b.n	8008d6c <_strtol_l.constprop.0+0x68>
 8008d94:	2c2b      	cmp	r4, #43	@ 0x2b
 8008d96:	bf04      	itt	eq
 8008d98:	782c      	ldrbeq	r4, [r5, #0]
 8008d9a:	1c95      	addeq	r5, r2, #2
 8008d9c:	e7cf      	b.n	8008d3e <_strtol_l.constprop.0+0x3a>
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d1da      	bne.n	8008d58 <_strtol_l.constprop.0+0x54>
 8008da2:	2c30      	cmp	r4, #48	@ 0x30
 8008da4:	bf0c      	ite	eq
 8008da6:	2308      	moveq	r3, #8
 8008da8:	230a      	movne	r3, #10
 8008daa:	e7d5      	b.n	8008d58 <_strtol_l.constprop.0+0x54>
 8008dac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008db0:	2f19      	cmp	r7, #25
 8008db2:	d801      	bhi.n	8008db8 <_strtol_l.constprop.0+0xb4>
 8008db4:	3c37      	subs	r4, #55	@ 0x37
 8008db6:	e7de      	b.n	8008d76 <_strtol_l.constprop.0+0x72>
 8008db8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008dbc:	2f19      	cmp	r7, #25
 8008dbe:	d804      	bhi.n	8008dca <_strtol_l.constprop.0+0xc6>
 8008dc0:	3c57      	subs	r4, #87	@ 0x57
 8008dc2:	e7d8      	b.n	8008d76 <_strtol_l.constprop.0+0x72>
 8008dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8008dc8:	e7e1      	b.n	8008d8e <_strtol_l.constprop.0+0x8a>
 8008dca:	1c53      	adds	r3, r2, #1
 8008dcc:	d108      	bne.n	8008de0 <_strtol_l.constprop.0+0xdc>
 8008dce:	2322      	movs	r3, #34	@ 0x22
 8008dd0:	f8ce 3000 	str.w	r3, [lr]
 8008dd4:	4660      	mov	r0, ip
 8008dd6:	f1b8 0f00 	cmp.w	r8, #0
 8008dda:	d0a0      	beq.n	8008d1e <_strtol_l.constprop.0+0x1a>
 8008ddc:	1e69      	subs	r1, r5, #1
 8008dde:	e006      	b.n	8008dee <_strtol_l.constprop.0+0xea>
 8008de0:	b106      	cbz	r6, 8008de4 <_strtol_l.constprop.0+0xe0>
 8008de2:	4240      	negs	r0, r0
 8008de4:	f1b8 0f00 	cmp.w	r8, #0
 8008de8:	d099      	beq.n	8008d1e <_strtol_l.constprop.0+0x1a>
 8008dea:	2a00      	cmp	r2, #0
 8008dec:	d1f6      	bne.n	8008ddc <_strtol_l.constprop.0+0xd8>
 8008dee:	f8c8 1000 	str.w	r1, [r8]
 8008df2:	e794      	b.n	8008d1e <_strtol_l.constprop.0+0x1a>
 8008df4:	0800a201 	.word	0x0800a201

08008df8 <_strtol_r>:
 8008df8:	f7ff bf84 	b.w	8008d04 <_strtol_l.constprop.0>

08008dfc <__ssputs_r>:
 8008dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e00:	688e      	ldr	r6, [r1, #8]
 8008e02:	461f      	mov	r7, r3
 8008e04:	42be      	cmp	r6, r7
 8008e06:	680b      	ldr	r3, [r1, #0]
 8008e08:	4682      	mov	sl, r0
 8008e0a:	460c      	mov	r4, r1
 8008e0c:	4690      	mov	r8, r2
 8008e0e:	d82d      	bhi.n	8008e6c <__ssputs_r+0x70>
 8008e10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008e14:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008e18:	d026      	beq.n	8008e68 <__ssputs_r+0x6c>
 8008e1a:	6965      	ldr	r5, [r4, #20]
 8008e1c:	6909      	ldr	r1, [r1, #16]
 8008e1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e22:	eba3 0901 	sub.w	r9, r3, r1
 8008e26:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e2a:	1c7b      	adds	r3, r7, #1
 8008e2c:	444b      	add	r3, r9
 8008e2e:	106d      	asrs	r5, r5, #1
 8008e30:	429d      	cmp	r5, r3
 8008e32:	bf38      	it	cc
 8008e34:	461d      	movcc	r5, r3
 8008e36:	0553      	lsls	r3, r2, #21
 8008e38:	d527      	bpl.n	8008e8a <__ssputs_r+0x8e>
 8008e3a:	4629      	mov	r1, r5
 8008e3c:	f7fe fc1c 	bl	8007678 <_malloc_r>
 8008e40:	4606      	mov	r6, r0
 8008e42:	b360      	cbz	r0, 8008e9e <__ssputs_r+0xa2>
 8008e44:	6921      	ldr	r1, [r4, #16]
 8008e46:	464a      	mov	r2, r9
 8008e48:	f000 fa9c 	bl	8009384 <memcpy>
 8008e4c:	89a3      	ldrh	r3, [r4, #12]
 8008e4e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008e52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e56:	81a3      	strh	r3, [r4, #12]
 8008e58:	6126      	str	r6, [r4, #16]
 8008e5a:	6165      	str	r5, [r4, #20]
 8008e5c:	444e      	add	r6, r9
 8008e5e:	eba5 0509 	sub.w	r5, r5, r9
 8008e62:	6026      	str	r6, [r4, #0]
 8008e64:	60a5      	str	r5, [r4, #8]
 8008e66:	463e      	mov	r6, r7
 8008e68:	42be      	cmp	r6, r7
 8008e6a:	d900      	bls.n	8008e6e <__ssputs_r+0x72>
 8008e6c:	463e      	mov	r6, r7
 8008e6e:	6820      	ldr	r0, [r4, #0]
 8008e70:	4632      	mov	r2, r6
 8008e72:	4641      	mov	r1, r8
 8008e74:	f000 fa28 	bl	80092c8 <memmove>
 8008e78:	68a3      	ldr	r3, [r4, #8]
 8008e7a:	1b9b      	subs	r3, r3, r6
 8008e7c:	60a3      	str	r3, [r4, #8]
 8008e7e:	6823      	ldr	r3, [r4, #0]
 8008e80:	4433      	add	r3, r6
 8008e82:	6023      	str	r3, [r4, #0]
 8008e84:	2000      	movs	r0, #0
 8008e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e8a:	462a      	mov	r2, r5
 8008e8c:	f000 fe0d 	bl	8009aaa <_realloc_r>
 8008e90:	4606      	mov	r6, r0
 8008e92:	2800      	cmp	r0, #0
 8008e94:	d1e0      	bne.n	8008e58 <__ssputs_r+0x5c>
 8008e96:	6921      	ldr	r1, [r4, #16]
 8008e98:	4650      	mov	r0, sl
 8008e9a:	f7fe fb79 	bl	8007590 <_free_r>
 8008e9e:	230c      	movs	r3, #12
 8008ea0:	f8ca 3000 	str.w	r3, [sl]
 8008ea4:	89a3      	ldrh	r3, [r4, #12]
 8008ea6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008eaa:	81a3      	strh	r3, [r4, #12]
 8008eac:	f04f 30ff 	mov.w	r0, #4294967295
 8008eb0:	e7e9      	b.n	8008e86 <__ssputs_r+0x8a>
	...

08008eb4 <_svfiprintf_r>:
 8008eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb8:	4698      	mov	r8, r3
 8008eba:	898b      	ldrh	r3, [r1, #12]
 8008ebc:	061b      	lsls	r3, r3, #24
 8008ebe:	b09d      	sub	sp, #116	@ 0x74
 8008ec0:	4607      	mov	r7, r0
 8008ec2:	460d      	mov	r5, r1
 8008ec4:	4614      	mov	r4, r2
 8008ec6:	d510      	bpl.n	8008eea <_svfiprintf_r+0x36>
 8008ec8:	690b      	ldr	r3, [r1, #16]
 8008eca:	b973      	cbnz	r3, 8008eea <_svfiprintf_r+0x36>
 8008ecc:	2140      	movs	r1, #64	@ 0x40
 8008ece:	f7fe fbd3 	bl	8007678 <_malloc_r>
 8008ed2:	6028      	str	r0, [r5, #0]
 8008ed4:	6128      	str	r0, [r5, #16]
 8008ed6:	b930      	cbnz	r0, 8008ee6 <_svfiprintf_r+0x32>
 8008ed8:	230c      	movs	r3, #12
 8008eda:	603b      	str	r3, [r7, #0]
 8008edc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ee0:	b01d      	add	sp, #116	@ 0x74
 8008ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ee6:	2340      	movs	r3, #64	@ 0x40
 8008ee8:	616b      	str	r3, [r5, #20]
 8008eea:	2300      	movs	r3, #0
 8008eec:	9309      	str	r3, [sp, #36]	@ 0x24
 8008eee:	2320      	movs	r3, #32
 8008ef0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008ef4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ef8:	2330      	movs	r3, #48	@ 0x30
 8008efa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009098 <_svfiprintf_r+0x1e4>
 8008efe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008f02:	f04f 0901 	mov.w	r9, #1
 8008f06:	4623      	mov	r3, r4
 8008f08:	469a      	mov	sl, r3
 8008f0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f0e:	b10a      	cbz	r2, 8008f14 <_svfiprintf_r+0x60>
 8008f10:	2a25      	cmp	r2, #37	@ 0x25
 8008f12:	d1f9      	bne.n	8008f08 <_svfiprintf_r+0x54>
 8008f14:	ebba 0b04 	subs.w	fp, sl, r4
 8008f18:	d00b      	beq.n	8008f32 <_svfiprintf_r+0x7e>
 8008f1a:	465b      	mov	r3, fp
 8008f1c:	4622      	mov	r2, r4
 8008f1e:	4629      	mov	r1, r5
 8008f20:	4638      	mov	r0, r7
 8008f22:	f7ff ff6b 	bl	8008dfc <__ssputs_r>
 8008f26:	3001      	adds	r0, #1
 8008f28:	f000 80a7 	beq.w	800907a <_svfiprintf_r+0x1c6>
 8008f2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f2e:	445a      	add	r2, fp
 8008f30:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f32:	f89a 3000 	ldrb.w	r3, [sl]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	f000 809f 	beq.w	800907a <_svfiprintf_r+0x1c6>
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8008f42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f46:	f10a 0a01 	add.w	sl, sl, #1
 8008f4a:	9304      	str	r3, [sp, #16]
 8008f4c:	9307      	str	r3, [sp, #28]
 8008f4e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f52:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f54:	4654      	mov	r4, sl
 8008f56:	2205      	movs	r2, #5
 8008f58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f5c:	484e      	ldr	r0, [pc, #312]	@ (8009098 <_svfiprintf_r+0x1e4>)
 8008f5e:	f7f7 f94f 	bl	8000200 <memchr>
 8008f62:	9a04      	ldr	r2, [sp, #16]
 8008f64:	b9d8      	cbnz	r0, 8008f9e <_svfiprintf_r+0xea>
 8008f66:	06d0      	lsls	r0, r2, #27
 8008f68:	bf44      	itt	mi
 8008f6a:	2320      	movmi	r3, #32
 8008f6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f70:	0711      	lsls	r1, r2, #28
 8008f72:	bf44      	itt	mi
 8008f74:	232b      	movmi	r3, #43	@ 0x2b
 8008f76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f7a:	f89a 3000 	ldrb.w	r3, [sl]
 8008f7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f80:	d015      	beq.n	8008fae <_svfiprintf_r+0xfa>
 8008f82:	9a07      	ldr	r2, [sp, #28]
 8008f84:	4654      	mov	r4, sl
 8008f86:	2000      	movs	r0, #0
 8008f88:	f04f 0c0a 	mov.w	ip, #10
 8008f8c:	4621      	mov	r1, r4
 8008f8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f92:	3b30      	subs	r3, #48	@ 0x30
 8008f94:	2b09      	cmp	r3, #9
 8008f96:	d94b      	bls.n	8009030 <_svfiprintf_r+0x17c>
 8008f98:	b1b0      	cbz	r0, 8008fc8 <_svfiprintf_r+0x114>
 8008f9a:	9207      	str	r2, [sp, #28]
 8008f9c:	e014      	b.n	8008fc8 <_svfiprintf_r+0x114>
 8008f9e:	eba0 0308 	sub.w	r3, r0, r8
 8008fa2:	fa09 f303 	lsl.w	r3, r9, r3
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	9304      	str	r3, [sp, #16]
 8008faa:	46a2      	mov	sl, r4
 8008fac:	e7d2      	b.n	8008f54 <_svfiprintf_r+0xa0>
 8008fae:	9b03      	ldr	r3, [sp, #12]
 8008fb0:	1d19      	adds	r1, r3, #4
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	9103      	str	r1, [sp, #12]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	bfbb      	ittet	lt
 8008fba:	425b      	neglt	r3, r3
 8008fbc:	f042 0202 	orrlt.w	r2, r2, #2
 8008fc0:	9307      	strge	r3, [sp, #28]
 8008fc2:	9307      	strlt	r3, [sp, #28]
 8008fc4:	bfb8      	it	lt
 8008fc6:	9204      	strlt	r2, [sp, #16]
 8008fc8:	7823      	ldrb	r3, [r4, #0]
 8008fca:	2b2e      	cmp	r3, #46	@ 0x2e
 8008fcc:	d10a      	bne.n	8008fe4 <_svfiprintf_r+0x130>
 8008fce:	7863      	ldrb	r3, [r4, #1]
 8008fd0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008fd2:	d132      	bne.n	800903a <_svfiprintf_r+0x186>
 8008fd4:	9b03      	ldr	r3, [sp, #12]
 8008fd6:	1d1a      	adds	r2, r3, #4
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	9203      	str	r2, [sp, #12]
 8008fdc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008fe0:	3402      	adds	r4, #2
 8008fe2:	9305      	str	r3, [sp, #20]
 8008fe4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80090a8 <_svfiprintf_r+0x1f4>
 8008fe8:	7821      	ldrb	r1, [r4, #0]
 8008fea:	2203      	movs	r2, #3
 8008fec:	4650      	mov	r0, sl
 8008fee:	f7f7 f907 	bl	8000200 <memchr>
 8008ff2:	b138      	cbz	r0, 8009004 <_svfiprintf_r+0x150>
 8008ff4:	9b04      	ldr	r3, [sp, #16]
 8008ff6:	eba0 000a 	sub.w	r0, r0, sl
 8008ffa:	2240      	movs	r2, #64	@ 0x40
 8008ffc:	4082      	lsls	r2, r0
 8008ffe:	4313      	orrs	r3, r2
 8009000:	3401      	adds	r4, #1
 8009002:	9304      	str	r3, [sp, #16]
 8009004:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009008:	4824      	ldr	r0, [pc, #144]	@ (800909c <_svfiprintf_r+0x1e8>)
 800900a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800900e:	2206      	movs	r2, #6
 8009010:	f7f7 f8f6 	bl	8000200 <memchr>
 8009014:	2800      	cmp	r0, #0
 8009016:	d036      	beq.n	8009086 <_svfiprintf_r+0x1d2>
 8009018:	4b21      	ldr	r3, [pc, #132]	@ (80090a0 <_svfiprintf_r+0x1ec>)
 800901a:	bb1b      	cbnz	r3, 8009064 <_svfiprintf_r+0x1b0>
 800901c:	9b03      	ldr	r3, [sp, #12]
 800901e:	3307      	adds	r3, #7
 8009020:	f023 0307 	bic.w	r3, r3, #7
 8009024:	3308      	adds	r3, #8
 8009026:	9303      	str	r3, [sp, #12]
 8009028:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800902a:	4433      	add	r3, r6
 800902c:	9309      	str	r3, [sp, #36]	@ 0x24
 800902e:	e76a      	b.n	8008f06 <_svfiprintf_r+0x52>
 8009030:	fb0c 3202 	mla	r2, ip, r2, r3
 8009034:	460c      	mov	r4, r1
 8009036:	2001      	movs	r0, #1
 8009038:	e7a8      	b.n	8008f8c <_svfiprintf_r+0xd8>
 800903a:	2300      	movs	r3, #0
 800903c:	3401      	adds	r4, #1
 800903e:	9305      	str	r3, [sp, #20]
 8009040:	4619      	mov	r1, r3
 8009042:	f04f 0c0a 	mov.w	ip, #10
 8009046:	4620      	mov	r0, r4
 8009048:	f810 2b01 	ldrb.w	r2, [r0], #1
 800904c:	3a30      	subs	r2, #48	@ 0x30
 800904e:	2a09      	cmp	r2, #9
 8009050:	d903      	bls.n	800905a <_svfiprintf_r+0x1a6>
 8009052:	2b00      	cmp	r3, #0
 8009054:	d0c6      	beq.n	8008fe4 <_svfiprintf_r+0x130>
 8009056:	9105      	str	r1, [sp, #20]
 8009058:	e7c4      	b.n	8008fe4 <_svfiprintf_r+0x130>
 800905a:	fb0c 2101 	mla	r1, ip, r1, r2
 800905e:	4604      	mov	r4, r0
 8009060:	2301      	movs	r3, #1
 8009062:	e7f0      	b.n	8009046 <_svfiprintf_r+0x192>
 8009064:	ab03      	add	r3, sp, #12
 8009066:	9300      	str	r3, [sp, #0]
 8009068:	462a      	mov	r2, r5
 800906a:	4b0e      	ldr	r3, [pc, #56]	@ (80090a4 <_svfiprintf_r+0x1f0>)
 800906c:	a904      	add	r1, sp, #16
 800906e:	4638      	mov	r0, r7
 8009070:	f7fc fbd6 	bl	8005820 <_printf_float>
 8009074:	1c42      	adds	r2, r0, #1
 8009076:	4606      	mov	r6, r0
 8009078:	d1d6      	bne.n	8009028 <_svfiprintf_r+0x174>
 800907a:	89ab      	ldrh	r3, [r5, #12]
 800907c:	065b      	lsls	r3, r3, #25
 800907e:	f53f af2d 	bmi.w	8008edc <_svfiprintf_r+0x28>
 8009082:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009084:	e72c      	b.n	8008ee0 <_svfiprintf_r+0x2c>
 8009086:	ab03      	add	r3, sp, #12
 8009088:	9300      	str	r3, [sp, #0]
 800908a:	462a      	mov	r2, r5
 800908c:	4b05      	ldr	r3, [pc, #20]	@ (80090a4 <_svfiprintf_r+0x1f0>)
 800908e:	a904      	add	r1, sp, #16
 8009090:	4638      	mov	r0, r7
 8009092:	f7fc fe5d 	bl	8005d50 <_printf_i>
 8009096:	e7ed      	b.n	8009074 <_svfiprintf_r+0x1c0>
 8009098:	0800a301 	.word	0x0800a301
 800909c:	0800a30b 	.word	0x0800a30b
 80090a0:	08005821 	.word	0x08005821
 80090a4:	08008dfd 	.word	0x08008dfd
 80090a8:	0800a307 	.word	0x0800a307

080090ac <__sflush_r>:
 80090ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80090b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090b4:	0716      	lsls	r6, r2, #28
 80090b6:	4605      	mov	r5, r0
 80090b8:	460c      	mov	r4, r1
 80090ba:	d454      	bmi.n	8009166 <__sflush_r+0xba>
 80090bc:	684b      	ldr	r3, [r1, #4]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	dc02      	bgt.n	80090c8 <__sflush_r+0x1c>
 80090c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	dd48      	ble.n	800915a <__sflush_r+0xae>
 80090c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80090ca:	2e00      	cmp	r6, #0
 80090cc:	d045      	beq.n	800915a <__sflush_r+0xae>
 80090ce:	2300      	movs	r3, #0
 80090d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80090d4:	682f      	ldr	r7, [r5, #0]
 80090d6:	6a21      	ldr	r1, [r4, #32]
 80090d8:	602b      	str	r3, [r5, #0]
 80090da:	d030      	beq.n	800913e <__sflush_r+0x92>
 80090dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80090de:	89a3      	ldrh	r3, [r4, #12]
 80090e0:	0759      	lsls	r1, r3, #29
 80090e2:	d505      	bpl.n	80090f0 <__sflush_r+0x44>
 80090e4:	6863      	ldr	r3, [r4, #4]
 80090e6:	1ad2      	subs	r2, r2, r3
 80090e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80090ea:	b10b      	cbz	r3, 80090f0 <__sflush_r+0x44>
 80090ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80090ee:	1ad2      	subs	r2, r2, r3
 80090f0:	2300      	movs	r3, #0
 80090f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80090f4:	6a21      	ldr	r1, [r4, #32]
 80090f6:	4628      	mov	r0, r5
 80090f8:	47b0      	blx	r6
 80090fa:	1c43      	adds	r3, r0, #1
 80090fc:	89a3      	ldrh	r3, [r4, #12]
 80090fe:	d106      	bne.n	800910e <__sflush_r+0x62>
 8009100:	6829      	ldr	r1, [r5, #0]
 8009102:	291d      	cmp	r1, #29
 8009104:	d82b      	bhi.n	800915e <__sflush_r+0xb2>
 8009106:	4a2a      	ldr	r2, [pc, #168]	@ (80091b0 <__sflush_r+0x104>)
 8009108:	410a      	asrs	r2, r1
 800910a:	07d6      	lsls	r6, r2, #31
 800910c:	d427      	bmi.n	800915e <__sflush_r+0xb2>
 800910e:	2200      	movs	r2, #0
 8009110:	6062      	str	r2, [r4, #4]
 8009112:	04d9      	lsls	r1, r3, #19
 8009114:	6922      	ldr	r2, [r4, #16]
 8009116:	6022      	str	r2, [r4, #0]
 8009118:	d504      	bpl.n	8009124 <__sflush_r+0x78>
 800911a:	1c42      	adds	r2, r0, #1
 800911c:	d101      	bne.n	8009122 <__sflush_r+0x76>
 800911e:	682b      	ldr	r3, [r5, #0]
 8009120:	b903      	cbnz	r3, 8009124 <__sflush_r+0x78>
 8009122:	6560      	str	r0, [r4, #84]	@ 0x54
 8009124:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009126:	602f      	str	r7, [r5, #0]
 8009128:	b1b9      	cbz	r1, 800915a <__sflush_r+0xae>
 800912a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800912e:	4299      	cmp	r1, r3
 8009130:	d002      	beq.n	8009138 <__sflush_r+0x8c>
 8009132:	4628      	mov	r0, r5
 8009134:	f7fe fa2c 	bl	8007590 <_free_r>
 8009138:	2300      	movs	r3, #0
 800913a:	6363      	str	r3, [r4, #52]	@ 0x34
 800913c:	e00d      	b.n	800915a <__sflush_r+0xae>
 800913e:	2301      	movs	r3, #1
 8009140:	4628      	mov	r0, r5
 8009142:	47b0      	blx	r6
 8009144:	4602      	mov	r2, r0
 8009146:	1c50      	adds	r0, r2, #1
 8009148:	d1c9      	bne.n	80090de <__sflush_r+0x32>
 800914a:	682b      	ldr	r3, [r5, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d0c6      	beq.n	80090de <__sflush_r+0x32>
 8009150:	2b1d      	cmp	r3, #29
 8009152:	d001      	beq.n	8009158 <__sflush_r+0xac>
 8009154:	2b16      	cmp	r3, #22
 8009156:	d11e      	bne.n	8009196 <__sflush_r+0xea>
 8009158:	602f      	str	r7, [r5, #0]
 800915a:	2000      	movs	r0, #0
 800915c:	e022      	b.n	80091a4 <__sflush_r+0xf8>
 800915e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009162:	b21b      	sxth	r3, r3
 8009164:	e01b      	b.n	800919e <__sflush_r+0xf2>
 8009166:	690f      	ldr	r7, [r1, #16]
 8009168:	2f00      	cmp	r7, #0
 800916a:	d0f6      	beq.n	800915a <__sflush_r+0xae>
 800916c:	0793      	lsls	r3, r2, #30
 800916e:	680e      	ldr	r6, [r1, #0]
 8009170:	bf08      	it	eq
 8009172:	694b      	ldreq	r3, [r1, #20]
 8009174:	600f      	str	r7, [r1, #0]
 8009176:	bf18      	it	ne
 8009178:	2300      	movne	r3, #0
 800917a:	eba6 0807 	sub.w	r8, r6, r7
 800917e:	608b      	str	r3, [r1, #8]
 8009180:	f1b8 0f00 	cmp.w	r8, #0
 8009184:	dde9      	ble.n	800915a <__sflush_r+0xae>
 8009186:	6a21      	ldr	r1, [r4, #32]
 8009188:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800918a:	4643      	mov	r3, r8
 800918c:	463a      	mov	r2, r7
 800918e:	4628      	mov	r0, r5
 8009190:	47b0      	blx	r6
 8009192:	2800      	cmp	r0, #0
 8009194:	dc08      	bgt.n	80091a8 <__sflush_r+0xfc>
 8009196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800919a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800919e:	81a3      	strh	r3, [r4, #12]
 80091a0:	f04f 30ff 	mov.w	r0, #4294967295
 80091a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091a8:	4407      	add	r7, r0
 80091aa:	eba8 0800 	sub.w	r8, r8, r0
 80091ae:	e7e7      	b.n	8009180 <__sflush_r+0xd4>
 80091b0:	dfbffffe 	.word	0xdfbffffe

080091b4 <_fflush_r>:
 80091b4:	b538      	push	{r3, r4, r5, lr}
 80091b6:	690b      	ldr	r3, [r1, #16]
 80091b8:	4605      	mov	r5, r0
 80091ba:	460c      	mov	r4, r1
 80091bc:	b913      	cbnz	r3, 80091c4 <_fflush_r+0x10>
 80091be:	2500      	movs	r5, #0
 80091c0:	4628      	mov	r0, r5
 80091c2:	bd38      	pop	{r3, r4, r5, pc}
 80091c4:	b118      	cbz	r0, 80091ce <_fflush_r+0x1a>
 80091c6:	6a03      	ldr	r3, [r0, #32]
 80091c8:	b90b      	cbnz	r3, 80091ce <_fflush_r+0x1a>
 80091ca:	f7fd f981 	bl	80064d0 <__sinit>
 80091ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d0f3      	beq.n	80091be <_fflush_r+0xa>
 80091d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80091d8:	07d0      	lsls	r0, r2, #31
 80091da:	d404      	bmi.n	80091e6 <_fflush_r+0x32>
 80091dc:	0599      	lsls	r1, r3, #22
 80091de:	d402      	bmi.n	80091e6 <_fflush_r+0x32>
 80091e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091e2:	f7fd fb7e 	bl	80068e2 <__retarget_lock_acquire_recursive>
 80091e6:	4628      	mov	r0, r5
 80091e8:	4621      	mov	r1, r4
 80091ea:	f7ff ff5f 	bl	80090ac <__sflush_r>
 80091ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80091f0:	07da      	lsls	r2, r3, #31
 80091f2:	4605      	mov	r5, r0
 80091f4:	d4e4      	bmi.n	80091c0 <_fflush_r+0xc>
 80091f6:	89a3      	ldrh	r3, [r4, #12]
 80091f8:	059b      	lsls	r3, r3, #22
 80091fa:	d4e1      	bmi.n	80091c0 <_fflush_r+0xc>
 80091fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091fe:	f7fd fb71 	bl	80068e4 <__retarget_lock_release_recursive>
 8009202:	e7dd      	b.n	80091c0 <_fflush_r+0xc>

08009204 <__swhatbuf_r>:
 8009204:	b570      	push	{r4, r5, r6, lr}
 8009206:	460c      	mov	r4, r1
 8009208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800920c:	2900      	cmp	r1, #0
 800920e:	b096      	sub	sp, #88	@ 0x58
 8009210:	4615      	mov	r5, r2
 8009212:	461e      	mov	r6, r3
 8009214:	da0d      	bge.n	8009232 <__swhatbuf_r+0x2e>
 8009216:	89a3      	ldrh	r3, [r4, #12]
 8009218:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800921c:	f04f 0100 	mov.w	r1, #0
 8009220:	bf14      	ite	ne
 8009222:	2340      	movne	r3, #64	@ 0x40
 8009224:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009228:	2000      	movs	r0, #0
 800922a:	6031      	str	r1, [r6, #0]
 800922c:	602b      	str	r3, [r5, #0]
 800922e:	b016      	add	sp, #88	@ 0x58
 8009230:	bd70      	pop	{r4, r5, r6, pc}
 8009232:	466a      	mov	r2, sp
 8009234:	f000 f874 	bl	8009320 <_fstat_r>
 8009238:	2800      	cmp	r0, #0
 800923a:	dbec      	blt.n	8009216 <__swhatbuf_r+0x12>
 800923c:	9901      	ldr	r1, [sp, #4]
 800923e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009242:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009246:	4259      	negs	r1, r3
 8009248:	4159      	adcs	r1, r3
 800924a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800924e:	e7eb      	b.n	8009228 <__swhatbuf_r+0x24>

08009250 <__smakebuf_r>:
 8009250:	898b      	ldrh	r3, [r1, #12]
 8009252:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009254:	079d      	lsls	r5, r3, #30
 8009256:	4606      	mov	r6, r0
 8009258:	460c      	mov	r4, r1
 800925a:	d507      	bpl.n	800926c <__smakebuf_r+0x1c>
 800925c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009260:	6023      	str	r3, [r4, #0]
 8009262:	6123      	str	r3, [r4, #16]
 8009264:	2301      	movs	r3, #1
 8009266:	6163      	str	r3, [r4, #20]
 8009268:	b003      	add	sp, #12
 800926a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800926c:	ab01      	add	r3, sp, #4
 800926e:	466a      	mov	r2, sp
 8009270:	f7ff ffc8 	bl	8009204 <__swhatbuf_r>
 8009274:	9f00      	ldr	r7, [sp, #0]
 8009276:	4605      	mov	r5, r0
 8009278:	4639      	mov	r1, r7
 800927a:	4630      	mov	r0, r6
 800927c:	f7fe f9fc 	bl	8007678 <_malloc_r>
 8009280:	b948      	cbnz	r0, 8009296 <__smakebuf_r+0x46>
 8009282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009286:	059a      	lsls	r2, r3, #22
 8009288:	d4ee      	bmi.n	8009268 <__smakebuf_r+0x18>
 800928a:	f023 0303 	bic.w	r3, r3, #3
 800928e:	f043 0302 	orr.w	r3, r3, #2
 8009292:	81a3      	strh	r3, [r4, #12]
 8009294:	e7e2      	b.n	800925c <__smakebuf_r+0xc>
 8009296:	89a3      	ldrh	r3, [r4, #12]
 8009298:	6020      	str	r0, [r4, #0]
 800929a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800929e:	81a3      	strh	r3, [r4, #12]
 80092a0:	9b01      	ldr	r3, [sp, #4]
 80092a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80092a6:	b15b      	cbz	r3, 80092c0 <__smakebuf_r+0x70>
 80092a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092ac:	4630      	mov	r0, r6
 80092ae:	f000 f849 	bl	8009344 <_isatty_r>
 80092b2:	b128      	cbz	r0, 80092c0 <__smakebuf_r+0x70>
 80092b4:	89a3      	ldrh	r3, [r4, #12]
 80092b6:	f023 0303 	bic.w	r3, r3, #3
 80092ba:	f043 0301 	orr.w	r3, r3, #1
 80092be:	81a3      	strh	r3, [r4, #12]
 80092c0:	89a3      	ldrh	r3, [r4, #12]
 80092c2:	431d      	orrs	r5, r3
 80092c4:	81a5      	strh	r5, [r4, #12]
 80092c6:	e7cf      	b.n	8009268 <__smakebuf_r+0x18>

080092c8 <memmove>:
 80092c8:	4288      	cmp	r0, r1
 80092ca:	b510      	push	{r4, lr}
 80092cc:	eb01 0402 	add.w	r4, r1, r2
 80092d0:	d902      	bls.n	80092d8 <memmove+0x10>
 80092d2:	4284      	cmp	r4, r0
 80092d4:	4623      	mov	r3, r4
 80092d6:	d807      	bhi.n	80092e8 <memmove+0x20>
 80092d8:	1e43      	subs	r3, r0, #1
 80092da:	42a1      	cmp	r1, r4
 80092dc:	d008      	beq.n	80092f0 <memmove+0x28>
 80092de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80092e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80092e6:	e7f8      	b.n	80092da <memmove+0x12>
 80092e8:	4402      	add	r2, r0
 80092ea:	4601      	mov	r1, r0
 80092ec:	428a      	cmp	r2, r1
 80092ee:	d100      	bne.n	80092f2 <memmove+0x2a>
 80092f0:	bd10      	pop	{r4, pc}
 80092f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80092f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80092fa:	e7f7      	b.n	80092ec <memmove+0x24>

080092fc <strncmp>:
 80092fc:	b510      	push	{r4, lr}
 80092fe:	b16a      	cbz	r2, 800931c <strncmp+0x20>
 8009300:	3901      	subs	r1, #1
 8009302:	1884      	adds	r4, r0, r2
 8009304:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009308:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800930c:	429a      	cmp	r2, r3
 800930e:	d103      	bne.n	8009318 <strncmp+0x1c>
 8009310:	42a0      	cmp	r0, r4
 8009312:	d001      	beq.n	8009318 <strncmp+0x1c>
 8009314:	2a00      	cmp	r2, #0
 8009316:	d1f5      	bne.n	8009304 <strncmp+0x8>
 8009318:	1ad0      	subs	r0, r2, r3
 800931a:	bd10      	pop	{r4, pc}
 800931c:	4610      	mov	r0, r2
 800931e:	e7fc      	b.n	800931a <strncmp+0x1e>

08009320 <_fstat_r>:
 8009320:	b538      	push	{r3, r4, r5, lr}
 8009322:	4d07      	ldr	r5, [pc, #28]	@ (8009340 <_fstat_r+0x20>)
 8009324:	2300      	movs	r3, #0
 8009326:	4604      	mov	r4, r0
 8009328:	4608      	mov	r0, r1
 800932a:	4611      	mov	r1, r2
 800932c:	602b      	str	r3, [r5, #0]
 800932e:	f7f8 f9da 	bl	80016e6 <_fstat>
 8009332:	1c43      	adds	r3, r0, #1
 8009334:	d102      	bne.n	800933c <_fstat_r+0x1c>
 8009336:	682b      	ldr	r3, [r5, #0]
 8009338:	b103      	cbz	r3, 800933c <_fstat_r+0x1c>
 800933a:	6023      	str	r3, [r4, #0]
 800933c:	bd38      	pop	{r3, r4, r5, pc}
 800933e:	bf00      	nop
 8009340:	20000440 	.word	0x20000440

08009344 <_isatty_r>:
 8009344:	b538      	push	{r3, r4, r5, lr}
 8009346:	4d06      	ldr	r5, [pc, #24]	@ (8009360 <_isatty_r+0x1c>)
 8009348:	2300      	movs	r3, #0
 800934a:	4604      	mov	r4, r0
 800934c:	4608      	mov	r0, r1
 800934e:	602b      	str	r3, [r5, #0]
 8009350:	f7f8 f9d9 	bl	8001706 <_isatty>
 8009354:	1c43      	adds	r3, r0, #1
 8009356:	d102      	bne.n	800935e <_isatty_r+0x1a>
 8009358:	682b      	ldr	r3, [r5, #0]
 800935a:	b103      	cbz	r3, 800935e <_isatty_r+0x1a>
 800935c:	6023      	str	r3, [r4, #0]
 800935e:	bd38      	pop	{r3, r4, r5, pc}
 8009360:	20000440 	.word	0x20000440

08009364 <_sbrk_r>:
 8009364:	b538      	push	{r3, r4, r5, lr}
 8009366:	4d06      	ldr	r5, [pc, #24]	@ (8009380 <_sbrk_r+0x1c>)
 8009368:	2300      	movs	r3, #0
 800936a:	4604      	mov	r4, r0
 800936c:	4608      	mov	r0, r1
 800936e:	602b      	str	r3, [r5, #0]
 8009370:	f7f8 f9e2 	bl	8001738 <_sbrk>
 8009374:	1c43      	adds	r3, r0, #1
 8009376:	d102      	bne.n	800937e <_sbrk_r+0x1a>
 8009378:	682b      	ldr	r3, [r5, #0]
 800937a:	b103      	cbz	r3, 800937e <_sbrk_r+0x1a>
 800937c:	6023      	str	r3, [r4, #0]
 800937e:	bd38      	pop	{r3, r4, r5, pc}
 8009380:	20000440 	.word	0x20000440

08009384 <memcpy>:
 8009384:	440a      	add	r2, r1
 8009386:	4291      	cmp	r1, r2
 8009388:	f100 33ff 	add.w	r3, r0, #4294967295
 800938c:	d100      	bne.n	8009390 <memcpy+0xc>
 800938e:	4770      	bx	lr
 8009390:	b510      	push	{r4, lr}
 8009392:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009396:	f803 4f01 	strb.w	r4, [r3, #1]!
 800939a:	4291      	cmp	r1, r2
 800939c:	d1f9      	bne.n	8009392 <memcpy+0xe>
 800939e:	bd10      	pop	{r4, pc}

080093a0 <nan>:
 80093a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80093a8 <nan+0x8>
 80093a4:	4770      	bx	lr
 80093a6:	bf00      	nop
 80093a8:	00000000 	.word	0x00000000
 80093ac:	7ff80000 	.word	0x7ff80000

080093b0 <__assert_func>:
 80093b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80093b2:	4614      	mov	r4, r2
 80093b4:	461a      	mov	r2, r3
 80093b6:	4b09      	ldr	r3, [pc, #36]	@ (80093dc <__assert_func+0x2c>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4605      	mov	r5, r0
 80093bc:	68d8      	ldr	r0, [r3, #12]
 80093be:	b954      	cbnz	r4, 80093d6 <__assert_func+0x26>
 80093c0:	4b07      	ldr	r3, [pc, #28]	@ (80093e0 <__assert_func+0x30>)
 80093c2:	461c      	mov	r4, r3
 80093c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80093c8:	9100      	str	r1, [sp, #0]
 80093ca:	462b      	mov	r3, r5
 80093cc:	4905      	ldr	r1, [pc, #20]	@ (80093e4 <__assert_func+0x34>)
 80093ce:	f000 fba7 	bl	8009b20 <fiprintf>
 80093d2:	f000 fbb7 	bl	8009b44 <abort>
 80093d6:	4b04      	ldr	r3, [pc, #16]	@ (80093e8 <__assert_func+0x38>)
 80093d8:	e7f4      	b.n	80093c4 <__assert_func+0x14>
 80093da:	bf00      	nop
 80093dc:	20000018 	.word	0x20000018
 80093e0:	0800a355 	.word	0x0800a355
 80093e4:	0800a327 	.word	0x0800a327
 80093e8:	0800a31a 	.word	0x0800a31a

080093ec <_calloc_r>:
 80093ec:	b570      	push	{r4, r5, r6, lr}
 80093ee:	fba1 5402 	umull	r5, r4, r1, r2
 80093f2:	b93c      	cbnz	r4, 8009404 <_calloc_r+0x18>
 80093f4:	4629      	mov	r1, r5
 80093f6:	f7fe f93f 	bl	8007678 <_malloc_r>
 80093fa:	4606      	mov	r6, r0
 80093fc:	b928      	cbnz	r0, 800940a <_calloc_r+0x1e>
 80093fe:	2600      	movs	r6, #0
 8009400:	4630      	mov	r0, r6
 8009402:	bd70      	pop	{r4, r5, r6, pc}
 8009404:	220c      	movs	r2, #12
 8009406:	6002      	str	r2, [r0, #0]
 8009408:	e7f9      	b.n	80093fe <_calloc_r+0x12>
 800940a:	462a      	mov	r2, r5
 800940c:	4621      	mov	r1, r4
 800940e:	f7fd f9eb 	bl	80067e8 <memset>
 8009412:	e7f5      	b.n	8009400 <_calloc_r+0x14>

08009414 <rshift>:
 8009414:	6903      	ldr	r3, [r0, #16]
 8009416:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800941a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800941e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009422:	f100 0414 	add.w	r4, r0, #20
 8009426:	dd45      	ble.n	80094b4 <rshift+0xa0>
 8009428:	f011 011f 	ands.w	r1, r1, #31
 800942c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009430:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009434:	d10c      	bne.n	8009450 <rshift+0x3c>
 8009436:	f100 0710 	add.w	r7, r0, #16
 800943a:	4629      	mov	r1, r5
 800943c:	42b1      	cmp	r1, r6
 800943e:	d334      	bcc.n	80094aa <rshift+0x96>
 8009440:	1a9b      	subs	r3, r3, r2
 8009442:	009b      	lsls	r3, r3, #2
 8009444:	1eea      	subs	r2, r5, #3
 8009446:	4296      	cmp	r6, r2
 8009448:	bf38      	it	cc
 800944a:	2300      	movcc	r3, #0
 800944c:	4423      	add	r3, r4
 800944e:	e015      	b.n	800947c <rshift+0x68>
 8009450:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009454:	f1c1 0820 	rsb	r8, r1, #32
 8009458:	40cf      	lsrs	r7, r1
 800945a:	f105 0e04 	add.w	lr, r5, #4
 800945e:	46a1      	mov	r9, r4
 8009460:	4576      	cmp	r6, lr
 8009462:	46f4      	mov	ip, lr
 8009464:	d815      	bhi.n	8009492 <rshift+0x7e>
 8009466:	1a9a      	subs	r2, r3, r2
 8009468:	0092      	lsls	r2, r2, #2
 800946a:	3a04      	subs	r2, #4
 800946c:	3501      	adds	r5, #1
 800946e:	42ae      	cmp	r6, r5
 8009470:	bf38      	it	cc
 8009472:	2200      	movcc	r2, #0
 8009474:	18a3      	adds	r3, r4, r2
 8009476:	50a7      	str	r7, [r4, r2]
 8009478:	b107      	cbz	r7, 800947c <rshift+0x68>
 800947a:	3304      	adds	r3, #4
 800947c:	1b1a      	subs	r2, r3, r4
 800947e:	42a3      	cmp	r3, r4
 8009480:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009484:	bf08      	it	eq
 8009486:	2300      	moveq	r3, #0
 8009488:	6102      	str	r2, [r0, #16]
 800948a:	bf08      	it	eq
 800948c:	6143      	streq	r3, [r0, #20]
 800948e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009492:	f8dc c000 	ldr.w	ip, [ip]
 8009496:	fa0c fc08 	lsl.w	ip, ip, r8
 800949a:	ea4c 0707 	orr.w	r7, ip, r7
 800949e:	f849 7b04 	str.w	r7, [r9], #4
 80094a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80094a6:	40cf      	lsrs	r7, r1
 80094a8:	e7da      	b.n	8009460 <rshift+0x4c>
 80094aa:	f851 cb04 	ldr.w	ip, [r1], #4
 80094ae:	f847 cf04 	str.w	ip, [r7, #4]!
 80094b2:	e7c3      	b.n	800943c <rshift+0x28>
 80094b4:	4623      	mov	r3, r4
 80094b6:	e7e1      	b.n	800947c <rshift+0x68>

080094b8 <__hexdig_fun>:
 80094b8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80094bc:	2b09      	cmp	r3, #9
 80094be:	d802      	bhi.n	80094c6 <__hexdig_fun+0xe>
 80094c0:	3820      	subs	r0, #32
 80094c2:	b2c0      	uxtb	r0, r0
 80094c4:	4770      	bx	lr
 80094c6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80094ca:	2b05      	cmp	r3, #5
 80094cc:	d801      	bhi.n	80094d2 <__hexdig_fun+0x1a>
 80094ce:	3847      	subs	r0, #71	@ 0x47
 80094d0:	e7f7      	b.n	80094c2 <__hexdig_fun+0xa>
 80094d2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80094d6:	2b05      	cmp	r3, #5
 80094d8:	d801      	bhi.n	80094de <__hexdig_fun+0x26>
 80094da:	3827      	subs	r0, #39	@ 0x27
 80094dc:	e7f1      	b.n	80094c2 <__hexdig_fun+0xa>
 80094de:	2000      	movs	r0, #0
 80094e0:	4770      	bx	lr
	...

080094e4 <__gethex>:
 80094e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e8:	b085      	sub	sp, #20
 80094ea:	468a      	mov	sl, r1
 80094ec:	9302      	str	r3, [sp, #8]
 80094ee:	680b      	ldr	r3, [r1, #0]
 80094f0:	9001      	str	r0, [sp, #4]
 80094f2:	4690      	mov	r8, r2
 80094f4:	1c9c      	adds	r4, r3, #2
 80094f6:	46a1      	mov	r9, r4
 80094f8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80094fc:	2830      	cmp	r0, #48	@ 0x30
 80094fe:	d0fa      	beq.n	80094f6 <__gethex+0x12>
 8009500:	eba9 0303 	sub.w	r3, r9, r3
 8009504:	f1a3 0b02 	sub.w	fp, r3, #2
 8009508:	f7ff ffd6 	bl	80094b8 <__hexdig_fun>
 800950c:	4605      	mov	r5, r0
 800950e:	2800      	cmp	r0, #0
 8009510:	d168      	bne.n	80095e4 <__gethex+0x100>
 8009512:	49a0      	ldr	r1, [pc, #640]	@ (8009794 <__gethex+0x2b0>)
 8009514:	2201      	movs	r2, #1
 8009516:	4648      	mov	r0, r9
 8009518:	f7ff fef0 	bl	80092fc <strncmp>
 800951c:	4607      	mov	r7, r0
 800951e:	2800      	cmp	r0, #0
 8009520:	d167      	bne.n	80095f2 <__gethex+0x10e>
 8009522:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009526:	4626      	mov	r6, r4
 8009528:	f7ff ffc6 	bl	80094b8 <__hexdig_fun>
 800952c:	2800      	cmp	r0, #0
 800952e:	d062      	beq.n	80095f6 <__gethex+0x112>
 8009530:	4623      	mov	r3, r4
 8009532:	7818      	ldrb	r0, [r3, #0]
 8009534:	2830      	cmp	r0, #48	@ 0x30
 8009536:	4699      	mov	r9, r3
 8009538:	f103 0301 	add.w	r3, r3, #1
 800953c:	d0f9      	beq.n	8009532 <__gethex+0x4e>
 800953e:	f7ff ffbb 	bl	80094b8 <__hexdig_fun>
 8009542:	fab0 f580 	clz	r5, r0
 8009546:	096d      	lsrs	r5, r5, #5
 8009548:	f04f 0b01 	mov.w	fp, #1
 800954c:	464a      	mov	r2, r9
 800954e:	4616      	mov	r6, r2
 8009550:	3201      	adds	r2, #1
 8009552:	7830      	ldrb	r0, [r6, #0]
 8009554:	f7ff ffb0 	bl	80094b8 <__hexdig_fun>
 8009558:	2800      	cmp	r0, #0
 800955a:	d1f8      	bne.n	800954e <__gethex+0x6a>
 800955c:	498d      	ldr	r1, [pc, #564]	@ (8009794 <__gethex+0x2b0>)
 800955e:	2201      	movs	r2, #1
 8009560:	4630      	mov	r0, r6
 8009562:	f7ff fecb 	bl	80092fc <strncmp>
 8009566:	2800      	cmp	r0, #0
 8009568:	d13f      	bne.n	80095ea <__gethex+0x106>
 800956a:	b944      	cbnz	r4, 800957e <__gethex+0x9a>
 800956c:	1c74      	adds	r4, r6, #1
 800956e:	4622      	mov	r2, r4
 8009570:	4616      	mov	r6, r2
 8009572:	3201      	adds	r2, #1
 8009574:	7830      	ldrb	r0, [r6, #0]
 8009576:	f7ff ff9f 	bl	80094b8 <__hexdig_fun>
 800957a:	2800      	cmp	r0, #0
 800957c:	d1f8      	bne.n	8009570 <__gethex+0x8c>
 800957e:	1ba4      	subs	r4, r4, r6
 8009580:	00a7      	lsls	r7, r4, #2
 8009582:	7833      	ldrb	r3, [r6, #0]
 8009584:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009588:	2b50      	cmp	r3, #80	@ 0x50
 800958a:	d13e      	bne.n	800960a <__gethex+0x126>
 800958c:	7873      	ldrb	r3, [r6, #1]
 800958e:	2b2b      	cmp	r3, #43	@ 0x2b
 8009590:	d033      	beq.n	80095fa <__gethex+0x116>
 8009592:	2b2d      	cmp	r3, #45	@ 0x2d
 8009594:	d034      	beq.n	8009600 <__gethex+0x11c>
 8009596:	1c71      	adds	r1, r6, #1
 8009598:	2400      	movs	r4, #0
 800959a:	7808      	ldrb	r0, [r1, #0]
 800959c:	f7ff ff8c 	bl	80094b8 <__hexdig_fun>
 80095a0:	1e43      	subs	r3, r0, #1
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	2b18      	cmp	r3, #24
 80095a6:	d830      	bhi.n	800960a <__gethex+0x126>
 80095a8:	f1a0 0210 	sub.w	r2, r0, #16
 80095ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80095b0:	f7ff ff82 	bl	80094b8 <__hexdig_fun>
 80095b4:	f100 3cff 	add.w	ip, r0, #4294967295
 80095b8:	fa5f fc8c 	uxtb.w	ip, ip
 80095bc:	f1bc 0f18 	cmp.w	ip, #24
 80095c0:	f04f 030a 	mov.w	r3, #10
 80095c4:	d91e      	bls.n	8009604 <__gethex+0x120>
 80095c6:	b104      	cbz	r4, 80095ca <__gethex+0xe6>
 80095c8:	4252      	negs	r2, r2
 80095ca:	4417      	add	r7, r2
 80095cc:	f8ca 1000 	str.w	r1, [sl]
 80095d0:	b1ed      	cbz	r5, 800960e <__gethex+0x12a>
 80095d2:	f1bb 0f00 	cmp.w	fp, #0
 80095d6:	bf0c      	ite	eq
 80095d8:	2506      	moveq	r5, #6
 80095da:	2500      	movne	r5, #0
 80095dc:	4628      	mov	r0, r5
 80095de:	b005      	add	sp, #20
 80095e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095e4:	2500      	movs	r5, #0
 80095e6:	462c      	mov	r4, r5
 80095e8:	e7b0      	b.n	800954c <__gethex+0x68>
 80095ea:	2c00      	cmp	r4, #0
 80095ec:	d1c7      	bne.n	800957e <__gethex+0x9a>
 80095ee:	4627      	mov	r7, r4
 80095f0:	e7c7      	b.n	8009582 <__gethex+0x9e>
 80095f2:	464e      	mov	r6, r9
 80095f4:	462f      	mov	r7, r5
 80095f6:	2501      	movs	r5, #1
 80095f8:	e7c3      	b.n	8009582 <__gethex+0x9e>
 80095fa:	2400      	movs	r4, #0
 80095fc:	1cb1      	adds	r1, r6, #2
 80095fe:	e7cc      	b.n	800959a <__gethex+0xb6>
 8009600:	2401      	movs	r4, #1
 8009602:	e7fb      	b.n	80095fc <__gethex+0x118>
 8009604:	fb03 0002 	mla	r0, r3, r2, r0
 8009608:	e7ce      	b.n	80095a8 <__gethex+0xc4>
 800960a:	4631      	mov	r1, r6
 800960c:	e7de      	b.n	80095cc <__gethex+0xe8>
 800960e:	eba6 0309 	sub.w	r3, r6, r9
 8009612:	3b01      	subs	r3, #1
 8009614:	4629      	mov	r1, r5
 8009616:	2b07      	cmp	r3, #7
 8009618:	dc0a      	bgt.n	8009630 <__gethex+0x14c>
 800961a:	9801      	ldr	r0, [sp, #4]
 800961c:	f7fe f8b8 	bl	8007790 <_Balloc>
 8009620:	4604      	mov	r4, r0
 8009622:	b940      	cbnz	r0, 8009636 <__gethex+0x152>
 8009624:	4b5c      	ldr	r3, [pc, #368]	@ (8009798 <__gethex+0x2b4>)
 8009626:	4602      	mov	r2, r0
 8009628:	21e4      	movs	r1, #228	@ 0xe4
 800962a:	485c      	ldr	r0, [pc, #368]	@ (800979c <__gethex+0x2b8>)
 800962c:	f7ff fec0 	bl	80093b0 <__assert_func>
 8009630:	3101      	adds	r1, #1
 8009632:	105b      	asrs	r3, r3, #1
 8009634:	e7ef      	b.n	8009616 <__gethex+0x132>
 8009636:	f100 0a14 	add.w	sl, r0, #20
 800963a:	2300      	movs	r3, #0
 800963c:	4655      	mov	r5, sl
 800963e:	469b      	mov	fp, r3
 8009640:	45b1      	cmp	r9, r6
 8009642:	d337      	bcc.n	80096b4 <__gethex+0x1d0>
 8009644:	f845 bb04 	str.w	fp, [r5], #4
 8009648:	eba5 050a 	sub.w	r5, r5, sl
 800964c:	10ad      	asrs	r5, r5, #2
 800964e:	6125      	str	r5, [r4, #16]
 8009650:	4658      	mov	r0, fp
 8009652:	f7fe f98f 	bl	8007974 <__hi0bits>
 8009656:	016d      	lsls	r5, r5, #5
 8009658:	f8d8 6000 	ldr.w	r6, [r8]
 800965c:	1a2d      	subs	r5, r5, r0
 800965e:	42b5      	cmp	r5, r6
 8009660:	dd54      	ble.n	800970c <__gethex+0x228>
 8009662:	1bad      	subs	r5, r5, r6
 8009664:	4629      	mov	r1, r5
 8009666:	4620      	mov	r0, r4
 8009668:	f7fe fd23 	bl	80080b2 <__any_on>
 800966c:	4681      	mov	r9, r0
 800966e:	b178      	cbz	r0, 8009690 <__gethex+0x1ac>
 8009670:	1e6b      	subs	r3, r5, #1
 8009672:	1159      	asrs	r1, r3, #5
 8009674:	f003 021f 	and.w	r2, r3, #31
 8009678:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800967c:	f04f 0901 	mov.w	r9, #1
 8009680:	fa09 f202 	lsl.w	r2, r9, r2
 8009684:	420a      	tst	r2, r1
 8009686:	d003      	beq.n	8009690 <__gethex+0x1ac>
 8009688:	454b      	cmp	r3, r9
 800968a:	dc36      	bgt.n	80096fa <__gethex+0x216>
 800968c:	f04f 0902 	mov.w	r9, #2
 8009690:	4629      	mov	r1, r5
 8009692:	4620      	mov	r0, r4
 8009694:	f7ff febe 	bl	8009414 <rshift>
 8009698:	442f      	add	r7, r5
 800969a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800969e:	42bb      	cmp	r3, r7
 80096a0:	da42      	bge.n	8009728 <__gethex+0x244>
 80096a2:	9801      	ldr	r0, [sp, #4]
 80096a4:	4621      	mov	r1, r4
 80096a6:	f7fe f8b3 	bl	8007810 <_Bfree>
 80096aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80096ac:	2300      	movs	r3, #0
 80096ae:	6013      	str	r3, [r2, #0]
 80096b0:	25a3      	movs	r5, #163	@ 0xa3
 80096b2:	e793      	b.n	80095dc <__gethex+0xf8>
 80096b4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80096b8:	2a2e      	cmp	r2, #46	@ 0x2e
 80096ba:	d012      	beq.n	80096e2 <__gethex+0x1fe>
 80096bc:	2b20      	cmp	r3, #32
 80096be:	d104      	bne.n	80096ca <__gethex+0x1e6>
 80096c0:	f845 bb04 	str.w	fp, [r5], #4
 80096c4:	f04f 0b00 	mov.w	fp, #0
 80096c8:	465b      	mov	r3, fp
 80096ca:	7830      	ldrb	r0, [r6, #0]
 80096cc:	9303      	str	r3, [sp, #12]
 80096ce:	f7ff fef3 	bl	80094b8 <__hexdig_fun>
 80096d2:	9b03      	ldr	r3, [sp, #12]
 80096d4:	f000 000f 	and.w	r0, r0, #15
 80096d8:	4098      	lsls	r0, r3
 80096da:	ea4b 0b00 	orr.w	fp, fp, r0
 80096de:	3304      	adds	r3, #4
 80096e0:	e7ae      	b.n	8009640 <__gethex+0x15c>
 80096e2:	45b1      	cmp	r9, r6
 80096e4:	d8ea      	bhi.n	80096bc <__gethex+0x1d8>
 80096e6:	492b      	ldr	r1, [pc, #172]	@ (8009794 <__gethex+0x2b0>)
 80096e8:	9303      	str	r3, [sp, #12]
 80096ea:	2201      	movs	r2, #1
 80096ec:	4630      	mov	r0, r6
 80096ee:	f7ff fe05 	bl	80092fc <strncmp>
 80096f2:	9b03      	ldr	r3, [sp, #12]
 80096f4:	2800      	cmp	r0, #0
 80096f6:	d1e1      	bne.n	80096bc <__gethex+0x1d8>
 80096f8:	e7a2      	b.n	8009640 <__gethex+0x15c>
 80096fa:	1ea9      	subs	r1, r5, #2
 80096fc:	4620      	mov	r0, r4
 80096fe:	f7fe fcd8 	bl	80080b2 <__any_on>
 8009702:	2800      	cmp	r0, #0
 8009704:	d0c2      	beq.n	800968c <__gethex+0x1a8>
 8009706:	f04f 0903 	mov.w	r9, #3
 800970a:	e7c1      	b.n	8009690 <__gethex+0x1ac>
 800970c:	da09      	bge.n	8009722 <__gethex+0x23e>
 800970e:	1b75      	subs	r5, r6, r5
 8009710:	4621      	mov	r1, r4
 8009712:	9801      	ldr	r0, [sp, #4]
 8009714:	462a      	mov	r2, r5
 8009716:	f7fe fa93 	bl	8007c40 <__lshift>
 800971a:	1b7f      	subs	r7, r7, r5
 800971c:	4604      	mov	r4, r0
 800971e:	f100 0a14 	add.w	sl, r0, #20
 8009722:	f04f 0900 	mov.w	r9, #0
 8009726:	e7b8      	b.n	800969a <__gethex+0x1b6>
 8009728:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800972c:	42bd      	cmp	r5, r7
 800972e:	dd6f      	ble.n	8009810 <__gethex+0x32c>
 8009730:	1bed      	subs	r5, r5, r7
 8009732:	42ae      	cmp	r6, r5
 8009734:	dc34      	bgt.n	80097a0 <__gethex+0x2bc>
 8009736:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800973a:	2b02      	cmp	r3, #2
 800973c:	d022      	beq.n	8009784 <__gethex+0x2a0>
 800973e:	2b03      	cmp	r3, #3
 8009740:	d024      	beq.n	800978c <__gethex+0x2a8>
 8009742:	2b01      	cmp	r3, #1
 8009744:	d115      	bne.n	8009772 <__gethex+0x28e>
 8009746:	42ae      	cmp	r6, r5
 8009748:	d113      	bne.n	8009772 <__gethex+0x28e>
 800974a:	2e01      	cmp	r6, #1
 800974c:	d10b      	bne.n	8009766 <__gethex+0x282>
 800974e:	9a02      	ldr	r2, [sp, #8]
 8009750:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009754:	6013      	str	r3, [r2, #0]
 8009756:	2301      	movs	r3, #1
 8009758:	6123      	str	r3, [r4, #16]
 800975a:	f8ca 3000 	str.w	r3, [sl]
 800975e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009760:	2562      	movs	r5, #98	@ 0x62
 8009762:	601c      	str	r4, [r3, #0]
 8009764:	e73a      	b.n	80095dc <__gethex+0xf8>
 8009766:	1e71      	subs	r1, r6, #1
 8009768:	4620      	mov	r0, r4
 800976a:	f7fe fca2 	bl	80080b2 <__any_on>
 800976e:	2800      	cmp	r0, #0
 8009770:	d1ed      	bne.n	800974e <__gethex+0x26a>
 8009772:	9801      	ldr	r0, [sp, #4]
 8009774:	4621      	mov	r1, r4
 8009776:	f7fe f84b 	bl	8007810 <_Bfree>
 800977a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800977c:	2300      	movs	r3, #0
 800977e:	6013      	str	r3, [r2, #0]
 8009780:	2550      	movs	r5, #80	@ 0x50
 8009782:	e72b      	b.n	80095dc <__gethex+0xf8>
 8009784:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009786:	2b00      	cmp	r3, #0
 8009788:	d1f3      	bne.n	8009772 <__gethex+0x28e>
 800978a:	e7e0      	b.n	800974e <__gethex+0x26a>
 800978c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800978e:	2b00      	cmp	r3, #0
 8009790:	d1dd      	bne.n	800974e <__gethex+0x26a>
 8009792:	e7ee      	b.n	8009772 <__gethex+0x28e>
 8009794:	0800a1a8 	.word	0x0800a1a8
 8009798:	0800a03d 	.word	0x0800a03d
 800979c:	0800a356 	.word	0x0800a356
 80097a0:	1e6f      	subs	r7, r5, #1
 80097a2:	f1b9 0f00 	cmp.w	r9, #0
 80097a6:	d130      	bne.n	800980a <__gethex+0x326>
 80097a8:	b127      	cbz	r7, 80097b4 <__gethex+0x2d0>
 80097aa:	4639      	mov	r1, r7
 80097ac:	4620      	mov	r0, r4
 80097ae:	f7fe fc80 	bl	80080b2 <__any_on>
 80097b2:	4681      	mov	r9, r0
 80097b4:	117a      	asrs	r2, r7, #5
 80097b6:	2301      	movs	r3, #1
 80097b8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80097bc:	f007 071f 	and.w	r7, r7, #31
 80097c0:	40bb      	lsls	r3, r7
 80097c2:	4213      	tst	r3, r2
 80097c4:	4629      	mov	r1, r5
 80097c6:	4620      	mov	r0, r4
 80097c8:	bf18      	it	ne
 80097ca:	f049 0902 	orrne.w	r9, r9, #2
 80097ce:	f7ff fe21 	bl	8009414 <rshift>
 80097d2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80097d6:	1b76      	subs	r6, r6, r5
 80097d8:	2502      	movs	r5, #2
 80097da:	f1b9 0f00 	cmp.w	r9, #0
 80097de:	d047      	beq.n	8009870 <__gethex+0x38c>
 80097e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80097e4:	2b02      	cmp	r3, #2
 80097e6:	d015      	beq.n	8009814 <__gethex+0x330>
 80097e8:	2b03      	cmp	r3, #3
 80097ea:	d017      	beq.n	800981c <__gethex+0x338>
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	d109      	bne.n	8009804 <__gethex+0x320>
 80097f0:	f019 0f02 	tst.w	r9, #2
 80097f4:	d006      	beq.n	8009804 <__gethex+0x320>
 80097f6:	f8da 3000 	ldr.w	r3, [sl]
 80097fa:	ea49 0903 	orr.w	r9, r9, r3
 80097fe:	f019 0f01 	tst.w	r9, #1
 8009802:	d10e      	bne.n	8009822 <__gethex+0x33e>
 8009804:	f045 0510 	orr.w	r5, r5, #16
 8009808:	e032      	b.n	8009870 <__gethex+0x38c>
 800980a:	f04f 0901 	mov.w	r9, #1
 800980e:	e7d1      	b.n	80097b4 <__gethex+0x2d0>
 8009810:	2501      	movs	r5, #1
 8009812:	e7e2      	b.n	80097da <__gethex+0x2f6>
 8009814:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009816:	f1c3 0301 	rsb	r3, r3, #1
 800981a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800981c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800981e:	2b00      	cmp	r3, #0
 8009820:	d0f0      	beq.n	8009804 <__gethex+0x320>
 8009822:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009826:	f104 0314 	add.w	r3, r4, #20
 800982a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800982e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009832:	f04f 0c00 	mov.w	ip, #0
 8009836:	4618      	mov	r0, r3
 8009838:	f853 2b04 	ldr.w	r2, [r3], #4
 800983c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009840:	d01b      	beq.n	800987a <__gethex+0x396>
 8009842:	3201      	adds	r2, #1
 8009844:	6002      	str	r2, [r0, #0]
 8009846:	2d02      	cmp	r5, #2
 8009848:	f104 0314 	add.w	r3, r4, #20
 800984c:	d13c      	bne.n	80098c8 <__gethex+0x3e4>
 800984e:	f8d8 2000 	ldr.w	r2, [r8]
 8009852:	3a01      	subs	r2, #1
 8009854:	42b2      	cmp	r2, r6
 8009856:	d109      	bne.n	800986c <__gethex+0x388>
 8009858:	1171      	asrs	r1, r6, #5
 800985a:	2201      	movs	r2, #1
 800985c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009860:	f006 061f 	and.w	r6, r6, #31
 8009864:	fa02 f606 	lsl.w	r6, r2, r6
 8009868:	421e      	tst	r6, r3
 800986a:	d13a      	bne.n	80098e2 <__gethex+0x3fe>
 800986c:	f045 0520 	orr.w	r5, r5, #32
 8009870:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009872:	601c      	str	r4, [r3, #0]
 8009874:	9b02      	ldr	r3, [sp, #8]
 8009876:	601f      	str	r7, [r3, #0]
 8009878:	e6b0      	b.n	80095dc <__gethex+0xf8>
 800987a:	4299      	cmp	r1, r3
 800987c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009880:	d8d9      	bhi.n	8009836 <__gethex+0x352>
 8009882:	68a3      	ldr	r3, [r4, #8]
 8009884:	459b      	cmp	fp, r3
 8009886:	db17      	blt.n	80098b8 <__gethex+0x3d4>
 8009888:	6861      	ldr	r1, [r4, #4]
 800988a:	9801      	ldr	r0, [sp, #4]
 800988c:	3101      	adds	r1, #1
 800988e:	f7fd ff7f 	bl	8007790 <_Balloc>
 8009892:	4681      	mov	r9, r0
 8009894:	b918      	cbnz	r0, 800989e <__gethex+0x3ba>
 8009896:	4b1a      	ldr	r3, [pc, #104]	@ (8009900 <__gethex+0x41c>)
 8009898:	4602      	mov	r2, r0
 800989a:	2184      	movs	r1, #132	@ 0x84
 800989c:	e6c5      	b.n	800962a <__gethex+0x146>
 800989e:	6922      	ldr	r2, [r4, #16]
 80098a0:	3202      	adds	r2, #2
 80098a2:	f104 010c 	add.w	r1, r4, #12
 80098a6:	0092      	lsls	r2, r2, #2
 80098a8:	300c      	adds	r0, #12
 80098aa:	f7ff fd6b 	bl	8009384 <memcpy>
 80098ae:	4621      	mov	r1, r4
 80098b0:	9801      	ldr	r0, [sp, #4]
 80098b2:	f7fd ffad 	bl	8007810 <_Bfree>
 80098b6:	464c      	mov	r4, r9
 80098b8:	6923      	ldr	r3, [r4, #16]
 80098ba:	1c5a      	adds	r2, r3, #1
 80098bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80098c0:	6122      	str	r2, [r4, #16]
 80098c2:	2201      	movs	r2, #1
 80098c4:	615a      	str	r2, [r3, #20]
 80098c6:	e7be      	b.n	8009846 <__gethex+0x362>
 80098c8:	6922      	ldr	r2, [r4, #16]
 80098ca:	455a      	cmp	r2, fp
 80098cc:	dd0b      	ble.n	80098e6 <__gethex+0x402>
 80098ce:	2101      	movs	r1, #1
 80098d0:	4620      	mov	r0, r4
 80098d2:	f7ff fd9f 	bl	8009414 <rshift>
 80098d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80098da:	3701      	adds	r7, #1
 80098dc:	42bb      	cmp	r3, r7
 80098de:	f6ff aee0 	blt.w	80096a2 <__gethex+0x1be>
 80098e2:	2501      	movs	r5, #1
 80098e4:	e7c2      	b.n	800986c <__gethex+0x388>
 80098e6:	f016 061f 	ands.w	r6, r6, #31
 80098ea:	d0fa      	beq.n	80098e2 <__gethex+0x3fe>
 80098ec:	4453      	add	r3, sl
 80098ee:	f1c6 0620 	rsb	r6, r6, #32
 80098f2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80098f6:	f7fe f83d 	bl	8007974 <__hi0bits>
 80098fa:	42b0      	cmp	r0, r6
 80098fc:	dbe7      	blt.n	80098ce <__gethex+0x3ea>
 80098fe:	e7f0      	b.n	80098e2 <__gethex+0x3fe>
 8009900:	0800a03d 	.word	0x0800a03d

08009904 <L_shift>:
 8009904:	f1c2 0208 	rsb	r2, r2, #8
 8009908:	0092      	lsls	r2, r2, #2
 800990a:	b570      	push	{r4, r5, r6, lr}
 800990c:	f1c2 0620 	rsb	r6, r2, #32
 8009910:	6843      	ldr	r3, [r0, #4]
 8009912:	6804      	ldr	r4, [r0, #0]
 8009914:	fa03 f506 	lsl.w	r5, r3, r6
 8009918:	432c      	orrs	r4, r5
 800991a:	40d3      	lsrs	r3, r2
 800991c:	6004      	str	r4, [r0, #0]
 800991e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009922:	4288      	cmp	r0, r1
 8009924:	d3f4      	bcc.n	8009910 <L_shift+0xc>
 8009926:	bd70      	pop	{r4, r5, r6, pc}

08009928 <__match>:
 8009928:	b530      	push	{r4, r5, lr}
 800992a:	6803      	ldr	r3, [r0, #0]
 800992c:	3301      	adds	r3, #1
 800992e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009932:	b914      	cbnz	r4, 800993a <__match+0x12>
 8009934:	6003      	str	r3, [r0, #0]
 8009936:	2001      	movs	r0, #1
 8009938:	bd30      	pop	{r4, r5, pc}
 800993a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800993e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009942:	2d19      	cmp	r5, #25
 8009944:	bf98      	it	ls
 8009946:	3220      	addls	r2, #32
 8009948:	42a2      	cmp	r2, r4
 800994a:	d0f0      	beq.n	800992e <__match+0x6>
 800994c:	2000      	movs	r0, #0
 800994e:	e7f3      	b.n	8009938 <__match+0x10>

08009950 <__hexnan>:
 8009950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009954:	680b      	ldr	r3, [r1, #0]
 8009956:	6801      	ldr	r1, [r0, #0]
 8009958:	115e      	asrs	r6, r3, #5
 800995a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800995e:	f013 031f 	ands.w	r3, r3, #31
 8009962:	b087      	sub	sp, #28
 8009964:	bf18      	it	ne
 8009966:	3604      	addne	r6, #4
 8009968:	2500      	movs	r5, #0
 800996a:	1f37      	subs	r7, r6, #4
 800996c:	4682      	mov	sl, r0
 800996e:	4690      	mov	r8, r2
 8009970:	9301      	str	r3, [sp, #4]
 8009972:	f846 5c04 	str.w	r5, [r6, #-4]
 8009976:	46b9      	mov	r9, r7
 8009978:	463c      	mov	r4, r7
 800997a:	9502      	str	r5, [sp, #8]
 800997c:	46ab      	mov	fp, r5
 800997e:	784a      	ldrb	r2, [r1, #1]
 8009980:	1c4b      	adds	r3, r1, #1
 8009982:	9303      	str	r3, [sp, #12]
 8009984:	b342      	cbz	r2, 80099d8 <__hexnan+0x88>
 8009986:	4610      	mov	r0, r2
 8009988:	9105      	str	r1, [sp, #20]
 800998a:	9204      	str	r2, [sp, #16]
 800998c:	f7ff fd94 	bl	80094b8 <__hexdig_fun>
 8009990:	2800      	cmp	r0, #0
 8009992:	d151      	bne.n	8009a38 <__hexnan+0xe8>
 8009994:	9a04      	ldr	r2, [sp, #16]
 8009996:	9905      	ldr	r1, [sp, #20]
 8009998:	2a20      	cmp	r2, #32
 800999a:	d818      	bhi.n	80099ce <__hexnan+0x7e>
 800999c:	9b02      	ldr	r3, [sp, #8]
 800999e:	459b      	cmp	fp, r3
 80099a0:	dd13      	ble.n	80099ca <__hexnan+0x7a>
 80099a2:	454c      	cmp	r4, r9
 80099a4:	d206      	bcs.n	80099b4 <__hexnan+0x64>
 80099a6:	2d07      	cmp	r5, #7
 80099a8:	dc04      	bgt.n	80099b4 <__hexnan+0x64>
 80099aa:	462a      	mov	r2, r5
 80099ac:	4649      	mov	r1, r9
 80099ae:	4620      	mov	r0, r4
 80099b0:	f7ff ffa8 	bl	8009904 <L_shift>
 80099b4:	4544      	cmp	r4, r8
 80099b6:	d952      	bls.n	8009a5e <__hexnan+0x10e>
 80099b8:	2300      	movs	r3, #0
 80099ba:	f1a4 0904 	sub.w	r9, r4, #4
 80099be:	f844 3c04 	str.w	r3, [r4, #-4]
 80099c2:	f8cd b008 	str.w	fp, [sp, #8]
 80099c6:	464c      	mov	r4, r9
 80099c8:	461d      	mov	r5, r3
 80099ca:	9903      	ldr	r1, [sp, #12]
 80099cc:	e7d7      	b.n	800997e <__hexnan+0x2e>
 80099ce:	2a29      	cmp	r2, #41	@ 0x29
 80099d0:	d157      	bne.n	8009a82 <__hexnan+0x132>
 80099d2:	3102      	adds	r1, #2
 80099d4:	f8ca 1000 	str.w	r1, [sl]
 80099d8:	f1bb 0f00 	cmp.w	fp, #0
 80099dc:	d051      	beq.n	8009a82 <__hexnan+0x132>
 80099de:	454c      	cmp	r4, r9
 80099e0:	d206      	bcs.n	80099f0 <__hexnan+0xa0>
 80099e2:	2d07      	cmp	r5, #7
 80099e4:	dc04      	bgt.n	80099f0 <__hexnan+0xa0>
 80099e6:	462a      	mov	r2, r5
 80099e8:	4649      	mov	r1, r9
 80099ea:	4620      	mov	r0, r4
 80099ec:	f7ff ff8a 	bl	8009904 <L_shift>
 80099f0:	4544      	cmp	r4, r8
 80099f2:	d936      	bls.n	8009a62 <__hexnan+0x112>
 80099f4:	f1a8 0204 	sub.w	r2, r8, #4
 80099f8:	4623      	mov	r3, r4
 80099fa:	f853 1b04 	ldr.w	r1, [r3], #4
 80099fe:	f842 1f04 	str.w	r1, [r2, #4]!
 8009a02:	429f      	cmp	r7, r3
 8009a04:	d2f9      	bcs.n	80099fa <__hexnan+0xaa>
 8009a06:	1b3b      	subs	r3, r7, r4
 8009a08:	f023 0303 	bic.w	r3, r3, #3
 8009a0c:	3304      	adds	r3, #4
 8009a0e:	3401      	adds	r4, #1
 8009a10:	3e03      	subs	r6, #3
 8009a12:	42b4      	cmp	r4, r6
 8009a14:	bf88      	it	hi
 8009a16:	2304      	movhi	r3, #4
 8009a18:	4443      	add	r3, r8
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	f843 2b04 	str.w	r2, [r3], #4
 8009a20:	429f      	cmp	r7, r3
 8009a22:	d2fb      	bcs.n	8009a1c <__hexnan+0xcc>
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	b91b      	cbnz	r3, 8009a30 <__hexnan+0xe0>
 8009a28:	4547      	cmp	r7, r8
 8009a2a:	d128      	bne.n	8009a7e <__hexnan+0x12e>
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	603b      	str	r3, [r7, #0]
 8009a30:	2005      	movs	r0, #5
 8009a32:	b007      	add	sp, #28
 8009a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a38:	3501      	adds	r5, #1
 8009a3a:	2d08      	cmp	r5, #8
 8009a3c:	f10b 0b01 	add.w	fp, fp, #1
 8009a40:	dd06      	ble.n	8009a50 <__hexnan+0x100>
 8009a42:	4544      	cmp	r4, r8
 8009a44:	d9c1      	bls.n	80099ca <__hexnan+0x7a>
 8009a46:	2300      	movs	r3, #0
 8009a48:	f844 3c04 	str.w	r3, [r4, #-4]
 8009a4c:	2501      	movs	r5, #1
 8009a4e:	3c04      	subs	r4, #4
 8009a50:	6822      	ldr	r2, [r4, #0]
 8009a52:	f000 000f 	and.w	r0, r0, #15
 8009a56:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009a5a:	6020      	str	r0, [r4, #0]
 8009a5c:	e7b5      	b.n	80099ca <__hexnan+0x7a>
 8009a5e:	2508      	movs	r5, #8
 8009a60:	e7b3      	b.n	80099ca <__hexnan+0x7a>
 8009a62:	9b01      	ldr	r3, [sp, #4]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d0dd      	beq.n	8009a24 <__hexnan+0xd4>
 8009a68:	f1c3 0320 	rsb	r3, r3, #32
 8009a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8009a70:	40da      	lsrs	r2, r3
 8009a72:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009a76:	4013      	ands	r3, r2
 8009a78:	f846 3c04 	str.w	r3, [r6, #-4]
 8009a7c:	e7d2      	b.n	8009a24 <__hexnan+0xd4>
 8009a7e:	3f04      	subs	r7, #4
 8009a80:	e7d0      	b.n	8009a24 <__hexnan+0xd4>
 8009a82:	2004      	movs	r0, #4
 8009a84:	e7d5      	b.n	8009a32 <__hexnan+0xe2>

08009a86 <__ascii_mbtowc>:
 8009a86:	b082      	sub	sp, #8
 8009a88:	b901      	cbnz	r1, 8009a8c <__ascii_mbtowc+0x6>
 8009a8a:	a901      	add	r1, sp, #4
 8009a8c:	b142      	cbz	r2, 8009aa0 <__ascii_mbtowc+0x1a>
 8009a8e:	b14b      	cbz	r3, 8009aa4 <__ascii_mbtowc+0x1e>
 8009a90:	7813      	ldrb	r3, [r2, #0]
 8009a92:	600b      	str	r3, [r1, #0]
 8009a94:	7812      	ldrb	r2, [r2, #0]
 8009a96:	1e10      	subs	r0, r2, #0
 8009a98:	bf18      	it	ne
 8009a9a:	2001      	movne	r0, #1
 8009a9c:	b002      	add	sp, #8
 8009a9e:	4770      	bx	lr
 8009aa0:	4610      	mov	r0, r2
 8009aa2:	e7fb      	b.n	8009a9c <__ascii_mbtowc+0x16>
 8009aa4:	f06f 0001 	mvn.w	r0, #1
 8009aa8:	e7f8      	b.n	8009a9c <__ascii_mbtowc+0x16>

08009aaa <_realloc_r>:
 8009aaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aae:	4680      	mov	r8, r0
 8009ab0:	4615      	mov	r5, r2
 8009ab2:	460c      	mov	r4, r1
 8009ab4:	b921      	cbnz	r1, 8009ac0 <_realloc_r+0x16>
 8009ab6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009aba:	4611      	mov	r1, r2
 8009abc:	f7fd bddc 	b.w	8007678 <_malloc_r>
 8009ac0:	b92a      	cbnz	r2, 8009ace <_realloc_r+0x24>
 8009ac2:	f7fd fd65 	bl	8007590 <_free_r>
 8009ac6:	2400      	movs	r4, #0
 8009ac8:	4620      	mov	r0, r4
 8009aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ace:	f000 f840 	bl	8009b52 <_malloc_usable_size_r>
 8009ad2:	4285      	cmp	r5, r0
 8009ad4:	4606      	mov	r6, r0
 8009ad6:	d802      	bhi.n	8009ade <_realloc_r+0x34>
 8009ad8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009adc:	d8f4      	bhi.n	8009ac8 <_realloc_r+0x1e>
 8009ade:	4629      	mov	r1, r5
 8009ae0:	4640      	mov	r0, r8
 8009ae2:	f7fd fdc9 	bl	8007678 <_malloc_r>
 8009ae6:	4607      	mov	r7, r0
 8009ae8:	2800      	cmp	r0, #0
 8009aea:	d0ec      	beq.n	8009ac6 <_realloc_r+0x1c>
 8009aec:	42b5      	cmp	r5, r6
 8009aee:	462a      	mov	r2, r5
 8009af0:	4621      	mov	r1, r4
 8009af2:	bf28      	it	cs
 8009af4:	4632      	movcs	r2, r6
 8009af6:	f7ff fc45 	bl	8009384 <memcpy>
 8009afa:	4621      	mov	r1, r4
 8009afc:	4640      	mov	r0, r8
 8009afe:	f7fd fd47 	bl	8007590 <_free_r>
 8009b02:	463c      	mov	r4, r7
 8009b04:	e7e0      	b.n	8009ac8 <_realloc_r+0x1e>

08009b06 <__ascii_wctomb>:
 8009b06:	4603      	mov	r3, r0
 8009b08:	4608      	mov	r0, r1
 8009b0a:	b141      	cbz	r1, 8009b1e <__ascii_wctomb+0x18>
 8009b0c:	2aff      	cmp	r2, #255	@ 0xff
 8009b0e:	d904      	bls.n	8009b1a <__ascii_wctomb+0x14>
 8009b10:	228a      	movs	r2, #138	@ 0x8a
 8009b12:	601a      	str	r2, [r3, #0]
 8009b14:	f04f 30ff 	mov.w	r0, #4294967295
 8009b18:	4770      	bx	lr
 8009b1a:	700a      	strb	r2, [r1, #0]
 8009b1c:	2001      	movs	r0, #1
 8009b1e:	4770      	bx	lr

08009b20 <fiprintf>:
 8009b20:	b40e      	push	{r1, r2, r3}
 8009b22:	b503      	push	{r0, r1, lr}
 8009b24:	4601      	mov	r1, r0
 8009b26:	ab03      	add	r3, sp, #12
 8009b28:	4805      	ldr	r0, [pc, #20]	@ (8009b40 <fiprintf+0x20>)
 8009b2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b2e:	6800      	ldr	r0, [r0, #0]
 8009b30:	9301      	str	r3, [sp, #4]
 8009b32:	f000 f83f 	bl	8009bb4 <_vfiprintf_r>
 8009b36:	b002      	add	sp, #8
 8009b38:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b3c:	b003      	add	sp, #12
 8009b3e:	4770      	bx	lr
 8009b40:	20000018 	.word	0x20000018

08009b44 <abort>:
 8009b44:	b508      	push	{r3, lr}
 8009b46:	2006      	movs	r0, #6
 8009b48:	f000 f974 	bl	8009e34 <raise>
 8009b4c:	2001      	movs	r0, #1
 8009b4e:	f7f7 fd7a 	bl	8001646 <_exit>

08009b52 <_malloc_usable_size_r>:
 8009b52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b56:	1f18      	subs	r0, r3, #4
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	bfbc      	itt	lt
 8009b5c:	580b      	ldrlt	r3, [r1, r0]
 8009b5e:	18c0      	addlt	r0, r0, r3
 8009b60:	4770      	bx	lr

08009b62 <__sfputc_r>:
 8009b62:	6893      	ldr	r3, [r2, #8]
 8009b64:	3b01      	subs	r3, #1
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	b410      	push	{r4}
 8009b6a:	6093      	str	r3, [r2, #8]
 8009b6c:	da08      	bge.n	8009b80 <__sfputc_r+0x1e>
 8009b6e:	6994      	ldr	r4, [r2, #24]
 8009b70:	42a3      	cmp	r3, r4
 8009b72:	db01      	blt.n	8009b78 <__sfputc_r+0x16>
 8009b74:	290a      	cmp	r1, #10
 8009b76:	d103      	bne.n	8009b80 <__sfputc_r+0x1e>
 8009b78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b7c:	f7fc bd9f 	b.w	80066be <__swbuf_r>
 8009b80:	6813      	ldr	r3, [r2, #0]
 8009b82:	1c58      	adds	r0, r3, #1
 8009b84:	6010      	str	r0, [r2, #0]
 8009b86:	7019      	strb	r1, [r3, #0]
 8009b88:	4608      	mov	r0, r1
 8009b8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b8e:	4770      	bx	lr

08009b90 <__sfputs_r>:
 8009b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b92:	4606      	mov	r6, r0
 8009b94:	460f      	mov	r7, r1
 8009b96:	4614      	mov	r4, r2
 8009b98:	18d5      	adds	r5, r2, r3
 8009b9a:	42ac      	cmp	r4, r5
 8009b9c:	d101      	bne.n	8009ba2 <__sfputs_r+0x12>
 8009b9e:	2000      	movs	r0, #0
 8009ba0:	e007      	b.n	8009bb2 <__sfputs_r+0x22>
 8009ba2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ba6:	463a      	mov	r2, r7
 8009ba8:	4630      	mov	r0, r6
 8009baa:	f7ff ffda 	bl	8009b62 <__sfputc_r>
 8009bae:	1c43      	adds	r3, r0, #1
 8009bb0:	d1f3      	bne.n	8009b9a <__sfputs_r+0xa>
 8009bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009bb4 <_vfiprintf_r>:
 8009bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bb8:	460d      	mov	r5, r1
 8009bba:	b09d      	sub	sp, #116	@ 0x74
 8009bbc:	4614      	mov	r4, r2
 8009bbe:	4698      	mov	r8, r3
 8009bc0:	4606      	mov	r6, r0
 8009bc2:	b118      	cbz	r0, 8009bcc <_vfiprintf_r+0x18>
 8009bc4:	6a03      	ldr	r3, [r0, #32]
 8009bc6:	b90b      	cbnz	r3, 8009bcc <_vfiprintf_r+0x18>
 8009bc8:	f7fc fc82 	bl	80064d0 <__sinit>
 8009bcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009bce:	07d9      	lsls	r1, r3, #31
 8009bd0:	d405      	bmi.n	8009bde <_vfiprintf_r+0x2a>
 8009bd2:	89ab      	ldrh	r3, [r5, #12]
 8009bd4:	059a      	lsls	r2, r3, #22
 8009bd6:	d402      	bmi.n	8009bde <_vfiprintf_r+0x2a>
 8009bd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009bda:	f7fc fe82 	bl	80068e2 <__retarget_lock_acquire_recursive>
 8009bde:	89ab      	ldrh	r3, [r5, #12]
 8009be0:	071b      	lsls	r3, r3, #28
 8009be2:	d501      	bpl.n	8009be8 <_vfiprintf_r+0x34>
 8009be4:	692b      	ldr	r3, [r5, #16]
 8009be6:	b99b      	cbnz	r3, 8009c10 <_vfiprintf_r+0x5c>
 8009be8:	4629      	mov	r1, r5
 8009bea:	4630      	mov	r0, r6
 8009bec:	f7fc fda6 	bl	800673c <__swsetup_r>
 8009bf0:	b170      	cbz	r0, 8009c10 <_vfiprintf_r+0x5c>
 8009bf2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009bf4:	07dc      	lsls	r4, r3, #31
 8009bf6:	d504      	bpl.n	8009c02 <_vfiprintf_r+0x4e>
 8009bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8009bfc:	b01d      	add	sp, #116	@ 0x74
 8009bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c02:	89ab      	ldrh	r3, [r5, #12]
 8009c04:	0598      	lsls	r0, r3, #22
 8009c06:	d4f7      	bmi.n	8009bf8 <_vfiprintf_r+0x44>
 8009c08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c0a:	f7fc fe6b 	bl	80068e4 <__retarget_lock_release_recursive>
 8009c0e:	e7f3      	b.n	8009bf8 <_vfiprintf_r+0x44>
 8009c10:	2300      	movs	r3, #0
 8009c12:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c14:	2320      	movs	r3, #32
 8009c16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009c1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c1e:	2330      	movs	r3, #48	@ 0x30
 8009c20:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009dd0 <_vfiprintf_r+0x21c>
 8009c24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009c28:	f04f 0901 	mov.w	r9, #1
 8009c2c:	4623      	mov	r3, r4
 8009c2e:	469a      	mov	sl, r3
 8009c30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c34:	b10a      	cbz	r2, 8009c3a <_vfiprintf_r+0x86>
 8009c36:	2a25      	cmp	r2, #37	@ 0x25
 8009c38:	d1f9      	bne.n	8009c2e <_vfiprintf_r+0x7a>
 8009c3a:	ebba 0b04 	subs.w	fp, sl, r4
 8009c3e:	d00b      	beq.n	8009c58 <_vfiprintf_r+0xa4>
 8009c40:	465b      	mov	r3, fp
 8009c42:	4622      	mov	r2, r4
 8009c44:	4629      	mov	r1, r5
 8009c46:	4630      	mov	r0, r6
 8009c48:	f7ff ffa2 	bl	8009b90 <__sfputs_r>
 8009c4c:	3001      	adds	r0, #1
 8009c4e:	f000 80a7 	beq.w	8009da0 <_vfiprintf_r+0x1ec>
 8009c52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c54:	445a      	add	r2, fp
 8009c56:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c58:	f89a 3000 	ldrb.w	r3, [sl]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	f000 809f 	beq.w	8009da0 <_vfiprintf_r+0x1ec>
 8009c62:	2300      	movs	r3, #0
 8009c64:	f04f 32ff 	mov.w	r2, #4294967295
 8009c68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c6c:	f10a 0a01 	add.w	sl, sl, #1
 8009c70:	9304      	str	r3, [sp, #16]
 8009c72:	9307      	str	r3, [sp, #28]
 8009c74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009c78:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c7a:	4654      	mov	r4, sl
 8009c7c:	2205      	movs	r2, #5
 8009c7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c82:	4853      	ldr	r0, [pc, #332]	@ (8009dd0 <_vfiprintf_r+0x21c>)
 8009c84:	f7f6 fabc 	bl	8000200 <memchr>
 8009c88:	9a04      	ldr	r2, [sp, #16]
 8009c8a:	b9d8      	cbnz	r0, 8009cc4 <_vfiprintf_r+0x110>
 8009c8c:	06d1      	lsls	r1, r2, #27
 8009c8e:	bf44      	itt	mi
 8009c90:	2320      	movmi	r3, #32
 8009c92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c96:	0713      	lsls	r3, r2, #28
 8009c98:	bf44      	itt	mi
 8009c9a:	232b      	movmi	r3, #43	@ 0x2b
 8009c9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ca0:	f89a 3000 	ldrb.w	r3, [sl]
 8009ca4:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ca6:	d015      	beq.n	8009cd4 <_vfiprintf_r+0x120>
 8009ca8:	9a07      	ldr	r2, [sp, #28]
 8009caa:	4654      	mov	r4, sl
 8009cac:	2000      	movs	r0, #0
 8009cae:	f04f 0c0a 	mov.w	ip, #10
 8009cb2:	4621      	mov	r1, r4
 8009cb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cb8:	3b30      	subs	r3, #48	@ 0x30
 8009cba:	2b09      	cmp	r3, #9
 8009cbc:	d94b      	bls.n	8009d56 <_vfiprintf_r+0x1a2>
 8009cbe:	b1b0      	cbz	r0, 8009cee <_vfiprintf_r+0x13a>
 8009cc0:	9207      	str	r2, [sp, #28]
 8009cc2:	e014      	b.n	8009cee <_vfiprintf_r+0x13a>
 8009cc4:	eba0 0308 	sub.w	r3, r0, r8
 8009cc8:	fa09 f303 	lsl.w	r3, r9, r3
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	9304      	str	r3, [sp, #16]
 8009cd0:	46a2      	mov	sl, r4
 8009cd2:	e7d2      	b.n	8009c7a <_vfiprintf_r+0xc6>
 8009cd4:	9b03      	ldr	r3, [sp, #12]
 8009cd6:	1d19      	adds	r1, r3, #4
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	9103      	str	r1, [sp, #12]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	bfbb      	ittet	lt
 8009ce0:	425b      	neglt	r3, r3
 8009ce2:	f042 0202 	orrlt.w	r2, r2, #2
 8009ce6:	9307      	strge	r3, [sp, #28]
 8009ce8:	9307      	strlt	r3, [sp, #28]
 8009cea:	bfb8      	it	lt
 8009cec:	9204      	strlt	r2, [sp, #16]
 8009cee:	7823      	ldrb	r3, [r4, #0]
 8009cf0:	2b2e      	cmp	r3, #46	@ 0x2e
 8009cf2:	d10a      	bne.n	8009d0a <_vfiprintf_r+0x156>
 8009cf4:	7863      	ldrb	r3, [r4, #1]
 8009cf6:	2b2a      	cmp	r3, #42	@ 0x2a
 8009cf8:	d132      	bne.n	8009d60 <_vfiprintf_r+0x1ac>
 8009cfa:	9b03      	ldr	r3, [sp, #12]
 8009cfc:	1d1a      	adds	r2, r3, #4
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	9203      	str	r2, [sp, #12]
 8009d02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009d06:	3402      	adds	r4, #2
 8009d08:	9305      	str	r3, [sp, #20]
 8009d0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009de0 <_vfiprintf_r+0x22c>
 8009d0e:	7821      	ldrb	r1, [r4, #0]
 8009d10:	2203      	movs	r2, #3
 8009d12:	4650      	mov	r0, sl
 8009d14:	f7f6 fa74 	bl	8000200 <memchr>
 8009d18:	b138      	cbz	r0, 8009d2a <_vfiprintf_r+0x176>
 8009d1a:	9b04      	ldr	r3, [sp, #16]
 8009d1c:	eba0 000a 	sub.w	r0, r0, sl
 8009d20:	2240      	movs	r2, #64	@ 0x40
 8009d22:	4082      	lsls	r2, r0
 8009d24:	4313      	orrs	r3, r2
 8009d26:	3401      	adds	r4, #1
 8009d28:	9304      	str	r3, [sp, #16]
 8009d2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d2e:	4829      	ldr	r0, [pc, #164]	@ (8009dd4 <_vfiprintf_r+0x220>)
 8009d30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009d34:	2206      	movs	r2, #6
 8009d36:	f7f6 fa63 	bl	8000200 <memchr>
 8009d3a:	2800      	cmp	r0, #0
 8009d3c:	d03f      	beq.n	8009dbe <_vfiprintf_r+0x20a>
 8009d3e:	4b26      	ldr	r3, [pc, #152]	@ (8009dd8 <_vfiprintf_r+0x224>)
 8009d40:	bb1b      	cbnz	r3, 8009d8a <_vfiprintf_r+0x1d6>
 8009d42:	9b03      	ldr	r3, [sp, #12]
 8009d44:	3307      	adds	r3, #7
 8009d46:	f023 0307 	bic.w	r3, r3, #7
 8009d4a:	3308      	adds	r3, #8
 8009d4c:	9303      	str	r3, [sp, #12]
 8009d4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d50:	443b      	add	r3, r7
 8009d52:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d54:	e76a      	b.n	8009c2c <_vfiprintf_r+0x78>
 8009d56:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d5a:	460c      	mov	r4, r1
 8009d5c:	2001      	movs	r0, #1
 8009d5e:	e7a8      	b.n	8009cb2 <_vfiprintf_r+0xfe>
 8009d60:	2300      	movs	r3, #0
 8009d62:	3401      	adds	r4, #1
 8009d64:	9305      	str	r3, [sp, #20]
 8009d66:	4619      	mov	r1, r3
 8009d68:	f04f 0c0a 	mov.w	ip, #10
 8009d6c:	4620      	mov	r0, r4
 8009d6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d72:	3a30      	subs	r2, #48	@ 0x30
 8009d74:	2a09      	cmp	r2, #9
 8009d76:	d903      	bls.n	8009d80 <_vfiprintf_r+0x1cc>
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d0c6      	beq.n	8009d0a <_vfiprintf_r+0x156>
 8009d7c:	9105      	str	r1, [sp, #20]
 8009d7e:	e7c4      	b.n	8009d0a <_vfiprintf_r+0x156>
 8009d80:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d84:	4604      	mov	r4, r0
 8009d86:	2301      	movs	r3, #1
 8009d88:	e7f0      	b.n	8009d6c <_vfiprintf_r+0x1b8>
 8009d8a:	ab03      	add	r3, sp, #12
 8009d8c:	9300      	str	r3, [sp, #0]
 8009d8e:	462a      	mov	r2, r5
 8009d90:	4b12      	ldr	r3, [pc, #72]	@ (8009ddc <_vfiprintf_r+0x228>)
 8009d92:	a904      	add	r1, sp, #16
 8009d94:	4630      	mov	r0, r6
 8009d96:	f7fb fd43 	bl	8005820 <_printf_float>
 8009d9a:	4607      	mov	r7, r0
 8009d9c:	1c78      	adds	r0, r7, #1
 8009d9e:	d1d6      	bne.n	8009d4e <_vfiprintf_r+0x19a>
 8009da0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009da2:	07d9      	lsls	r1, r3, #31
 8009da4:	d405      	bmi.n	8009db2 <_vfiprintf_r+0x1fe>
 8009da6:	89ab      	ldrh	r3, [r5, #12]
 8009da8:	059a      	lsls	r2, r3, #22
 8009daa:	d402      	bmi.n	8009db2 <_vfiprintf_r+0x1fe>
 8009dac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009dae:	f7fc fd99 	bl	80068e4 <__retarget_lock_release_recursive>
 8009db2:	89ab      	ldrh	r3, [r5, #12]
 8009db4:	065b      	lsls	r3, r3, #25
 8009db6:	f53f af1f 	bmi.w	8009bf8 <_vfiprintf_r+0x44>
 8009dba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009dbc:	e71e      	b.n	8009bfc <_vfiprintf_r+0x48>
 8009dbe:	ab03      	add	r3, sp, #12
 8009dc0:	9300      	str	r3, [sp, #0]
 8009dc2:	462a      	mov	r2, r5
 8009dc4:	4b05      	ldr	r3, [pc, #20]	@ (8009ddc <_vfiprintf_r+0x228>)
 8009dc6:	a904      	add	r1, sp, #16
 8009dc8:	4630      	mov	r0, r6
 8009dca:	f7fb ffc1 	bl	8005d50 <_printf_i>
 8009dce:	e7e4      	b.n	8009d9a <_vfiprintf_r+0x1e6>
 8009dd0:	0800a301 	.word	0x0800a301
 8009dd4:	0800a30b 	.word	0x0800a30b
 8009dd8:	08005821 	.word	0x08005821
 8009ddc:	08009b91 	.word	0x08009b91
 8009de0:	0800a307 	.word	0x0800a307

08009de4 <_raise_r>:
 8009de4:	291f      	cmp	r1, #31
 8009de6:	b538      	push	{r3, r4, r5, lr}
 8009de8:	4605      	mov	r5, r0
 8009dea:	460c      	mov	r4, r1
 8009dec:	d904      	bls.n	8009df8 <_raise_r+0x14>
 8009dee:	2316      	movs	r3, #22
 8009df0:	6003      	str	r3, [r0, #0]
 8009df2:	f04f 30ff 	mov.w	r0, #4294967295
 8009df6:	bd38      	pop	{r3, r4, r5, pc}
 8009df8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009dfa:	b112      	cbz	r2, 8009e02 <_raise_r+0x1e>
 8009dfc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e00:	b94b      	cbnz	r3, 8009e16 <_raise_r+0x32>
 8009e02:	4628      	mov	r0, r5
 8009e04:	f000 f830 	bl	8009e68 <_getpid_r>
 8009e08:	4622      	mov	r2, r4
 8009e0a:	4601      	mov	r1, r0
 8009e0c:	4628      	mov	r0, r5
 8009e0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e12:	f000 b817 	b.w	8009e44 <_kill_r>
 8009e16:	2b01      	cmp	r3, #1
 8009e18:	d00a      	beq.n	8009e30 <_raise_r+0x4c>
 8009e1a:	1c59      	adds	r1, r3, #1
 8009e1c:	d103      	bne.n	8009e26 <_raise_r+0x42>
 8009e1e:	2316      	movs	r3, #22
 8009e20:	6003      	str	r3, [r0, #0]
 8009e22:	2001      	movs	r0, #1
 8009e24:	e7e7      	b.n	8009df6 <_raise_r+0x12>
 8009e26:	2100      	movs	r1, #0
 8009e28:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009e2c:	4620      	mov	r0, r4
 8009e2e:	4798      	blx	r3
 8009e30:	2000      	movs	r0, #0
 8009e32:	e7e0      	b.n	8009df6 <_raise_r+0x12>

08009e34 <raise>:
 8009e34:	4b02      	ldr	r3, [pc, #8]	@ (8009e40 <raise+0xc>)
 8009e36:	4601      	mov	r1, r0
 8009e38:	6818      	ldr	r0, [r3, #0]
 8009e3a:	f7ff bfd3 	b.w	8009de4 <_raise_r>
 8009e3e:	bf00      	nop
 8009e40:	20000018 	.word	0x20000018

08009e44 <_kill_r>:
 8009e44:	b538      	push	{r3, r4, r5, lr}
 8009e46:	4d07      	ldr	r5, [pc, #28]	@ (8009e64 <_kill_r+0x20>)
 8009e48:	2300      	movs	r3, #0
 8009e4a:	4604      	mov	r4, r0
 8009e4c:	4608      	mov	r0, r1
 8009e4e:	4611      	mov	r1, r2
 8009e50:	602b      	str	r3, [r5, #0]
 8009e52:	f7f7 fbe8 	bl	8001626 <_kill>
 8009e56:	1c43      	adds	r3, r0, #1
 8009e58:	d102      	bne.n	8009e60 <_kill_r+0x1c>
 8009e5a:	682b      	ldr	r3, [r5, #0]
 8009e5c:	b103      	cbz	r3, 8009e60 <_kill_r+0x1c>
 8009e5e:	6023      	str	r3, [r4, #0]
 8009e60:	bd38      	pop	{r3, r4, r5, pc}
 8009e62:	bf00      	nop
 8009e64:	20000440 	.word	0x20000440

08009e68 <_getpid_r>:
 8009e68:	f7f7 bbd5 	b.w	8001616 <_getpid>

08009e6c <_init>:
 8009e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e6e:	bf00      	nop
 8009e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e72:	bc08      	pop	{r3}
 8009e74:	469e      	mov	lr, r3
 8009e76:	4770      	bx	lr

08009e78 <_fini>:
 8009e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e7a:	bf00      	nop
 8009e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e7e:	bc08      	pop	{r3}
 8009e80:	469e      	mov	lr, r3
 8009e82:	4770      	bx	lr
