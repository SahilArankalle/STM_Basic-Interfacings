
uart_string_print.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000843c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  080085d0  080085d0  000095d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008aa8  08008aa8  0000a1ec  2**0
                  CONTENTS
  4 .ARM          00000008  08008aa8  08008aa8  00009aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ab0  08008ab0  0000a1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ab0  08008ab0  00009ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008ab4  08008ab4  00009ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  08008ab8  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  200001ec  08008ca4  0000a1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003e4  08008ca4  0000a3e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa3d  00000000  00000000  0000a21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019e6  00000000  00000000  00014c59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  00016640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000734  00000000  00000000  00016fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000266ae  00000000  00000000  000176ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b701  00000000  00000000  0003dd9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e946c  00000000  00000000  0004949b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00132907  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b60  00000000  00000000  0013294c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001364ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080085b4 	.word	0x080085b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	080085b4 	.word	0x080085b4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe8:	f000 faf8 	bl	80015dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fec:	f000 f844 	bl	8001078 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff0:	f000 f8c4 	bl	800117c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ff4:	f000 f892 	bl	800111c <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  printf("the integer value is = %d\r\n",val1);
 8000ff8:	4b17      	ldr	r3, [pc, #92]	@ (8001058 <main+0x74>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4817      	ldr	r0, [pc, #92]	@ (800105c <main+0x78>)
 8001000:	f003 fe2c 	bl	8004c5c <iprintf>
	  HAL_Delay(100);
 8001004:	2064      	movs	r0, #100	@ 0x64
 8001006:	f000 fb65 	bl	80016d4 <HAL_Delay>
	  printf("the integer value is = %f",val2);
 800100a:	4b15      	ldr	r3, [pc, #84]	@ (8001060 <main+0x7c>)
 800100c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001010:	4814      	ldr	r0, [pc, #80]	@ (8001064 <main+0x80>)
 8001012:	f003 fe23 	bl	8004c5c <iprintf>
	  printf("\r\n");
 8001016:	4814      	ldr	r0, [pc, #80]	@ (8001068 <main+0x84>)
 8001018:	f003 fe88 	bl	8004d2c <puts>
	  HAL_Delay(100);
 800101c:	2064      	movs	r0, #100	@ 0x64
 800101e:	f000 fb59 	bl	80016d4 <HAL_Delay>
	  printf("My name is = %s",val3);
 8001022:	4912      	ldr	r1, [pc, #72]	@ (800106c <main+0x88>)
 8001024:	4812      	ldr	r0, [pc, #72]	@ (8001070 <main+0x8c>)
 8001026:	f003 fe19 	bl	8004c5c <iprintf>
	  printf("\r\n");
 800102a:	480f      	ldr	r0, [pc, #60]	@ (8001068 <main+0x84>)
 800102c:	f003 fe7e 	bl	8004d2c <puts>
	  HAL_Delay(100);
 8001030:	2064      	movs	r0, #100	@ 0x64
 8001032:	f000 fb4f 	bl	80016d4 <HAL_Delay>
	  printf(__io_putchar("My name is chikki"));
 8001036:	4b0f      	ldr	r3, [pc, #60]	@ (8001074 <main+0x90>)
 8001038:	4618      	mov	r0, r3
 800103a:	f000 f905 	bl	8001248 <__io_putchar>
 800103e:	4603      	mov	r3, r0
 8001040:	4618      	mov	r0, r3
 8001042:	f003 fe0b 	bl	8004c5c <iprintf>
	  printf("\r\n");
 8001046:	4808      	ldr	r0, [pc, #32]	@ (8001068 <main+0x84>)
 8001048:	f003 fe70 	bl	8004d2c <puts>
	  HAL_Delay(100);
 800104c:	2064      	movs	r0, #100	@ 0x64
 800104e:	f000 fb41 	bl	80016d4 <HAL_Delay>
	  printf("the integer value is = %d\r\n",val1);
 8001052:	bf00      	nop
 8001054:	e7d0      	b.n	8000ff8 <main+0x14>
 8001056:	bf00      	nop
 8001058:	20000000 	.word	0x20000000
 800105c:	080085d0 	.word	0x080085d0
 8001060:	20000008 	.word	0x20000008
 8001064:	080085ec 	.word	0x080085ec
 8001068:	08008608 	.word	0x08008608
 800106c:	20000010 	.word	0x20000010
 8001070:	0800860c 	.word	0x0800860c
 8001074:	0800861c 	.word	0x0800861c

08001078 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b096      	sub	sp, #88	@ 0x58
 800107c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	2244      	movs	r2, #68	@ 0x44
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f003 ff50 	bl	8004f2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800108c:	463b      	mov	r3, r7
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
 8001098:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800109a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800109e:	f000 fdf3 	bl	8001c88 <HAL_PWREx_ControlVoltageScaling>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010a8:	f000 f8e0 	bl	800126c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010ac:	2302      	movs	r3, #2
 80010ae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010b6:	2310      	movs	r3, #16
 80010b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ba:	2302      	movs	r3, #2
 80010bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010be:	2302      	movs	r3, #2
 80010c0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010c2:	2301      	movs	r3, #1
 80010c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80010c6:	230a      	movs	r3, #10
 80010c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010ca:	2307      	movs	r3, #7
 80010cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010ce:	2302      	movs	r3, #2
 80010d0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010d2:	2302      	movs	r3, #2
 80010d4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 fe2a 	bl	8001d34 <HAL_RCC_OscConfig>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <SystemClock_Config+0x72>
  {
    Error_Handler();
 80010e6:	f000 f8c1 	bl	800126c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ea:	230f      	movs	r3, #15
 80010ec:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ee:	2303      	movs	r3, #3
 80010f0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010fe:	463b      	mov	r3, r7
 8001100:	2104      	movs	r1, #4
 8001102:	4618      	mov	r0, r3
 8001104:	f001 f9f2 	bl	80024ec <HAL_RCC_ClockConfig>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800110e:	f000 f8ad 	bl	800126c <Error_Handler>
  }
}
 8001112:	bf00      	nop
 8001114:	3758      	adds	r7, #88	@ 0x58
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001120:	4b14      	ldr	r3, [pc, #80]	@ (8001174 <MX_USART2_UART_Init+0x58>)
 8001122:	4a15      	ldr	r2, [pc, #84]	@ (8001178 <MX_USART2_UART_Init+0x5c>)
 8001124:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001126:	4b13      	ldr	r3, [pc, #76]	@ (8001174 <MX_USART2_UART_Init+0x58>)
 8001128:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800112c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800112e:	4b11      	ldr	r3, [pc, #68]	@ (8001174 <MX_USART2_UART_Init+0x58>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001134:	4b0f      	ldr	r3, [pc, #60]	@ (8001174 <MX_USART2_UART_Init+0x58>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800113a:	4b0e      	ldr	r3, [pc, #56]	@ (8001174 <MX_USART2_UART_Init+0x58>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001140:	4b0c      	ldr	r3, [pc, #48]	@ (8001174 <MX_USART2_UART_Init+0x58>)
 8001142:	220c      	movs	r2, #12
 8001144:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001146:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <MX_USART2_UART_Init+0x58>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800114c:	4b09      	ldr	r3, [pc, #36]	@ (8001174 <MX_USART2_UART_Init+0x58>)
 800114e:	2200      	movs	r2, #0
 8001150:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001152:	4b08      	ldr	r3, [pc, #32]	@ (8001174 <MX_USART2_UART_Init+0x58>)
 8001154:	2200      	movs	r2, #0
 8001156:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001158:	4b06      	ldr	r3, [pc, #24]	@ (8001174 <MX_USART2_UART_Init+0x58>)
 800115a:	2200      	movs	r2, #0
 800115c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800115e:	4805      	ldr	r0, [pc, #20]	@ (8001174 <MX_USART2_UART_Init+0x58>)
 8001160:	f002 f8a4 	bl	80032ac <HAL_UART_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800116a:	f000 f87f 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000208 	.word	0x20000208
 8001178:	40004400 	.word	0x40004400

0800117c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	@ 0x28
 8001180:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001192:	4b2b      	ldr	r3, [pc, #172]	@ (8001240 <MX_GPIO_Init+0xc4>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001196:	4a2a      	ldr	r2, [pc, #168]	@ (8001240 <MX_GPIO_Init+0xc4>)
 8001198:	f043 0304 	orr.w	r3, r3, #4
 800119c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800119e:	4b28      	ldr	r3, [pc, #160]	@ (8001240 <MX_GPIO_Init+0xc4>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a2:	f003 0304 	and.w	r3, r3, #4
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011aa:	4b25      	ldr	r3, [pc, #148]	@ (8001240 <MX_GPIO_Init+0xc4>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ae:	4a24      	ldr	r2, [pc, #144]	@ (8001240 <MX_GPIO_Init+0xc4>)
 80011b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011b6:	4b22      	ldr	r3, [pc, #136]	@ (8001240 <MX_GPIO_Init+0xc4>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001240 <MX_GPIO_Init+0xc4>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c6:	4a1e      	ldr	r2, [pc, #120]	@ (8001240 <MX_GPIO_Init+0xc4>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001240 <MX_GPIO_Init+0xc4>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011da:	4b19      	ldr	r3, [pc, #100]	@ (8001240 <MX_GPIO_Init+0xc4>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011de:	4a18      	ldr	r2, [pc, #96]	@ (8001240 <MX_GPIO_Init+0xc4>)
 80011e0:	f043 0302 	orr.w	r3, r3, #2
 80011e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e6:	4b16      	ldr	r3, [pc, #88]	@ (8001240 <MX_GPIO_Init+0xc4>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2120      	movs	r1, #32
 80011f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011fa:	f000 fd1f 	bl	8001c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001202:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001204:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	4619      	mov	r1, r3
 8001214:	480b      	ldr	r0, [pc, #44]	@ (8001244 <MX_GPIO_Init+0xc8>)
 8001216:	f000 fb67 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800121a:	2320      	movs	r3, #32
 800121c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121e:	2301      	movs	r3, #1
 8001220:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800122a:	f107 0314 	add.w	r3, r7, #20
 800122e:	4619      	mov	r1, r3
 8001230:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001234:	f000 fb58 	bl	80018e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001238:	bf00      	nop
 800123a:	3728      	adds	r7, #40	@ 0x28
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40021000 	.word	0x40021000
 8001244:	48000800 	.word	0x48000800

08001248 <__io_putchar>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */

int __io_putchar(int ch){
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001250:	1d39      	adds	r1, r7, #4
 8001252:	f04f 33ff 	mov.w	r3, #4294967295
 8001256:	2201      	movs	r2, #1
 8001258:	4803      	ldr	r0, [pc, #12]	@ (8001268 <__io_putchar+0x20>)
 800125a:	f002 f875 	bl	8003348 <HAL_UART_Transmit>
	return ch;
 800125e:	687b      	ldr	r3, [r7, #4]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000208 	.word	0x20000208

0800126c <Error_Handler>:


void Error_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001270:	b672      	cpsid	i
}
 8001272:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001274:	bf00      	nop
 8001276:	e7fd      	b.n	8001274 <Error_Handler+0x8>

08001278 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127e:	4b0f      	ldr	r3, [pc, #60]	@ (80012bc <HAL_MspInit+0x44>)
 8001280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001282:	4a0e      	ldr	r2, [pc, #56]	@ (80012bc <HAL_MspInit+0x44>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6613      	str	r3, [r2, #96]	@ 0x60
 800128a:	4b0c      	ldr	r3, [pc, #48]	@ (80012bc <HAL_MspInit+0x44>)
 800128c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001296:	4b09      	ldr	r3, [pc, #36]	@ (80012bc <HAL_MspInit+0x44>)
 8001298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800129a:	4a08      	ldr	r2, [pc, #32]	@ (80012bc <HAL_MspInit+0x44>)
 800129c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80012a2:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <HAL_MspInit+0x44>)
 80012a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012aa:	603b      	str	r3, [r7, #0]
 80012ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	40021000 	.word	0x40021000

080012c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b0ac      	sub	sp, #176	@ 0xb0
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	2288      	movs	r2, #136	@ 0x88
 80012de:	2100      	movs	r1, #0
 80012e0:	4618      	mov	r0, r3
 80012e2:	f003 fe23 	bl	8004f2c <memset>
  if(huart->Instance==USART2)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a21      	ldr	r2, [pc, #132]	@ (8001370 <HAL_UART_MspInit+0xb0>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d13b      	bne.n	8001368 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80012f0:	2302      	movs	r3, #2
 80012f2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012f4:	2300      	movs	r3, #0
 80012f6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	4618      	mov	r0, r3
 80012fe:	f001 fb19 	bl	8002934 <HAL_RCCEx_PeriphCLKConfig>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001308:	f7ff ffb0 	bl	800126c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800130c:	4b19      	ldr	r3, [pc, #100]	@ (8001374 <HAL_UART_MspInit+0xb4>)
 800130e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001310:	4a18      	ldr	r2, [pc, #96]	@ (8001374 <HAL_UART_MspInit+0xb4>)
 8001312:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001316:	6593      	str	r3, [r2, #88]	@ 0x58
 8001318:	4b16      	ldr	r3, [pc, #88]	@ (8001374 <HAL_UART_MspInit+0xb4>)
 800131a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800131c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001324:	4b13      	ldr	r3, [pc, #76]	@ (8001374 <HAL_UART_MspInit+0xb4>)
 8001326:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001328:	4a12      	ldr	r2, [pc, #72]	@ (8001374 <HAL_UART_MspInit+0xb4>)
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001330:	4b10      	ldr	r3, [pc, #64]	@ (8001374 <HAL_UART_MspInit+0xb4>)
 8001332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001334:	f003 0301 	and.w	r3, r3, #1
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800133c:	230c      	movs	r3, #12
 800133e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001342:	2302      	movs	r3, #2
 8001344:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134e:	2303      	movs	r3, #3
 8001350:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001354:	2307      	movs	r3, #7
 8001356:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800135e:	4619      	mov	r1, r3
 8001360:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001364:	f000 fac0 	bl	80018e8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001368:	bf00      	nop
 800136a:	37b0      	adds	r7, #176	@ 0xb0
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40004400 	.word	0x40004400
 8001374:	40021000 	.word	0x40021000

08001378 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <NMI_Handler+0x4>

08001380 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001384:	bf00      	nop
 8001386:	e7fd      	b.n	8001384 <HardFault_Handler+0x4>

08001388 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800138c:	bf00      	nop
 800138e:	e7fd      	b.n	800138c <MemManage_Handler+0x4>

08001390 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <BusFault_Handler+0x4>

08001398 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800139c:	bf00      	nop
 800139e:	e7fd      	b.n	800139c <UsageFault_Handler+0x4>

080013a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ce:	f000 f961 	bl	8001694 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0
  return 1;
 80013da:	2301      	movs	r3, #1
}
 80013dc:	4618      	mov	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <_kill>:

int _kill(int pid, int sig)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
 80013ee:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013f0:	f003 fdee 	bl	8004fd0 <__errno>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2216      	movs	r2, #22
 80013f8:	601a      	str	r2, [r3, #0]
  return -1;
 80013fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <_exit>:

void _exit (int status)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800140e:	f04f 31ff 	mov.w	r1, #4294967295
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff ffe7 	bl	80013e6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <_exit+0x12>

0800141c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	e00a      	b.n	8001444 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800142e:	f3af 8000 	nop.w
 8001432:	4601      	mov	r1, r0
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	1c5a      	adds	r2, r3, #1
 8001438:	60ba      	str	r2, [r7, #8]
 800143a:	b2ca      	uxtb	r2, r1
 800143c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	3301      	adds	r3, #1
 8001442:	617b      	str	r3, [r7, #20]
 8001444:	697a      	ldr	r2, [r7, #20]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	429a      	cmp	r2, r3
 800144a:	dbf0      	blt.n	800142e <_read+0x12>
  }

  return len;
 800144c:	687b      	ldr	r3, [r7, #4]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b086      	sub	sp, #24
 800145a:	af00      	add	r7, sp, #0
 800145c:	60f8      	str	r0, [r7, #12]
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	e009      	b.n	800147c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	1c5a      	adds	r2, r3, #1
 800146c:	60ba      	str	r2, [r7, #8]
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff fee9 	bl	8001248 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	3301      	adds	r3, #1
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	697a      	ldr	r2, [r7, #20]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	429a      	cmp	r2, r3
 8001482:	dbf1      	blt.n	8001468 <_write+0x12>
  }
  return len;
 8001484:	687b      	ldr	r3, [r7, #4]
}
 8001486:	4618      	mov	r0, r3
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <_close>:

int _close(int file)
{
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001496:	f04f 33ff 	mov.w	r3, #4294967295
}
 800149a:	4618      	mov	r0, r3
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
 80014ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014b6:	605a      	str	r2, [r3, #4]
  return 0;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <_isatty>:

int _isatty(int file)
{
 80014c6:	b480      	push	{r7}
 80014c8:	b083      	sub	sp, #12
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014ce:	2301      	movs	r3, #1
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
	...

080014f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001500:	4a14      	ldr	r2, [pc, #80]	@ (8001554 <_sbrk+0x5c>)
 8001502:	4b15      	ldr	r3, [pc, #84]	@ (8001558 <_sbrk+0x60>)
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800150c:	4b13      	ldr	r3, [pc, #76]	@ (800155c <_sbrk+0x64>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001514:	4b11      	ldr	r3, [pc, #68]	@ (800155c <_sbrk+0x64>)
 8001516:	4a12      	ldr	r2, [pc, #72]	@ (8001560 <_sbrk+0x68>)
 8001518:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800151a:	4b10      	ldr	r3, [pc, #64]	@ (800155c <_sbrk+0x64>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4413      	add	r3, r2
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	429a      	cmp	r2, r3
 8001526:	d207      	bcs.n	8001538 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001528:	f003 fd52 	bl	8004fd0 <__errno>
 800152c:	4603      	mov	r3, r0
 800152e:	220c      	movs	r2, #12
 8001530:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001532:	f04f 33ff 	mov.w	r3, #4294967295
 8001536:	e009      	b.n	800154c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001538:	4b08      	ldr	r3, [pc, #32]	@ (800155c <_sbrk+0x64>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800153e:	4b07      	ldr	r3, [pc, #28]	@ (800155c <_sbrk+0x64>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4413      	add	r3, r2
 8001546:	4a05      	ldr	r2, [pc, #20]	@ (800155c <_sbrk+0x64>)
 8001548:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800154a:	68fb      	ldr	r3, [r7, #12]
}
 800154c:	4618      	mov	r0, r3
 800154e:	3718      	adds	r7, #24
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20018000 	.word	0x20018000
 8001558:	00000400 	.word	0x00000400
 800155c:	20000290 	.word	0x20000290
 8001560:	200003e8 	.word	0x200003e8

08001564 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001568:	4b06      	ldr	r3, [pc, #24]	@ (8001584 <SystemInit+0x20>)
 800156a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800156e:	4a05      	ldr	r2, [pc, #20]	@ (8001584 <SystemInit+0x20>)
 8001570:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001574:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001588:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800158c:	f7ff ffea 	bl	8001564 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001590:	480c      	ldr	r0, [pc, #48]	@ (80015c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001592:	490d      	ldr	r1, [pc, #52]	@ (80015c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001594:	4a0d      	ldr	r2, [pc, #52]	@ (80015cc <LoopForever+0xe>)
  movs r3, #0
 8001596:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001598:	e002      	b.n	80015a0 <LoopCopyDataInit>

0800159a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800159a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800159c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800159e:	3304      	adds	r3, #4

080015a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a4:	d3f9      	bcc.n	800159a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015a6:	4a0a      	ldr	r2, [pc, #40]	@ (80015d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015a8:	4c0a      	ldr	r4, [pc, #40]	@ (80015d4 <LoopForever+0x16>)
  movs r3, #0
 80015aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015ac:	e001      	b.n	80015b2 <LoopFillZerobss>

080015ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b0:	3204      	adds	r2, #4

080015b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b4:	d3fb      	bcc.n	80015ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015b6:	f003 fd11 	bl	8004fdc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015ba:	f7ff fd13 	bl	8000fe4 <main>

080015be <LoopForever>:

LoopForever:
    b LoopForever
 80015be:	e7fe      	b.n	80015be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c8:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80015cc:	08008ab8 	.word	0x08008ab8
  ldr r2, =_sbss
 80015d0:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80015d4:	200003e4 	.word	0x200003e4

080015d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015d8:	e7fe      	b.n	80015d8 <ADC1_2_IRQHandler>
	...

080015dc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015e2:	2300      	movs	r3, #0
 80015e4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001618 <HAL_Init+0x3c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a0b      	ldr	r2, [pc, #44]	@ (8001618 <HAL_Init+0x3c>)
 80015ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015f0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f2:	2003      	movs	r0, #3
 80015f4:	f000 f944 	bl	8001880 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015f8:	2000      	movs	r0, #0
 80015fa:	f000 f80f 	bl	800161c <HAL_InitTick>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d002      	beq.n	800160a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	71fb      	strb	r3, [r7, #7]
 8001608:	e001      	b.n	800160e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800160a:	f7ff fe35 	bl	8001278 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800160e:	79fb      	ldrb	r3, [r7, #7]
}
 8001610:	4618      	mov	r0, r3
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40022000 	.word	0x40022000

0800161c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001624:	2300      	movs	r3, #0
 8001626:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001628:	4b17      	ldr	r3, [pc, #92]	@ (8001688 <HAL_InitTick+0x6c>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d023      	beq.n	8001678 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001630:	4b16      	ldr	r3, [pc, #88]	@ (800168c <HAL_InitTick+0x70>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4b14      	ldr	r3, [pc, #80]	@ (8001688 <HAL_InitTick+0x6c>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	4619      	mov	r1, r3
 800163a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800163e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001642:	fbb2 f3f3 	udiv	r3, r2, r3
 8001646:	4618      	mov	r0, r3
 8001648:	f000 f941 	bl	80018ce <HAL_SYSTICK_Config>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d10f      	bne.n	8001672 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b0f      	cmp	r3, #15
 8001656:	d809      	bhi.n	800166c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001658:	2200      	movs	r2, #0
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	f04f 30ff 	mov.w	r0, #4294967295
 8001660:	f000 f919 	bl	8001896 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001664:	4a0a      	ldr	r2, [pc, #40]	@ (8001690 <HAL_InitTick+0x74>)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	e007      	b.n	800167c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	73fb      	strb	r3, [r7, #15]
 8001670:	e004      	b.n	800167c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	73fb      	strb	r3, [r7, #15]
 8001676:	e001      	b.n	800167c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800167c:	7bfb      	ldrb	r3, [r7, #15]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000020 	.word	0x20000020
 800168c:	20000018 	.word	0x20000018
 8001690:	2000001c 	.word	0x2000001c

08001694 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001698:	4b06      	ldr	r3, [pc, #24]	@ (80016b4 <HAL_IncTick+0x20>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	461a      	mov	r2, r3
 800169e:	4b06      	ldr	r3, [pc, #24]	@ (80016b8 <HAL_IncTick+0x24>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4413      	add	r3, r2
 80016a4:	4a04      	ldr	r2, [pc, #16]	@ (80016b8 <HAL_IncTick+0x24>)
 80016a6:	6013      	str	r3, [r2, #0]
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	20000020 	.word	0x20000020
 80016b8:	20000294 	.word	0x20000294

080016bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return uwTick;
 80016c0:	4b03      	ldr	r3, [pc, #12]	@ (80016d0 <HAL_GetTick+0x14>)
 80016c2:	681b      	ldr	r3, [r3, #0]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	20000294 	.word	0x20000294

080016d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016dc:	f7ff ffee 	bl	80016bc <HAL_GetTick>
 80016e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ec:	d005      	beq.n	80016fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80016ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001718 <HAL_Delay+0x44>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	461a      	mov	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4413      	add	r3, r2
 80016f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016fa:	bf00      	nop
 80016fc:	f7ff ffde 	bl	80016bc <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	429a      	cmp	r2, r3
 800170a:	d8f7      	bhi.n	80016fc <HAL_Delay+0x28>
  {
  }
}
 800170c:	bf00      	nop
 800170e:	bf00      	nop
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000020 	.word	0x20000020

0800171c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800172c:	4b0c      	ldr	r3, [pc, #48]	@ (8001760 <__NVIC_SetPriorityGrouping+0x44>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001738:	4013      	ands	r3, r2
 800173a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001744:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001748:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800174c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800174e:	4a04      	ldr	r2, [pc, #16]	@ (8001760 <__NVIC_SetPriorityGrouping+0x44>)
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	60d3      	str	r3, [r2, #12]
}
 8001754:	bf00      	nop
 8001756:	3714      	adds	r7, #20
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001768:	4b04      	ldr	r3, [pc, #16]	@ (800177c <__NVIC_GetPriorityGrouping+0x18>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	0a1b      	lsrs	r3, r3, #8
 800176e:	f003 0307 	and.w	r3, r3, #7
}
 8001772:	4618      	mov	r0, r3
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	6039      	str	r1, [r7, #0]
 800178a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800178c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001790:	2b00      	cmp	r3, #0
 8001792:	db0a      	blt.n	80017aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	b2da      	uxtb	r2, r3
 8001798:	490c      	ldr	r1, [pc, #48]	@ (80017cc <__NVIC_SetPriority+0x4c>)
 800179a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179e:	0112      	lsls	r2, r2, #4
 80017a0:	b2d2      	uxtb	r2, r2
 80017a2:	440b      	add	r3, r1
 80017a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a8:	e00a      	b.n	80017c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	4908      	ldr	r1, [pc, #32]	@ (80017d0 <__NVIC_SetPriority+0x50>)
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	f003 030f 	and.w	r3, r3, #15
 80017b6:	3b04      	subs	r3, #4
 80017b8:	0112      	lsls	r2, r2, #4
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	440b      	add	r3, r1
 80017be:	761a      	strb	r2, [r3, #24]
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	e000e100 	.word	0xe000e100
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b089      	sub	sp, #36	@ 0x24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	f1c3 0307 	rsb	r3, r3, #7
 80017ee:	2b04      	cmp	r3, #4
 80017f0:	bf28      	it	cs
 80017f2:	2304      	movcs	r3, #4
 80017f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	3304      	adds	r3, #4
 80017fa:	2b06      	cmp	r3, #6
 80017fc:	d902      	bls.n	8001804 <NVIC_EncodePriority+0x30>
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	3b03      	subs	r3, #3
 8001802:	e000      	b.n	8001806 <NVIC_EncodePriority+0x32>
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001808:	f04f 32ff 	mov.w	r2, #4294967295
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43da      	mvns	r2, r3
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	401a      	ands	r2, r3
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800181c:	f04f 31ff 	mov.w	r1, #4294967295
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	fa01 f303 	lsl.w	r3, r1, r3
 8001826:	43d9      	mvns	r1, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800182c:	4313      	orrs	r3, r2
         );
}
 800182e:	4618      	mov	r0, r3
 8001830:	3724      	adds	r7, #36	@ 0x24
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
	...

0800183c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3b01      	subs	r3, #1
 8001848:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800184c:	d301      	bcc.n	8001852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800184e:	2301      	movs	r3, #1
 8001850:	e00f      	b.n	8001872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001852:	4a0a      	ldr	r2, [pc, #40]	@ (800187c <SysTick_Config+0x40>)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3b01      	subs	r3, #1
 8001858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800185a:	210f      	movs	r1, #15
 800185c:	f04f 30ff 	mov.w	r0, #4294967295
 8001860:	f7ff ff8e 	bl	8001780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001864:	4b05      	ldr	r3, [pc, #20]	@ (800187c <SysTick_Config+0x40>)
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800186a:	4b04      	ldr	r3, [pc, #16]	@ (800187c <SysTick_Config+0x40>)
 800186c:	2207      	movs	r2, #7
 800186e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	e000e010 	.word	0xe000e010

08001880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff ff47 	bl	800171c <__NVIC_SetPriorityGrouping>
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b086      	sub	sp, #24
 800189a:	af00      	add	r7, sp, #0
 800189c:	4603      	mov	r3, r0
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
 80018a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018a8:	f7ff ff5c 	bl	8001764 <__NVIC_GetPriorityGrouping>
 80018ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	68b9      	ldr	r1, [r7, #8]
 80018b2:	6978      	ldr	r0, [r7, #20]
 80018b4:	f7ff ff8e 	bl	80017d4 <NVIC_EncodePriority>
 80018b8:	4602      	mov	r2, r0
 80018ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018be:	4611      	mov	r1, r2
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ff5d 	bl	8001780 <__NVIC_SetPriority>
}
 80018c6:	bf00      	nop
 80018c8:	3718      	adds	r7, #24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff ffb0 	bl	800183c <SysTick_Config>
 80018dc:	4603      	mov	r3, r0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
	...

080018e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b087      	sub	sp, #28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018f6:	e17f      	b.n	8001bf8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	2101      	movs	r1, #1
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	fa01 f303 	lsl.w	r3, r1, r3
 8001904:	4013      	ands	r3, r2
 8001906:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2b00      	cmp	r3, #0
 800190c:	f000 8171 	beq.w	8001bf2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f003 0303 	and.w	r3, r3, #3
 8001918:	2b01      	cmp	r3, #1
 800191a:	d005      	beq.n	8001928 <HAL_GPIO_Init+0x40>
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 0303 	and.w	r3, r3, #3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d130      	bne.n	800198a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	2203      	movs	r2, #3
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	68da      	ldr	r2, [r3, #12]
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	4313      	orrs	r3, r2
 8001950:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800195e:	2201      	movs	r2, #1
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	4013      	ands	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	091b      	lsrs	r3, r3, #4
 8001974:	f003 0201 	and.w	r2, r3, #1
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	4313      	orrs	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	2b03      	cmp	r3, #3
 8001994:	d118      	bne.n	80019c8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800199a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800199c:	2201      	movs	r2, #1
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	4013      	ands	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	08db      	lsrs	r3, r3, #3
 80019b2:	f003 0201 	and.w	r2, r3, #1
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	4313      	orrs	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 0303 	and.w	r3, r3, #3
 80019d0:	2b03      	cmp	r3, #3
 80019d2:	d017      	beq.n	8001a04 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	2203      	movs	r2, #3
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	4013      	ands	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 0303 	and.w	r3, r3, #3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d123      	bne.n	8001a58 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	08da      	lsrs	r2, r3, #3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3208      	adds	r2, #8
 8001a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	220f      	movs	r2, #15
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	4013      	ands	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	691a      	ldr	r2, [r3, #16]
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	08da      	lsrs	r2, r3, #3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	3208      	adds	r2, #8
 8001a52:	6939      	ldr	r1, [r7, #16]
 8001a54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	2203      	movs	r2, #3
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 0203 	and.w	r2, r3, #3
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f000 80ac 	beq.w	8001bf2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9a:	4b5f      	ldr	r3, [pc, #380]	@ (8001c18 <HAL_GPIO_Init+0x330>)
 8001a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a9e:	4a5e      	ldr	r2, [pc, #376]	@ (8001c18 <HAL_GPIO_Init+0x330>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001aa6:	4b5c      	ldr	r3, [pc, #368]	@ (8001c18 <HAL_GPIO_Init+0x330>)
 8001aa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ab2:	4a5a      	ldr	r2, [pc, #360]	@ (8001c1c <HAL_GPIO_Init+0x334>)
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	089b      	lsrs	r3, r3, #2
 8001ab8:	3302      	adds	r3, #2
 8001aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001abe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	220f      	movs	r2, #15
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001adc:	d025      	beq.n	8001b2a <HAL_GPIO_Init+0x242>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a4f      	ldr	r2, [pc, #316]	@ (8001c20 <HAL_GPIO_Init+0x338>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d01f      	beq.n	8001b26 <HAL_GPIO_Init+0x23e>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a4e      	ldr	r2, [pc, #312]	@ (8001c24 <HAL_GPIO_Init+0x33c>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d019      	beq.n	8001b22 <HAL_GPIO_Init+0x23a>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a4d      	ldr	r2, [pc, #308]	@ (8001c28 <HAL_GPIO_Init+0x340>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d013      	beq.n	8001b1e <HAL_GPIO_Init+0x236>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a4c      	ldr	r2, [pc, #304]	@ (8001c2c <HAL_GPIO_Init+0x344>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d00d      	beq.n	8001b1a <HAL_GPIO_Init+0x232>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a4b      	ldr	r2, [pc, #300]	@ (8001c30 <HAL_GPIO_Init+0x348>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d007      	beq.n	8001b16 <HAL_GPIO_Init+0x22e>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a4a      	ldr	r2, [pc, #296]	@ (8001c34 <HAL_GPIO_Init+0x34c>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d101      	bne.n	8001b12 <HAL_GPIO_Init+0x22a>
 8001b0e:	2306      	movs	r3, #6
 8001b10:	e00c      	b.n	8001b2c <HAL_GPIO_Init+0x244>
 8001b12:	2307      	movs	r3, #7
 8001b14:	e00a      	b.n	8001b2c <HAL_GPIO_Init+0x244>
 8001b16:	2305      	movs	r3, #5
 8001b18:	e008      	b.n	8001b2c <HAL_GPIO_Init+0x244>
 8001b1a:	2304      	movs	r3, #4
 8001b1c:	e006      	b.n	8001b2c <HAL_GPIO_Init+0x244>
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e004      	b.n	8001b2c <HAL_GPIO_Init+0x244>
 8001b22:	2302      	movs	r3, #2
 8001b24:	e002      	b.n	8001b2c <HAL_GPIO_Init+0x244>
 8001b26:	2301      	movs	r3, #1
 8001b28:	e000      	b.n	8001b2c <HAL_GPIO_Init+0x244>
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	f002 0203 	and.w	r2, r2, #3
 8001b32:	0092      	lsls	r2, r2, #2
 8001b34:	4093      	lsls	r3, r2
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b3c:	4937      	ldr	r1, [pc, #220]	@ (8001c1c <HAL_GPIO_Init+0x334>)
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	089b      	lsrs	r3, r3, #2
 8001b42:	3302      	adds	r3, #2
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b4a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c38 <HAL_GPIO_Init+0x350>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	43db      	mvns	r3, r3
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	4013      	ands	r3, r2
 8001b58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b6e:	4a32      	ldr	r2, [pc, #200]	@ (8001c38 <HAL_GPIO_Init+0x350>)
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b74:	4b30      	ldr	r3, [pc, #192]	@ (8001c38 <HAL_GPIO_Init+0x350>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	4013      	ands	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b98:	4a27      	ldr	r2, [pc, #156]	@ (8001c38 <HAL_GPIO_Init+0x350>)
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b9e:	4b26      	ldr	r3, [pc, #152]	@ (8001c38 <HAL_GPIO_Init+0x350>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	4013      	ands	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bc2:	4a1d      	ldr	r2, [pc, #116]	@ (8001c38 <HAL_GPIO_Init+0x350>)
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c38 <HAL_GPIO_Init+0x350>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bec:	4a12      	ldr	r2, [pc, #72]	@ (8001c38 <HAL_GPIO_Init+0x350>)
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f47f ae78 	bne.w	80018f8 <HAL_GPIO_Init+0x10>
  }
}
 8001c08:	bf00      	nop
 8001c0a:	bf00      	nop
 8001c0c:	371c      	adds	r7, #28
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40010000 	.word	0x40010000
 8001c20:	48000400 	.word	0x48000400
 8001c24:	48000800 	.word	0x48000800
 8001c28:	48000c00 	.word	0x48000c00
 8001c2c:	48001000 	.word	0x48001000
 8001c30:	48001400 	.word	0x48001400
 8001c34:	48001800 	.word	0x48001800
 8001c38:	40010400 	.word	0x40010400

08001c3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	460b      	mov	r3, r1
 8001c46:	807b      	strh	r3, [r7, #2]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c4c:	787b      	ldrb	r3, [r7, #1]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c52:	887a      	ldrh	r2, [r7, #2]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c58:	e002      	b.n	8001c60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c5a:	887a      	ldrh	r2, [r7, #2]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c70:	4b04      	ldr	r3, [pc, #16]	@ (8001c84 <HAL_PWREx_GetVoltageRange+0x18>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	40007000 	.word	0x40007000

08001c88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c96:	d130      	bne.n	8001cfa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c98:	4b23      	ldr	r3, [pc, #140]	@ (8001d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ca0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ca4:	d038      	beq.n	8001d18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ca6:	4b20      	ldr	r3, [pc, #128]	@ (8001d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001cae:	4a1e      	ldr	r2, [pc, #120]	@ (8001d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cb0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cb4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001cb6:	4b1d      	ldr	r3, [pc, #116]	@ (8001d2c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2232      	movs	r2, #50	@ 0x32
 8001cbc:	fb02 f303 	mul.w	r3, r2, r3
 8001cc0:	4a1b      	ldr	r2, [pc, #108]	@ (8001d30 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc6:	0c9b      	lsrs	r3, r3, #18
 8001cc8:	3301      	adds	r3, #1
 8001cca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ccc:	e002      	b.n	8001cd4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cd4:	4b14      	ldr	r3, [pc, #80]	@ (8001d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ce0:	d102      	bne.n	8001ce8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1f2      	bne.n	8001cce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cf0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cf4:	d110      	bne.n	8001d18 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e00f      	b.n	8001d1a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8001d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d06:	d007      	beq.n	8001d18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d08:	4b07      	ldr	r3, [pc, #28]	@ (8001d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d10:	4a05      	ldr	r2, [pc, #20]	@ (8001d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d16:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3714      	adds	r7, #20
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	40007000 	.word	0x40007000
 8001d2c:	20000018 	.word	0x20000018
 8001d30:	431bde83 	.word	0x431bde83

08001d34 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b088      	sub	sp, #32
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e3ca      	b.n	80024dc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d46:	4b97      	ldr	r3, [pc, #604]	@ (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 030c 	and.w	r3, r3, #12
 8001d4e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d50:	4b94      	ldr	r3, [pc, #592]	@ (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	f003 0303 	and.w	r3, r3, #3
 8001d58:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0310 	and.w	r3, r3, #16
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 80e4 	beq.w	8001f30 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d007      	beq.n	8001d7e <HAL_RCC_OscConfig+0x4a>
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	2b0c      	cmp	r3, #12
 8001d72:	f040 808b 	bne.w	8001e8c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	f040 8087 	bne.w	8001e8c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d7e:	4b89      	ldr	r3, [pc, #548]	@ (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d005      	beq.n	8001d96 <HAL_RCC_OscConfig+0x62>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e3a2      	b.n	80024dc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a1a      	ldr	r2, [r3, #32]
 8001d9a:	4b82      	ldr	r3, [pc, #520]	@ (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d004      	beq.n	8001db0 <HAL_RCC_OscConfig+0x7c>
 8001da6:	4b7f      	ldr	r3, [pc, #508]	@ (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001dae:	e005      	b.n	8001dbc <HAL_RCC_OscConfig+0x88>
 8001db0:	4b7c      	ldr	r3, [pc, #496]	@ (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001db6:	091b      	lsrs	r3, r3, #4
 8001db8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d223      	bcs.n	8001e08 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f000 fd55 	bl	8002874 <RCC_SetFlashLatencyFromMSIRange>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e383      	b.n	80024dc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dd4:	4b73      	ldr	r3, [pc, #460]	@ (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a72      	ldr	r2, [pc, #456]	@ (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001dda:	f043 0308 	orr.w	r3, r3, #8
 8001dde:	6013      	str	r3, [r2, #0]
 8001de0:	4b70      	ldr	r3, [pc, #448]	@ (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a1b      	ldr	r3, [r3, #32]
 8001dec:	496d      	ldr	r1, [pc, #436]	@ (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001df2:	4b6c      	ldr	r3, [pc, #432]	@ (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	021b      	lsls	r3, r3, #8
 8001e00:	4968      	ldr	r1, [pc, #416]	@ (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	604b      	str	r3, [r1, #4]
 8001e06:	e025      	b.n	8001e54 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e08:	4b66      	ldr	r3, [pc, #408]	@ (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a65      	ldr	r2, [pc, #404]	@ (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001e0e:	f043 0308 	orr.w	r3, r3, #8
 8001e12:	6013      	str	r3, [r2, #0]
 8001e14:	4b63      	ldr	r3, [pc, #396]	@ (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	4960      	ldr	r1, [pc, #384]	@ (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e26:	4b5f      	ldr	r3, [pc, #380]	@ (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	021b      	lsls	r3, r3, #8
 8001e34:	495b      	ldr	r1, [pc, #364]	@ (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d109      	bne.n	8001e54 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f000 fd15 	bl	8002874 <RCC_SetFlashLatencyFromMSIRange>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e343      	b.n	80024dc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e54:	f000 fc4a 	bl	80026ec <HAL_RCC_GetSysClockFreq>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	4b52      	ldr	r3, [pc, #328]	@ (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	091b      	lsrs	r3, r3, #4
 8001e60:	f003 030f 	and.w	r3, r3, #15
 8001e64:	4950      	ldr	r1, [pc, #320]	@ (8001fa8 <HAL_RCC_OscConfig+0x274>)
 8001e66:	5ccb      	ldrb	r3, [r1, r3]
 8001e68:	f003 031f 	and.w	r3, r3, #31
 8001e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e70:	4a4e      	ldr	r2, [pc, #312]	@ (8001fac <HAL_RCC_OscConfig+0x278>)
 8001e72:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e74:	4b4e      	ldr	r3, [pc, #312]	@ (8001fb0 <HAL_RCC_OscConfig+0x27c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff fbcf 	bl	800161c <HAL_InitTick>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e82:	7bfb      	ldrb	r3, [r7, #15]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d052      	beq.n	8001f2e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001e88:	7bfb      	ldrb	r3, [r7, #15]
 8001e8a:	e327      	b.n	80024dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d032      	beq.n	8001efa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e94:	4b43      	ldr	r3, [pc, #268]	@ (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a42      	ldr	r2, [pc, #264]	@ (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ea0:	f7ff fc0c 	bl	80016bc <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ea8:	f7ff fc08 	bl	80016bc <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e310      	b.n	80024dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001eba:	4b3a      	ldr	r3, [pc, #232]	@ (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d0f0      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ec6:	4b37      	ldr	r3, [pc, #220]	@ (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a36      	ldr	r2, [pc, #216]	@ (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001ecc:	f043 0308 	orr.w	r3, r3, #8
 8001ed0:	6013      	str	r3, [r2, #0]
 8001ed2:	4b34      	ldr	r3, [pc, #208]	@ (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	4931      	ldr	r1, [pc, #196]	@ (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ee4:	4b2f      	ldr	r3, [pc, #188]	@ (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	021b      	lsls	r3, r3, #8
 8001ef2:	492c      	ldr	r1, [pc, #176]	@ (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	604b      	str	r3, [r1, #4]
 8001ef8:	e01a      	b.n	8001f30 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001efa:	4b2a      	ldr	r3, [pc, #168]	@ (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a29      	ldr	r2, [pc, #164]	@ (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001f00:	f023 0301 	bic.w	r3, r3, #1
 8001f04:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f06:	f7ff fbd9 	bl	80016bc <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f0e:	f7ff fbd5 	bl	80016bc <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e2dd      	b.n	80024dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f20:	4b20      	ldr	r3, [pc, #128]	@ (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1f0      	bne.n	8001f0e <HAL_RCC_OscConfig+0x1da>
 8001f2c:	e000      	b.n	8001f30 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f2e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d074      	beq.n	8002026 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	2b08      	cmp	r3, #8
 8001f40:	d005      	beq.n	8001f4e <HAL_RCC_OscConfig+0x21a>
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	2b0c      	cmp	r3, #12
 8001f46:	d10e      	bne.n	8001f66 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	2b03      	cmp	r3, #3
 8001f4c:	d10b      	bne.n	8001f66 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f4e:	4b15      	ldr	r3, [pc, #84]	@ (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d064      	beq.n	8002024 <HAL_RCC_OscConfig+0x2f0>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d160      	bne.n	8002024 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e2ba      	b.n	80024dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f6e:	d106      	bne.n	8001f7e <HAL_RCC_OscConfig+0x24a>
 8001f70:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a0b      	ldr	r2, [pc, #44]	@ (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001f76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f7a:	6013      	str	r3, [r2, #0]
 8001f7c:	e026      	b.n	8001fcc <HAL_RCC_OscConfig+0x298>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f86:	d115      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x280>
 8001f88:	4b06      	ldr	r3, [pc, #24]	@ (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a05      	ldr	r2, [pc, #20]	@ (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001f8e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f92:	6013      	str	r3, [r2, #0]
 8001f94:	4b03      	ldr	r3, [pc, #12]	@ (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a02      	ldr	r2, [pc, #8]	@ (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001f9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f9e:	6013      	str	r3, [r2, #0]
 8001fa0:	e014      	b.n	8001fcc <HAL_RCC_OscConfig+0x298>
 8001fa2:	bf00      	nop
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	08008630 	.word	0x08008630
 8001fac:	20000018 	.word	0x20000018
 8001fb0:	2000001c 	.word	0x2000001c
 8001fb4:	4ba0      	ldr	r3, [pc, #640]	@ (8002238 <HAL_RCC_OscConfig+0x504>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a9f      	ldr	r2, [pc, #636]	@ (8002238 <HAL_RCC_OscConfig+0x504>)
 8001fba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fbe:	6013      	str	r3, [r2, #0]
 8001fc0:	4b9d      	ldr	r3, [pc, #628]	@ (8002238 <HAL_RCC_OscConfig+0x504>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a9c      	ldr	r2, [pc, #624]	@ (8002238 <HAL_RCC_OscConfig+0x504>)
 8001fc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d013      	beq.n	8001ffc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd4:	f7ff fb72 	bl	80016bc <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fdc:	f7ff fb6e 	bl	80016bc <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b64      	cmp	r3, #100	@ 0x64
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e276      	b.n	80024dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fee:	4b92      	ldr	r3, [pc, #584]	@ (8002238 <HAL_RCC_OscConfig+0x504>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0f0      	beq.n	8001fdc <HAL_RCC_OscConfig+0x2a8>
 8001ffa:	e014      	b.n	8002026 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffc:	f7ff fb5e 	bl	80016bc <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002004:	f7ff fb5a 	bl	80016bc <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b64      	cmp	r3, #100	@ 0x64
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e262      	b.n	80024dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002016:	4b88      	ldr	r3, [pc, #544]	@ (8002238 <HAL_RCC_OscConfig+0x504>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1f0      	bne.n	8002004 <HAL_RCC_OscConfig+0x2d0>
 8002022:	e000      	b.n	8002026 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d060      	beq.n	80020f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	2b04      	cmp	r3, #4
 8002036:	d005      	beq.n	8002044 <HAL_RCC_OscConfig+0x310>
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	2b0c      	cmp	r3, #12
 800203c:	d119      	bne.n	8002072 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	2b02      	cmp	r3, #2
 8002042:	d116      	bne.n	8002072 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002044:	4b7c      	ldr	r3, [pc, #496]	@ (8002238 <HAL_RCC_OscConfig+0x504>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800204c:	2b00      	cmp	r3, #0
 800204e:	d005      	beq.n	800205c <HAL_RCC_OscConfig+0x328>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e23f      	b.n	80024dc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205c:	4b76      	ldr	r3, [pc, #472]	@ (8002238 <HAL_RCC_OscConfig+0x504>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	061b      	lsls	r3, r3, #24
 800206a:	4973      	ldr	r1, [pc, #460]	@ (8002238 <HAL_RCC_OscConfig+0x504>)
 800206c:	4313      	orrs	r3, r2
 800206e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002070:	e040      	b.n	80020f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d023      	beq.n	80020c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800207a:	4b6f      	ldr	r3, [pc, #444]	@ (8002238 <HAL_RCC_OscConfig+0x504>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a6e      	ldr	r2, [pc, #440]	@ (8002238 <HAL_RCC_OscConfig+0x504>)
 8002080:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002084:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002086:	f7ff fb19 	bl	80016bc <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800208e:	f7ff fb15 	bl	80016bc <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e21d      	b.n	80024dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020a0:	4b65      	ldr	r3, [pc, #404]	@ (8002238 <HAL_RCC_OscConfig+0x504>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0f0      	beq.n	800208e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ac:	4b62      	ldr	r3, [pc, #392]	@ (8002238 <HAL_RCC_OscConfig+0x504>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	061b      	lsls	r3, r3, #24
 80020ba:	495f      	ldr	r1, [pc, #380]	@ (8002238 <HAL_RCC_OscConfig+0x504>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	604b      	str	r3, [r1, #4]
 80020c0:	e018      	b.n	80020f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020c2:	4b5d      	ldr	r3, [pc, #372]	@ (8002238 <HAL_RCC_OscConfig+0x504>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a5c      	ldr	r2, [pc, #368]	@ (8002238 <HAL_RCC_OscConfig+0x504>)
 80020c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80020cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ce:	f7ff faf5 	bl	80016bc <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020d6:	f7ff faf1 	bl	80016bc <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e1f9      	b.n	80024dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020e8:	4b53      	ldr	r3, [pc, #332]	@ (8002238 <HAL_RCC_OscConfig+0x504>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1f0      	bne.n	80020d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0308 	and.w	r3, r3, #8
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d03c      	beq.n	800217a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	695b      	ldr	r3, [r3, #20]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d01c      	beq.n	8002142 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002108:	4b4b      	ldr	r3, [pc, #300]	@ (8002238 <HAL_RCC_OscConfig+0x504>)
 800210a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800210e:	4a4a      	ldr	r2, [pc, #296]	@ (8002238 <HAL_RCC_OscConfig+0x504>)
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002118:	f7ff fad0 	bl	80016bc <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002120:	f7ff facc 	bl	80016bc <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e1d4      	b.n	80024dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002132:	4b41      	ldr	r3, [pc, #260]	@ (8002238 <HAL_RCC_OscConfig+0x504>)
 8002134:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d0ef      	beq.n	8002120 <HAL_RCC_OscConfig+0x3ec>
 8002140:	e01b      	b.n	800217a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002142:	4b3d      	ldr	r3, [pc, #244]	@ (8002238 <HAL_RCC_OscConfig+0x504>)
 8002144:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002148:	4a3b      	ldr	r2, [pc, #236]	@ (8002238 <HAL_RCC_OscConfig+0x504>)
 800214a:	f023 0301 	bic.w	r3, r3, #1
 800214e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002152:	f7ff fab3 	bl	80016bc <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800215a:	f7ff faaf 	bl	80016bc <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e1b7      	b.n	80024dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800216c:	4b32      	ldr	r3, [pc, #200]	@ (8002238 <HAL_RCC_OscConfig+0x504>)
 800216e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1ef      	bne.n	800215a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0304 	and.w	r3, r3, #4
 8002182:	2b00      	cmp	r3, #0
 8002184:	f000 80a6 	beq.w	80022d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002188:	2300      	movs	r3, #0
 800218a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800218c:	4b2a      	ldr	r3, [pc, #168]	@ (8002238 <HAL_RCC_OscConfig+0x504>)
 800218e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002190:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d10d      	bne.n	80021b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002198:	4b27      	ldr	r3, [pc, #156]	@ (8002238 <HAL_RCC_OscConfig+0x504>)
 800219a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800219c:	4a26      	ldr	r2, [pc, #152]	@ (8002238 <HAL_RCC_OscConfig+0x504>)
 800219e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80021a4:	4b24      	ldr	r3, [pc, #144]	@ (8002238 <HAL_RCC_OscConfig+0x504>)
 80021a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ac:	60bb      	str	r3, [r7, #8]
 80021ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021b0:	2301      	movs	r3, #1
 80021b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021b4:	4b21      	ldr	r3, [pc, #132]	@ (800223c <HAL_RCC_OscConfig+0x508>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d118      	bne.n	80021f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021c0:	4b1e      	ldr	r3, [pc, #120]	@ (800223c <HAL_RCC_OscConfig+0x508>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a1d      	ldr	r2, [pc, #116]	@ (800223c <HAL_RCC_OscConfig+0x508>)
 80021c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021cc:	f7ff fa76 	bl	80016bc <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d4:	f7ff fa72 	bl	80016bc <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e17a      	b.n	80024dc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021e6:	4b15      	ldr	r3, [pc, #84]	@ (800223c <HAL_RCC_OscConfig+0x508>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0f0      	beq.n	80021d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d108      	bne.n	800220c <HAL_RCC_OscConfig+0x4d8>
 80021fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002238 <HAL_RCC_OscConfig+0x504>)
 80021fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002200:	4a0d      	ldr	r2, [pc, #52]	@ (8002238 <HAL_RCC_OscConfig+0x504>)
 8002202:	f043 0301 	orr.w	r3, r3, #1
 8002206:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800220a:	e029      	b.n	8002260 <HAL_RCC_OscConfig+0x52c>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	2b05      	cmp	r3, #5
 8002212:	d115      	bne.n	8002240 <HAL_RCC_OscConfig+0x50c>
 8002214:	4b08      	ldr	r3, [pc, #32]	@ (8002238 <HAL_RCC_OscConfig+0x504>)
 8002216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800221a:	4a07      	ldr	r2, [pc, #28]	@ (8002238 <HAL_RCC_OscConfig+0x504>)
 800221c:	f043 0304 	orr.w	r3, r3, #4
 8002220:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002224:	4b04      	ldr	r3, [pc, #16]	@ (8002238 <HAL_RCC_OscConfig+0x504>)
 8002226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800222a:	4a03      	ldr	r2, [pc, #12]	@ (8002238 <HAL_RCC_OscConfig+0x504>)
 800222c:	f043 0301 	orr.w	r3, r3, #1
 8002230:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002234:	e014      	b.n	8002260 <HAL_RCC_OscConfig+0x52c>
 8002236:	bf00      	nop
 8002238:	40021000 	.word	0x40021000
 800223c:	40007000 	.word	0x40007000
 8002240:	4b9c      	ldr	r3, [pc, #624]	@ (80024b4 <HAL_RCC_OscConfig+0x780>)
 8002242:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002246:	4a9b      	ldr	r2, [pc, #620]	@ (80024b4 <HAL_RCC_OscConfig+0x780>)
 8002248:	f023 0301 	bic.w	r3, r3, #1
 800224c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002250:	4b98      	ldr	r3, [pc, #608]	@ (80024b4 <HAL_RCC_OscConfig+0x780>)
 8002252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002256:	4a97      	ldr	r2, [pc, #604]	@ (80024b4 <HAL_RCC_OscConfig+0x780>)
 8002258:	f023 0304 	bic.w	r3, r3, #4
 800225c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d016      	beq.n	8002296 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002268:	f7ff fa28 	bl	80016bc <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800226e:	e00a      	b.n	8002286 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002270:	f7ff fa24 	bl	80016bc <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800227e:	4293      	cmp	r3, r2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e12a      	b.n	80024dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002286:	4b8b      	ldr	r3, [pc, #556]	@ (80024b4 <HAL_RCC_OscConfig+0x780>)
 8002288:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0ed      	beq.n	8002270 <HAL_RCC_OscConfig+0x53c>
 8002294:	e015      	b.n	80022c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002296:	f7ff fa11 	bl	80016bc <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800229c:	e00a      	b.n	80022b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800229e:	f7ff fa0d 	bl	80016bc <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e113      	b.n	80024dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022b4:	4b7f      	ldr	r3, [pc, #508]	@ (80024b4 <HAL_RCC_OscConfig+0x780>)
 80022b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1ed      	bne.n	800229e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022c2:	7ffb      	ldrb	r3, [r7, #31]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d105      	bne.n	80022d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022c8:	4b7a      	ldr	r3, [pc, #488]	@ (80024b4 <HAL_RCC_OscConfig+0x780>)
 80022ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022cc:	4a79      	ldr	r2, [pc, #484]	@ (80024b4 <HAL_RCC_OscConfig+0x780>)
 80022ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022d2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 80fe 	beq.w	80024da <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	f040 80d0 	bne.w	8002488 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80022e8:	4b72      	ldr	r3, [pc, #456]	@ (80024b4 <HAL_RCC_OscConfig+0x780>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	f003 0203 	and.w	r2, r3, #3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d130      	bne.n	800235e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002306:	3b01      	subs	r3, #1
 8002308:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800230a:	429a      	cmp	r2, r3
 800230c:	d127      	bne.n	800235e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002318:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800231a:	429a      	cmp	r2, r3
 800231c:	d11f      	bne.n	800235e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002328:	2a07      	cmp	r2, #7
 800232a:	bf14      	ite	ne
 800232c:	2201      	movne	r2, #1
 800232e:	2200      	moveq	r2, #0
 8002330:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002332:	4293      	cmp	r3, r2
 8002334:	d113      	bne.n	800235e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002340:	085b      	lsrs	r3, r3, #1
 8002342:	3b01      	subs	r3, #1
 8002344:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002346:	429a      	cmp	r2, r3
 8002348:	d109      	bne.n	800235e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002354:	085b      	lsrs	r3, r3, #1
 8002356:	3b01      	subs	r3, #1
 8002358:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800235a:	429a      	cmp	r2, r3
 800235c:	d06e      	beq.n	800243c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	2b0c      	cmp	r3, #12
 8002362:	d069      	beq.n	8002438 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002364:	4b53      	ldr	r3, [pc, #332]	@ (80024b4 <HAL_RCC_OscConfig+0x780>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d105      	bne.n	800237c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002370:	4b50      	ldr	r3, [pc, #320]	@ (80024b4 <HAL_RCC_OscConfig+0x780>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e0ad      	b.n	80024dc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002380:	4b4c      	ldr	r3, [pc, #304]	@ (80024b4 <HAL_RCC_OscConfig+0x780>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a4b      	ldr	r2, [pc, #300]	@ (80024b4 <HAL_RCC_OscConfig+0x780>)
 8002386:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800238a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800238c:	f7ff f996 	bl	80016bc <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002394:	f7ff f992 	bl	80016bc <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e09a      	b.n	80024dc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023a6:	4b43      	ldr	r3, [pc, #268]	@ (80024b4 <HAL_RCC_OscConfig+0x780>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f0      	bne.n	8002394 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023b2:	4b40      	ldr	r3, [pc, #256]	@ (80024b4 <HAL_RCC_OscConfig+0x780>)
 80023b4:	68da      	ldr	r2, [r3, #12]
 80023b6:	4b40      	ldr	r3, [pc, #256]	@ (80024b8 <HAL_RCC_OscConfig+0x784>)
 80023b8:	4013      	ands	r3, r2
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80023c2:	3a01      	subs	r2, #1
 80023c4:	0112      	lsls	r2, r2, #4
 80023c6:	4311      	orrs	r1, r2
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80023cc:	0212      	lsls	r2, r2, #8
 80023ce:	4311      	orrs	r1, r2
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80023d4:	0852      	lsrs	r2, r2, #1
 80023d6:	3a01      	subs	r2, #1
 80023d8:	0552      	lsls	r2, r2, #21
 80023da:	4311      	orrs	r1, r2
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80023e0:	0852      	lsrs	r2, r2, #1
 80023e2:	3a01      	subs	r2, #1
 80023e4:	0652      	lsls	r2, r2, #25
 80023e6:	4311      	orrs	r1, r2
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80023ec:	0912      	lsrs	r2, r2, #4
 80023ee:	0452      	lsls	r2, r2, #17
 80023f0:	430a      	orrs	r2, r1
 80023f2:	4930      	ldr	r1, [pc, #192]	@ (80024b4 <HAL_RCC_OscConfig+0x780>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80023f8:	4b2e      	ldr	r3, [pc, #184]	@ (80024b4 <HAL_RCC_OscConfig+0x780>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a2d      	ldr	r2, [pc, #180]	@ (80024b4 <HAL_RCC_OscConfig+0x780>)
 80023fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002402:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002404:	4b2b      	ldr	r3, [pc, #172]	@ (80024b4 <HAL_RCC_OscConfig+0x780>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	4a2a      	ldr	r2, [pc, #168]	@ (80024b4 <HAL_RCC_OscConfig+0x780>)
 800240a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800240e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002410:	f7ff f954 	bl	80016bc <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002418:	f7ff f950 	bl	80016bc <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e058      	b.n	80024dc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800242a:	4b22      	ldr	r3, [pc, #136]	@ (80024b4 <HAL_RCC_OscConfig+0x780>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0f0      	beq.n	8002418 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002436:	e050      	b.n	80024da <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e04f      	b.n	80024dc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800243c:	4b1d      	ldr	r3, [pc, #116]	@ (80024b4 <HAL_RCC_OscConfig+0x780>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d148      	bne.n	80024da <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002448:	4b1a      	ldr	r3, [pc, #104]	@ (80024b4 <HAL_RCC_OscConfig+0x780>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a19      	ldr	r2, [pc, #100]	@ (80024b4 <HAL_RCC_OscConfig+0x780>)
 800244e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002452:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002454:	4b17      	ldr	r3, [pc, #92]	@ (80024b4 <HAL_RCC_OscConfig+0x780>)
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	4a16      	ldr	r2, [pc, #88]	@ (80024b4 <HAL_RCC_OscConfig+0x780>)
 800245a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800245e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002460:	f7ff f92c 	bl	80016bc <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002468:	f7ff f928 	bl	80016bc <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e030      	b.n	80024dc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800247a:	4b0e      	ldr	r3, [pc, #56]	@ (80024b4 <HAL_RCC_OscConfig+0x780>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0f0      	beq.n	8002468 <HAL_RCC_OscConfig+0x734>
 8002486:	e028      	b.n	80024da <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	2b0c      	cmp	r3, #12
 800248c:	d023      	beq.n	80024d6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800248e:	4b09      	ldr	r3, [pc, #36]	@ (80024b4 <HAL_RCC_OscConfig+0x780>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a08      	ldr	r2, [pc, #32]	@ (80024b4 <HAL_RCC_OscConfig+0x780>)
 8002494:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002498:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249a:	f7ff f90f 	bl	80016bc <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024a0:	e00c      	b.n	80024bc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a2:	f7ff f90b 	bl	80016bc <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d905      	bls.n	80024bc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e013      	b.n	80024dc <HAL_RCC_OscConfig+0x7a8>
 80024b4:	40021000 	.word	0x40021000
 80024b8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024bc:	4b09      	ldr	r3, [pc, #36]	@ (80024e4 <HAL_RCC_OscConfig+0x7b0>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1ec      	bne.n	80024a2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80024c8:	4b06      	ldr	r3, [pc, #24]	@ (80024e4 <HAL_RCC_OscConfig+0x7b0>)
 80024ca:	68da      	ldr	r2, [r3, #12]
 80024cc:	4905      	ldr	r1, [pc, #20]	@ (80024e4 <HAL_RCC_OscConfig+0x7b0>)
 80024ce:	4b06      	ldr	r3, [pc, #24]	@ (80024e8 <HAL_RCC_OscConfig+0x7b4>)
 80024d0:	4013      	ands	r3, r2
 80024d2:	60cb      	str	r3, [r1, #12]
 80024d4:	e001      	b.n	80024da <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e000      	b.n	80024dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3720      	adds	r7, #32
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40021000 	.word	0x40021000
 80024e8:	feeefffc 	.word	0xfeeefffc

080024ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e0e7      	b.n	80026d0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002500:	4b75      	ldr	r3, [pc, #468]	@ (80026d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	429a      	cmp	r2, r3
 800250c:	d910      	bls.n	8002530 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250e:	4b72      	ldr	r3, [pc, #456]	@ (80026d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f023 0207 	bic.w	r2, r3, #7
 8002516:	4970      	ldr	r1, [pc, #448]	@ (80026d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	4313      	orrs	r3, r2
 800251c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800251e:	4b6e      	ldr	r3, [pc, #440]	@ (80026d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	429a      	cmp	r2, r3
 800252a:	d001      	beq.n	8002530 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e0cf      	b.n	80026d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d010      	beq.n	800255e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	4b66      	ldr	r3, [pc, #408]	@ (80026dc <HAL_RCC_ClockConfig+0x1f0>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002548:	429a      	cmp	r2, r3
 800254a:	d908      	bls.n	800255e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800254c:	4b63      	ldr	r3, [pc, #396]	@ (80026dc <HAL_RCC_ClockConfig+0x1f0>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	4960      	ldr	r1, [pc, #384]	@ (80026dc <HAL_RCC_ClockConfig+0x1f0>)
 800255a:	4313      	orrs	r3, r2
 800255c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d04c      	beq.n	8002604 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b03      	cmp	r3, #3
 8002570:	d107      	bne.n	8002582 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002572:	4b5a      	ldr	r3, [pc, #360]	@ (80026dc <HAL_RCC_ClockConfig+0x1f0>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d121      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e0a6      	b.n	80026d0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b02      	cmp	r3, #2
 8002588:	d107      	bne.n	800259a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800258a:	4b54      	ldr	r3, [pc, #336]	@ (80026dc <HAL_RCC_ClockConfig+0x1f0>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d115      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e09a      	b.n	80026d0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d107      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025a2:	4b4e      	ldr	r3, [pc, #312]	@ (80026dc <HAL_RCC_ClockConfig+0x1f0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d109      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e08e      	b.n	80026d0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025b2:	4b4a      	ldr	r3, [pc, #296]	@ (80026dc <HAL_RCC_ClockConfig+0x1f0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e086      	b.n	80026d0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025c2:	4b46      	ldr	r3, [pc, #280]	@ (80026dc <HAL_RCC_ClockConfig+0x1f0>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f023 0203 	bic.w	r2, r3, #3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	4943      	ldr	r1, [pc, #268]	@ (80026dc <HAL_RCC_ClockConfig+0x1f0>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025d4:	f7ff f872 	bl	80016bc <HAL_GetTick>
 80025d8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025da:	e00a      	b.n	80025f2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025dc:	f7ff f86e 	bl	80016bc <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e06e      	b.n	80026d0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f2:	4b3a      	ldr	r3, [pc, #232]	@ (80026dc <HAL_RCC_ClockConfig+0x1f0>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 020c 	and.w	r2, r3, #12
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	429a      	cmp	r2, r3
 8002602:	d1eb      	bne.n	80025dc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d010      	beq.n	8002632 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	4b31      	ldr	r3, [pc, #196]	@ (80026dc <HAL_RCC_ClockConfig+0x1f0>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800261c:	429a      	cmp	r2, r3
 800261e:	d208      	bcs.n	8002632 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002620:	4b2e      	ldr	r3, [pc, #184]	@ (80026dc <HAL_RCC_ClockConfig+0x1f0>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	492b      	ldr	r1, [pc, #172]	@ (80026dc <HAL_RCC_ClockConfig+0x1f0>)
 800262e:	4313      	orrs	r3, r2
 8002630:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002632:	4b29      	ldr	r3, [pc, #164]	@ (80026d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	429a      	cmp	r2, r3
 800263e:	d210      	bcs.n	8002662 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002640:	4b25      	ldr	r3, [pc, #148]	@ (80026d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f023 0207 	bic.w	r2, r3, #7
 8002648:	4923      	ldr	r1, [pc, #140]	@ (80026d8 <HAL_RCC_ClockConfig+0x1ec>)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	4313      	orrs	r3, r2
 800264e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002650:	4b21      	ldr	r3, [pc, #132]	@ (80026d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	429a      	cmp	r2, r3
 800265c:	d001      	beq.n	8002662 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e036      	b.n	80026d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0304 	and.w	r3, r3, #4
 800266a:	2b00      	cmp	r3, #0
 800266c:	d008      	beq.n	8002680 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800266e:	4b1b      	ldr	r3, [pc, #108]	@ (80026dc <HAL_RCC_ClockConfig+0x1f0>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	4918      	ldr	r1, [pc, #96]	@ (80026dc <HAL_RCC_ClockConfig+0x1f0>)
 800267c:	4313      	orrs	r3, r2
 800267e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0308 	and.w	r3, r3, #8
 8002688:	2b00      	cmp	r3, #0
 800268a:	d009      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800268c:	4b13      	ldr	r3, [pc, #76]	@ (80026dc <HAL_RCC_ClockConfig+0x1f0>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	4910      	ldr	r1, [pc, #64]	@ (80026dc <HAL_RCC_ClockConfig+0x1f0>)
 800269c:	4313      	orrs	r3, r2
 800269e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026a0:	f000 f824 	bl	80026ec <HAL_RCC_GetSysClockFreq>
 80026a4:	4602      	mov	r2, r0
 80026a6:	4b0d      	ldr	r3, [pc, #52]	@ (80026dc <HAL_RCC_ClockConfig+0x1f0>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	091b      	lsrs	r3, r3, #4
 80026ac:	f003 030f 	and.w	r3, r3, #15
 80026b0:	490b      	ldr	r1, [pc, #44]	@ (80026e0 <HAL_RCC_ClockConfig+0x1f4>)
 80026b2:	5ccb      	ldrb	r3, [r1, r3]
 80026b4:	f003 031f 	and.w	r3, r3, #31
 80026b8:	fa22 f303 	lsr.w	r3, r2, r3
 80026bc:	4a09      	ldr	r2, [pc, #36]	@ (80026e4 <HAL_RCC_ClockConfig+0x1f8>)
 80026be:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026c0:	4b09      	ldr	r3, [pc, #36]	@ (80026e8 <HAL_RCC_ClockConfig+0x1fc>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7fe ffa9 	bl	800161c <HAL_InitTick>
 80026ca:	4603      	mov	r3, r0
 80026cc:	72fb      	strb	r3, [r7, #11]

  return status;
 80026ce:	7afb      	ldrb	r3, [r7, #11]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40022000 	.word	0x40022000
 80026dc:	40021000 	.word	0x40021000
 80026e0:	08008630 	.word	0x08008630
 80026e4:	20000018 	.word	0x20000018
 80026e8:	2000001c 	.word	0x2000001c

080026ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b089      	sub	sp, #36	@ 0x24
 80026f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	61fb      	str	r3, [r7, #28]
 80026f6:	2300      	movs	r3, #0
 80026f8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026fa:	4b3e      	ldr	r3, [pc, #248]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 030c 	and.w	r3, r3, #12
 8002702:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002704:	4b3b      	ldr	r3, [pc, #236]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f003 0303 	and.w	r3, r3, #3
 800270c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d005      	beq.n	8002720 <HAL_RCC_GetSysClockFreq+0x34>
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	2b0c      	cmp	r3, #12
 8002718:	d121      	bne.n	800275e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d11e      	bne.n	800275e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002720:	4b34      	ldr	r3, [pc, #208]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0308 	and.w	r3, r3, #8
 8002728:	2b00      	cmp	r3, #0
 800272a:	d107      	bne.n	800273c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800272c:	4b31      	ldr	r3, [pc, #196]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800272e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002732:	0a1b      	lsrs	r3, r3, #8
 8002734:	f003 030f 	and.w	r3, r3, #15
 8002738:	61fb      	str	r3, [r7, #28]
 800273a:	e005      	b.n	8002748 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800273c:	4b2d      	ldr	r3, [pc, #180]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	091b      	lsrs	r3, r3, #4
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002748:	4a2b      	ldr	r2, [pc, #172]	@ (80027f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002750:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10d      	bne.n	8002774 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800275c:	e00a      	b.n	8002774 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	2b04      	cmp	r3, #4
 8002762:	d102      	bne.n	800276a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002764:	4b25      	ldr	r3, [pc, #148]	@ (80027fc <HAL_RCC_GetSysClockFreq+0x110>)
 8002766:	61bb      	str	r3, [r7, #24]
 8002768:	e004      	b.n	8002774 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	2b08      	cmp	r3, #8
 800276e:	d101      	bne.n	8002774 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002770:	4b23      	ldr	r3, [pc, #140]	@ (8002800 <HAL_RCC_GetSysClockFreq+0x114>)
 8002772:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	2b0c      	cmp	r3, #12
 8002778:	d134      	bne.n	80027e4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800277a:	4b1e      	ldr	r3, [pc, #120]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	2b02      	cmp	r3, #2
 8002788:	d003      	beq.n	8002792 <HAL_RCC_GetSysClockFreq+0xa6>
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	2b03      	cmp	r3, #3
 800278e:	d003      	beq.n	8002798 <HAL_RCC_GetSysClockFreq+0xac>
 8002790:	e005      	b.n	800279e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002792:	4b1a      	ldr	r3, [pc, #104]	@ (80027fc <HAL_RCC_GetSysClockFreq+0x110>)
 8002794:	617b      	str	r3, [r7, #20]
      break;
 8002796:	e005      	b.n	80027a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002798:	4b19      	ldr	r3, [pc, #100]	@ (8002800 <HAL_RCC_GetSysClockFreq+0x114>)
 800279a:	617b      	str	r3, [r7, #20]
      break;
 800279c:	e002      	b.n	80027a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	617b      	str	r3, [r7, #20]
      break;
 80027a2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027a4:	4b13      	ldr	r3, [pc, #76]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	091b      	lsrs	r3, r3, #4
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	3301      	adds	r3, #1
 80027b0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80027b2:	4b10      	ldr	r3, [pc, #64]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	0a1b      	lsrs	r3, r3, #8
 80027b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	fb03 f202 	mul.w	r2, r3, r2
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027ca:	4b0a      	ldr	r3, [pc, #40]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	0e5b      	lsrs	r3, r3, #25
 80027d0:	f003 0303 	and.w	r3, r3, #3
 80027d4:	3301      	adds	r3, #1
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80027e4:	69bb      	ldr	r3, [r7, #24]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3724      	adds	r7, #36	@ 0x24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	40021000 	.word	0x40021000
 80027f8:	08008648 	.word	0x08008648
 80027fc:	00f42400 	.word	0x00f42400
 8002800:	007a1200 	.word	0x007a1200

08002804 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002808:	4b03      	ldr	r3, [pc, #12]	@ (8002818 <HAL_RCC_GetHCLKFreq+0x14>)
 800280a:	681b      	ldr	r3, [r3, #0]
}
 800280c:	4618      	mov	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	20000018 	.word	0x20000018

0800281c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002820:	f7ff fff0 	bl	8002804 <HAL_RCC_GetHCLKFreq>
 8002824:	4602      	mov	r2, r0
 8002826:	4b06      	ldr	r3, [pc, #24]	@ (8002840 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	0a1b      	lsrs	r3, r3, #8
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	4904      	ldr	r1, [pc, #16]	@ (8002844 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002832:	5ccb      	ldrb	r3, [r1, r3]
 8002834:	f003 031f 	and.w	r3, r3, #31
 8002838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800283c:	4618      	mov	r0, r3
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40021000 	.word	0x40021000
 8002844:	08008640 	.word	0x08008640

08002848 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800284c:	f7ff ffda 	bl	8002804 <HAL_RCC_GetHCLKFreq>
 8002850:	4602      	mov	r2, r0
 8002852:	4b06      	ldr	r3, [pc, #24]	@ (800286c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	0adb      	lsrs	r3, r3, #11
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	4904      	ldr	r1, [pc, #16]	@ (8002870 <HAL_RCC_GetPCLK2Freq+0x28>)
 800285e:	5ccb      	ldrb	r3, [r1, r3]
 8002860:	f003 031f 	and.w	r3, r3, #31
 8002864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002868:	4618      	mov	r0, r3
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40021000 	.word	0x40021000
 8002870:	08008640 	.word	0x08008640

08002874 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800287c:	2300      	movs	r3, #0
 800287e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002880:	4b2a      	ldr	r3, [pc, #168]	@ (800292c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002884:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d003      	beq.n	8002894 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800288c:	f7ff f9ee 	bl	8001c6c <HAL_PWREx_GetVoltageRange>
 8002890:	6178      	str	r0, [r7, #20]
 8002892:	e014      	b.n	80028be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002894:	4b25      	ldr	r3, [pc, #148]	@ (800292c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002898:	4a24      	ldr	r2, [pc, #144]	@ (800292c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800289a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800289e:	6593      	str	r3, [r2, #88]	@ 0x58
 80028a0:	4b22      	ldr	r3, [pc, #136]	@ (800292c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80028ac:	f7ff f9de 	bl	8001c6c <HAL_PWREx_GetVoltageRange>
 80028b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80028b2:	4b1e      	ldr	r3, [pc, #120]	@ (800292c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b6:	4a1d      	ldr	r2, [pc, #116]	@ (800292c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028bc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028c4:	d10b      	bne.n	80028de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b80      	cmp	r3, #128	@ 0x80
 80028ca:	d919      	bls.n	8002900 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2ba0      	cmp	r3, #160	@ 0xa0
 80028d0:	d902      	bls.n	80028d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028d2:	2302      	movs	r3, #2
 80028d4:	613b      	str	r3, [r7, #16]
 80028d6:	e013      	b.n	8002900 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028d8:	2301      	movs	r3, #1
 80028da:	613b      	str	r3, [r7, #16]
 80028dc:	e010      	b.n	8002900 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b80      	cmp	r3, #128	@ 0x80
 80028e2:	d902      	bls.n	80028ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80028e4:	2303      	movs	r3, #3
 80028e6:	613b      	str	r3, [r7, #16]
 80028e8:	e00a      	b.n	8002900 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b80      	cmp	r3, #128	@ 0x80
 80028ee:	d102      	bne.n	80028f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028f0:	2302      	movs	r3, #2
 80028f2:	613b      	str	r3, [r7, #16]
 80028f4:	e004      	b.n	8002900 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b70      	cmp	r3, #112	@ 0x70
 80028fa:	d101      	bne.n	8002900 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028fc:	2301      	movs	r3, #1
 80028fe:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002900:	4b0b      	ldr	r3, [pc, #44]	@ (8002930 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f023 0207 	bic.w	r2, r3, #7
 8002908:	4909      	ldr	r1, [pc, #36]	@ (8002930 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	4313      	orrs	r3, r2
 800290e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002910:	4b07      	ldr	r3, [pc, #28]	@ (8002930 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0307 	and.w	r3, r3, #7
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	429a      	cmp	r2, r3
 800291c:	d001      	beq.n	8002922 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e000      	b.n	8002924 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3718      	adds	r7, #24
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40021000 	.word	0x40021000
 8002930:	40022000 	.word	0x40022000

08002934 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800293c:	2300      	movs	r3, #0
 800293e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002940:	2300      	movs	r3, #0
 8002942:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800294c:	2b00      	cmp	r3, #0
 800294e:	d041      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002954:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002958:	d02a      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800295a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800295e:	d824      	bhi.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002960:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002964:	d008      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002966:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800296a:	d81e      	bhi.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00a      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002970:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002974:	d010      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002976:	e018      	b.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002978:	4b86      	ldr	r3, [pc, #536]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	4a85      	ldr	r2, [pc, #532]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800297e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002982:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002984:	e015      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	3304      	adds	r3, #4
 800298a:	2100      	movs	r1, #0
 800298c:	4618      	mov	r0, r3
 800298e:	f000 fabb 	bl	8002f08 <RCCEx_PLLSAI1_Config>
 8002992:	4603      	mov	r3, r0
 8002994:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002996:	e00c      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3320      	adds	r3, #32
 800299c:	2100      	movs	r1, #0
 800299e:	4618      	mov	r0, r3
 80029a0:	f000 fba6 	bl	80030f0 <RCCEx_PLLSAI2_Config>
 80029a4:	4603      	mov	r3, r0
 80029a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029a8:	e003      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	74fb      	strb	r3, [r7, #19]
      break;
 80029ae:	e000      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80029b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029b2:	7cfb      	ldrb	r3, [r7, #19]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10b      	bne.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029b8:	4b76      	ldr	r3, [pc, #472]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029be:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029c6:	4973      	ldr	r1, [pc, #460]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80029ce:	e001      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029d0:	7cfb      	ldrb	r3, [r7, #19]
 80029d2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d041      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029e4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80029e8:	d02a      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80029ea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80029ee:	d824      	bhi.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80029f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80029f4:	d008      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80029f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80029fa:	d81e      	bhi.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00a      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002a00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a04:	d010      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a06:	e018      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a08:	4b62      	ldr	r3, [pc, #392]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	4a61      	ldr	r2, [pc, #388]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a12:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a14:	e015      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	3304      	adds	r3, #4
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f000 fa73 	bl	8002f08 <RCCEx_PLLSAI1_Config>
 8002a22:	4603      	mov	r3, r0
 8002a24:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a26:	e00c      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3320      	adds	r3, #32
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f000 fb5e 	bl	80030f0 <RCCEx_PLLSAI2_Config>
 8002a34:	4603      	mov	r3, r0
 8002a36:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a38:	e003      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	74fb      	strb	r3, [r7, #19]
      break;
 8002a3e:	e000      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002a40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a42:	7cfb      	ldrb	r3, [r7, #19]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d10b      	bne.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a48:	4b52      	ldr	r3, [pc, #328]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a4e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a56:	494f      	ldr	r1, [pc, #316]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002a5e:	e001      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a60:	7cfb      	ldrb	r3, [r7, #19]
 8002a62:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 80a0 	beq.w	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a72:	2300      	movs	r3, #0
 8002a74:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a76:	4b47      	ldr	r3, [pc, #284]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002a82:	2301      	movs	r3, #1
 8002a84:	e000      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002a86:	2300      	movs	r3, #0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00d      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a8c:	4b41      	ldr	r3, [pc, #260]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a90:	4a40      	ldr	r2, [pc, #256]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a96:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a98:	4b3e      	ldr	r3, [pc, #248]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aa0:	60bb      	str	r3, [r7, #8]
 8002aa2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002aa8:	4b3b      	ldr	r3, [pc, #236]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a3a      	ldr	r2, [pc, #232]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002aae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ab2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ab4:	f7fe fe02 	bl	80016bc <HAL_GetTick>
 8002ab8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002aba:	e009      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002abc:	f7fe fdfe 	bl	80016bc <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d902      	bls.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	74fb      	strb	r3, [r7, #19]
        break;
 8002ace:	e005      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ad0:	4b31      	ldr	r3, [pc, #196]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0ef      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002adc:	7cfb      	ldrb	r3, [r7, #19]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d15c      	bne.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ae2:	4b2c      	ldr	r3, [pc, #176]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ae8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002aec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d01f      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d019      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b00:	4b24      	ldr	r3, [pc, #144]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b0a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b0c:	4b21      	ldr	r3, [pc, #132]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b12:	4a20      	ldr	r2, [pc, #128]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b22:	4a1c      	ldr	r2, [pc, #112]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b2c:	4a19      	ldr	r2, [pc, #100]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d016      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b3e:	f7fe fdbd 	bl	80016bc <HAL_GetTick>
 8002b42:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b44:	e00b      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b46:	f7fe fdb9 	bl	80016bc <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d902      	bls.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	74fb      	strb	r3, [r7, #19]
            break;
 8002b5c:	e006      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0ec      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002b6c:	7cfb      	ldrb	r3, [r7, #19]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10c      	bne.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b72:	4b08      	ldr	r3, [pc, #32]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b82:	4904      	ldr	r1, [pc, #16]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002b8a:	e009      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b8c:	7cfb      	ldrb	r3, [r7, #19]
 8002b8e:	74bb      	strb	r3, [r7, #18]
 8002b90:	e006      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002b92:	bf00      	nop
 8002b94:	40021000 	.word	0x40021000
 8002b98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b9c:	7cfb      	ldrb	r3, [r7, #19]
 8002b9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ba0:	7c7b      	ldrb	r3, [r7, #17]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d105      	bne.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ba6:	4b9e      	ldr	r3, [pc, #632]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002baa:	4a9d      	ldr	r2, [pc, #628]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bb0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00a      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bbe:	4b98      	ldr	r3, [pc, #608]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bc4:	f023 0203 	bic.w	r2, r3, #3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bcc:	4994      	ldr	r1, [pc, #592]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00a      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002be0:	4b8f      	ldr	r3, [pc, #572]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002be6:	f023 020c 	bic.w	r2, r3, #12
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bee:	498c      	ldr	r1, [pc, #560]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0304 	and.w	r3, r3, #4
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00a      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c02:	4b87      	ldr	r3, [pc, #540]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c08:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c10:	4983      	ldr	r1, [pc, #524]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0308 	and.w	r3, r3, #8
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00a      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c24:	4b7e      	ldr	r3, [pc, #504]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c2a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c32:	497b      	ldr	r1, [pc, #492]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0310 	and.w	r3, r3, #16
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00a      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c46:	4b76      	ldr	r3, [pc, #472]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c54:	4972      	ldr	r1, [pc, #456]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0320 	and.w	r3, r3, #32
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00a      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c68:	4b6d      	ldr	r3, [pc, #436]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c6e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c76:	496a      	ldr	r1, [pc, #424]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00a      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c8a:	4b65      	ldr	r3, [pc, #404]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c90:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c98:	4961      	ldr	r1, [pc, #388]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00a      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002cac:	4b5c      	ldr	r3, [pc, #368]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cb2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cba:	4959      	ldr	r1, [pc, #356]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00a      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cce:	4b54      	ldr	r3, [pc, #336]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cd4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cdc:	4950      	ldr	r1, [pc, #320]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00a      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cf0:	4b4b      	ldr	r3, [pc, #300]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cf6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cfe:	4948      	ldr	r1, [pc, #288]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00a      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d12:	4b43      	ldr	r3, [pc, #268]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d18:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d20:	493f      	ldr	r1, [pc, #252]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d028      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d34:	4b3a      	ldr	r3, [pc, #232]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d3a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d42:	4937      	ldr	r1, [pc, #220]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d52:	d106      	bne.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d54:	4b32      	ldr	r3, [pc, #200]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	4a31      	ldr	r2, [pc, #196]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d5e:	60d3      	str	r3, [r2, #12]
 8002d60:	e011      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d66:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d6a:	d10c      	bne.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3304      	adds	r3, #4
 8002d70:	2101      	movs	r1, #1
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 f8c8 	bl	8002f08 <RCCEx_PLLSAI1_Config>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002d7c:	7cfb      	ldrb	r3, [r7, #19]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002d82:	7cfb      	ldrb	r3, [r7, #19]
 8002d84:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d028      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d92:	4b23      	ldr	r3, [pc, #140]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d98:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002da0:	491f      	ldr	r1, [pc, #124]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002db0:	d106      	bne.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002db2:	4b1b      	ldr	r3, [pc, #108]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	4a1a      	ldr	r2, [pc, #104]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002db8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002dbc:	60d3      	str	r3, [r2, #12]
 8002dbe:	e011      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dc4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002dc8:	d10c      	bne.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	3304      	adds	r3, #4
 8002dce:	2101      	movs	r1, #1
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f000 f899 	bl	8002f08 <RCCEx_PLLSAI1_Config>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dda:	7cfb      	ldrb	r3, [r7, #19]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002de0:	7cfb      	ldrb	r3, [r7, #19]
 8002de2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d02b      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002df0:	4b0b      	ldr	r3, [pc, #44]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002df6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dfe:	4908      	ldr	r1, [pc, #32]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e0e:	d109      	bne.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e10:	4b03      	ldr	r3, [pc, #12]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	4a02      	ldr	r2, [pc, #8]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e1a:	60d3      	str	r3, [r2, #12]
 8002e1c:	e014      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002e1e:	bf00      	nop
 8002e20:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e28:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e2c:	d10c      	bne.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	3304      	adds	r3, #4
 8002e32:	2101      	movs	r1, #1
 8002e34:	4618      	mov	r0, r3
 8002e36:	f000 f867 	bl	8002f08 <RCCEx_PLLSAI1_Config>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e3e:	7cfb      	ldrb	r3, [r7, #19]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002e44:	7cfb      	ldrb	r3, [r7, #19]
 8002e46:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d02f      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e54:	4b2b      	ldr	r3, [pc, #172]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e5a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e62:	4928      	ldr	r1, [pc, #160]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e72:	d10d      	bne.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3304      	adds	r3, #4
 8002e78:	2102      	movs	r1, #2
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 f844 	bl	8002f08 <RCCEx_PLLSAI1_Config>
 8002e80:	4603      	mov	r3, r0
 8002e82:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e84:	7cfb      	ldrb	r3, [r7, #19]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d014      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002e8a:	7cfb      	ldrb	r3, [r7, #19]
 8002e8c:	74bb      	strb	r3, [r7, #18]
 8002e8e:	e011      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e98:	d10c      	bne.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	3320      	adds	r3, #32
 8002e9e:	2102      	movs	r1, #2
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 f925 	bl	80030f0 <RCCEx_PLLSAI2_Config>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002eaa:	7cfb      	ldrb	r3, [r7, #19]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002eb0:	7cfb      	ldrb	r3, [r7, #19]
 8002eb2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00a      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002ec0:	4b10      	ldr	r3, [pc, #64]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ec6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ece:	490d      	ldr	r1, [pc, #52]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00b      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ee2:	4b08      	ldr	r3, [pc, #32]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ef2:	4904      	ldr	r1, [pc, #16]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002efa:	7cbb      	ldrb	r3, [r7, #18]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40021000 	.word	0x40021000

08002f08 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f12:	2300      	movs	r3, #0
 8002f14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f16:	4b75      	ldr	r3, [pc, #468]	@ (80030ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d018      	beq.n	8002f54 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f22:	4b72      	ldr	r3, [pc, #456]	@ (80030ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	f003 0203 	and.w	r2, r3, #3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d10d      	bne.n	8002f4e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
       ||
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d009      	beq.n	8002f4e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002f3a:	4b6c      	ldr	r3, [pc, #432]	@ (80030ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	091b      	lsrs	r3, r3, #4
 8002f40:	f003 0307 	and.w	r3, r3, #7
 8002f44:	1c5a      	adds	r2, r3, #1
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
       ||
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d047      	beq.n	8002fde <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	73fb      	strb	r3, [r7, #15]
 8002f52:	e044      	b.n	8002fde <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b03      	cmp	r3, #3
 8002f5a:	d018      	beq.n	8002f8e <RCCEx_PLLSAI1_Config+0x86>
 8002f5c:	2b03      	cmp	r3, #3
 8002f5e:	d825      	bhi.n	8002fac <RCCEx_PLLSAI1_Config+0xa4>
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d002      	beq.n	8002f6a <RCCEx_PLLSAI1_Config+0x62>
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d009      	beq.n	8002f7c <RCCEx_PLLSAI1_Config+0x74>
 8002f68:	e020      	b.n	8002fac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f6a:	4b60      	ldr	r3, [pc, #384]	@ (80030ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d11d      	bne.n	8002fb2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f7a:	e01a      	b.n	8002fb2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f7c:	4b5b      	ldr	r3, [pc, #364]	@ (80030ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d116      	bne.n	8002fb6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f8c:	e013      	b.n	8002fb6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f8e:	4b57      	ldr	r3, [pc, #348]	@ (80030ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10f      	bne.n	8002fba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f9a:	4b54      	ldr	r3, [pc, #336]	@ (80030ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d109      	bne.n	8002fba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002faa:	e006      	b.n	8002fba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	73fb      	strb	r3, [r7, #15]
      break;
 8002fb0:	e004      	b.n	8002fbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fb2:	bf00      	nop
 8002fb4:	e002      	b.n	8002fbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fb6:	bf00      	nop
 8002fb8:	e000      	b.n	8002fbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fba:	bf00      	nop
    }

    if(status == HAL_OK)
 8002fbc:	7bfb      	ldrb	r3, [r7, #15]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10d      	bne.n	8002fde <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002fc2:	4b4a      	ldr	r3, [pc, #296]	@ (80030ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6819      	ldr	r1, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	011b      	lsls	r3, r3, #4
 8002fd6:	430b      	orrs	r3, r1
 8002fd8:	4944      	ldr	r1, [pc, #272]	@ (80030ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002fde:	7bfb      	ldrb	r3, [r7, #15]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d17d      	bne.n	80030e0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002fe4:	4b41      	ldr	r3, [pc, #260]	@ (80030ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a40      	ldr	r2, [pc, #256]	@ (80030ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002fee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ff0:	f7fe fb64 	bl	80016bc <HAL_GetTick>
 8002ff4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ff6:	e009      	b.n	800300c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ff8:	f7fe fb60 	bl	80016bc <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d902      	bls.n	800300c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	73fb      	strb	r3, [r7, #15]
        break;
 800300a:	e005      	b.n	8003018 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800300c:	4b37      	ldr	r3, [pc, #220]	@ (80030ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1ef      	bne.n	8002ff8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003018:	7bfb      	ldrb	r3, [r7, #15]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d160      	bne.n	80030e0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d111      	bne.n	8003048 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003024:	4b31      	ldr	r3, [pc, #196]	@ (80030ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800302c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6892      	ldr	r2, [r2, #8]
 8003034:	0211      	lsls	r1, r2, #8
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	68d2      	ldr	r2, [r2, #12]
 800303a:	0912      	lsrs	r2, r2, #4
 800303c:	0452      	lsls	r2, r2, #17
 800303e:	430a      	orrs	r2, r1
 8003040:	492a      	ldr	r1, [pc, #168]	@ (80030ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003042:	4313      	orrs	r3, r2
 8003044:	610b      	str	r3, [r1, #16]
 8003046:	e027      	b.n	8003098 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d112      	bne.n	8003074 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800304e:	4b27      	ldr	r3, [pc, #156]	@ (80030ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003056:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	6892      	ldr	r2, [r2, #8]
 800305e:	0211      	lsls	r1, r2, #8
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6912      	ldr	r2, [r2, #16]
 8003064:	0852      	lsrs	r2, r2, #1
 8003066:	3a01      	subs	r2, #1
 8003068:	0552      	lsls	r2, r2, #21
 800306a:	430a      	orrs	r2, r1
 800306c:	491f      	ldr	r1, [pc, #124]	@ (80030ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800306e:	4313      	orrs	r3, r2
 8003070:	610b      	str	r3, [r1, #16]
 8003072:	e011      	b.n	8003098 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003074:	4b1d      	ldr	r3, [pc, #116]	@ (80030ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800307c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	6892      	ldr	r2, [r2, #8]
 8003084:	0211      	lsls	r1, r2, #8
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6952      	ldr	r2, [r2, #20]
 800308a:	0852      	lsrs	r2, r2, #1
 800308c:	3a01      	subs	r2, #1
 800308e:	0652      	lsls	r2, r2, #25
 8003090:	430a      	orrs	r2, r1
 8003092:	4916      	ldr	r1, [pc, #88]	@ (80030ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003094:	4313      	orrs	r3, r2
 8003096:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003098:	4b14      	ldr	r3, [pc, #80]	@ (80030ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a13      	ldr	r2, [pc, #76]	@ (80030ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800309e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80030a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a4:	f7fe fb0a 	bl	80016bc <HAL_GetTick>
 80030a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030aa:	e009      	b.n	80030c0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030ac:	f7fe fb06 	bl	80016bc <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d902      	bls.n	80030c0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	73fb      	strb	r3, [r7, #15]
          break;
 80030be:	e005      	b.n	80030cc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030c0:	4b0a      	ldr	r3, [pc, #40]	@ (80030ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d0ef      	beq.n	80030ac <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80030cc:	7bfb      	ldrb	r3, [r7, #15]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d106      	bne.n	80030e0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80030d2:	4b06      	ldr	r3, [pc, #24]	@ (80030ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80030d4:	691a      	ldr	r2, [r3, #16]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	4904      	ldr	r1, [pc, #16]	@ (80030ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80030e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40021000 	.word	0x40021000

080030f0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030fa:	2300      	movs	r3, #0
 80030fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030fe:	4b6a      	ldr	r3, [pc, #424]	@ (80032a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d018      	beq.n	800313c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800310a:	4b67      	ldr	r3, [pc, #412]	@ (80032a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	f003 0203 	and.w	r2, r3, #3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	429a      	cmp	r2, r3
 8003118:	d10d      	bne.n	8003136 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
       ||
 800311e:	2b00      	cmp	r3, #0
 8003120:	d009      	beq.n	8003136 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003122:	4b61      	ldr	r3, [pc, #388]	@ (80032a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	091b      	lsrs	r3, r3, #4
 8003128:	f003 0307 	and.w	r3, r3, #7
 800312c:	1c5a      	adds	r2, r3, #1
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
       ||
 8003132:	429a      	cmp	r2, r3
 8003134:	d047      	beq.n	80031c6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	73fb      	strb	r3, [r7, #15]
 800313a:	e044      	b.n	80031c6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b03      	cmp	r3, #3
 8003142:	d018      	beq.n	8003176 <RCCEx_PLLSAI2_Config+0x86>
 8003144:	2b03      	cmp	r3, #3
 8003146:	d825      	bhi.n	8003194 <RCCEx_PLLSAI2_Config+0xa4>
 8003148:	2b01      	cmp	r3, #1
 800314a:	d002      	beq.n	8003152 <RCCEx_PLLSAI2_Config+0x62>
 800314c:	2b02      	cmp	r3, #2
 800314e:	d009      	beq.n	8003164 <RCCEx_PLLSAI2_Config+0x74>
 8003150:	e020      	b.n	8003194 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003152:	4b55      	ldr	r3, [pc, #340]	@ (80032a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d11d      	bne.n	800319a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003162:	e01a      	b.n	800319a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003164:	4b50      	ldr	r3, [pc, #320]	@ (80032a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800316c:	2b00      	cmp	r3, #0
 800316e:	d116      	bne.n	800319e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003174:	e013      	b.n	800319e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003176:	4b4c      	ldr	r3, [pc, #304]	@ (80032a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10f      	bne.n	80031a2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003182:	4b49      	ldr	r3, [pc, #292]	@ (80032a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d109      	bne.n	80031a2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003192:	e006      	b.n	80031a2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	73fb      	strb	r3, [r7, #15]
      break;
 8003198:	e004      	b.n	80031a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800319a:	bf00      	nop
 800319c:	e002      	b.n	80031a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800319e:	bf00      	nop
 80031a0:	e000      	b.n	80031a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80031a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10d      	bne.n	80031c6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80031aa:	4b3f      	ldr	r3, [pc, #252]	@ (80032a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6819      	ldr	r1, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	3b01      	subs	r3, #1
 80031bc:	011b      	lsls	r3, r3, #4
 80031be:	430b      	orrs	r3, r1
 80031c0:	4939      	ldr	r1, [pc, #228]	@ (80032a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80031c6:	7bfb      	ldrb	r3, [r7, #15]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d167      	bne.n	800329c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80031cc:	4b36      	ldr	r3, [pc, #216]	@ (80032a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a35      	ldr	r2, [pc, #212]	@ (80032a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031d8:	f7fe fa70 	bl	80016bc <HAL_GetTick>
 80031dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80031de:	e009      	b.n	80031f4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80031e0:	f7fe fa6c 	bl	80016bc <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d902      	bls.n	80031f4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	73fb      	strb	r3, [r7, #15]
        break;
 80031f2:	e005      	b.n	8003200 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80031f4:	4b2c      	ldr	r3, [pc, #176]	@ (80032a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1ef      	bne.n	80031e0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003200:	7bfb      	ldrb	r3, [r7, #15]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d14a      	bne.n	800329c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d111      	bne.n	8003230 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800320c:	4b26      	ldr	r3, [pc, #152]	@ (80032a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003214:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6892      	ldr	r2, [r2, #8]
 800321c:	0211      	lsls	r1, r2, #8
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	68d2      	ldr	r2, [r2, #12]
 8003222:	0912      	lsrs	r2, r2, #4
 8003224:	0452      	lsls	r2, r2, #17
 8003226:	430a      	orrs	r2, r1
 8003228:	491f      	ldr	r1, [pc, #124]	@ (80032a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800322a:	4313      	orrs	r3, r2
 800322c:	614b      	str	r3, [r1, #20]
 800322e:	e011      	b.n	8003254 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003230:	4b1d      	ldr	r3, [pc, #116]	@ (80032a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003238:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6892      	ldr	r2, [r2, #8]
 8003240:	0211      	lsls	r1, r2, #8
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6912      	ldr	r2, [r2, #16]
 8003246:	0852      	lsrs	r2, r2, #1
 8003248:	3a01      	subs	r2, #1
 800324a:	0652      	lsls	r2, r2, #25
 800324c:	430a      	orrs	r2, r1
 800324e:	4916      	ldr	r1, [pc, #88]	@ (80032a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003250:	4313      	orrs	r3, r2
 8003252:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003254:	4b14      	ldr	r3, [pc, #80]	@ (80032a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a13      	ldr	r2, [pc, #76]	@ (80032a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800325a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800325e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003260:	f7fe fa2c 	bl	80016bc <HAL_GetTick>
 8003264:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003266:	e009      	b.n	800327c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003268:	f7fe fa28 	bl	80016bc <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d902      	bls.n	800327c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	73fb      	strb	r3, [r7, #15]
          break;
 800327a:	e005      	b.n	8003288 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800327c:	4b0a      	ldr	r3, [pc, #40]	@ (80032a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0ef      	beq.n	8003268 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003288:	7bfb      	ldrb	r3, [r7, #15]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d106      	bne.n	800329c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800328e:	4b06      	ldr	r3, [pc, #24]	@ (80032a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003290:	695a      	ldr	r2, [r3, #20]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	4904      	ldr	r1, [pc, #16]	@ (80032a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003298:	4313      	orrs	r3, r2
 800329a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800329c:	7bfb      	ldrb	r3, [r7, #15]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40021000 	.word	0x40021000

080032ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e040      	b.n	8003340 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d106      	bne.n	80032d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7fd fff6 	bl	80012c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2224      	movs	r2, #36	@ 0x24
 80032d8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 0201 	bic.w	r2, r2, #1
 80032e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d002      	beq.n	80032f8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 fb6a 	bl	80039cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 f8af 	bl	800345c <UART_SetConfig>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b01      	cmp	r3, #1
 8003302:	d101      	bne.n	8003308 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e01b      	b.n	8003340 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003316:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689a      	ldr	r2, [r3, #8]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003326:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0201 	orr.w	r2, r2, #1
 8003336:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 fbe9 	bl	8003b10 <UART_CheckIdleState>
 800333e:	4603      	mov	r3, r0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b08a      	sub	sp, #40	@ 0x28
 800334c:	af02      	add	r7, sp, #8
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	603b      	str	r3, [r7, #0]
 8003354:	4613      	mov	r3, r2
 8003356:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800335c:	2b20      	cmp	r3, #32
 800335e:	d177      	bne.n	8003450 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d002      	beq.n	800336c <HAL_UART_Transmit+0x24>
 8003366:	88fb      	ldrh	r3, [r7, #6]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e070      	b.n	8003452 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2221      	movs	r2, #33	@ 0x21
 800337c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800337e:	f7fe f99d 	bl	80016bc <HAL_GetTick>
 8003382:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	88fa      	ldrh	r2, [r7, #6]
 8003388:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	88fa      	ldrh	r2, [r7, #6]
 8003390:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800339c:	d108      	bne.n	80033b0 <HAL_UART_Transmit+0x68>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d104      	bne.n	80033b0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80033a6:	2300      	movs	r3, #0
 80033a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	61bb      	str	r3, [r7, #24]
 80033ae:	e003      	b.n	80033b8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033b4:	2300      	movs	r3, #0
 80033b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033b8:	e02f      	b.n	800341a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	9300      	str	r3, [sp, #0]
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	2200      	movs	r2, #0
 80033c2:	2180      	movs	r1, #128	@ 0x80
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f000 fc4b 	bl	8003c60 <UART_WaitOnFlagUntilTimeout>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d004      	beq.n	80033da <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2220      	movs	r2, #32
 80033d4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e03b      	b.n	8003452 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10b      	bne.n	80033f8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	881a      	ldrh	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033ec:	b292      	uxth	r2, r2
 80033ee:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	3302      	adds	r3, #2
 80033f4:	61bb      	str	r3, [r7, #24]
 80033f6:	e007      	b.n	8003408 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	781a      	ldrb	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	3301      	adds	r3, #1
 8003406:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800340e:	b29b      	uxth	r3, r3
 8003410:	3b01      	subs	r3, #1
 8003412:	b29a      	uxth	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003420:	b29b      	uxth	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1c9      	bne.n	80033ba <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	9300      	str	r3, [sp, #0]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	2200      	movs	r2, #0
 800342e:	2140      	movs	r1, #64	@ 0x40
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f000 fc15 	bl	8003c60 <UART_WaitOnFlagUntilTimeout>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d004      	beq.n	8003446 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2220      	movs	r2, #32
 8003440:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e005      	b.n	8003452 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2220      	movs	r2, #32
 800344a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800344c:	2300      	movs	r3, #0
 800344e:	e000      	b.n	8003452 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003450:	2302      	movs	r3, #2
  }
}
 8003452:	4618      	mov	r0, r3
 8003454:	3720      	adds	r7, #32
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
	...

0800345c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800345c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003460:	b08a      	sub	sp, #40	@ 0x28
 8003462:	af00      	add	r7, sp, #0
 8003464:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003466:	2300      	movs	r3, #0
 8003468:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	431a      	orrs	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	431a      	orrs	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	4313      	orrs	r3, r2
 8003482:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	4ba4      	ldr	r3, [pc, #656]	@ (800371c <UART_SetConfig+0x2c0>)
 800348c:	4013      	ands	r3, r2
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	6812      	ldr	r2, [r2, #0]
 8003492:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003494:	430b      	orrs	r3, r1
 8003496:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	68da      	ldr	r2, [r3, #12]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a99      	ldr	r2, [pc, #612]	@ (8003720 <UART_SetConfig+0x2c4>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d004      	beq.n	80034c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034c4:	4313      	orrs	r3, r2
 80034c6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034d8:	430a      	orrs	r2, r1
 80034da:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a90      	ldr	r2, [pc, #576]	@ (8003724 <UART_SetConfig+0x2c8>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d126      	bne.n	8003534 <UART_SetConfig+0xd8>
 80034e6:	4b90      	ldr	r3, [pc, #576]	@ (8003728 <UART_SetConfig+0x2cc>)
 80034e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ec:	f003 0303 	and.w	r3, r3, #3
 80034f0:	2b03      	cmp	r3, #3
 80034f2:	d81b      	bhi.n	800352c <UART_SetConfig+0xd0>
 80034f4:	a201      	add	r2, pc, #4	@ (adr r2, 80034fc <UART_SetConfig+0xa0>)
 80034f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fa:	bf00      	nop
 80034fc:	0800350d 	.word	0x0800350d
 8003500:	0800351d 	.word	0x0800351d
 8003504:	08003515 	.word	0x08003515
 8003508:	08003525 	.word	0x08003525
 800350c:	2301      	movs	r3, #1
 800350e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003512:	e116      	b.n	8003742 <UART_SetConfig+0x2e6>
 8003514:	2302      	movs	r3, #2
 8003516:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800351a:	e112      	b.n	8003742 <UART_SetConfig+0x2e6>
 800351c:	2304      	movs	r3, #4
 800351e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003522:	e10e      	b.n	8003742 <UART_SetConfig+0x2e6>
 8003524:	2308      	movs	r3, #8
 8003526:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800352a:	e10a      	b.n	8003742 <UART_SetConfig+0x2e6>
 800352c:	2310      	movs	r3, #16
 800352e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003532:	e106      	b.n	8003742 <UART_SetConfig+0x2e6>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a7c      	ldr	r2, [pc, #496]	@ (800372c <UART_SetConfig+0x2d0>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d138      	bne.n	80035b0 <UART_SetConfig+0x154>
 800353e:	4b7a      	ldr	r3, [pc, #488]	@ (8003728 <UART_SetConfig+0x2cc>)
 8003540:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003544:	f003 030c 	and.w	r3, r3, #12
 8003548:	2b0c      	cmp	r3, #12
 800354a:	d82d      	bhi.n	80035a8 <UART_SetConfig+0x14c>
 800354c:	a201      	add	r2, pc, #4	@ (adr r2, 8003554 <UART_SetConfig+0xf8>)
 800354e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003552:	bf00      	nop
 8003554:	08003589 	.word	0x08003589
 8003558:	080035a9 	.word	0x080035a9
 800355c:	080035a9 	.word	0x080035a9
 8003560:	080035a9 	.word	0x080035a9
 8003564:	08003599 	.word	0x08003599
 8003568:	080035a9 	.word	0x080035a9
 800356c:	080035a9 	.word	0x080035a9
 8003570:	080035a9 	.word	0x080035a9
 8003574:	08003591 	.word	0x08003591
 8003578:	080035a9 	.word	0x080035a9
 800357c:	080035a9 	.word	0x080035a9
 8003580:	080035a9 	.word	0x080035a9
 8003584:	080035a1 	.word	0x080035a1
 8003588:	2300      	movs	r3, #0
 800358a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800358e:	e0d8      	b.n	8003742 <UART_SetConfig+0x2e6>
 8003590:	2302      	movs	r3, #2
 8003592:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003596:	e0d4      	b.n	8003742 <UART_SetConfig+0x2e6>
 8003598:	2304      	movs	r3, #4
 800359a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800359e:	e0d0      	b.n	8003742 <UART_SetConfig+0x2e6>
 80035a0:	2308      	movs	r3, #8
 80035a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035a6:	e0cc      	b.n	8003742 <UART_SetConfig+0x2e6>
 80035a8:	2310      	movs	r3, #16
 80035aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035ae:	e0c8      	b.n	8003742 <UART_SetConfig+0x2e6>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a5e      	ldr	r2, [pc, #376]	@ (8003730 <UART_SetConfig+0x2d4>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d125      	bne.n	8003606 <UART_SetConfig+0x1aa>
 80035ba:	4b5b      	ldr	r3, [pc, #364]	@ (8003728 <UART_SetConfig+0x2cc>)
 80035bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035c0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80035c4:	2b30      	cmp	r3, #48	@ 0x30
 80035c6:	d016      	beq.n	80035f6 <UART_SetConfig+0x19a>
 80035c8:	2b30      	cmp	r3, #48	@ 0x30
 80035ca:	d818      	bhi.n	80035fe <UART_SetConfig+0x1a2>
 80035cc:	2b20      	cmp	r3, #32
 80035ce:	d00a      	beq.n	80035e6 <UART_SetConfig+0x18a>
 80035d0:	2b20      	cmp	r3, #32
 80035d2:	d814      	bhi.n	80035fe <UART_SetConfig+0x1a2>
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d002      	beq.n	80035de <UART_SetConfig+0x182>
 80035d8:	2b10      	cmp	r3, #16
 80035da:	d008      	beq.n	80035ee <UART_SetConfig+0x192>
 80035dc:	e00f      	b.n	80035fe <UART_SetConfig+0x1a2>
 80035de:	2300      	movs	r3, #0
 80035e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035e4:	e0ad      	b.n	8003742 <UART_SetConfig+0x2e6>
 80035e6:	2302      	movs	r3, #2
 80035e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035ec:	e0a9      	b.n	8003742 <UART_SetConfig+0x2e6>
 80035ee:	2304      	movs	r3, #4
 80035f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035f4:	e0a5      	b.n	8003742 <UART_SetConfig+0x2e6>
 80035f6:	2308      	movs	r3, #8
 80035f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035fc:	e0a1      	b.n	8003742 <UART_SetConfig+0x2e6>
 80035fe:	2310      	movs	r3, #16
 8003600:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003604:	e09d      	b.n	8003742 <UART_SetConfig+0x2e6>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a4a      	ldr	r2, [pc, #296]	@ (8003734 <UART_SetConfig+0x2d8>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d125      	bne.n	800365c <UART_SetConfig+0x200>
 8003610:	4b45      	ldr	r3, [pc, #276]	@ (8003728 <UART_SetConfig+0x2cc>)
 8003612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003616:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800361a:	2bc0      	cmp	r3, #192	@ 0xc0
 800361c:	d016      	beq.n	800364c <UART_SetConfig+0x1f0>
 800361e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003620:	d818      	bhi.n	8003654 <UART_SetConfig+0x1f8>
 8003622:	2b80      	cmp	r3, #128	@ 0x80
 8003624:	d00a      	beq.n	800363c <UART_SetConfig+0x1e0>
 8003626:	2b80      	cmp	r3, #128	@ 0x80
 8003628:	d814      	bhi.n	8003654 <UART_SetConfig+0x1f8>
 800362a:	2b00      	cmp	r3, #0
 800362c:	d002      	beq.n	8003634 <UART_SetConfig+0x1d8>
 800362e:	2b40      	cmp	r3, #64	@ 0x40
 8003630:	d008      	beq.n	8003644 <UART_SetConfig+0x1e8>
 8003632:	e00f      	b.n	8003654 <UART_SetConfig+0x1f8>
 8003634:	2300      	movs	r3, #0
 8003636:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800363a:	e082      	b.n	8003742 <UART_SetConfig+0x2e6>
 800363c:	2302      	movs	r3, #2
 800363e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003642:	e07e      	b.n	8003742 <UART_SetConfig+0x2e6>
 8003644:	2304      	movs	r3, #4
 8003646:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800364a:	e07a      	b.n	8003742 <UART_SetConfig+0x2e6>
 800364c:	2308      	movs	r3, #8
 800364e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003652:	e076      	b.n	8003742 <UART_SetConfig+0x2e6>
 8003654:	2310      	movs	r3, #16
 8003656:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800365a:	e072      	b.n	8003742 <UART_SetConfig+0x2e6>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a35      	ldr	r2, [pc, #212]	@ (8003738 <UART_SetConfig+0x2dc>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d12a      	bne.n	80036bc <UART_SetConfig+0x260>
 8003666:	4b30      	ldr	r3, [pc, #192]	@ (8003728 <UART_SetConfig+0x2cc>)
 8003668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800366c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003670:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003674:	d01a      	beq.n	80036ac <UART_SetConfig+0x250>
 8003676:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800367a:	d81b      	bhi.n	80036b4 <UART_SetConfig+0x258>
 800367c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003680:	d00c      	beq.n	800369c <UART_SetConfig+0x240>
 8003682:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003686:	d815      	bhi.n	80036b4 <UART_SetConfig+0x258>
 8003688:	2b00      	cmp	r3, #0
 800368a:	d003      	beq.n	8003694 <UART_SetConfig+0x238>
 800368c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003690:	d008      	beq.n	80036a4 <UART_SetConfig+0x248>
 8003692:	e00f      	b.n	80036b4 <UART_SetConfig+0x258>
 8003694:	2300      	movs	r3, #0
 8003696:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800369a:	e052      	b.n	8003742 <UART_SetConfig+0x2e6>
 800369c:	2302      	movs	r3, #2
 800369e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036a2:	e04e      	b.n	8003742 <UART_SetConfig+0x2e6>
 80036a4:	2304      	movs	r3, #4
 80036a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036aa:	e04a      	b.n	8003742 <UART_SetConfig+0x2e6>
 80036ac:	2308      	movs	r3, #8
 80036ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036b2:	e046      	b.n	8003742 <UART_SetConfig+0x2e6>
 80036b4:	2310      	movs	r3, #16
 80036b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036ba:	e042      	b.n	8003742 <UART_SetConfig+0x2e6>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a17      	ldr	r2, [pc, #92]	@ (8003720 <UART_SetConfig+0x2c4>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d13a      	bne.n	800373c <UART_SetConfig+0x2e0>
 80036c6:	4b18      	ldr	r3, [pc, #96]	@ (8003728 <UART_SetConfig+0x2cc>)
 80036c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80036d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80036d4:	d01a      	beq.n	800370c <UART_SetConfig+0x2b0>
 80036d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80036da:	d81b      	bhi.n	8003714 <UART_SetConfig+0x2b8>
 80036dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036e0:	d00c      	beq.n	80036fc <UART_SetConfig+0x2a0>
 80036e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036e6:	d815      	bhi.n	8003714 <UART_SetConfig+0x2b8>
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d003      	beq.n	80036f4 <UART_SetConfig+0x298>
 80036ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036f0:	d008      	beq.n	8003704 <UART_SetConfig+0x2a8>
 80036f2:	e00f      	b.n	8003714 <UART_SetConfig+0x2b8>
 80036f4:	2300      	movs	r3, #0
 80036f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036fa:	e022      	b.n	8003742 <UART_SetConfig+0x2e6>
 80036fc:	2302      	movs	r3, #2
 80036fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003702:	e01e      	b.n	8003742 <UART_SetConfig+0x2e6>
 8003704:	2304      	movs	r3, #4
 8003706:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800370a:	e01a      	b.n	8003742 <UART_SetConfig+0x2e6>
 800370c:	2308      	movs	r3, #8
 800370e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003712:	e016      	b.n	8003742 <UART_SetConfig+0x2e6>
 8003714:	2310      	movs	r3, #16
 8003716:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800371a:	e012      	b.n	8003742 <UART_SetConfig+0x2e6>
 800371c:	efff69f3 	.word	0xefff69f3
 8003720:	40008000 	.word	0x40008000
 8003724:	40013800 	.word	0x40013800
 8003728:	40021000 	.word	0x40021000
 800372c:	40004400 	.word	0x40004400
 8003730:	40004800 	.word	0x40004800
 8003734:	40004c00 	.word	0x40004c00
 8003738:	40005000 	.word	0x40005000
 800373c:	2310      	movs	r3, #16
 800373e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a9f      	ldr	r2, [pc, #636]	@ (80039c4 <UART_SetConfig+0x568>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d17a      	bne.n	8003842 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800374c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003750:	2b08      	cmp	r3, #8
 8003752:	d824      	bhi.n	800379e <UART_SetConfig+0x342>
 8003754:	a201      	add	r2, pc, #4	@ (adr r2, 800375c <UART_SetConfig+0x300>)
 8003756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800375a:	bf00      	nop
 800375c:	08003781 	.word	0x08003781
 8003760:	0800379f 	.word	0x0800379f
 8003764:	08003789 	.word	0x08003789
 8003768:	0800379f 	.word	0x0800379f
 800376c:	0800378f 	.word	0x0800378f
 8003770:	0800379f 	.word	0x0800379f
 8003774:	0800379f 	.word	0x0800379f
 8003778:	0800379f 	.word	0x0800379f
 800377c:	08003797 	.word	0x08003797
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003780:	f7ff f84c 	bl	800281c <HAL_RCC_GetPCLK1Freq>
 8003784:	61f8      	str	r0, [r7, #28]
        break;
 8003786:	e010      	b.n	80037aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003788:	4b8f      	ldr	r3, [pc, #572]	@ (80039c8 <UART_SetConfig+0x56c>)
 800378a:	61fb      	str	r3, [r7, #28]
        break;
 800378c:	e00d      	b.n	80037aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800378e:	f7fe ffad 	bl	80026ec <HAL_RCC_GetSysClockFreq>
 8003792:	61f8      	str	r0, [r7, #28]
        break;
 8003794:	e009      	b.n	80037aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003796:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800379a:	61fb      	str	r3, [r7, #28]
        break;
 800379c:	e005      	b.n	80037aa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800379e:	2300      	movs	r3, #0
 80037a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80037a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f000 80fb 	beq.w	80039a8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	4613      	mov	r3, r2
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	4413      	add	r3, r2
 80037bc:	69fa      	ldr	r2, [r7, #28]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d305      	bcc.n	80037ce <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80037c8:	69fa      	ldr	r2, [r7, #28]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d903      	bls.n	80037d6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80037d4:	e0e8      	b.n	80039a8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	2200      	movs	r2, #0
 80037da:	461c      	mov	r4, r3
 80037dc:	4615      	mov	r5, r2
 80037de:	f04f 0200 	mov.w	r2, #0
 80037e2:	f04f 0300 	mov.w	r3, #0
 80037e6:	022b      	lsls	r3, r5, #8
 80037e8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80037ec:	0222      	lsls	r2, r4, #8
 80037ee:	68f9      	ldr	r1, [r7, #12]
 80037f0:	6849      	ldr	r1, [r1, #4]
 80037f2:	0849      	lsrs	r1, r1, #1
 80037f4:	2000      	movs	r0, #0
 80037f6:	4688      	mov	r8, r1
 80037f8:	4681      	mov	r9, r0
 80037fa:	eb12 0a08 	adds.w	sl, r2, r8
 80037fe:	eb43 0b09 	adc.w	fp, r3, r9
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	603b      	str	r3, [r7, #0]
 800380a:	607a      	str	r2, [r7, #4]
 800380c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003810:	4650      	mov	r0, sl
 8003812:	4659      	mov	r1, fp
 8003814:	f7fd fa38 	bl	8000c88 <__aeabi_uldivmod>
 8003818:	4602      	mov	r2, r0
 800381a:	460b      	mov	r3, r1
 800381c:	4613      	mov	r3, r2
 800381e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003826:	d308      	bcc.n	800383a <UART_SetConfig+0x3de>
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800382e:	d204      	bcs.n	800383a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	60da      	str	r2, [r3, #12]
 8003838:	e0b6      	b.n	80039a8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003840:	e0b2      	b.n	80039a8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800384a:	d15e      	bne.n	800390a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800384c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003850:	2b08      	cmp	r3, #8
 8003852:	d828      	bhi.n	80038a6 <UART_SetConfig+0x44a>
 8003854:	a201      	add	r2, pc, #4	@ (adr r2, 800385c <UART_SetConfig+0x400>)
 8003856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800385a:	bf00      	nop
 800385c:	08003881 	.word	0x08003881
 8003860:	08003889 	.word	0x08003889
 8003864:	08003891 	.word	0x08003891
 8003868:	080038a7 	.word	0x080038a7
 800386c:	08003897 	.word	0x08003897
 8003870:	080038a7 	.word	0x080038a7
 8003874:	080038a7 	.word	0x080038a7
 8003878:	080038a7 	.word	0x080038a7
 800387c:	0800389f 	.word	0x0800389f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003880:	f7fe ffcc 	bl	800281c <HAL_RCC_GetPCLK1Freq>
 8003884:	61f8      	str	r0, [r7, #28]
        break;
 8003886:	e014      	b.n	80038b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003888:	f7fe ffde 	bl	8002848 <HAL_RCC_GetPCLK2Freq>
 800388c:	61f8      	str	r0, [r7, #28]
        break;
 800388e:	e010      	b.n	80038b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003890:	4b4d      	ldr	r3, [pc, #308]	@ (80039c8 <UART_SetConfig+0x56c>)
 8003892:	61fb      	str	r3, [r7, #28]
        break;
 8003894:	e00d      	b.n	80038b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003896:	f7fe ff29 	bl	80026ec <HAL_RCC_GetSysClockFreq>
 800389a:	61f8      	str	r0, [r7, #28]
        break;
 800389c:	e009      	b.n	80038b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800389e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038a2:	61fb      	str	r3, [r7, #28]
        break;
 80038a4:	e005      	b.n	80038b2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80038a6:	2300      	movs	r3, #0
 80038a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80038b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d077      	beq.n	80039a8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	005a      	lsls	r2, r3, #1
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	085b      	lsrs	r3, r3, #1
 80038c2:	441a      	add	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038cc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	2b0f      	cmp	r3, #15
 80038d2:	d916      	bls.n	8003902 <UART_SetConfig+0x4a6>
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038da:	d212      	bcs.n	8003902 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	b29b      	uxth	r3, r3
 80038e0:	f023 030f 	bic.w	r3, r3, #15
 80038e4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	085b      	lsrs	r3, r3, #1
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	8afb      	ldrh	r3, [r7, #22]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	8afa      	ldrh	r2, [r7, #22]
 80038fe:	60da      	str	r2, [r3, #12]
 8003900:	e052      	b.n	80039a8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003908:	e04e      	b.n	80039a8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800390a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800390e:	2b08      	cmp	r3, #8
 8003910:	d827      	bhi.n	8003962 <UART_SetConfig+0x506>
 8003912:	a201      	add	r2, pc, #4	@ (adr r2, 8003918 <UART_SetConfig+0x4bc>)
 8003914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003918:	0800393d 	.word	0x0800393d
 800391c:	08003945 	.word	0x08003945
 8003920:	0800394d 	.word	0x0800394d
 8003924:	08003963 	.word	0x08003963
 8003928:	08003953 	.word	0x08003953
 800392c:	08003963 	.word	0x08003963
 8003930:	08003963 	.word	0x08003963
 8003934:	08003963 	.word	0x08003963
 8003938:	0800395b 	.word	0x0800395b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800393c:	f7fe ff6e 	bl	800281c <HAL_RCC_GetPCLK1Freq>
 8003940:	61f8      	str	r0, [r7, #28]
        break;
 8003942:	e014      	b.n	800396e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003944:	f7fe ff80 	bl	8002848 <HAL_RCC_GetPCLK2Freq>
 8003948:	61f8      	str	r0, [r7, #28]
        break;
 800394a:	e010      	b.n	800396e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800394c:	4b1e      	ldr	r3, [pc, #120]	@ (80039c8 <UART_SetConfig+0x56c>)
 800394e:	61fb      	str	r3, [r7, #28]
        break;
 8003950:	e00d      	b.n	800396e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003952:	f7fe fecb 	bl	80026ec <HAL_RCC_GetSysClockFreq>
 8003956:	61f8      	str	r0, [r7, #28]
        break;
 8003958:	e009      	b.n	800396e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800395a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800395e:	61fb      	str	r3, [r7, #28]
        break;
 8003960:	e005      	b.n	800396e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003962:	2300      	movs	r3, #0
 8003964:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800396c:	bf00      	nop
    }

    if (pclk != 0U)
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d019      	beq.n	80039a8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	085a      	lsrs	r2, r3, #1
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	441a      	add	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	fbb2 f3f3 	udiv	r3, r2, r3
 8003986:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	2b0f      	cmp	r3, #15
 800398c:	d909      	bls.n	80039a2 <UART_SetConfig+0x546>
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003994:	d205      	bcs.n	80039a2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	b29a      	uxth	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	60da      	str	r2, [r3, #12]
 80039a0:	e002      	b.n	80039a8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80039b4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3728      	adds	r7, #40	@ 0x28
 80039bc:	46bd      	mov	sp, r7
 80039be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039c2:	bf00      	nop
 80039c4:	40008000 	.word	0x40008000
 80039c8:	00f42400 	.word	0x00f42400

080039cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d8:	f003 0308 	and.w	r3, r3, #8
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00a      	beq.n	80039f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00a      	beq.n	8003a18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00a      	beq.n	8003a3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3e:	f003 0304 	and.w	r3, r3, #4
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00a      	beq.n	8003a5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a60:	f003 0310 	and.w	r3, r3, #16
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00a      	beq.n	8003a7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a82:	f003 0320 	and.w	r3, r3, #32
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00a      	beq.n	8003aa0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d01a      	beq.n	8003ae2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003aca:	d10a      	bne.n	8003ae2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00a      	beq.n	8003b04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	605a      	str	r2, [r3, #4]
  }
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b098      	sub	sp, #96	@ 0x60
 8003b14:	af02      	add	r7, sp, #8
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b20:	f7fd fdcc 	bl	80016bc <HAL_GetTick>
 8003b24:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0308 	and.w	r3, r3, #8
 8003b30:	2b08      	cmp	r3, #8
 8003b32:	d12e      	bne.n	8003b92 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b34:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f88c 	bl	8003c60 <UART_WaitOnFlagUntilTimeout>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d021      	beq.n	8003b92 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b56:	e853 3f00 	ldrex	r3, [r3]
 8003b5a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b62:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	461a      	mov	r2, r3
 8003b6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b6e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b74:	e841 2300 	strex	r3, r2, [r1]
 8003b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1e6      	bne.n	8003b4e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2220      	movs	r2, #32
 8003b84:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e062      	b.n	8003c58 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	2b04      	cmp	r3, #4
 8003b9e:	d149      	bne.n	8003c34 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ba0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f856 	bl	8003c60 <UART_WaitOnFlagUntilTimeout>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d03c      	beq.n	8003c34 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc2:	e853 3f00 	ldrex	r3, [r3]
 8003bc6:	623b      	str	r3, [r7, #32]
   return(result);
 8003bc8:	6a3b      	ldr	r3, [r7, #32]
 8003bca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bda:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bdc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003bde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003be0:	e841 2300 	strex	r3, r2, [r1]
 8003be4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1e6      	bne.n	8003bba <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	3308      	adds	r3, #8
 8003bf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	e853 3f00 	ldrex	r3, [r3]
 8003bfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f023 0301 	bic.w	r3, r3, #1
 8003c02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	3308      	adds	r3, #8
 8003c0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c0c:	61fa      	str	r2, [r7, #28]
 8003c0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c10:	69b9      	ldr	r1, [r7, #24]
 8003c12:	69fa      	ldr	r2, [r7, #28]
 8003c14:	e841 2300 	strex	r3, r2, [r1]
 8003c18:	617b      	str	r3, [r7, #20]
   return(result);
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1e5      	bne.n	8003bec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e011      	b.n	8003c58 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2220      	movs	r2, #32
 8003c38:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3758      	adds	r7, #88	@ 0x58
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	603b      	str	r3, [r7, #0]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c70:	e04f      	b.n	8003d12 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c78:	d04b      	beq.n	8003d12 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c7a:	f7fd fd1f 	bl	80016bc <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d302      	bcc.n	8003c90 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e04e      	b.n	8003d32 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0304 	and.w	r3, r3, #4
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d037      	beq.n	8003d12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	2b80      	cmp	r3, #128	@ 0x80
 8003ca6:	d034      	beq.n	8003d12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	2b40      	cmp	r3, #64	@ 0x40
 8003cac:	d031      	beq.n	8003d12 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	69db      	ldr	r3, [r3, #28]
 8003cb4:	f003 0308 	and.w	r3, r3, #8
 8003cb8:	2b08      	cmp	r3, #8
 8003cba:	d110      	bne.n	8003cde <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2208      	movs	r2, #8
 8003cc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f000 f838 	bl	8003d3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2208      	movs	r2, #8
 8003cce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e029      	b.n	8003d32 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ce8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cec:	d111      	bne.n	8003d12 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003cf6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f000 f81e 	bl	8003d3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2220      	movs	r2, #32
 8003d02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e00f      	b.n	8003d32 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	69da      	ldr	r2, [r3, #28]
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	68ba      	ldr	r2, [r7, #8]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	bf0c      	ite	eq
 8003d22:	2301      	moveq	r3, #1
 8003d24:	2300      	movne	r3, #0
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	461a      	mov	r2, r3
 8003d2a:	79fb      	ldrb	r3, [r7, #7]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d0a0      	beq.n	8003c72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b095      	sub	sp, #84	@ 0x54
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d4a:	e853 3f00 	ldrex	r3, [r3]
 8003d4e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d60:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d62:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d64:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d68:	e841 2300 	strex	r3, r2, [r1]
 8003d6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1e6      	bne.n	8003d42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	3308      	adds	r3, #8
 8003d7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7c:	6a3b      	ldr	r3, [r7, #32]
 8003d7e:	e853 3f00 	ldrex	r3, [r3]
 8003d82:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	f023 0301 	bic.w	r3, r3, #1
 8003d8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	3308      	adds	r3, #8
 8003d92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d94:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d9c:	e841 2300 	strex	r3, r2, [r1]
 8003da0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1e5      	bne.n	8003d74 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d118      	bne.n	8003de2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	e853 3f00 	ldrex	r3, [r3]
 8003dbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	f023 0310 	bic.w	r3, r3, #16
 8003dc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dce:	61bb      	str	r3, [r7, #24]
 8003dd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd2:	6979      	ldr	r1, [r7, #20]
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	e841 2300 	strex	r3, r2, [r1]
 8003dda:	613b      	str	r3, [r7, #16]
   return(result);
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1e6      	bne.n	8003db0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2220      	movs	r2, #32
 8003de6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003df6:	bf00      	nop
 8003df8:	3754      	adds	r7, #84	@ 0x54
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <__cvt>:
 8003e02:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e06:	ec57 6b10 	vmov	r6, r7, d0
 8003e0a:	2f00      	cmp	r7, #0
 8003e0c:	460c      	mov	r4, r1
 8003e0e:	4619      	mov	r1, r3
 8003e10:	463b      	mov	r3, r7
 8003e12:	bfbb      	ittet	lt
 8003e14:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003e18:	461f      	movlt	r7, r3
 8003e1a:	2300      	movge	r3, #0
 8003e1c:	232d      	movlt	r3, #45	@ 0x2d
 8003e1e:	700b      	strb	r3, [r1, #0]
 8003e20:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003e22:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003e26:	4691      	mov	r9, r2
 8003e28:	f023 0820 	bic.w	r8, r3, #32
 8003e2c:	bfbc      	itt	lt
 8003e2e:	4632      	movlt	r2, r6
 8003e30:	4616      	movlt	r6, r2
 8003e32:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003e36:	d005      	beq.n	8003e44 <__cvt+0x42>
 8003e38:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003e3c:	d100      	bne.n	8003e40 <__cvt+0x3e>
 8003e3e:	3401      	adds	r4, #1
 8003e40:	2102      	movs	r1, #2
 8003e42:	e000      	b.n	8003e46 <__cvt+0x44>
 8003e44:	2103      	movs	r1, #3
 8003e46:	ab03      	add	r3, sp, #12
 8003e48:	9301      	str	r3, [sp, #4]
 8003e4a:	ab02      	add	r3, sp, #8
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	ec47 6b10 	vmov	d0, r6, r7
 8003e52:	4653      	mov	r3, sl
 8003e54:	4622      	mov	r2, r4
 8003e56:	f001 f977 	bl	8005148 <_dtoa_r>
 8003e5a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003e5e:	4605      	mov	r5, r0
 8003e60:	d119      	bne.n	8003e96 <__cvt+0x94>
 8003e62:	f019 0f01 	tst.w	r9, #1
 8003e66:	d00e      	beq.n	8003e86 <__cvt+0x84>
 8003e68:	eb00 0904 	add.w	r9, r0, r4
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	2300      	movs	r3, #0
 8003e70:	4630      	mov	r0, r6
 8003e72:	4639      	mov	r1, r7
 8003e74:	f7fc fe28 	bl	8000ac8 <__aeabi_dcmpeq>
 8003e78:	b108      	cbz	r0, 8003e7e <__cvt+0x7c>
 8003e7a:	f8cd 900c 	str.w	r9, [sp, #12]
 8003e7e:	2230      	movs	r2, #48	@ 0x30
 8003e80:	9b03      	ldr	r3, [sp, #12]
 8003e82:	454b      	cmp	r3, r9
 8003e84:	d31e      	bcc.n	8003ec4 <__cvt+0xc2>
 8003e86:	9b03      	ldr	r3, [sp, #12]
 8003e88:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003e8a:	1b5b      	subs	r3, r3, r5
 8003e8c:	4628      	mov	r0, r5
 8003e8e:	6013      	str	r3, [r2, #0]
 8003e90:	b004      	add	sp, #16
 8003e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e96:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003e9a:	eb00 0904 	add.w	r9, r0, r4
 8003e9e:	d1e5      	bne.n	8003e6c <__cvt+0x6a>
 8003ea0:	7803      	ldrb	r3, [r0, #0]
 8003ea2:	2b30      	cmp	r3, #48	@ 0x30
 8003ea4:	d10a      	bne.n	8003ebc <__cvt+0xba>
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	4630      	mov	r0, r6
 8003eac:	4639      	mov	r1, r7
 8003eae:	f7fc fe0b 	bl	8000ac8 <__aeabi_dcmpeq>
 8003eb2:	b918      	cbnz	r0, 8003ebc <__cvt+0xba>
 8003eb4:	f1c4 0401 	rsb	r4, r4, #1
 8003eb8:	f8ca 4000 	str.w	r4, [sl]
 8003ebc:	f8da 3000 	ldr.w	r3, [sl]
 8003ec0:	4499      	add	r9, r3
 8003ec2:	e7d3      	b.n	8003e6c <__cvt+0x6a>
 8003ec4:	1c59      	adds	r1, r3, #1
 8003ec6:	9103      	str	r1, [sp, #12]
 8003ec8:	701a      	strb	r2, [r3, #0]
 8003eca:	e7d9      	b.n	8003e80 <__cvt+0x7e>

08003ecc <__exponent>:
 8003ecc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ece:	2900      	cmp	r1, #0
 8003ed0:	bfba      	itte	lt
 8003ed2:	4249      	neglt	r1, r1
 8003ed4:	232d      	movlt	r3, #45	@ 0x2d
 8003ed6:	232b      	movge	r3, #43	@ 0x2b
 8003ed8:	2909      	cmp	r1, #9
 8003eda:	7002      	strb	r2, [r0, #0]
 8003edc:	7043      	strb	r3, [r0, #1]
 8003ede:	dd29      	ble.n	8003f34 <__exponent+0x68>
 8003ee0:	f10d 0307 	add.w	r3, sp, #7
 8003ee4:	461d      	mov	r5, r3
 8003ee6:	270a      	movs	r7, #10
 8003ee8:	461a      	mov	r2, r3
 8003eea:	fbb1 f6f7 	udiv	r6, r1, r7
 8003eee:	fb07 1416 	mls	r4, r7, r6, r1
 8003ef2:	3430      	adds	r4, #48	@ 0x30
 8003ef4:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003ef8:	460c      	mov	r4, r1
 8003efa:	2c63      	cmp	r4, #99	@ 0x63
 8003efc:	f103 33ff 	add.w	r3, r3, #4294967295
 8003f00:	4631      	mov	r1, r6
 8003f02:	dcf1      	bgt.n	8003ee8 <__exponent+0x1c>
 8003f04:	3130      	adds	r1, #48	@ 0x30
 8003f06:	1e94      	subs	r4, r2, #2
 8003f08:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003f0c:	1c41      	adds	r1, r0, #1
 8003f0e:	4623      	mov	r3, r4
 8003f10:	42ab      	cmp	r3, r5
 8003f12:	d30a      	bcc.n	8003f2a <__exponent+0x5e>
 8003f14:	f10d 0309 	add.w	r3, sp, #9
 8003f18:	1a9b      	subs	r3, r3, r2
 8003f1a:	42ac      	cmp	r4, r5
 8003f1c:	bf88      	it	hi
 8003f1e:	2300      	movhi	r3, #0
 8003f20:	3302      	adds	r3, #2
 8003f22:	4403      	add	r3, r0
 8003f24:	1a18      	subs	r0, r3, r0
 8003f26:	b003      	add	sp, #12
 8003f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f2a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003f2e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003f32:	e7ed      	b.n	8003f10 <__exponent+0x44>
 8003f34:	2330      	movs	r3, #48	@ 0x30
 8003f36:	3130      	adds	r1, #48	@ 0x30
 8003f38:	7083      	strb	r3, [r0, #2]
 8003f3a:	70c1      	strb	r1, [r0, #3]
 8003f3c:	1d03      	adds	r3, r0, #4
 8003f3e:	e7f1      	b.n	8003f24 <__exponent+0x58>

08003f40 <_printf_float>:
 8003f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f44:	b08d      	sub	sp, #52	@ 0x34
 8003f46:	460c      	mov	r4, r1
 8003f48:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003f4c:	4616      	mov	r6, r2
 8003f4e:	461f      	mov	r7, r3
 8003f50:	4605      	mov	r5, r0
 8003f52:	f000 fff3 	bl	8004f3c <_localeconv_r>
 8003f56:	6803      	ldr	r3, [r0, #0]
 8003f58:	9304      	str	r3, [sp, #16]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7fc f988 	bl	8000270 <strlen>
 8003f60:	2300      	movs	r3, #0
 8003f62:	930a      	str	r3, [sp, #40]	@ 0x28
 8003f64:	f8d8 3000 	ldr.w	r3, [r8]
 8003f68:	9005      	str	r0, [sp, #20]
 8003f6a:	3307      	adds	r3, #7
 8003f6c:	f023 0307 	bic.w	r3, r3, #7
 8003f70:	f103 0208 	add.w	r2, r3, #8
 8003f74:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003f78:	f8d4 b000 	ldr.w	fp, [r4]
 8003f7c:	f8c8 2000 	str.w	r2, [r8]
 8003f80:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003f84:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003f88:	9307      	str	r3, [sp, #28]
 8003f8a:	f8cd 8018 	str.w	r8, [sp, #24]
 8003f8e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003f92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f96:	4b9c      	ldr	r3, [pc, #624]	@ (8004208 <_printf_float+0x2c8>)
 8003f98:	f04f 32ff 	mov.w	r2, #4294967295
 8003f9c:	f7fc fdc6 	bl	8000b2c <__aeabi_dcmpun>
 8003fa0:	bb70      	cbnz	r0, 8004000 <_printf_float+0xc0>
 8003fa2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003fa6:	4b98      	ldr	r3, [pc, #608]	@ (8004208 <_printf_float+0x2c8>)
 8003fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fac:	f7fc fda0 	bl	8000af0 <__aeabi_dcmple>
 8003fb0:	bb30      	cbnz	r0, 8004000 <_printf_float+0xc0>
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	4640      	mov	r0, r8
 8003fb8:	4649      	mov	r1, r9
 8003fba:	f7fc fd8f 	bl	8000adc <__aeabi_dcmplt>
 8003fbe:	b110      	cbz	r0, 8003fc6 <_printf_float+0x86>
 8003fc0:	232d      	movs	r3, #45	@ 0x2d
 8003fc2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fc6:	4a91      	ldr	r2, [pc, #580]	@ (800420c <_printf_float+0x2cc>)
 8003fc8:	4b91      	ldr	r3, [pc, #580]	@ (8004210 <_printf_float+0x2d0>)
 8003fca:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003fce:	bf94      	ite	ls
 8003fd0:	4690      	movls	r8, r2
 8003fd2:	4698      	movhi	r8, r3
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	6123      	str	r3, [r4, #16]
 8003fd8:	f02b 0304 	bic.w	r3, fp, #4
 8003fdc:	6023      	str	r3, [r4, #0]
 8003fde:	f04f 0900 	mov.w	r9, #0
 8003fe2:	9700      	str	r7, [sp, #0]
 8003fe4:	4633      	mov	r3, r6
 8003fe6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003fe8:	4621      	mov	r1, r4
 8003fea:	4628      	mov	r0, r5
 8003fec:	f000 f9d2 	bl	8004394 <_printf_common>
 8003ff0:	3001      	adds	r0, #1
 8003ff2:	f040 808d 	bne.w	8004110 <_printf_float+0x1d0>
 8003ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8003ffa:	b00d      	add	sp, #52	@ 0x34
 8003ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004000:	4642      	mov	r2, r8
 8004002:	464b      	mov	r3, r9
 8004004:	4640      	mov	r0, r8
 8004006:	4649      	mov	r1, r9
 8004008:	f7fc fd90 	bl	8000b2c <__aeabi_dcmpun>
 800400c:	b140      	cbz	r0, 8004020 <_printf_float+0xe0>
 800400e:	464b      	mov	r3, r9
 8004010:	2b00      	cmp	r3, #0
 8004012:	bfbc      	itt	lt
 8004014:	232d      	movlt	r3, #45	@ 0x2d
 8004016:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800401a:	4a7e      	ldr	r2, [pc, #504]	@ (8004214 <_printf_float+0x2d4>)
 800401c:	4b7e      	ldr	r3, [pc, #504]	@ (8004218 <_printf_float+0x2d8>)
 800401e:	e7d4      	b.n	8003fca <_printf_float+0x8a>
 8004020:	6863      	ldr	r3, [r4, #4]
 8004022:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004026:	9206      	str	r2, [sp, #24]
 8004028:	1c5a      	adds	r2, r3, #1
 800402a:	d13b      	bne.n	80040a4 <_printf_float+0x164>
 800402c:	2306      	movs	r3, #6
 800402e:	6063      	str	r3, [r4, #4]
 8004030:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004034:	2300      	movs	r3, #0
 8004036:	6022      	str	r2, [r4, #0]
 8004038:	9303      	str	r3, [sp, #12]
 800403a:	ab0a      	add	r3, sp, #40	@ 0x28
 800403c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004040:	ab09      	add	r3, sp, #36	@ 0x24
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	6861      	ldr	r1, [r4, #4]
 8004046:	ec49 8b10 	vmov	d0, r8, r9
 800404a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800404e:	4628      	mov	r0, r5
 8004050:	f7ff fed7 	bl	8003e02 <__cvt>
 8004054:	9b06      	ldr	r3, [sp, #24]
 8004056:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004058:	2b47      	cmp	r3, #71	@ 0x47
 800405a:	4680      	mov	r8, r0
 800405c:	d129      	bne.n	80040b2 <_printf_float+0x172>
 800405e:	1cc8      	adds	r0, r1, #3
 8004060:	db02      	blt.n	8004068 <_printf_float+0x128>
 8004062:	6863      	ldr	r3, [r4, #4]
 8004064:	4299      	cmp	r1, r3
 8004066:	dd41      	ble.n	80040ec <_printf_float+0x1ac>
 8004068:	f1aa 0a02 	sub.w	sl, sl, #2
 800406c:	fa5f fa8a 	uxtb.w	sl, sl
 8004070:	3901      	subs	r1, #1
 8004072:	4652      	mov	r2, sl
 8004074:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004078:	9109      	str	r1, [sp, #36]	@ 0x24
 800407a:	f7ff ff27 	bl	8003ecc <__exponent>
 800407e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004080:	1813      	adds	r3, r2, r0
 8004082:	2a01      	cmp	r2, #1
 8004084:	4681      	mov	r9, r0
 8004086:	6123      	str	r3, [r4, #16]
 8004088:	dc02      	bgt.n	8004090 <_printf_float+0x150>
 800408a:	6822      	ldr	r2, [r4, #0]
 800408c:	07d2      	lsls	r2, r2, #31
 800408e:	d501      	bpl.n	8004094 <_printf_float+0x154>
 8004090:	3301      	adds	r3, #1
 8004092:	6123      	str	r3, [r4, #16]
 8004094:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004098:	2b00      	cmp	r3, #0
 800409a:	d0a2      	beq.n	8003fe2 <_printf_float+0xa2>
 800409c:	232d      	movs	r3, #45	@ 0x2d
 800409e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040a2:	e79e      	b.n	8003fe2 <_printf_float+0xa2>
 80040a4:	9a06      	ldr	r2, [sp, #24]
 80040a6:	2a47      	cmp	r2, #71	@ 0x47
 80040a8:	d1c2      	bne.n	8004030 <_printf_float+0xf0>
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1c0      	bne.n	8004030 <_printf_float+0xf0>
 80040ae:	2301      	movs	r3, #1
 80040b0:	e7bd      	b.n	800402e <_printf_float+0xee>
 80040b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80040b6:	d9db      	bls.n	8004070 <_printf_float+0x130>
 80040b8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80040bc:	d118      	bne.n	80040f0 <_printf_float+0x1b0>
 80040be:	2900      	cmp	r1, #0
 80040c0:	6863      	ldr	r3, [r4, #4]
 80040c2:	dd0b      	ble.n	80040dc <_printf_float+0x19c>
 80040c4:	6121      	str	r1, [r4, #16]
 80040c6:	b913      	cbnz	r3, 80040ce <_printf_float+0x18e>
 80040c8:	6822      	ldr	r2, [r4, #0]
 80040ca:	07d0      	lsls	r0, r2, #31
 80040cc:	d502      	bpl.n	80040d4 <_printf_float+0x194>
 80040ce:	3301      	adds	r3, #1
 80040d0:	440b      	add	r3, r1
 80040d2:	6123      	str	r3, [r4, #16]
 80040d4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80040d6:	f04f 0900 	mov.w	r9, #0
 80040da:	e7db      	b.n	8004094 <_printf_float+0x154>
 80040dc:	b913      	cbnz	r3, 80040e4 <_printf_float+0x1a4>
 80040de:	6822      	ldr	r2, [r4, #0]
 80040e0:	07d2      	lsls	r2, r2, #31
 80040e2:	d501      	bpl.n	80040e8 <_printf_float+0x1a8>
 80040e4:	3302      	adds	r3, #2
 80040e6:	e7f4      	b.n	80040d2 <_printf_float+0x192>
 80040e8:	2301      	movs	r3, #1
 80040ea:	e7f2      	b.n	80040d2 <_printf_float+0x192>
 80040ec:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80040f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80040f2:	4299      	cmp	r1, r3
 80040f4:	db05      	blt.n	8004102 <_printf_float+0x1c2>
 80040f6:	6823      	ldr	r3, [r4, #0]
 80040f8:	6121      	str	r1, [r4, #16]
 80040fa:	07d8      	lsls	r0, r3, #31
 80040fc:	d5ea      	bpl.n	80040d4 <_printf_float+0x194>
 80040fe:	1c4b      	adds	r3, r1, #1
 8004100:	e7e7      	b.n	80040d2 <_printf_float+0x192>
 8004102:	2900      	cmp	r1, #0
 8004104:	bfd4      	ite	le
 8004106:	f1c1 0202 	rsble	r2, r1, #2
 800410a:	2201      	movgt	r2, #1
 800410c:	4413      	add	r3, r2
 800410e:	e7e0      	b.n	80040d2 <_printf_float+0x192>
 8004110:	6823      	ldr	r3, [r4, #0]
 8004112:	055a      	lsls	r2, r3, #21
 8004114:	d407      	bmi.n	8004126 <_printf_float+0x1e6>
 8004116:	6923      	ldr	r3, [r4, #16]
 8004118:	4642      	mov	r2, r8
 800411a:	4631      	mov	r1, r6
 800411c:	4628      	mov	r0, r5
 800411e:	47b8      	blx	r7
 8004120:	3001      	adds	r0, #1
 8004122:	d12b      	bne.n	800417c <_printf_float+0x23c>
 8004124:	e767      	b.n	8003ff6 <_printf_float+0xb6>
 8004126:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800412a:	f240 80dd 	bls.w	80042e8 <_printf_float+0x3a8>
 800412e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004132:	2200      	movs	r2, #0
 8004134:	2300      	movs	r3, #0
 8004136:	f7fc fcc7 	bl	8000ac8 <__aeabi_dcmpeq>
 800413a:	2800      	cmp	r0, #0
 800413c:	d033      	beq.n	80041a6 <_printf_float+0x266>
 800413e:	4a37      	ldr	r2, [pc, #220]	@ (800421c <_printf_float+0x2dc>)
 8004140:	2301      	movs	r3, #1
 8004142:	4631      	mov	r1, r6
 8004144:	4628      	mov	r0, r5
 8004146:	47b8      	blx	r7
 8004148:	3001      	adds	r0, #1
 800414a:	f43f af54 	beq.w	8003ff6 <_printf_float+0xb6>
 800414e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004152:	4543      	cmp	r3, r8
 8004154:	db02      	blt.n	800415c <_printf_float+0x21c>
 8004156:	6823      	ldr	r3, [r4, #0]
 8004158:	07d8      	lsls	r0, r3, #31
 800415a:	d50f      	bpl.n	800417c <_printf_float+0x23c>
 800415c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004160:	4631      	mov	r1, r6
 8004162:	4628      	mov	r0, r5
 8004164:	47b8      	blx	r7
 8004166:	3001      	adds	r0, #1
 8004168:	f43f af45 	beq.w	8003ff6 <_printf_float+0xb6>
 800416c:	f04f 0900 	mov.w	r9, #0
 8004170:	f108 38ff 	add.w	r8, r8, #4294967295
 8004174:	f104 0a1a 	add.w	sl, r4, #26
 8004178:	45c8      	cmp	r8, r9
 800417a:	dc09      	bgt.n	8004190 <_printf_float+0x250>
 800417c:	6823      	ldr	r3, [r4, #0]
 800417e:	079b      	lsls	r3, r3, #30
 8004180:	f100 8103 	bmi.w	800438a <_printf_float+0x44a>
 8004184:	68e0      	ldr	r0, [r4, #12]
 8004186:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004188:	4298      	cmp	r0, r3
 800418a:	bfb8      	it	lt
 800418c:	4618      	movlt	r0, r3
 800418e:	e734      	b.n	8003ffa <_printf_float+0xba>
 8004190:	2301      	movs	r3, #1
 8004192:	4652      	mov	r2, sl
 8004194:	4631      	mov	r1, r6
 8004196:	4628      	mov	r0, r5
 8004198:	47b8      	blx	r7
 800419a:	3001      	adds	r0, #1
 800419c:	f43f af2b 	beq.w	8003ff6 <_printf_float+0xb6>
 80041a0:	f109 0901 	add.w	r9, r9, #1
 80041a4:	e7e8      	b.n	8004178 <_printf_float+0x238>
 80041a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	dc39      	bgt.n	8004220 <_printf_float+0x2e0>
 80041ac:	4a1b      	ldr	r2, [pc, #108]	@ (800421c <_printf_float+0x2dc>)
 80041ae:	2301      	movs	r3, #1
 80041b0:	4631      	mov	r1, r6
 80041b2:	4628      	mov	r0, r5
 80041b4:	47b8      	blx	r7
 80041b6:	3001      	adds	r0, #1
 80041b8:	f43f af1d 	beq.w	8003ff6 <_printf_float+0xb6>
 80041bc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80041c0:	ea59 0303 	orrs.w	r3, r9, r3
 80041c4:	d102      	bne.n	80041cc <_printf_float+0x28c>
 80041c6:	6823      	ldr	r3, [r4, #0]
 80041c8:	07d9      	lsls	r1, r3, #31
 80041ca:	d5d7      	bpl.n	800417c <_printf_float+0x23c>
 80041cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80041d0:	4631      	mov	r1, r6
 80041d2:	4628      	mov	r0, r5
 80041d4:	47b8      	blx	r7
 80041d6:	3001      	adds	r0, #1
 80041d8:	f43f af0d 	beq.w	8003ff6 <_printf_float+0xb6>
 80041dc:	f04f 0a00 	mov.w	sl, #0
 80041e0:	f104 0b1a 	add.w	fp, r4, #26
 80041e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041e6:	425b      	negs	r3, r3
 80041e8:	4553      	cmp	r3, sl
 80041ea:	dc01      	bgt.n	80041f0 <_printf_float+0x2b0>
 80041ec:	464b      	mov	r3, r9
 80041ee:	e793      	b.n	8004118 <_printf_float+0x1d8>
 80041f0:	2301      	movs	r3, #1
 80041f2:	465a      	mov	r2, fp
 80041f4:	4631      	mov	r1, r6
 80041f6:	4628      	mov	r0, r5
 80041f8:	47b8      	blx	r7
 80041fa:	3001      	adds	r0, #1
 80041fc:	f43f aefb 	beq.w	8003ff6 <_printf_float+0xb6>
 8004200:	f10a 0a01 	add.w	sl, sl, #1
 8004204:	e7ee      	b.n	80041e4 <_printf_float+0x2a4>
 8004206:	bf00      	nop
 8004208:	7fefffff 	.word	0x7fefffff
 800420c:	08008678 	.word	0x08008678
 8004210:	0800867c 	.word	0x0800867c
 8004214:	08008680 	.word	0x08008680
 8004218:	08008684 	.word	0x08008684
 800421c:	08008688 	.word	0x08008688
 8004220:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004222:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004226:	4553      	cmp	r3, sl
 8004228:	bfa8      	it	ge
 800422a:	4653      	movge	r3, sl
 800422c:	2b00      	cmp	r3, #0
 800422e:	4699      	mov	r9, r3
 8004230:	dc36      	bgt.n	80042a0 <_printf_float+0x360>
 8004232:	f04f 0b00 	mov.w	fp, #0
 8004236:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800423a:	f104 021a 	add.w	r2, r4, #26
 800423e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004240:	9306      	str	r3, [sp, #24]
 8004242:	eba3 0309 	sub.w	r3, r3, r9
 8004246:	455b      	cmp	r3, fp
 8004248:	dc31      	bgt.n	80042ae <_printf_float+0x36e>
 800424a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800424c:	459a      	cmp	sl, r3
 800424e:	dc3a      	bgt.n	80042c6 <_printf_float+0x386>
 8004250:	6823      	ldr	r3, [r4, #0]
 8004252:	07da      	lsls	r2, r3, #31
 8004254:	d437      	bmi.n	80042c6 <_printf_float+0x386>
 8004256:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004258:	ebaa 0903 	sub.w	r9, sl, r3
 800425c:	9b06      	ldr	r3, [sp, #24]
 800425e:	ebaa 0303 	sub.w	r3, sl, r3
 8004262:	4599      	cmp	r9, r3
 8004264:	bfa8      	it	ge
 8004266:	4699      	movge	r9, r3
 8004268:	f1b9 0f00 	cmp.w	r9, #0
 800426c:	dc33      	bgt.n	80042d6 <_printf_float+0x396>
 800426e:	f04f 0800 	mov.w	r8, #0
 8004272:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004276:	f104 0b1a 	add.w	fp, r4, #26
 800427a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800427c:	ebaa 0303 	sub.w	r3, sl, r3
 8004280:	eba3 0309 	sub.w	r3, r3, r9
 8004284:	4543      	cmp	r3, r8
 8004286:	f77f af79 	ble.w	800417c <_printf_float+0x23c>
 800428a:	2301      	movs	r3, #1
 800428c:	465a      	mov	r2, fp
 800428e:	4631      	mov	r1, r6
 8004290:	4628      	mov	r0, r5
 8004292:	47b8      	blx	r7
 8004294:	3001      	adds	r0, #1
 8004296:	f43f aeae 	beq.w	8003ff6 <_printf_float+0xb6>
 800429a:	f108 0801 	add.w	r8, r8, #1
 800429e:	e7ec      	b.n	800427a <_printf_float+0x33a>
 80042a0:	4642      	mov	r2, r8
 80042a2:	4631      	mov	r1, r6
 80042a4:	4628      	mov	r0, r5
 80042a6:	47b8      	blx	r7
 80042a8:	3001      	adds	r0, #1
 80042aa:	d1c2      	bne.n	8004232 <_printf_float+0x2f2>
 80042ac:	e6a3      	b.n	8003ff6 <_printf_float+0xb6>
 80042ae:	2301      	movs	r3, #1
 80042b0:	4631      	mov	r1, r6
 80042b2:	4628      	mov	r0, r5
 80042b4:	9206      	str	r2, [sp, #24]
 80042b6:	47b8      	blx	r7
 80042b8:	3001      	adds	r0, #1
 80042ba:	f43f ae9c 	beq.w	8003ff6 <_printf_float+0xb6>
 80042be:	9a06      	ldr	r2, [sp, #24]
 80042c0:	f10b 0b01 	add.w	fp, fp, #1
 80042c4:	e7bb      	b.n	800423e <_printf_float+0x2fe>
 80042c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80042ca:	4631      	mov	r1, r6
 80042cc:	4628      	mov	r0, r5
 80042ce:	47b8      	blx	r7
 80042d0:	3001      	adds	r0, #1
 80042d2:	d1c0      	bne.n	8004256 <_printf_float+0x316>
 80042d4:	e68f      	b.n	8003ff6 <_printf_float+0xb6>
 80042d6:	9a06      	ldr	r2, [sp, #24]
 80042d8:	464b      	mov	r3, r9
 80042da:	4442      	add	r2, r8
 80042dc:	4631      	mov	r1, r6
 80042de:	4628      	mov	r0, r5
 80042e0:	47b8      	blx	r7
 80042e2:	3001      	adds	r0, #1
 80042e4:	d1c3      	bne.n	800426e <_printf_float+0x32e>
 80042e6:	e686      	b.n	8003ff6 <_printf_float+0xb6>
 80042e8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80042ec:	f1ba 0f01 	cmp.w	sl, #1
 80042f0:	dc01      	bgt.n	80042f6 <_printf_float+0x3b6>
 80042f2:	07db      	lsls	r3, r3, #31
 80042f4:	d536      	bpl.n	8004364 <_printf_float+0x424>
 80042f6:	2301      	movs	r3, #1
 80042f8:	4642      	mov	r2, r8
 80042fa:	4631      	mov	r1, r6
 80042fc:	4628      	mov	r0, r5
 80042fe:	47b8      	blx	r7
 8004300:	3001      	adds	r0, #1
 8004302:	f43f ae78 	beq.w	8003ff6 <_printf_float+0xb6>
 8004306:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800430a:	4631      	mov	r1, r6
 800430c:	4628      	mov	r0, r5
 800430e:	47b8      	blx	r7
 8004310:	3001      	adds	r0, #1
 8004312:	f43f ae70 	beq.w	8003ff6 <_printf_float+0xb6>
 8004316:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800431a:	2200      	movs	r2, #0
 800431c:	2300      	movs	r3, #0
 800431e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004322:	f7fc fbd1 	bl	8000ac8 <__aeabi_dcmpeq>
 8004326:	b9c0      	cbnz	r0, 800435a <_printf_float+0x41a>
 8004328:	4653      	mov	r3, sl
 800432a:	f108 0201 	add.w	r2, r8, #1
 800432e:	4631      	mov	r1, r6
 8004330:	4628      	mov	r0, r5
 8004332:	47b8      	blx	r7
 8004334:	3001      	adds	r0, #1
 8004336:	d10c      	bne.n	8004352 <_printf_float+0x412>
 8004338:	e65d      	b.n	8003ff6 <_printf_float+0xb6>
 800433a:	2301      	movs	r3, #1
 800433c:	465a      	mov	r2, fp
 800433e:	4631      	mov	r1, r6
 8004340:	4628      	mov	r0, r5
 8004342:	47b8      	blx	r7
 8004344:	3001      	adds	r0, #1
 8004346:	f43f ae56 	beq.w	8003ff6 <_printf_float+0xb6>
 800434a:	f108 0801 	add.w	r8, r8, #1
 800434e:	45d0      	cmp	r8, sl
 8004350:	dbf3      	blt.n	800433a <_printf_float+0x3fa>
 8004352:	464b      	mov	r3, r9
 8004354:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004358:	e6df      	b.n	800411a <_printf_float+0x1da>
 800435a:	f04f 0800 	mov.w	r8, #0
 800435e:	f104 0b1a 	add.w	fp, r4, #26
 8004362:	e7f4      	b.n	800434e <_printf_float+0x40e>
 8004364:	2301      	movs	r3, #1
 8004366:	4642      	mov	r2, r8
 8004368:	e7e1      	b.n	800432e <_printf_float+0x3ee>
 800436a:	2301      	movs	r3, #1
 800436c:	464a      	mov	r2, r9
 800436e:	4631      	mov	r1, r6
 8004370:	4628      	mov	r0, r5
 8004372:	47b8      	blx	r7
 8004374:	3001      	adds	r0, #1
 8004376:	f43f ae3e 	beq.w	8003ff6 <_printf_float+0xb6>
 800437a:	f108 0801 	add.w	r8, r8, #1
 800437e:	68e3      	ldr	r3, [r4, #12]
 8004380:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004382:	1a5b      	subs	r3, r3, r1
 8004384:	4543      	cmp	r3, r8
 8004386:	dcf0      	bgt.n	800436a <_printf_float+0x42a>
 8004388:	e6fc      	b.n	8004184 <_printf_float+0x244>
 800438a:	f04f 0800 	mov.w	r8, #0
 800438e:	f104 0919 	add.w	r9, r4, #25
 8004392:	e7f4      	b.n	800437e <_printf_float+0x43e>

08004394 <_printf_common>:
 8004394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004398:	4616      	mov	r6, r2
 800439a:	4698      	mov	r8, r3
 800439c:	688a      	ldr	r2, [r1, #8]
 800439e:	690b      	ldr	r3, [r1, #16]
 80043a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80043a4:	4293      	cmp	r3, r2
 80043a6:	bfb8      	it	lt
 80043a8:	4613      	movlt	r3, r2
 80043aa:	6033      	str	r3, [r6, #0]
 80043ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80043b0:	4607      	mov	r7, r0
 80043b2:	460c      	mov	r4, r1
 80043b4:	b10a      	cbz	r2, 80043ba <_printf_common+0x26>
 80043b6:	3301      	adds	r3, #1
 80043b8:	6033      	str	r3, [r6, #0]
 80043ba:	6823      	ldr	r3, [r4, #0]
 80043bc:	0699      	lsls	r1, r3, #26
 80043be:	bf42      	ittt	mi
 80043c0:	6833      	ldrmi	r3, [r6, #0]
 80043c2:	3302      	addmi	r3, #2
 80043c4:	6033      	strmi	r3, [r6, #0]
 80043c6:	6825      	ldr	r5, [r4, #0]
 80043c8:	f015 0506 	ands.w	r5, r5, #6
 80043cc:	d106      	bne.n	80043dc <_printf_common+0x48>
 80043ce:	f104 0a19 	add.w	sl, r4, #25
 80043d2:	68e3      	ldr	r3, [r4, #12]
 80043d4:	6832      	ldr	r2, [r6, #0]
 80043d6:	1a9b      	subs	r3, r3, r2
 80043d8:	42ab      	cmp	r3, r5
 80043da:	dc26      	bgt.n	800442a <_printf_common+0x96>
 80043dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80043e0:	6822      	ldr	r2, [r4, #0]
 80043e2:	3b00      	subs	r3, #0
 80043e4:	bf18      	it	ne
 80043e6:	2301      	movne	r3, #1
 80043e8:	0692      	lsls	r2, r2, #26
 80043ea:	d42b      	bmi.n	8004444 <_printf_common+0xb0>
 80043ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80043f0:	4641      	mov	r1, r8
 80043f2:	4638      	mov	r0, r7
 80043f4:	47c8      	blx	r9
 80043f6:	3001      	adds	r0, #1
 80043f8:	d01e      	beq.n	8004438 <_printf_common+0xa4>
 80043fa:	6823      	ldr	r3, [r4, #0]
 80043fc:	6922      	ldr	r2, [r4, #16]
 80043fe:	f003 0306 	and.w	r3, r3, #6
 8004402:	2b04      	cmp	r3, #4
 8004404:	bf02      	ittt	eq
 8004406:	68e5      	ldreq	r5, [r4, #12]
 8004408:	6833      	ldreq	r3, [r6, #0]
 800440a:	1aed      	subeq	r5, r5, r3
 800440c:	68a3      	ldr	r3, [r4, #8]
 800440e:	bf0c      	ite	eq
 8004410:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004414:	2500      	movne	r5, #0
 8004416:	4293      	cmp	r3, r2
 8004418:	bfc4      	itt	gt
 800441a:	1a9b      	subgt	r3, r3, r2
 800441c:	18ed      	addgt	r5, r5, r3
 800441e:	2600      	movs	r6, #0
 8004420:	341a      	adds	r4, #26
 8004422:	42b5      	cmp	r5, r6
 8004424:	d11a      	bne.n	800445c <_printf_common+0xc8>
 8004426:	2000      	movs	r0, #0
 8004428:	e008      	b.n	800443c <_printf_common+0xa8>
 800442a:	2301      	movs	r3, #1
 800442c:	4652      	mov	r2, sl
 800442e:	4641      	mov	r1, r8
 8004430:	4638      	mov	r0, r7
 8004432:	47c8      	blx	r9
 8004434:	3001      	adds	r0, #1
 8004436:	d103      	bne.n	8004440 <_printf_common+0xac>
 8004438:	f04f 30ff 	mov.w	r0, #4294967295
 800443c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004440:	3501      	adds	r5, #1
 8004442:	e7c6      	b.n	80043d2 <_printf_common+0x3e>
 8004444:	18e1      	adds	r1, r4, r3
 8004446:	1c5a      	adds	r2, r3, #1
 8004448:	2030      	movs	r0, #48	@ 0x30
 800444a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800444e:	4422      	add	r2, r4
 8004450:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004454:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004458:	3302      	adds	r3, #2
 800445a:	e7c7      	b.n	80043ec <_printf_common+0x58>
 800445c:	2301      	movs	r3, #1
 800445e:	4622      	mov	r2, r4
 8004460:	4641      	mov	r1, r8
 8004462:	4638      	mov	r0, r7
 8004464:	47c8      	blx	r9
 8004466:	3001      	adds	r0, #1
 8004468:	d0e6      	beq.n	8004438 <_printf_common+0xa4>
 800446a:	3601      	adds	r6, #1
 800446c:	e7d9      	b.n	8004422 <_printf_common+0x8e>
	...

08004470 <_printf_i>:
 8004470:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004474:	7e0f      	ldrb	r7, [r1, #24]
 8004476:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004478:	2f78      	cmp	r7, #120	@ 0x78
 800447a:	4691      	mov	r9, r2
 800447c:	4680      	mov	r8, r0
 800447e:	460c      	mov	r4, r1
 8004480:	469a      	mov	sl, r3
 8004482:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004486:	d807      	bhi.n	8004498 <_printf_i+0x28>
 8004488:	2f62      	cmp	r7, #98	@ 0x62
 800448a:	d80a      	bhi.n	80044a2 <_printf_i+0x32>
 800448c:	2f00      	cmp	r7, #0
 800448e:	f000 80d2 	beq.w	8004636 <_printf_i+0x1c6>
 8004492:	2f58      	cmp	r7, #88	@ 0x58
 8004494:	f000 80b9 	beq.w	800460a <_printf_i+0x19a>
 8004498:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800449c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80044a0:	e03a      	b.n	8004518 <_printf_i+0xa8>
 80044a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80044a6:	2b15      	cmp	r3, #21
 80044a8:	d8f6      	bhi.n	8004498 <_printf_i+0x28>
 80044aa:	a101      	add	r1, pc, #4	@ (adr r1, 80044b0 <_printf_i+0x40>)
 80044ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044b0:	08004509 	.word	0x08004509
 80044b4:	0800451d 	.word	0x0800451d
 80044b8:	08004499 	.word	0x08004499
 80044bc:	08004499 	.word	0x08004499
 80044c0:	08004499 	.word	0x08004499
 80044c4:	08004499 	.word	0x08004499
 80044c8:	0800451d 	.word	0x0800451d
 80044cc:	08004499 	.word	0x08004499
 80044d0:	08004499 	.word	0x08004499
 80044d4:	08004499 	.word	0x08004499
 80044d8:	08004499 	.word	0x08004499
 80044dc:	0800461d 	.word	0x0800461d
 80044e0:	08004547 	.word	0x08004547
 80044e4:	080045d7 	.word	0x080045d7
 80044e8:	08004499 	.word	0x08004499
 80044ec:	08004499 	.word	0x08004499
 80044f0:	0800463f 	.word	0x0800463f
 80044f4:	08004499 	.word	0x08004499
 80044f8:	08004547 	.word	0x08004547
 80044fc:	08004499 	.word	0x08004499
 8004500:	08004499 	.word	0x08004499
 8004504:	080045df 	.word	0x080045df
 8004508:	6833      	ldr	r3, [r6, #0]
 800450a:	1d1a      	adds	r2, r3, #4
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	6032      	str	r2, [r6, #0]
 8004510:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004514:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004518:	2301      	movs	r3, #1
 800451a:	e09d      	b.n	8004658 <_printf_i+0x1e8>
 800451c:	6833      	ldr	r3, [r6, #0]
 800451e:	6820      	ldr	r0, [r4, #0]
 8004520:	1d19      	adds	r1, r3, #4
 8004522:	6031      	str	r1, [r6, #0]
 8004524:	0606      	lsls	r6, r0, #24
 8004526:	d501      	bpl.n	800452c <_printf_i+0xbc>
 8004528:	681d      	ldr	r5, [r3, #0]
 800452a:	e003      	b.n	8004534 <_printf_i+0xc4>
 800452c:	0645      	lsls	r5, r0, #25
 800452e:	d5fb      	bpl.n	8004528 <_printf_i+0xb8>
 8004530:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004534:	2d00      	cmp	r5, #0
 8004536:	da03      	bge.n	8004540 <_printf_i+0xd0>
 8004538:	232d      	movs	r3, #45	@ 0x2d
 800453a:	426d      	negs	r5, r5
 800453c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004540:	4859      	ldr	r0, [pc, #356]	@ (80046a8 <_printf_i+0x238>)
 8004542:	230a      	movs	r3, #10
 8004544:	e011      	b.n	800456a <_printf_i+0xfa>
 8004546:	6821      	ldr	r1, [r4, #0]
 8004548:	6833      	ldr	r3, [r6, #0]
 800454a:	0608      	lsls	r0, r1, #24
 800454c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004550:	d402      	bmi.n	8004558 <_printf_i+0xe8>
 8004552:	0649      	lsls	r1, r1, #25
 8004554:	bf48      	it	mi
 8004556:	b2ad      	uxthmi	r5, r5
 8004558:	2f6f      	cmp	r7, #111	@ 0x6f
 800455a:	4853      	ldr	r0, [pc, #332]	@ (80046a8 <_printf_i+0x238>)
 800455c:	6033      	str	r3, [r6, #0]
 800455e:	bf14      	ite	ne
 8004560:	230a      	movne	r3, #10
 8004562:	2308      	moveq	r3, #8
 8004564:	2100      	movs	r1, #0
 8004566:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800456a:	6866      	ldr	r6, [r4, #4]
 800456c:	60a6      	str	r6, [r4, #8]
 800456e:	2e00      	cmp	r6, #0
 8004570:	bfa2      	ittt	ge
 8004572:	6821      	ldrge	r1, [r4, #0]
 8004574:	f021 0104 	bicge.w	r1, r1, #4
 8004578:	6021      	strge	r1, [r4, #0]
 800457a:	b90d      	cbnz	r5, 8004580 <_printf_i+0x110>
 800457c:	2e00      	cmp	r6, #0
 800457e:	d04b      	beq.n	8004618 <_printf_i+0x1a8>
 8004580:	4616      	mov	r6, r2
 8004582:	fbb5 f1f3 	udiv	r1, r5, r3
 8004586:	fb03 5711 	mls	r7, r3, r1, r5
 800458a:	5dc7      	ldrb	r7, [r0, r7]
 800458c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004590:	462f      	mov	r7, r5
 8004592:	42bb      	cmp	r3, r7
 8004594:	460d      	mov	r5, r1
 8004596:	d9f4      	bls.n	8004582 <_printf_i+0x112>
 8004598:	2b08      	cmp	r3, #8
 800459a:	d10b      	bne.n	80045b4 <_printf_i+0x144>
 800459c:	6823      	ldr	r3, [r4, #0]
 800459e:	07df      	lsls	r7, r3, #31
 80045a0:	d508      	bpl.n	80045b4 <_printf_i+0x144>
 80045a2:	6923      	ldr	r3, [r4, #16]
 80045a4:	6861      	ldr	r1, [r4, #4]
 80045a6:	4299      	cmp	r1, r3
 80045a8:	bfde      	ittt	le
 80045aa:	2330      	movle	r3, #48	@ 0x30
 80045ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80045b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80045b4:	1b92      	subs	r2, r2, r6
 80045b6:	6122      	str	r2, [r4, #16]
 80045b8:	f8cd a000 	str.w	sl, [sp]
 80045bc:	464b      	mov	r3, r9
 80045be:	aa03      	add	r2, sp, #12
 80045c0:	4621      	mov	r1, r4
 80045c2:	4640      	mov	r0, r8
 80045c4:	f7ff fee6 	bl	8004394 <_printf_common>
 80045c8:	3001      	adds	r0, #1
 80045ca:	d14a      	bne.n	8004662 <_printf_i+0x1f2>
 80045cc:	f04f 30ff 	mov.w	r0, #4294967295
 80045d0:	b004      	add	sp, #16
 80045d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045d6:	6823      	ldr	r3, [r4, #0]
 80045d8:	f043 0320 	orr.w	r3, r3, #32
 80045dc:	6023      	str	r3, [r4, #0]
 80045de:	4833      	ldr	r0, [pc, #204]	@ (80046ac <_printf_i+0x23c>)
 80045e0:	2778      	movs	r7, #120	@ 0x78
 80045e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80045e6:	6823      	ldr	r3, [r4, #0]
 80045e8:	6831      	ldr	r1, [r6, #0]
 80045ea:	061f      	lsls	r7, r3, #24
 80045ec:	f851 5b04 	ldr.w	r5, [r1], #4
 80045f0:	d402      	bmi.n	80045f8 <_printf_i+0x188>
 80045f2:	065f      	lsls	r7, r3, #25
 80045f4:	bf48      	it	mi
 80045f6:	b2ad      	uxthmi	r5, r5
 80045f8:	6031      	str	r1, [r6, #0]
 80045fa:	07d9      	lsls	r1, r3, #31
 80045fc:	bf44      	itt	mi
 80045fe:	f043 0320 	orrmi.w	r3, r3, #32
 8004602:	6023      	strmi	r3, [r4, #0]
 8004604:	b11d      	cbz	r5, 800460e <_printf_i+0x19e>
 8004606:	2310      	movs	r3, #16
 8004608:	e7ac      	b.n	8004564 <_printf_i+0xf4>
 800460a:	4827      	ldr	r0, [pc, #156]	@ (80046a8 <_printf_i+0x238>)
 800460c:	e7e9      	b.n	80045e2 <_printf_i+0x172>
 800460e:	6823      	ldr	r3, [r4, #0]
 8004610:	f023 0320 	bic.w	r3, r3, #32
 8004614:	6023      	str	r3, [r4, #0]
 8004616:	e7f6      	b.n	8004606 <_printf_i+0x196>
 8004618:	4616      	mov	r6, r2
 800461a:	e7bd      	b.n	8004598 <_printf_i+0x128>
 800461c:	6833      	ldr	r3, [r6, #0]
 800461e:	6825      	ldr	r5, [r4, #0]
 8004620:	6961      	ldr	r1, [r4, #20]
 8004622:	1d18      	adds	r0, r3, #4
 8004624:	6030      	str	r0, [r6, #0]
 8004626:	062e      	lsls	r6, r5, #24
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	d501      	bpl.n	8004630 <_printf_i+0x1c0>
 800462c:	6019      	str	r1, [r3, #0]
 800462e:	e002      	b.n	8004636 <_printf_i+0x1c6>
 8004630:	0668      	lsls	r0, r5, #25
 8004632:	d5fb      	bpl.n	800462c <_printf_i+0x1bc>
 8004634:	8019      	strh	r1, [r3, #0]
 8004636:	2300      	movs	r3, #0
 8004638:	6123      	str	r3, [r4, #16]
 800463a:	4616      	mov	r6, r2
 800463c:	e7bc      	b.n	80045b8 <_printf_i+0x148>
 800463e:	6833      	ldr	r3, [r6, #0]
 8004640:	1d1a      	adds	r2, r3, #4
 8004642:	6032      	str	r2, [r6, #0]
 8004644:	681e      	ldr	r6, [r3, #0]
 8004646:	6862      	ldr	r2, [r4, #4]
 8004648:	2100      	movs	r1, #0
 800464a:	4630      	mov	r0, r6
 800464c:	f7fb fdc0 	bl	80001d0 <memchr>
 8004650:	b108      	cbz	r0, 8004656 <_printf_i+0x1e6>
 8004652:	1b80      	subs	r0, r0, r6
 8004654:	6060      	str	r0, [r4, #4]
 8004656:	6863      	ldr	r3, [r4, #4]
 8004658:	6123      	str	r3, [r4, #16]
 800465a:	2300      	movs	r3, #0
 800465c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004660:	e7aa      	b.n	80045b8 <_printf_i+0x148>
 8004662:	6923      	ldr	r3, [r4, #16]
 8004664:	4632      	mov	r2, r6
 8004666:	4649      	mov	r1, r9
 8004668:	4640      	mov	r0, r8
 800466a:	47d0      	blx	sl
 800466c:	3001      	adds	r0, #1
 800466e:	d0ad      	beq.n	80045cc <_printf_i+0x15c>
 8004670:	6823      	ldr	r3, [r4, #0]
 8004672:	079b      	lsls	r3, r3, #30
 8004674:	d413      	bmi.n	800469e <_printf_i+0x22e>
 8004676:	68e0      	ldr	r0, [r4, #12]
 8004678:	9b03      	ldr	r3, [sp, #12]
 800467a:	4298      	cmp	r0, r3
 800467c:	bfb8      	it	lt
 800467e:	4618      	movlt	r0, r3
 8004680:	e7a6      	b.n	80045d0 <_printf_i+0x160>
 8004682:	2301      	movs	r3, #1
 8004684:	4632      	mov	r2, r6
 8004686:	4649      	mov	r1, r9
 8004688:	4640      	mov	r0, r8
 800468a:	47d0      	blx	sl
 800468c:	3001      	adds	r0, #1
 800468e:	d09d      	beq.n	80045cc <_printf_i+0x15c>
 8004690:	3501      	adds	r5, #1
 8004692:	68e3      	ldr	r3, [r4, #12]
 8004694:	9903      	ldr	r1, [sp, #12]
 8004696:	1a5b      	subs	r3, r3, r1
 8004698:	42ab      	cmp	r3, r5
 800469a:	dcf2      	bgt.n	8004682 <_printf_i+0x212>
 800469c:	e7eb      	b.n	8004676 <_printf_i+0x206>
 800469e:	2500      	movs	r5, #0
 80046a0:	f104 0619 	add.w	r6, r4, #25
 80046a4:	e7f5      	b.n	8004692 <_printf_i+0x222>
 80046a6:	bf00      	nop
 80046a8:	0800868a 	.word	0x0800868a
 80046ac:	0800869b 	.word	0x0800869b

080046b0 <_scanf_float>:
 80046b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046b4:	b087      	sub	sp, #28
 80046b6:	4617      	mov	r7, r2
 80046b8:	9303      	str	r3, [sp, #12]
 80046ba:	688b      	ldr	r3, [r1, #8]
 80046bc:	1e5a      	subs	r2, r3, #1
 80046be:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80046c2:	bf81      	itttt	hi
 80046c4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80046c8:	eb03 0b05 	addhi.w	fp, r3, r5
 80046cc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80046d0:	608b      	strhi	r3, [r1, #8]
 80046d2:	680b      	ldr	r3, [r1, #0]
 80046d4:	460a      	mov	r2, r1
 80046d6:	f04f 0500 	mov.w	r5, #0
 80046da:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80046de:	f842 3b1c 	str.w	r3, [r2], #28
 80046e2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80046e6:	4680      	mov	r8, r0
 80046e8:	460c      	mov	r4, r1
 80046ea:	bf98      	it	ls
 80046ec:	f04f 0b00 	movls.w	fp, #0
 80046f0:	9201      	str	r2, [sp, #4]
 80046f2:	4616      	mov	r6, r2
 80046f4:	46aa      	mov	sl, r5
 80046f6:	46a9      	mov	r9, r5
 80046f8:	9502      	str	r5, [sp, #8]
 80046fa:	68a2      	ldr	r2, [r4, #8]
 80046fc:	b152      	cbz	r2, 8004714 <_scanf_float+0x64>
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	2b4e      	cmp	r3, #78	@ 0x4e
 8004704:	d864      	bhi.n	80047d0 <_scanf_float+0x120>
 8004706:	2b40      	cmp	r3, #64	@ 0x40
 8004708:	d83c      	bhi.n	8004784 <_scanf_float+0xd4>
 800470a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800470e:	b2c8      	uxtb	r0, r1
 8004710:	280e      	cmp	r0, #14
 8004712:	d93a      	bls.n	800478a <_scanf_float+0xda>
 8004714:	f1b9 0f00 	cmp.w	r9, #0
 8004718:	d003      	beq.n	8004722 <_scanf_float+0x72>
 800471a:	6823      	ldr	r3, [r4, #0]
 800471c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004720:	6023      	str	r3, [r4, #0]
 8004722:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004726:	f1ba 0f01 	cmp.w	sl, #1
 800472a:	f200 8117 	bhi.w	800495c <_scanf_float+0x2ac>
 800472e:	9b01      	ldr	r3, [sp, #4]
 8004730:	429e      	cmp	r6, r3
 8004732:	f200 8108 	bhi.w	8004946 <_scanf_float+0x296>
 8004736:	2001      	movs	r0, #1
 8004738:	b007      	add	sp, #28
 800473a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800473e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004742:	2a0d      	cmp	r2, #13
 8004744:	d8e6      	bhi.n	8004714 <_scanf_float+0x64>
 8004746:	a101      	add	r1, pc, #4	@ (adr r1, 800474c <_scanf_float+0x9c>)
 8004748:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800474c:	08004893 	.word	0x08004893
 8004750:	08004715 	.word	0x08004715
 8004754:	08004715 	.word	0x08004715
 8004758:	08004715 	.word	0x08004715
 800475c:	080048f3 	.word	0x080048f3
 8004760:	080048cb 	.word	0x080048cb
 8004764:	08004715 	.word	0x08004715
 8004768:	08004715 	.word	0x08004715
 800476c:	080048a1 	.word	0x080048a1
 8004770:	08004715 	.word	0x08004715
 8004774:	08004715 	.word	0x08004715
 8004778:	08004715 	.word	0x08004715
 800477c:	08004715 	.word	0x08004715
 8004780:	08004859 	.word	0x08004859
 8004784:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004788:	e7db      	b.n	8004742 <_scanf_float+0x92>
 800478a:	290e      	cmp	r1, #14
 800478c:	d8c2      	bhi.n	8004714 <_scanf_float+0x64>
 800478e:	a001      	add	r0, pc, #4	@ (adr r0, 8004794 <_scanf_float+0xe4>)
 8004790:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004794:	08004849 	.word	0x08004849
 8004798:	08004715 	.word	0x08004715
 800479c:	08004849 	.word	0x08004849
 80047a0:	080048df 	.word	0x080048df
 80047a4:	08004715 	.word	0x08004715
 80047a8:	080047f1 	.word	0x080047f1
 80047ac:	0800482f 	.word	0x0800482f
 80047b0:	0800482f 	.word	0x0800482f
 80047b4:	0800482f 	.word	0x0800482f
 80047b8:	0800482f 	.word	0x0800482f
 80047bc:	0800482f 	.word	0x0800482f
 80047c0:	0800482f 	.word	0x0800482f
 80047c4:	0800482f 	.word	0x0800482f
 80047c8:	0800482f 	.word	0x0800482f
 80047cc:	0800482f 	.word	0x0800482f
 80047d0:	2b6e      	cmp	r3, #110	@ 0x6e
 80047d2:	d809      	bhi.n	80047e8 <_scanf_float+0x138>
 80047d4:	2b60      	cmp	r3, #96	@ 0x60
 80047d6:	d8b2      	bhi.n	800473e <_scanf_float+0x8e>
 80047d8:	2b54      	cmp	r3, #84	@ 0x54
 80047da:	d07b      	beq.n	80048d4 <_scanf_float+0x224>
 80047dc:	2b59      	cmp	r3, #89	@ 0x59
 80047de:	d199      	bne.n	8004714 <_scanf_float+0x64>
 80047e0:	2d07      	cmp	r5, #7
 80047e2:	d197      	bne.n	8004714 <_scanf_float+0x64>
 80047e4:	2508      	movs	r5, #8
 80047e6:	e02c      	b.n	8004842 <_scanf_float+0x192>
 80047e8:	2b74      	cmp	r3, #116	@ 0x74
 80047ea:	d073      	beq.n	80048d4 <_scanf_float+0x224>
 80047ec:	2b79      	cmp	r3, #121	@ 0x79
 80047ee:	e7f6      	b.n	80047de <_scanf_float+0x12e>
 80047f0:	6821      	ldr	r1, [r4, #0]
 80047f2:	05c8      	lsls	r0, r1, #23
 80047f4:	d51b      	bpl.n	800482e <_scanf_float+0x17e>
 80047f6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80047fa:	6021      	str	r1, [r4, #0]
 80047fc:	f109 0901 	add.w	r9, r9, #1
 8004800:	f1bb 0f00 	cmp.w	fp, #0
 8004804:	d003      	beq.n	800480e <_scanf_float+0x15e>
 8004806:	3201      	adds	r2, #1
 8004808:	f10b 3bff 	add.w	fp, fp, #4294967295
 800480c:	60a2      	str	r2, [r4, #8]
 800480e:	68a3      	ldr	r3, [r4, #8]
 8004810:	3b01      	subs	r3, #1
 8004812:	60a3      	str	r3, [r4, #8]
 8004814:	6923      	ldr	r3, [r4, #16]
 8004816:	3301      	adds	r3, #1
 8004818:	6123      	str	r3, [r4, #16]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	3b01      	subs	r3, #1
 800481e:	2b00      	cmp	r3, #0
 8004820:	607b      	str	r3, [r7, #4]
 8004822:	f340 8087 	ble.w	8004934 <_scanf_float+0x284>
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	3301      	adds	r3, #1
 800482a:	603b      	str	r3, [r7, #0]
 800482c:	e765      	b.n	80046fa <_scanf_float+0x4a>
 800482e:	eb1a 0105 	adds.w	r1, sl, r5
 8004832:	f47f af6f 	bne.w	8004714 <_scanf_float+0x64>
 8004836:	6822      	ldr	r2, [r4, #0]
 8004838:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800483c:	6022      	str	r2, [r4, #0]
 800483e:	460d      	mov	r5, r1
 8004840:	468a      	mov	sl, r1
 8004842:	f806 3b01 	strb.w	r3, [r6], #1
 8004846:	e7e2      	b.n	800480e <_scanf_float+0x15e>
 8004848:	6822      	ldr	r2, [r4, #0]
 800484a:	0610      	lsls	r0, r2, #24
 800484c:	f57f af62 	bpl.w	8004714 <_scanf_float+0x64>
 8004850:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004854:	6022      	str	r2, [r4, #0]
 8004856:	e7f4      	b.n	8004842 <_scanf_float+0x192>
 8004858:	f1ba 0f00 	cmp.w	sl, #0
 800485c:	d10e      	bne.n	800487c <_scanf_float+0x1cc>
 800485e:	f1b9 0f00 	cmp.w	r9, #0
 8004862:	d10e      	bne.n	8004882 <_scanf_float+0x1d2>
 8004864:	6822      	ldr	r2, [r4, #0]
 8004866:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800486a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800486e:	d108      	bne.n	8004882 <_scanf_float+0x1d2>
 8004870:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004874:	6022      	str	r2, [r4, #0]
 8004876:	f04f 0a01 	mov.w	sl, #1
 800487a:	e7e2      	b.n	8004842 <_scanf_float+0x192>
 800487c:	f1ba 0f02 	cmp.w	sl, #2
 8004880:	d055      	beq.n	800492e <_scanf_float+0x27e>
 8004882:	2d01      	cmp	r5, #1
 8004884:	d002      	beq.n	800488c <_scanf_float+0x1dc>
 8004886:	2d04      	cmp	r5, #4
 8004888:	f47f af44 	bne.w	8004714 <_scanf_float+0x64>
 800488c:	3501      	adds	r5, #1
 800488e:	b2ed      	uxtb	r5, r5
 8004890:	e7d7      	b.n	8004842 <_scanf_float+0x192>
 8004892:	f1ba 0f01 	cmp.w	sl, #1
 8004896:	f47f af3d 	bne.w	8004714 <_scanf_float+0x64>
 800489a:	f04f 0a02 	mov.w	sl, #2
 800489e:	e7d0      	b.n	8004842 <_scanf_float+0x192>
 80048a0:	b97d      	cbnz	r5, 80048c2 <_scanf_float+0x212>
 80048a2:	f1b9 0f00 	cmp.w	r9, #0
 80048a6:	f47f af38 	bne.w	800471a <_scanf_float+0x6a>
 80048aa:	6822      	ldr	r2, [r4, #0]
 80048ac:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80048b0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80048b4:	f040 8108 	bne.w	8004ac8 <_scanf_float+0x418>
 80048b8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80048bc:	6022      	str	r2, [r4, #0]
 80048be:	2501      	movs	r5, #1
 80048c0:	e7bf      	b.n	8004842 <_scanf_float+0x192>
 80048c2:	2d03      	cmp	r5, #3
 80048c4:	d0e2      	beq.n	800488c <_scanf_float+0x1dc>
 80048c6:	2d05      	cmp	r5, #5
 80048c8:	e7de      	b.n	8004888 <_scanf_float+0x1d8>
 80048ca:	2d02      	cmp	r5, #2
 80048cc:	f47f af22 	bne.w	8004714 <_scanf_float+0x64>
 80048d0:	2503      	movs	r5, #3
 80048d2:	e7b6      	b.n	8004842 <_scanf_float+0x192>
 80048d4:	2d06      	cmp	r5, #6
 80048d6:	f47f af1d 	bne.w	8004714 <_scanf_float+0x64>
 80048da:	2507      	movs	r5, #7
 80048dc:	e7b1      	b.n	8004842 <_scanf_float+0x192>
 80048de:	6822      	ldr	r2, [r4, #0]
 80048e0:	0591      	lsls	r1, r2, #22
 80048e2:	f57f af17 	bpl.w	8004714 <_scanf_float+0x64>
 80048e6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80048ea:	6022      	str	r2, [r4, #0]
 80048ec:	f8cd 9008 	str.w	r9, [sp, #8]
 80048f0:	e7a7      	b.n	8004842 <_scanf_float+0x192>
 80048f2:	6822      	ldr	r2, [r4, #0]
 80048f4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80048f8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80048fc:	d006      	beq.n	800490c <_scanf_float+0x25c>
 80048fe:	0550      	lsls	r0, r2, #21
 8004900:	f57f af08 	bpl.w	8004714 <_scanf_float+0x64>
 8004904:	f1b9 0f00 	cmp.w	r9, #0
 8004908:	f000 80de 	beq.w	8004ac8 <_scanf_float+0x418>
 800490c:	0591      	lsls	r1, r2, #22
 800490e:	bf58      	it	pl
 8004910:	9902      	ldrpl	r1, [sp, #8]
 8004912:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004916:	bf58      	it	pl
 8004918:	eba9 0101 	subpl.w	r1, r9, r1
 800491c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8004920:	bf58      	it	pl
 8004922:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004926:	6022      	str	r2, [r4, #0]
 8004928:	f04f 0900 	mov.w	r9, #0
 800492c:	e789      	b.n	8004842 <_scanf_float+0x192>
 800492e:	f04f 0a03 	mov.w	sl, #3
 8004932:	e786      	b.n	8004842 <_scanf_float+0x192>
 8004934:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004938:	4639      	mov	r1, r7
 800493a:	4640      	mov	r0, r8
 800493c:	4798      	blx	r3
 800493e:	2800      	cmp	r0, #0
 8004940:	f43f aedb 	beq.w	80046fa <_scanf_float+0x4a>
 8004944:	e6e6      	b.n	8004714 <_scanf_float+0x64>
 8004946:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800494a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800494e:	463a      	mov	r2, r7
 8004950:	4640      	mov	r0, r8
 8004952:	4798      	blx	r3
 8004954:	6923      	ldr	r3, [r4, #16]
 8004956:	3b01      	subs	r3, #1
 8004958:	6123      	str	r3, [r4, #16]
 800495a:	e6e8      	b.n	800472e <_scanf_float+0x7e>
 800495c:	1e6b      	subs	r3, r5, #1
 800495e:	2b06      	cmp	r3, #6
 8004960:	d824      	bhi.n	80049ac <_scanf_float+0x2fc>
 8004962:	2d02      	cmp	r5, #2
 8004964:	d836      	bhi.n	80049d4 <_scanf_float+0x324>
 8004966:	9b01      	ldr	r3, [sp, #4]
 8004968:	429e      	cmp	r6, r3
 800496a:	f67f aee4 	bls.w	8004736 <_scanf_float+0x86>
 800496e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004972:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004976:	463a      	mov	r2, r7
 8004978:	4640      	mov	r0, r8
 800497a:	4798      	blx	r3
 800497c:	6923      	ldr	r3, [r4, #16]
 800497e:	3b01      	subs	r3, #1
 8004980:	6123      	str	r3, [r4, #16]
 8004982:	e7f0      	b.n	8004966 <_scanf_float+0x2b6>
 8004984:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004988:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800498c:	463a      	mov	r2, r7
 800498e:	4640      	mov	r0, r8
 8004990:	4798      	blx	r3
 8004992:	6923      	ldr	r3, [r4, #16]
 8004994:	3b01      	subs	r3, #1
 8004996:	6123      	str	r3, [r4, #16]
 8004998:	f10a 3aff 	add.w	sl, sl, #4294967295
 800499c:	fa5f fa8a 	uxtb.w	sl, sl
 80049a0:	f1ba 0f02 	cmp.w	sl, #2
 80049a4:	d1ee      	bne.n	8004984 <_scanf_float+0x2d4>
 80049a6:	3d03      	subs	r5, #3
 80049a8:	b2ed      	uxtb	r5, r5
 80049aa:	1b76      	subs	r6, r6, r5
 80049ac:	6823      	ldr	r3, [r4, #0]
 80049ae:	05da      	lsls	r2, r3, #23
 80049b0:	d530      	bpl.n	8004a14 <_scanf_float+0x364>
 80049b2:	055b      	lsls	r3, r3, #21
 80049b4:	d511      	bpl.n	80049da <_scanf_float+0x32a>
 80049b6:	9b01      	ldr	r3, [sp, #4]
 80049b8:	429e      	cmp	r6, r3
 80049ba:	f67f aebc 	bls.w	8004736 <_scanf_float+0x86>
 80049be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80049c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80049c6:	463a      	mov	r2, r7
 80049c8:	4640      	mov	r0, r8
 80049ca:	4798      	blx	r3
 80049cc:	6923      	ldr	r3, [r4, #16]
 80049ce:	3b01      	subs	r3, #1
 80049d0:	6123      	str	r3, [r4, #16]
 80049d2:	e7f0      	b.n	80049b6 <_scanf_float+0x306>
 80049d4:	46aa      	mov	sl, r5
 80049d6:	46b3      	mov	fp, r6
 80049d8:	e7de      	b.n	8004998 <_scanf_float+0x2e8>
 80049da:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80049de:	6923      	ldr	r3, [r4, #16]
 80049e0:	2965      	cmp	r1, #101	@ 0x65
 80049e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80049e6:	f106 35ff 	add.w	r5, r6, #4294967295
 80049ea:	6123      	str	r3, [r4, #16]
 80049ec:	d00c      	beq.n	8004a08 <_scanf_float+0x358>
 80049ee:	2945      	cmp	r1, #69	@ 0x45
 80049f0:	d00a      	beq.n	8004a08 <_scanf_float+0x358>
 80049f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80049f6:	463a      	mov	r2, r7
 80049f8:	4640      	mov	r0, r8
 80049fa:	4798      	blx	r3
 80049fc:	6923      	ldr	r3, [r4, #16]
 80049fe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004a02:	3b01      	subs	r3, #1
 8004a04:	1eb5      	subs	r5, r6, #2
 8004a06:	6123      	str	r3, [r4, #16]
 8004a08:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004a0c:	463a      	mov	r2, r7
 8004a0e:	4640      	mov	r0, r8
 8004a10:	4798      	blx	r3
 8004a12:	462e      	mov	r6, r5
 8004a14:	6822      	ldr	r2, [r4, #0]
 8004a16:	f012 0210 	ands.w	r2, r2, #16
 8004a1a:	d001      	beq.n	8004a20 <_scanf_float+0x370>
 8004a1c:	2000      	movs	r0, #0
 8004a1e:	e68b      	b.n	8004738 <_scanf_float+0x88>
 8004a20:	7032      	strb	r2, [r6, #0]
 8004a22:	6823      	ldr	r3, [r4, #0]
 8004a24:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004a28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a2c:	d11c      	bne.n	8004a68 <_scanf_float+0x3b8>
 8004a2e:	9b02      	ldr	r3, [sp, #8]
 8004a30:	454b      	cmp	r3, r9
 8004a32:	eba3 0209 	sub.w	r2, r3, r9
 8004a36:	d123      	bne.n	8004a80 <_scanf_float+0x3d0>
 8004a38:	9901      	ldr	r1, [sp, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	4640      	mov	r0, r8
 8004a3e:	f002 fcfb 	bl	8007438 <_strtod_r>
 8004a42:	9b03      	ldr	r3, [sp, #12]
 8004a44:	6821      	ldr	r1, [r4, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f011 0f02 	tst.w	r1, #2
 8004a4c:	ec57 6b10 	vmov	r6, r7, d0
 8004a50:	f103 0204 	add.w	r2, r3, #4
 8004a54:	d01f      	beq.n	8004a96 <_scanf_float+0x3e6>
 8004a56:	9903      	ldr	r1, [sp, #12]
 8004a58:	600a      	str	r2, [r1, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	e9c3 6700 	strd	r6, r7, [r3]
 8004a60:	68e3      	ldr	r3, [r4, #12]
 8004a62:	3301      	adds	r3, #1
 8004a64:	60e3      	str	r3, [r4, #12]
 8004a66:	e7d9      	b.n	8004a1c <_scanf_float+0x36c>
 8004a68:	9b04      	ldr	r3, [sp, #16]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d0e4      	beq.n	8004a38 <_scanf_float+0x388>
 8004a6e:	9905      	ldr	r1, [sp, #20]
 8004a70:	230a      	movs	r3, #10
 8004a72:	3101      	adds	r1, #1
 8004a74:	4640      	mov	r0, r8
 8004a76:	f002 fd5f 	bl	8007538 <_strtol_r>
 8004a7a:	9b04      	ldr	r3, [sp, #16]
 8004a7c:	9e05      	ldr	r6, [sp, #20]
 8004a7e:	1ac2      	subs	r2, r0, r3
 8004a80:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8004a84:	429e      	cmp	r6, r3
 8004a86:	bf28      	it	cs
 8004a88:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004a8c:	4910      	ldr	r1, [pc, #64]	@ (8004ad0 <_scanf_float+0x420>)
 8004a8e:	4630      	mov	r0, r6
 8004a90:	f000 f954 	bl	8004d3c <siprintf>
 8004a94:	e7d0      	b.n	8004a38 <_scanf_float+0x388>
 8004a96:	f011 0f04 	tst.w	r1, #4
 8004a9a:	9903      	ldr	r1, [sp, #12]
 8004a9c:	600a      	str	r2, [r1, #0]
 8004a9e:	d1dc      	bne.n	8004a5a <_scanf_float+0x3aa>
 8004aa0:	681d      	ldr	r5, [r3, #0]
 8004aa2:	4632      	mov	r2, r6
 8004aa4:	463b      	mov	r3, r7
 8004aa6:	4630      	mov	r0, r6
 8004aa8:	4639      	mov	r1, r7
 8004aaa:	f7fc f83f 	bl	8000b2c <__aeabi_dcmpun>
 8004aae:	b128      	cbz	r0, 8004abc <_scanf_float+0x40c>
 8004ab0:	4808      	ldr	r0, [pc, #32]	@ (8004ad4 <_scanf_float+0x424>)
 8004ab2:	f000 fabb 	bl	800502c <nanf>
 8004ab6:	ed85 0a00 	vstr	s0, [r5]
 8004aba:	e7d1      	b.n	8004a60 <_scanf_float+0x3b0>
 8004abc:	4630      	mov	r0, r6
 8004abe:	4639      	mov	r1, r7
 8004ac0:	f7fc f892 	bl	8000be8 <__aeabi_d2f>
 8004ac4:	6028      	str	r0, [r5, #0]
 8004ac6:	e7cb      	b.n	8004a60 <_scanf_float+0x3b0>
 8004ac8:	f04f 0900 	mov.w	r9, #0
 8004acc:	e629      	b.n	8004722 <_scanf_float+0x72>
 8004ace:	bf00      	nop
 8004ad0:	080086ac 	.word	0x080086ac
 8004ad4:	08008a45 	.word	0x08008a45

08004ad8 <std>:
 8004ad8:	2300      	movs	r3, #0
 8004ada:	b510      	push	{r4, lr}
 8004adc:	4604      	mov	r4, r0
 8004ade:	e9c0 3300 	strd	r3, r3, [r0]
 8004ae2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ae6:	6083      	str	r3, [r0, #8]
 8004ae8:	8181      	strh	r1, [r0, #12]
 8004aea:	6643      	str	r3, [r0, #100]	@ 0x64
 8004aec:	81c2      	strh	r2, [r0, #14]
 8004aee:	6183      	str	r3, [r0, #24]
 8004af0:	4619      	mov	r1, r3
 8004af2:	2208      	movs	r2, #8
 8004af4:	305c      	adds	r0, #92	@ 0x5c
 8004af6:	f000 fa19 	bl	8004f2c <memset>
 8004afa:	4b0d      	ldr	r3, [pc, #52]	@ (8004b30 <std+0x58>)
 8004afc:	6263      	str	r3, [r4, #36]	@ 0x24
 8004afe:	4b0d      	ldr	r3, [pc, #52]	@ (8004b34 <std+0x5c>)
 8004b00:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004b02:	4b0d      	ldr	r3, [pc, #52]	@ (8004b38 <std+0x60>)
 8004b04:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004b06:	4b0d      	ldr	r3, [pc, #52]	@ (8004b3c <std+0x64>)
 8004b08:	6323      	str	r3, [r4, #48]	@ 0x30
 8004b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004b40 <std+0x68>)
 8004b0c:	6224      	str	r4, [r4, #32]
 8004b0e:	429c      	cmp	r4, r3
 8004b10:	d006      	beq.n	8004b20 <std+0x48>
 8004b12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004b16:	4294      	cmp	r4, r2
 8004b18:	d002      	beq.n	8004b20 <std+0x48>
 8004b1a:	33d0      	adds	r3, #208	@ 0xd0
 8004b1c:	429c      	cmp	r4, r3
 8004b1e:	d105      	bne.n	8004b2c <std+0x54>
 8004b20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b28:	f000 ba7c 	b.w	8005024 <__retarget_lock_init_recursive>
 8004b2c:	bd10      	pop	{r4, pc}
 8004b2e:	bf00      	nop
 8004b30:	08004d7d 	.word	0x08004d7d
 8004b34:	08004d9f 	.word	0x08004d9f
 8004b38:	08004dd7 	.word	0x08004dd7
 8004b3c:	08004dfb 	.word	0x08004dfb
 8004b40:	20000298 	.word	0x20000298

08004b44 <stdio_exit_handler>:
 8004b44:	4a02      	ldr	r2, [pc, #8]	@ (8004b50 <stdio_exit_handler+0xc>)
 8004b46:	4903      	ldr	r1, [pc, #12]	@ (8004b54 <stdio_exit_handler+0x10>)
 8004b48:	4803      	ldr	r0, [pc, #12]	@ (8004b58 <stdio_exit_handler+0x14>)
 8004b4a:	f000 b869 	b.w	8004c20 <_fwalk_sglue>
 8004b4e:	bf00      	nop
 8004b50:	20000024 	.word	0x20000024
 8004b54:	08007b79 	.word	0x08007b79
 8004b58:	20000034 	.word	0x20000034

08004b5c <cleanup_stdio>:
 8004b5c:	6841      	ldr	r1, [r0, #4]
 8004b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8004b90 <cleanup_stdio+0x34>)
 8004b60:	4299      	cmp	r1, r3
 8004b62:	b510      	push	{r4, lr}
 8004b64:	4604      	mov	r4, r0
 8004b66:	d001      	beq.n	8004b6c <cleanup_stdio+0x10>
 8004b68:	f003 f806 	bl	8007b78 <_fflush_r>
 8004b6c:	68a1      	ldr	r1, [r4, #8]
 8004b6e:	4b09      	ldr	r3, [pc, #36]	@ (8004b94 <cleanup_stdio+0x38>)
 8004b70:	4299      	cmp	r1, r3
 8004b72:	d002      	beq.n	8004b7a <cleanup_stdio+0x1e>
 8004b74:	4620      	mov	r0, r4
 8004b76:	f002 ffff 	bl	8007b78 <_fflush_r>
 8004b7a:	68e1      	ldr	r1, [r4, #12]
 8004b7c:	4b06      	ldr	r3, [pc, #24]	@ (8004b98 <cleanup_stdio+0x3c>)
 8004b7e:	4299      	cmp	r1, r3
 8004b80:	d004      	beq.n	8004b8c <cleanup_stdio+0x30>
 8004b82:	4620      	mov	r0, r4
 8004b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b88:	f002 bff6 	b.w	8007b78 <_fflush_r>
 8004b8c:	bd10      	pop	{r4, pc}
 8004b8e:	bf00      	nop
 8004b90:	20000298 	.word	0x20000298
 8004b94:	20000300 	.word	0x20000300
 8004b98:	20000368 	.word	0x20000368

08004b9c <global_stdio_init.part.0>:
 8004b9c:	b510      	push	{r4, lr}
 8004b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8004bcc <global_stdio_init.part.0+0x30>)
 8004ba0:	4c0b      	ldr	r4, [pc, #44]	@ (8004bd0 <global_stdio_init.part.0+0x34>)
 8004ba2:	4a0c      	ldr	r2, [pc, #48]	@ (8004bd4 <global_stdio_init.part.0+0x38>)
 8004ba4:	601a      	str	r2, [r3, #0]
 8004ba6:	4620      	mov	r0, r4
 8004ba8:	2200      	movs	r2, #0
 8004baa:	2104      	movs	r1, #4
 8004bac:	f7ff ff94 	bl	8004ad8 <std>
 8004bb0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	2109      	movs	r1, #9
 8004bb8:	f7ff ff8e 	bl	8004ad8 <std>
 8004bbc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004bc0:	2202      	movs	r2, #2
 8004bc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bc6:	2112      	movs	r1, #18
 8004bc8:	f7ff bf86 	b.w	8004ad8 <std>
 8004bcc:	200003d0 	.word	0x200003d0
 8004bd0:	20000298 	.word	0x20000298
 8004bd4:	08004b45 	.word	0x08004b45

08004bd8 <__sfp_lock_acquire>:
 8004bd8:	4801      	ldr	r0, [pc, #4]	@ (8004be0 <__sfp_lock_acquire+0x8>)
 8004bda:	f000 ba24 	b.w	8005026 <__retarget_lock_acquire_recursive>
 8004bde:	bf00      	nop
 8004be0:	200003d9 	.word	0x200003d9

08004be4 <__sfp_lock_release>:
 8004be4:	4801      	ldr	r0, [pc, #4]	@ (8004bec <__sfp_lock_release+0x8>)
 8004be6:	f000 ba1f 	b.w	8005028 <__retarget_lock_release_recursive>
 8004bea:	bf00      	nop
 8004bec:	200003d9 	.word	0x200003d9

08004bf0 <__sinit>:
 8004bf0:	b510      	push	{r4, lr}
 8004bf2:	4604      	mov	r4, r0
 8004bf4:	f7ff fff0 	bl	8004bd8 <__sfp_lock_acquire>
 8004bf8:	6a23      	ldr	r3, [r4, #32]
 8004bfa:	b11b      	cbz	r3, 8004c04 <__sinit+0x14>
 8004bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c00:	f7ff bff0 	b.w	8004be4 <__sfp_lock_release>
 8004c04:	4b04      	ldr	r3, [pc, #16]	@ (8004c18 <__sinit+0x28>)
 8004c06:	6223      	str	r3, [r4, #32]
 8004c08:	4b04      	ldr	r3, [pc, #16]	@ (8004c1c <__sinit+0x2c>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1f5      	bne.n	8004bfc <__sinit+0xc>
 8004c10:	f7ff ffc4 	bl	8004b9c <global_stdio_init.part.0>
 8004c14:	e7f2      	b.n	8004bfc <__sinit+0xc>
 8004c16:	bf00      	nop
 8004c18:	08004b5d 	.word	0x08004b5d
 8004c1c:	200003d0 	.word	0x200003d0

08004c20 <_fwalk_sglue>:
 8004c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c24:	4607      	mov	r7, r0
 8004c26:	4688      	mov	r8, r1
 8004c28:	4614      	mov	r4, r2
 8004c2a:	2600      	movs	r6, #0
 8004c2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c30:	f1b9 0901 	subs.w	r9, r9, #1
 8004c34:	d505      	bpl.n	8004c42 <_fwalk_sglue+0x22>
 8004c36:	6824      	ldr	r4, [r4, #0]
 8004c38:	2c00      	cmp	r4, #0
 8004c3a:	d1f7      	bne.n	8004c2c <_fwalk_sglue+0xc>
 8004c3c:	4630      	mov	r0, r6
 8004c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c42:	89ab      	ldrh	r3, [r5, #12]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d907      	bls.n	8004c58 <_fwalk_sglue+0x38>
 8004c48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	d003      	beq.n	8004c58 <_fwalk_sglue+0x38>
 8004c50:	4629      	mov	r1, r5
 8004c52:	4638      	mov	r0, r7
 8004c54:	47c0      	blx	r8
 8004c56:	4306      	orrs	r6, r0
 8004c58:	3568      	adds	r5, #104	@ 0x68
 8004c5a:	e7e9      	b.n	8004c30 <_fwalk_sglue+0x10>

08004c5c <iprintf>:
 8004c5c:	b40f      	push	{r0, r1, r2, r3}
 8004c5e:	b507      	push	{r0, r1, r2, lr}
 8004c60:	4906      	ldr	r1, [pc, #24]	@ (8004c7c <iprintf+0x20>)
 8004c62:	ab04      	add	r3, sp, #16
 8004c64:	6808      	ldr	r0, [r1, #0]
 8004c66:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c6a:	6881      	ldr	r1, [r0, #8]
 8004c6c:	9301      	str	r3, [sp, #4]
 8004c6e:	f002 fde7 	bl	8007840 <_vfiprintf_r>
 8004c72:	b003      	add	sp, #12
 8004c74:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c78:	b004      	add	sp, #16
 8004c7a:	4770      	bx	lr
 8004c7c:	20000030 	.word	0x20000030

08004c80 <_puts_r>:
 8004c80:	6a03      	ldr	r3, [r0, #32]
 8004c82:	b570      	push	{r4, r5, r6, lr}
 8004c84:	6884      	ldr	r4, [r0, #8]
 8004c86:	4605      	mov	r5, r0
 8004c88:	460e      	mov	r6, r1
 8004c8a:	b90b      	cbnz	r3, 8004c90 <_puts_r+0x10>
 8004c8c:	f7ff ffb0 	bl	8004bf0 <__sinit>
 8004c90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c92:	07db      	lsls	r3, r3, #31
 8004c94:	d405      	bmi.n	8004ca2 <_puts_r+0x22>
 8004c96:	89a3      	ldrh	r3, [r4, #12]
 8004c98:	0598      	lsls	r0, r3, #22
 8004c9a:	d402      	bmi.n	8004ca2 <_puts_r+0x22>
 8004c9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c9e:	f000 f9c2 	bl	8005026 <__retarget_lock_acquire_recursive>
 8004ca2:	89a3      	ldrh	r3, [r4, #12]
 8004ca4:	0719      	lsls	r1, r3, #28
 8004ca6:	d502      	bpl.n	8004cae <_puts_r+0x2e>
 8004ca8:	6923      	ldr	r3, [r4, #16]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d135      	bne.n	8004d1a <_puts_r+0x9a>
 8004cae:	4621      	mov	r1, r4
 8004cb0:	4628      	mov	r0, r5
 8004cb2:	f000 f8e5 	bl	8004e80 <__swsetup_r>
 8004cb6:	b380      	cbz	r0, 8004d1a <_puts_r+0x9a>
 8004cb8:	f04f 35ff 	mov.w	r5, #4294967295
 8004cbc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004cbe:	07da      	lsls	r2, r3, #31
 8004cc0:	d405      	bmi.n	8004cce <_puts_r+0x4e>
 8004cc2:	89a3      	ldrh	r3, [r4, #12]
 8004cc4:	059b      	lsls	r3, r3, #22
 8004cc6:	d402      	bmi.n	8004cce <_puts_r+0x4e>
 8004cc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004cca:	f000 f9ad 	bl	8005028 <__retarget_lock_release_recursive>
 8004cce:	4628      	mov	r0, r5
 8004cd0:	bd70      	pop	{r4, r5, r6, pc}
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	da04      	bge.n	8004ce0 <_puts_r+0x60>
 8004cd6:	69a2      	ldr	r2, [r4, #24]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	dc17      	bgt.n	8004d0c <_puts_r+0x8c>
 8004cdc:	290a      	cmp	r1, #10
 8004cde:	d015      	beq.n	8004d0c <_puts_r+0x8c>
 8004ce0:	6823      	ldr	r3, [r4, #0]
 8004ce2:	1c5a      	adds	r2, r3, #1
 8004ce4:	6022      	str	r2, [r4, #0]
 8004ce6:	7019      	strb	r1, [r3, #0]
 8004ce8:	68a3      	ldr	r3, [r4, #8]
 8004cea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	60a3      	str	r3, [r4, #8]
 8004cf2:	2900      	cmp	r1, #0
 8004cf4:	d1ed      	bne.n	8004cd2 <_puts_r+0x52>
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	da11      	bge.n	8004d1e <_puts_r+0x9e>
 8004cfa:	4622      	mov	r2, r4
 8004cfc:	210a      	movs	r1, #10
 8004cfe:	4628      	mov	r0, r5
 8004d00:	f000 f87f 	bl	8004e02 <__swbuf_r>
 8004d04:	3001      	adds	r0, #1
 8004d06:	d0d7      	beq.n	8004cb8 <_puts_r+0x38>
 8004d08:	250a      	movs	r5, #10
 8004d0a:	e7d7      	b.n	8004cbc <_puts_r+0x3c>
 8004d0c:	4622      	mov	r2, r4
 8004d0e:	4628      	mov	r0, r5
 8004d10:	f000 f877 	bl	8004e02 <__swbuf_r>
 8004d14:	3001      	adds	r0, #1
 8004d16:	d1e7      	bne.n	8004ce8 <_puts_r+0x68>
 8004d18:	e7ce      	b.n	8004cb8 <_puts_r+0x38>
 8004d1a:	3e01      	subs	r6, #1
 8004d1c:	e7e4      	b.n	8004ce8 <_puts_r+0x68>
 8004d1e:	6823      	ldr	r3, [r4, #0]
 8004d20:	1c5a      	adds	r2, r3, #1
 8004d22:	6022      	str	r2, [r4, #0]
 8004d24:	220a      	movs	r2, #10
 8004d26:	701a      	strb	r2, [r3, #0]
 8004d28:	e7ee      	b.n	8004d08 <_puts_r+0x88>
	...

08004d2c <puts>:
 8004d2c:	4b02      	ldr	r3, [pc, #8]	@ (8004d38 <puts+0xc>)
 8004d2e:	4601      	mov	r1, r0
 8004d30:	6818      	ldr	r0, [r3, #0]
 8004d32:	f7ff bfa5 	b.w	8004c80 <_puts_r>
 8004d36:	bf00      	nop
 8004d38:	20000030 	.word	0x20000030

08004d3c <siprintf>:
 8004d3c:	b40e      	push	{r1, r2, r3}
 8004d3e:	b500      	push	{lr}
 8004d40:	b09c      	sub	sp, #112	@ 0x70
 8004d42:	ab1d      	add	r3, sp, #116	@ 0x74
 8004d44:	9002      	str	r0, [sp, #8]
 8004d46:	9006      	str	r0, [sp, #24]
 8004d48:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004d4c:	4809      	ldr	r0, [pc, #36]	@ (8004d74 <siprintf+0x38>)
 8004d4e:	9107      	str	r1, [sp, #28]
 8004d50:	9104      	str	r1, [sp, #16]
 8004d52:	4909      	ldr	r1, [pc, #36]	@ (8004d78 <siprintf+0x3c>)
 8004d54:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d58:	9105      	str	r1, [sp, #20]
 8004d5a:	6800      	ldr	r0, [r0, #0]
 8004d5c:	9301      	str	r3, [sp, #4]
 8004d5e:	a902      	add	r1, sp, #8
 8004d60:	f002 fc48 	bl	80075f4 <_svfiprintf_r>
 8004d64:	9b02      	ldr	r3, [sp, #8]
 8004d66:	2200      	movs	r2, #0
 8004d68:	701a      	strb	r2, [r3, #0]
 8004d6a:	b01c      	add	sp, #112	@ 0x70
 8004d6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d70:	b003      	add	sp, #12
 8004d72:	4770      	bx	lr
 8004d74:	20000030 	.word	0x20000030
 8004d78:	ffff0208 	.word	0xffff0208

08004d7c <__sread>:
 8004d7c:	b510      	push	{r4, lr}
 8004d7e:	460c      	mov	r4, r1
 8004d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d84:	f000 f900 	bl	8004f88 <_read_r>
 8004d88:	2800      	cmp	r0, #0
 8004d8a:	bfab      	itete	ge
 8004d8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004d8e:	89a3      	ldrhlt	r3, [r4, #12]
 8004d90:	181b      	addge	r3, r3, r0
 8004d92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004d96:	bfac      	ite	ge
 8004d98:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004d9a:	81a3      	strhlt	r3, [r4, #12]
 8004d9c:	bd10      	pop	{r4, pc}

08004d9e <__swrite>:
 8004d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004da2:	461f      	mov	r7, r3
 8004da4:	898b      	ldrh	r3, [r1, #12]
 8004da6:	05db      	lsls	r3, r3, #23
 8004da8:	4605      	mov	r5, r0
 8004daa:	460c      	mov	r4, r1
 8004dac:	4616      	mov	r6, r2
 8004dae:	d505      	bpl.n	8004dbc <__swrite+0x1e>
 8004db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004db4:	2302      	movs	r3, #2
 8004db6:	2200      	movs	r2, #0
 8004db8:	f000 f8d4 	bl	8004f64 <_lseek_r>
 8004dbc:	89a3      	ldrh	r3, [r4, #12]
 8004dbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dc2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004dc6:	81a3      	strh	r3, [r4, #12]
 8004dc8:	4632      	mov	r2, r6
 8004dca:	463b      	mov	r3, r7
 8004dcc:	4628      	mov	r0, r5
 8004dce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004dd2:	f000 b8eb 	b.w	8004fac <_write_r>

08004dd6 <__sseek>:
 8004dd6:	b510      	push	{r4, lr}
 8004dd8:	460c      	mov	r4, r1
 8004dda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dde:	f000 f8c1 	bl	8004f64 <_lseek_r>
 8004de2:	1c43      	adds	r3, r0, #1
 8004de4:	89a3      	ldrh	r3, [r4, #12]
 8004de6:	bf15      	itete	ne
 8004de8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004dea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004dee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004df2:	81a3      	strheq	r3, [r4, #12]
 8004df4:	bf18      	it	ne
 8004df6:	81a3      	strhne	r3, [r4, #12]
 8004df8:	bd10      	pop	{r4, pc}

08004dfa <__sclose>:
 8004dfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dfe:	f000 b8a1 	b.w	8004f44 <_close_r>

08004e02 <__swbuf_r>:
 8004e02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e04:	460e      	mov	r6, r1
 8004e06:	4614      	mov	r4, r2
 8004e08:	4605      	mov	r5, r0
 8004e0a:	b118      	cbz	r0, 8004e14 <__swbuf_r+0x12>
 8004e0c:	6a03      	ldr	r3, [r0, #32]
 8004e0e:	b90b      	cbnz	r3, 8004e14 <__swbuf_r+0x12>
 8004e10:	f7ff feee 	bl	8004bf0 <__sinit>
 8004e14:	69a3      	ldr	r3, [r4, #24]
 8004e16:	60a3      	str	r3, [r4, #8]
 8004e18:	89a3      	ldrh	r3, [r4, #12]
 8004e1a:	071a      	lsls	r2, r3, #28
 8004e1c:	d501      	bpl.n	8004e22 <__swbuf_r+0x20>
 8004e1e:	6923      	ldr	r3, [r4, #16]
 8004e20:	b943      	cbnz	r3, 8004e34 <__swbuf_r+0x32>
 8004e22:	4621      	mov	r1, r4
 8004e24:	4628      	mov	r0, r5
 8004e26:	f000 f82b 	bl	8004e80 <__swsetup_r>
 8004e2a:	b118      	cbz	r0, 8004e34 <__swbuf_r+0x32>
 8004e2c:	f04f 37ff 	mov.w	r7, #4294967295
 8004e30:	4638      	mov	r0, r7
 8004e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e34:	6823      	ldr	r3, [r4, #0]
 8004e36:	6922      	ldr	r2, [r4, #16]
 8004e38:	1a98      	subs	r0, r3, r2
 8004e3a:	6963      	ldr	r3, [r4, #20]
 8004e3c:	b2f6      	uxtb	r6, r6
 8004e3e:	4283      	cmp	r3, r0
 8004e40:	4637      	mov	r7, r6
 8004e42:	dc05      	bgt.n	8004e50 <__swbuf_r+0x4e>
 8004e44:	4621      	mov	r1, r4
 8004e46:	4628      	mov	r0, r5
 8004e48:	f002 fe96 	bl	8007b78 <_fflush_r>
 8004e4c:	2800      	cmp	r0, #0
 8004e4e:	d1ed      	bne.n	8004e2c <__swbuf_r+0x2a>
 8004e50:	68a3      	ldr	r3, [r4, #8]
 8004e52:	3b01      	subs	r3, #1
 8004e54:	60a3      	str	r3, [r4, #8]
 8004e56:	6823      	ldr	r3, [r4, #0]
 8004e58:	1c5a      	adds	r2, r3, #1
 8004e5a:	6022      	str	r2, [r4, #0]
 8004e5c:	701e      	strb	r6, [r3, #0]
 8004e5e:	6962      	ldr	r2, [r4, #20]
 8004e60:	1c43      	adds	r3, r0, #1
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d004      	beq.n	8004e70 <__swbuf_r+0x6e>
 8004e66:	89a3      	ldrh	r3, [r4, #12]
 8004e68:	07db      	lsls	r3, r3, #31
 8004e6a:	d5e1      	bpl.n	8004e30 <__swbuf_r+0x2e>
 8004e6c:	2e0a      	cmp	r6, #10
 8004e6e:	d1df      	bne.n	8004e30 <__swbuf_r+0x2e>
 8004e70:	4621      	mov	r1, r4
 8004e72:	4628      	mov	r0, r5
 8004e74:	f002 fe80 	bl	8007b78 <_fflush_r>
 8004e78:	2800      	cmp	r0, #0
 8004e7a:	d0d9      	beq.n	8004e30 <__swbuf_r+0x2e>
 8004e7c:	e7d6      	b.n	8004e2c <__swbuf_r+0x2a>
	...

08004e80 <__swsetup_r>:
 8004e80:	b538      	push	{r3, r4, r5, lr}
 8004e82:	4b29      	ldr	r3, [pc, #164]	@ (8004f28 <__swsetup_r+0xa8>)
 8004e84:	4605      	mov	r5, r0
 8004e86:	6818      	ldr	r0, [r3, #0]
 8004e88:	460c      	mov	r4, r1
 8004e8a:	b118      	cbz	r0, 8004e94 <__swsetup_r+0x14>
 8004e8c:	6a03      	ldr	r3, [r0, #32]
 8004e8e:	b90b      	cbnz	r3, 8004e94 <__swsetup_r+0x14>
 8004e90:	f7ff feae 	bl	8004bf0 <__sinit>
 8004e94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e98:	0719      	lsls	r1, r3, #28
 8004e9a:	d422      	bmi.n	8004ee2 <__swsetup_r+0x62>
 8004e9c:	06da      	lsls	r2, r3, #27
 8004e9e:	d407      	bmi.n	8004eb0 <__swsetup_r+0x30>
 8004ea0:	2209      	movs	r2, #9
 8004ea2:	602a      	str	r2, [r5, #0]
 8004ea4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ea8:	81a3      	strh	r3, [r4, #12]
 8004eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8004eae:	e033      	b.n	8004f18 <__swsetup_r+0x98>
 8004eb0:	0758      	lsls	r0, r3, #29
 8004eb2:	d512      	bpl.n	8004eda <__swsetup_r+0x5a>
 8004eb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004eb6:	b141      	cbz	r1, 8004eca <__swsetup_r+0x4a>
 8004eb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004ebc:	4299      	cmp	r1, r3
 8004ebe:	d002      	beq.n	8004ec6 <__swsetup_r+0x46>
 8004ec0:	4628      	mov	r0, r5
 8004ec2:	f000 ff05 	bl	8005cd0 <_free_r>
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	6363      	str	r3, [r4, #52]	@ 0x34
 8004eca:	89a3      	ldrh	r3, [r4, #12]
 8004ecc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004ed0:	81a3      	strh	r3, [r4, #12]
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	6063      	str	r3, [r4, #4]
 8004ed6:	6923      	ldr	r3, [r4, #16]
 8004ed8:	6023      	str	r3, [r4, #0]
 8004eda:	89a3      	ldrh	r3, [r4, #12]
 8004edc:	f043 0308 	orr.w	r3, r3, #8
 8004ee0:	81a3      	strh	r3, [r4, #12]
 8004ee2:	6923      	ldr	r3, [r4, #16]
 8004ee4:	b94b      	cbnz	r3, 8004efa <__swsetup_r+0x7a>
 8004ee6:	89a3      	ldrh	r3, [r4, #12]
 8004ee8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004eec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ef0:	d003      	beq.n	8004efa <__swsetup_r+0x7a>
 8004ef2:	4621      	mov	r1, r4
 8004ef4:	4628      	mov	r0, r5
 8004ef6:	f002 fe8d 	bl	8007c14 <__smakebuf_r>
 8004efa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004efe:	f013 0201 	ands.w	r2, r3, #1
 8004f02:	d00a      	beq.n	8004f1a <__swsetup_r+0x9a>
 8004f04:	2200      	movs	r2, #0
 8004f06:	60a2      	str	r2, [r4, #8]
 8004f08:	6962      	ldr	r2, [r4, #20]
 8004f0a:	4252      	negs	r2, r2
 8004f0c:	61a2      	str	r2, [r4, #24]
 8004f0e:	6922      	ldr	r2, [r4, #16]
 8004f10:	b942      	cbnz	r2, 8004f24 <__swsetup_r+0xa4>
 8004f12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004f16:	d1c5      	bne.n	8004ea4 <__swsetup_r+0x24>
 8004f18:	bd38      	pop	{r3, r4, r5, pc}
 8004f1a:	0799      	lsls	r1, r3, #30
 8004f1c:	bf58      	it	pl
 8004f1e:	6962      	ldrpl	r2, [r4, #20]
 8004f20:	60a2      	str	r2, [r4, #8]
 8004f22:	e7f4      	b.n	8004f0e <__swsetup_r+0x8e>
 8004f24:	2000      	movs	r0, #0
 8004f26:	e7f7      	b.n	8004f18 <__swsetup_r+0x98>
 8004f28:	20000030 	.word	0x20000030

08004f2c <memset>:
 8004f2c:	4402      	add	r2, r0
 8004f2e:	4603      	mov	r3, r0
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d100      	bne.n	8004f36 <memset+0xa>
 8004f34:	4770      	bx	lr
 8004f36:	f803 1b01 	strb.w	r1, [r3], #1
 8004f3a:	e7f9      	b.n	8004f30 <memset+0x4>

08004f3c <_localeconv_r>:
 8004f3c:	4800      	ldr	r0, [pc, #0]	@ (8004f40 <_localeconv_r+0x4>)
 8004f3e:	4770      	bx	lr
 8004f40:	20000170 	.word	0x20000170

08004f44 <_close_r>:
 8004f44:	b538      	push	{r3, r4, r5, lr}
 8004f46:	4d06      	ldr	r5, [pc, #24]	@ (8004f60 <_close_r+0x1c>)
 8004f48:	2300      	movs	r3, #0
 8004f4a:	4604      	mov	r4, r0
 8004f4c:	4608      	mov	r0, r1
 8004f4e:	602b      	str	r3, [r5, #0]
 8004f50:	f7fc fa9d 	bl	800148e <_close>
 8004f54:	1c43      	adds	r3, r0, #1
 8004f56:	d102      	bne.n	8004f5e <_close_r+0x1a>
 8004f58:	682b      	ldr	r3, [r5, #0]
 8004f5a:	b103      	cbz	r3, 8004f5e <_close_r+0x1a>
 8004f5c:	6023      	str	r3, [r4, #0]
 8004f5e:	bd38      	pop	{r3, r4, r5, pc}
 8004f60:	200003d4 	.word	0x200003d4

08004f64 <_lseek_r>:
 8004f64:	b538      	push	{r3, r4, r5, lr}
 8004f66:	4d07      	ldr	r5, [pc, #28]	@ (8004f84 <_lseek_r+0x20>)
 8004f68:	4604      	mov	r4, r0
 8004f6a:	4608      	mov	r0, r1
 8004f6c:	4611      	mov	r1, r2
 8004f6e:	2200      	movs	r2, #0
 8004f70:	602a      	str	r2, [r5, #0]
 8004f72:	461a      	mov	r2, r3
 8004f74:	f7fc fab2 	bl	80014dc <_lseek>
 8004f78:	1c43      	adds	r3, r0, #1
 8004f7a:	d102      	bne.n	8004f82 <_lseek_r+0x1e>
 8004f7c:	682b      	ldr	r3, [r5, #0]
 8004f7e:	b103      	cbz	r3, 8004f82 <_lseek_r+0x1e>
 8004f80:	6023      	str	r3, [r4, #0]
 8004f82:	bd38      	pop	{r3, r4, r5, pc}
 8004f84:	200003d4 	.word	0x200003d4

08004f88 <_read_r>:
 8004f88:	b538      	push	{r3, r4, r5, lr}
 8004f8a:	4d07      	ldr	r5, [pc, #28]	@ (8004fa8 <_read_r+0x20>)
 8004f8c:	4604      	mov	r4, r0
 8004f8e:	4608      	mov	r0, r1
 8004f90:	4611      	mov	r1, r2
 8004f92:	2200      	movs	r2, #0
 8004f94:	602a      	str	r2, [r5, #0]
 8004f96:	461a      	mov	r2, r3
 8004f98:	f7fc fa40 	bl	800141c <_read>
 8004f9c:	1c43      	adds	r3, r0, #1
 8004f9e:	d102      	bne.n	8004fa6 <_read_r+0x1e>
 8004fa0:	682b      	ldr	r3, [r5, #0]
 8004fa2:	b103      	cbz	r3, 8004fa6 <_read_r+0x1e>
 8004fa4:	6023      	str	r3, [r4, #0]
 8004fa6:	bd38      	pop	{r3, r4, r5, pc}
 8004fa8:	200003d4 	.word	0x200003d4

08004fac <_write_r>:
 8004fac:	b538      	push	{r3, r4, r5, lr}
 8004fae:	4d07      	ldr	r5, [pc, #28]	@ (8004fcc <_write_r+0x20>)
 8004fb0:	4604      	mov	r4, r0
 8004fb2:	4608      	mov	r0, r1
 8004fb4:	4611      	mov	r1, r2
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	602a      	str	r2, [r5, #0]
 8004fba:	461a      	mov	r2, r3
 8004fbc:	f7fc fa4b 	bl	8001456 <_write>
 8004fc0:	1c43      	adds	r3, r0, #1
 8004fc2:	d102      	bne.n	8004fca <_write_r+0x1e>
 8004fc4:	682b      	ldr	r3, [r5, #0]
 8004fc6:	b103      	cbz	r3, 8004fca <_write_r+0x1e>
 8004fc8:	6023      	str	r3, [r4, #0]
 8004fca:	bd38      	pop	{r3, r4, r5, pc}
 8004fcc:	200003d4 	.word	0x200003d4

08004fd0 <__errno>:
 8004fd0:	4b01      	ldr	r3, [pc, #4]	@ (8004fd8 <__errno+0x8>)
 8004fd2:	6818      	ldr	r0, [r3, #0]
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	20000030 	.word	0x20000030

08004fdc <__libc_init_array>:
 8004fdc:	b570      	push	{r4, r5, r6, lr}
 8004fde:	4d0d      	ldr	r5, [pc, #52]	@ (8005014 <__libc_init_array+0x38>)
 8004fe0:	4c0d      	ldr	r4, [pc, #52]	@ (8005018 <__libc_init_array+0x3c>)
 8004fe2:	1b64      	subs	r4, r4, r5
 8004fe4:	10a4      	asrs	r4, r4, #2
 8004fe6:	2600      	movs	r6, #0
 8004fe8:	42a6      	cmp	r6, r4
 8004fea:	d109      	bne.n	8005000 <__libc_init_array+0x24>
 8004fec:	4d0b      	ldr	r5, [pc, #44]	@ (800501c <__libc_init_array+0x40>)
 8004fee:	4c0c      	ldr	r4, [pc, #48]	@ (8005020 <__libc_init_array+0x44>)
 8004ff0:	f003 fae0 	bl	80085b4 <_init>
 8004ff4:	1b64      	subs	r4, r4, r5
 8004ff6:	10a4      	asrs	r4, r4, #2
 8004ff8:	2600      	movs	r6, #0
 8004ffa:	42a6      	cmp	r6, r4
 8004ffc:	d105      	bne.n	800500a <__libc_init_array+0x2e>
 8004ffe:	bd70      	pop	{r4, r5, r6, pc}
 8005000:	f855 3b04 	ldr.w	r3, [r5], #4
 8005004:	4798      	blx	r3
 8005006:	3601      	adds	r6, #1
 8005008:	e7ee      	b.n	8004fe8 <__libc_init_array+0xc>
 800500a:	f855 3b04 	ldr.w	r3, [r5], #4
 800500e:	4798      	blx	r3
 8005010:	3601      	adds	r6, #1
 8005012:	e7f2      	b.n	8004ffa <__libc_init_array+0x1e>
 8005014:	08008ab0 	.word	0x08008ab0
 8005018:	08008ab0 	.word	0x08008ab0
 800501c:	08008ab0 	.word	0x08008ab0
 8005020:	08008ab4 	.word	0x08008ab4

08005024 <__retarget_lock_init_recursive>:
 8005024:	4770      	bx	lr

08005026 <__retarget_lock_acquire_recursive>:
 8005026:	4770      	bx	lr

08005028 <__retarget_lock_release_recursive>:
 8005028:	4770      	bx	lr
	...

0800502c <nanf>:
 800502c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005034 <nanf+0x8>
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	7fc00000 	.word	0x7fc00000

08005038 <quorem>:
 8005038:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800503c:	6903      	ldr	r3, [r0, #16]
 800503e:	690c      	ldr	r4, [r1, #16]
 8005040:	42a3      	cmp	r3, r4
 8005042:	4607      	mov	r7, r0
 8005044:	db7e      	blt.n	8005144 <quorem+0x10c>
 8005046:	3c01      	subs	r4, #1
 8005048:	f101 0814 	add.w	r8, r1, #20
 800504c:	00a3      	lsls	r3, r4, #2
 800504e:	f100 0514 	add.w	r5, r0, #20
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005058:	9301      	str	r3, [sp, #4]
 800505a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800505e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005062:	3301      	adds	r3, #1
 8005064:	429a      	cmp	r2, r3
 8005066:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800506a:	fbb2 f6f3 	udiv	r6, r2, r3
 800506e:	d32e      	bcc.n	80050ce <quorem+0x96>
 8005070:	f04f 0a00 	mov.w	sl, #0
 8005074:	46c4      	mov	ip, r8
 8005076:	46ae      	mov	lr, r5
 8005078:	46d3      	mov	fp, sl
 800507a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800507e:	b298      	uxth	r0, r3
 8005080:	fb06 a000 	mla	r0, r6, r0, sl
 8005084:	0c02      	lsrs	r2, r0, #16
 8005086:	0c1b      	lsrs	r3, r3, #16
 8005088:	fb06 2303 	mla	r3, r6, r3, r2
 800508c:	f8de 2000 	ldr.w	r2, [lr]
 8005090:	b280      	uxth	r0, r0
 8005092:	b292      	uxth	r2, r2
 8005094:	1a12      	subs	r2, r2, r0
 8005096:	445a      	add	r2, fp
 8005098:	f8de 0000 	ldr.w	r0, [lr]
 800509c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80050a6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80050aa:	b292      	uxth	r2, r2
 80050ac:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80050b0:	45e1      	cmp	r9, ip
 80050b2:	f84e 2b04 	str.w	r2, [lr], #4
 80050b6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80050ba:	d2de      	bcs.n	800507a <quorem+0x42>
 80050bc:	9b00      	ldr	r3, [sp, #0]
 80050be:	58eb      	ldr	r3, [r5, r3]
 80050c0:	b92b      	cbnz	r3, 80050ce <quorem+0x96>
 80050c2:	9b01      	ldr	r3, [sp, #4]
 80050c4:	3b04      	subs	r3, #4
 80050c6:	429d      	cmp	r5, r3
 80050c8:	461a      	mov	r2, r3
 80050ca:	d32f      	bcc.n	800512c <quorem+0xf4>
 80050cc:	613c      	str	r4, [r7, #16]
 80050ce:	4638      	mov	r0, r7
 80050d0:	f001 f9c2 	bl	8006458 <__mcmp>
 80050d4:	2800      	cmp	r0, #0
 80050d6:	db25      	blt.n	8005124 <quorem+0xec>
 80050d8:	4629      	mov	r1, r5
 80050da:	2000      	movs	r0, #0
 80050dc:	f858 2b04 	ldr.w	r2, [r8], #4
 80050e0:	f8d1 c000 	ldr.w	ip, [r1]
 80050e4:	fa1f fe82 	uxth.w	lr, r2
 80050e8:	fa1f f38c 	uxth.w	r3, ip
 80050ec:	eba3 030e 	sub.w	r3, r3, lr
 80050f0:	4403      	add	r3, r0
 80050f2:	0c12      	lsrs	r2, r2, #16
 80050f4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80050f8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005102:	45c1      	cmp	r9, r8
 8005104:	f841 3b04 	str.w	r3, [r1], #4
 8005108:	ea4f 4022 	mov.w	r0, r2, asr #16
 800510c:	d2e6      	bcs.n	80050dc <quorem+0xa4>
 800510e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005112:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005116:	b922      	cbnz	r2, 8005122 <quorem+0xea>
 8005118:	3b04      	subs	r3, #4
 800511a:	429d      	cmp	r5, r3
 800511c:	461a      	mov	r2, r3
 800511e:	d30b      	bcc.n	8005138 <quorem+0x100>
 8005120:	613c      	str	r4, [r7, #16]
 8005122:	3601      	adds	r6, #1
 8005124:	4630      	mov	r0, r6
 8005126:	b003      	add	sp, #12
 8005128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800512c:	6812      	ldr	r2, [r2, #0]
 800512e:	3b04      	subs	r3, #4
 8005130:	2a00      	cmp	r2, #0
 8005132:	d1cb      	bne.n	80050cc <quorem+0x94>
 8005134:	3c01      	subs	r4, #1
 8005136:	e7c6      	b.n	80050c6 <quorem+0x8e>
 8005138:	6812      	ldr	r2, [r2, #0]
 800513a:	3b04      	subs	r3, #4
 800513c:	2a00      	cmp	r2, #0
 800513e:	d1ef      	bne.n	8005120 <quorem+0xe8>
 8005140:	3c01      	subs	r4, #1
 8005142:	e7ea      	b.n	800511a <quorem+0xe2>
 8005144:	2000      	movs	r0, #0
 8005146:	e7ee      	b.n	8005126 <quorem+0xee>

08005148 <_dtoa_r>:
 8005148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800514c:	69c7      	ldr	r7, [r0, #28]
 800514e:	b099      	sub	sp, #100	@ 0x64
 8005150:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005154:	ec55 4b10 	vmov	r4, r5, d0
 8005158:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800515a:	9109      	str	r1, [sp, #36]	@ 0x24
 800515c:	4683      	mov	fp, r0
 800515e:	920e      	str	r2, [sp, #56]	@ 0x38
 8005160:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005162:	b97f      	cbnz	r7, 8005184 <_dtoa_r+0x3c>
 8005164:	2010      	movs	r0, #16
 8005166:	f000 fdfd 	bl	8005d64 <malloc>
 800516a:	4602      	mov	r2, r0
 800516c:	f8cb 001c 	str.w	r0, [fp, #28]
 8005170:	b920      	cbnz	r0, 800517c <_dtoa_r+0x34>
 8005172:	4ba7      	ldr	r3, [pc, #668]	@ (8005410 <_dtoa_r+0x2c8>)
 8005174:	21ef      	movs	r1, #239	@ 0xef
 8005176:	48a7      	ldr	r0, [pc, #668]	@ (8005414 <_dtoa_r+0x2cc>)
 8005178:	f002 fdfe 	bl	8007d78 <__assert_func>
 800517c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005180:	6007      	str	r7, [r0, #0]
 8005182:	60c7      	str	r7, [r0, #12]
 8005184:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005188:	6819      	ldr	r1, [r3, #0]
 800518a:	b159      	cbz	r1, 80051a4 <_dtoa_r+0x5c>
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	604a      	str	r2, [r1, #4]
 8005190:	2301      	movs	r3, #1
 8005192:	4093      	lsls	r3, r2
 8005194:	608b      	str	r3, [r1, #8]
 8005196:	4658      	mov	r0, fp
 8005198:	f000 feda 	bl	8005f50 <_Bfree>
 800519c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80051a0:	2200      	movs	r2, #0
 80051a2:	601a      	str	r2, [r3, #0]
 80051a4:	1e2b      	subs	r3, r5, #0
 80051a6:	bfb9      	ittee	lt
 80051a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80051ac:	9303      	strlt	r3, [sp, #12]
 80051ae:	2300      	movge	r3, #0
 80051b0:	6033      	strge	r3, [r6, #0]
 80051b2:	9f03      	ldr	r7, [sp, #12]
 80051b4:	4b98      	ldr	r3, [pc, #608]	@ (8005418 <_dtoa_r+0x2d0>)
 80051b6:	bfbc      	itt	lt
 80051b8:	2201      	movlt	r2, #1
 80051ba:	6032      	strlt	r2, [r6, #0]
 80051bc:	43bb      	bics	r3, r7
 80051be:	d112      	bne.n	80051e6 <_dtoa_r+0x9e>
 80051c0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80051c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80051c6:	6013      	str	r3, [r2, #0]
 80051c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80051cc:	4323      	orrs	r3, r4
 80051ce:	f000 854d 	beq.w	8005c6c <_dtoa_r+0xb24>
 80051d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80051d4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800542c <_dtoa_r+0x2e4>
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f000 854f 	beq.w	8005c7c <_dtoa_r+0xb34>
 80051de:	f10a 0303 	add.w	r3, sl, #3
 80051e2:	f000 bd49 	b.w	8005c78 <_dtoa_r+0xb30>
 80051e6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80051ea:	2200      	movs	r2, #0
 80051ec:	ec51 0b17 	vmov	r0, r1, d7
 80051f0:	2300      	movs	r3, #0
 80051f2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80051f6:	f7fb fc67 	bl	8000ac8 <__aeabi_dcmpeq>
 80051fa:	4680      	mov	r8, r0
 80051fc:	b158      	cbz	r0, 8005216 <_dtoa_r+0xce>
 80051fe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005200:	2301      	movs	r3, #1
 8005202:	6013      	str	r3, [r2, #0]
 8005204:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005206:	b113      	cbz	r3, 800520e <_dtoa_r+0xc6>
 8005208:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800520a:	4b84      	ldr	r3, [pc, #528]	@ (800541c <_dtoa_r+0x2d4>)
 800520c:	6013      	str	r3, [r2, #0]
 800520e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005430 <_dtoa_r+0x2e8>
 8005212:	f000 bd33 	b.w	8005c7c <_dtoa_r+0xb34>
 8005216:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800521a:	aa16      	add	r2, sp, #88	@ 0x58
 800521c:	a917      	add	r1, sp, #92	@ 0x5c
 800521e:	4658      	mov	r0, fp
 8005220:	f001 fa3a 	bl	8006698 <__d2b>
 8005224:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005228:	4681      	mov	r9, r0
 800522a:	2e00      	cmp	r6, #0
 800522c:	d077      	beq.n	800531e <_dtoa_r+0x1d6>
 800522e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005230:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005234:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005238:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800523c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005240:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005244:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005248:	4619      	mov	r1, r3
 800524a:	2200      	movs	r2, #0
 800524c:	4b74      	ldr	r3, [pc, #464]	@ (8005420 <_dtoa_r+0x2d8>)
 800524e:	f7fb f81b 	bl	8000288 <__aeabi_dsub>
 8005252:	a369      	add	r3, pc, #420	@ (adr r3, 80053f8 <_dtoa_r+0x2b0>)
 8005254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005258:	f7fb f9ce 	bl	80005f8 <__aeabi_dmul>
 800525c:	a368      	add	r3, pc, #416	@ (adr r3, 8005400 <_dtoa_r+0x2b8>)
 800525e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005262:	f7fb f813 	bl	800028c <__adddf3>
 8005266:	4604      	mov	r4, r0
 8005268:	4630      	mov	r0, r6
 800526a:	460d      	mov	r5, r1
 800526c:	f7fb f95a 	bl	8000524 <__aeabi_i2d>
 8005270:	a365      	add	r3, pc, #404	@ (adr r3, 8005408 <_dtoa_r+0x2c0>)
 8005272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005276:	f7fb f9bf 	bl	80005f8 <__aeabi_dmul>
 800527a:	4602      	mov	r2, r0
 800527c:	460b      	mov	r3, r1
 800527e:	4620      	mov	r0, r4
 8005280:	4629      	mov	r1, r5
 8005282:	f7fb f803 	bl	800028c <__adddf3>
 8005286:	4604      	mov	r4, r0
 8005288:	460d      	mov	r5, r1
 800528a:	f7fb fc65 	bl	8000b58 <__aeabi_d2iz>
 800528e:	2200      	movs	r2, #0
 8005290:	4607      	mov	r7, r0
 8005292:	2300      	movs	r3, #0
 8005294:	4620      	mov	r0, r4
 8005296:	4629      	mov	r1, r5
 8005298:	f7fb fc20 	bl	8000adc <__aeabi_dcmplt>
 800529c:	b140      	cbz	r0, 80052b0 <_dtoa_r+0x168>
 800529e:	4638      	mov	r0, r7
 80052a0:	f7fb f940 	bl	8000524 <__aeabi_i2d>
 80052a4:	4622      	mov	r2, r4
 80052a6:	462b      	mov	r3, r5
 80052a8:	f7fb fc0e 	bl	8000ac8 <__aeabi_dcmpeq>
 80052ac:	b900      	cbnz	r0, 80052b0 <_dtoa_r+0x168>
 80052ae:	3f01      	subs	r7, #1
 80052b0:	2f16      	cmp	r7, #22
 80052b2:	d851      	bhi.n	8005358 <_dtoa_r+0x210>
 80052b4:	4b5b      	ldr	r3, [pc, #364]	@ (8005424 <_dtoa_r+0x2dc>)
 80052b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80052ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80052c2:	f7fb fc0b 	bl	8000adc <__aeabi_dcmplt>
 80052c6:	2800      	cmp	r0, #0
 80052c8:	d048      	beq.n	800535c <_dtoa_r+0x214>
 80052ca:	3f01      	subs	r7, #1
 80052cc:	2300      	movs	r3, #0
 80052ce:	9312      	str	r3, [sp, #72]	@ 0x48
 80052d0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80052d2:	1b9b      	subs	r3, r3, r6
 80052d4:	1e5a      	subs	r2, r3, #1
 80052d6:	bf44      	itt	mi
 80052d8:	f1c3 0801 	rsbmi	r8, r3, #1
 80052dc:	2300      	movmi	r3, #0
 80052de:	9208      	str	r2, [sp, #32]
 80052e0:	bf54      	ite	pl
 80052e2:	f04f 0800 	movpl.w	r8, #0
 80052e6:	9308      	strmi	r3, [sp, #32]
 80052e8:	2f00      	cmp	r7, #0
 80052ea:	db39      	blt.n	8005360 <_dtoa_r+0x218>
 80052ec:	9b08      	ldr	r3, [sp, #32]
 80052ee:	970f      	str	r7, [sp, #60]	@ 0x3c
 80052f0:	443b      	add	r3, r7
 80052f2:	9308      	str	r3, [sp, #32]
 80052f4:	2300      	movs	r3, #0
 80052f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80052f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052fa:	2b09      	cmp	r3, #9
 80052fc:	d864      	bhi.n	80053c8 <_dtoa_r+0x280>
 80052fe:	2b05      	cmp	r3, #5
 8005300:	bfc4      	itt	gt
 8005302:	3b04      	subgt	r3, #4
 8005304:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005306:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005308:	f1a3 0302 	sub.w	r3, r3, #2
 800530c:	bfcc      	ite	gt
 800530e:	2400      	movgt	r4, #0
 8005310:	2401      	movle	r4, #1
 8005312:	2b03      	cmp	r3, #3
 8005314:	d863      	bhi.n	80053de <_dtoa_r+0x296>
 8005316:	e8df f003 	tbb	[pc, r3]
 800531a:	372a      	.short	0x372a
 800531c:	5535      	.short	0x5535
 800531e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005322:	441e      	add	r6, r3
 8005324:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005328:	2b20      	cmp	r3, #32
 800532a:	bfc1      	itttt	gt
 800532c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005330:	409f      	lslgt	r7, r3
 8005332:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005336:	fa24 f303 	lsrgt.w	r3, r4, r3
 800533a:	bfd6      	itet	le
 800533c:	f1c3 0320 	rsble	r3, r3, #32
 8005340:	ea47 0003 	orrgt.w	r0, r7, r3
 8005344:	fa04 f003 	lslle.w	r0, r4, r3
 8005348:	f7fb f8dc 	bl	8000504 <__aeabi_ui2d>
 800534c:	2201      	movs	r2, #1
 800534e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005352:	3e01      	subs	r6, #1
 8005354:	9214      	str	r2, [sp, #80]	@ 0x50
 8005356:	e777      	b.n	8005248 <_dtoa_r+0x100>
 8005358:	2301      	movs	r3, #1
 800535a:	e7b8      	b.n	80052ce <_dtoa_r+0x186>
 800535c:	9012      	str	r0, [sp, #72]	@ 0x48
 800535e:	e7b7      	b.n	80052d0 <_dtoa_r+0x188>
 8005360:	427b      	negs	r3, r7
 8005362:	930a      	str	r3, [sp, #40]	@ 0x28
 8005364:	2300      	movs	r3, #0
 8005366:	eba8 0807 	sub.w	r8, r8, r7
 800536a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800536c:	e7c4      	b.n	80052f8 <_dtoa_r+0x1b0>
 800536e:	2300      	movs	r3, #0
 8005370:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005372:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005374:	2b00      	cmp	r3, #0
 8005376:	dc35      	bgt.n	80053e4 <_dtoa_r+0x29c>
 8005378:	2301      	movs	r3, #1
 800537a:	9300      	str	r3, [sp, #0]
 800537c:	9307      	str	r3, [sp, #28]
 800537e:	461a      	mov	r2, r3
 8005380:	920e      	str	r2, [sp, #56]	@ 0x38
 8005382:	e00b      	b.n	800539c <_dtoa_r+0x254>
 8005384:	2301      	movs	r3, #1
 8005386:	e7f3      	b.n	8005370 <_dtoa_r+0x228>
 8005388:	2300      	movs	r3, #0
 800538a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800538c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800538e:	18fb      	adds	r3, r7, r3
 8005390:	9300      	str	r3, [sp, #0]
 8005392:	3301      	adds	r3, #1
 8005394:	2b01      	cmp	r3, #1
 8005396:	9307      	str	r3, [sp, #28]
 8005398:	bfb8      	it	lt
 800539a:	2301      	movlt	r3, #1
 800539c:	f8db 001c 	ldr.w	r0, [fp, #28]
 80053a0:	2100      	movs	r1, #0
 80053a2:	2204      	movs	r2, #4
 80053a4:	f102 0514 	add.w	r5, r2, #20
 80053a8:	429d      	cmp	r5, r3
 80053aa:	d91f      	bls.n	80053ec <_dtoa_r+0x2a4>
 80053ac:	6041      	str	r1, [r0, #4]
 80053ae:	4658      	mov	r0, fp
 80053b0:	f000 fd8e 	bl	8005ed0 <_Balloc>
 80053b4:	4682      	mov	sl, r0
 80053b6:	2800      	cmp	r0, #0
 80053b8:	d13c      	bne.n	8005434 <_dtoa_r+0x2ec>
 80053ba:	4b1b      	ldr	r3, [pc, #108]	@ (8005428 <_dtoa_r+0x2e0>)
 80053bc:	4602      	mov	r2, r0
 80053be:	f240 11af 	movw	r1, #431	@ 0x1af
 80053c2:	e6d8      	b.n	8005176 <_dtoa_r+0x2e>
 80053c4:	2301      	movs	r3, #1
 80053c6:	e7e0      	b.n	800538a <_dtoa_r+0x242>
 80053c8:	2401      	movs	r4, #1
 80053ca:	2300      	movs	r3, #0
 80053cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80053ce:	940b      	str	r4, [sp, #44]	@ 0x2c
 80053d0:	f04f 33ff 	mov.w	r3, #4294967295
 80053d4:	9300      	str	r3, [sp, #0]
 80053d6:	9307      	str	r3, [sp, #28]
 80053d8:	2200      	movs	r2, #0
 80053da:	2312      	movs	r3, #18
 80053dc:	e7d0      	b.n	8005380 <_dtoa_r+0x238>
 80053de:	2301      	movs	r3, #1
 80053e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80053e2:	e7f5      	b.n	80053d0 <_dtoa_r+0x288>
 80053e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80053e6:	9300      	str	r3, [sp, #0]
 80053e8:	9307      	str	r3, [sp, #28]
 80053ea:	e7d7      	b.n	800539c <_dtoa_r+0x254>
 80053ec:	3101      	adds	r1, #1
 80053ee:	0052      	lsls	r2, r2, #1
 80053f0:	e7d8      	b.n	80053a4 <_dtoa_r+0x25c>
 80053f2:	bf00      	nop
 80053f4:	f3af 8000 	nop.w
 80053f8:	636f4361 	.word	0x636f4361
 80053fc:	3fd287a7 	.word	0x3fd287a7
 8005400:	8b60c8b3 	.word	0x8b60c8b3
 8005404:	3fc68a28 	.word	0x3fc68a28
 8005408:	509f79fb 	.word	0x509f79fb
 800540c:	3fd34413 	.word	0x3fd34413
 8005410:	080086be 	.word	0x080086be
 8005414:	080086d5 	.word	0x080086d5
 8005418:	7ff00000 	.word	0x7ff00000
 800541c:	08008689 	.word	0x08008689
 8005420:	3ff80000 	.word	0x3ff80000
 8005424:	080087d0 	.word	0x080087d0
 8005428:	0800872d 	.word	0x0800872d
 800542c:	080086ba 	.word	0x080086ba
 8005430:	08008688 	.word	0x08008688
 8005434:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005438:	6018      	str	r0, [r3, #0]
 800543a:	9b07      	ldr	r3, [sp, #28]
 800543c:	2b0e      	cmp	r3, #14
 800543e:	f200 80a4 	bhi.w	800558a <_dtoa_r+0x442>
 8005442:	2c00      	cmp	r4, #0
 8005444:	f000 80a1 	beq.w	800558a <_dtoa_r+0x442>
 8005448:	2f00      	cmp	r7, #0
 800544a:	dd33      	ble.n	80054b4 <_dtoa_r+0x36c>
 800544c:	4bad      	ldr	r3, [pc, #692]	@ (8005704 <_dtoa_r+0x5bc>)
 800544e:	f007 020f 	and.w	r2, r7, #15
 8005452:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005456:	ed93 7b00 	vldr	d7, [r3]
 800545a:	05f8      	lsls	r0, r7, #23
 800545c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005460:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005464:	d516      	bpl.n	8005494 <_dtoa_r+0x34c>
 8005466:	4ba8      	ldr	r3, [pc, #672]	@ (8005708 <_dtoa_r+0x5c0>)
 8005468:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800546c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005470:	f7fb f9ec 	bl	800084c <__aeabi_ddiv>
 8005474:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005478:	f004 040f 	and.w	r4, r4, #15
 800547c:	2603      	movs	r6, #3
 800547e:	4da2      	ldr	r5, [pc, #648]	@ (8005708 <_dtoa_r+0x5c0>)
 8005480:	b954      	cbnz	r4, 8005498 <_dtoa_r+0x350>
 8005482:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005486:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800548a:	f7fb f9df 	bl	800084c <__aeabi_ddiv>
 800548e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005492:	e028      	b.n	80054e6 <_dtoa_r+0x39e>
 8005494:	2602      	movs	r6, #2
 8005496:	e7f2      	b.n	800547e <_dtoa_r+0x336>
 8005498:	07e1      	lsls	r1, r4, #31
 800549a:	d508      	bpl.n	80054ae <_dtoa_r+0x366>
 800549c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80054a4:	f7fb f8a8 	bl	80005f8 <__aeabi_dmul>
 80054a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054ac:	3601      	adds	r6, #1
 80054ae:	1064      	asrs	r4, r4, #1
 80054b0:	3508      	adds	r5, #8
 80054b2:	e7e5      	b.n	8005480 <_dtoa_r+0x338>
 80054b4:	f000 80d2 	beq.w	800565c <_dtoa_r+0x514>
 80054b8:	427c      	negs	r4, r7
 80054ba:	4b92      	ldr	r3, [pc, #584]	@ (8005704 <_dtoa_r+0x5bc>)
 80054bc:	4d92      	ldr	r5, [pc, #584]	@ (8005708 <_dtoa_r+0x5c0>)
 80054be:	f004 020f 	and.w	r2, r4, #15
 80054c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80054c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80054ce:	f7fb f893 	bl	80005f8 <__aeabi_dmul>
 80054d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054d6:	1124      	asrs	r4, r4, #4
 80054d8:	2300      	movs	r3, #0
 80054da:	2602      	movs	r6, #2
 80054dc:	2c00      	cmp	r4, #0
 80054de:	f040 80b2 	bne.w	8005646 <_dtoa_r+0x4fe>
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1d3      	bne.n	800548e <_dtoa_r+0x346>
 80054e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80054e8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f000 80b7 	beq.w	8005660 <_dtoa_r+0x518>
 80054f2:	4b86      	ldr	r3, [pc, #536]	@ (800570c <_dtoa_r+0x5c4>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	4620      	mov	r0, r4
 80054f8:	4629      	mov	r1, r5
 80054fa:	f7fb faef 	bl	8000adc <__aeabi_dcmplt>
 80054fe:	2800      	cmp	r0, #0
 8005500:	f000 80ae 	beq.w	8005660 <_dtoa_r+0x518>
 8005504:	9b07      	ldr	r3, [sp, #28]
 8005506:	2b00      	cmp	r3, #0
 8005508:	f000 80aa 	beq.w	8005660 <_dtoa_r+0x518>
 800550c:	9b00      	ldr	r3, [sp, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	dd37      	ble.n	8005582 <_dtoa_r+0x43a>
 8005512:	1e7b      	subs	r3, r7, #1
 8005514:	9304      	str	r3, [sp, #16]
 8005516:	4620      	mov	r0, r4
 8005518:	4b7d      	ldr	r3, [pc, #500]	@ (8005710 <_dtoa_r+0x5c8>)
 800551a:	2200      	movs	r2, #0
 800551c:	4629      	mov	r1, r5
 800551e:	f7fb f86b 	bl	80005f8 <__aeabi_dmul>
 8005522:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005526:	9c00      	ldr	r4, [sp, #0]
 8005528:	3601      	adds	r6, #1
 800552a:	4630      	mov	r0, r6
 800552c:	f7fa fffa 	bl	8000524 <__aeabi_i2d>
 8005530:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005534:	f7fb f860 	bl	80005f8 <__aeabi_dmul>
 8005538:	4b76      	ldr	r3, [pc, #472]	@ (8005714 <_dtoa_r+0x5cc>)
 800553a:	2200      	movs	r2, #0
 800553c:	f7fa fea6 	bl	800028c <__adddf3>
 8005540:	4605      	mov	r5, r0
 8005542:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005546:	2c00      	cmp	r4, #0
 8005548:	f040 808d 	bne.w	8005666 <_dtoa_r+0x51e>
 800554c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005550:	4b71      	ldr	r3, [pc, #452]	@ (8005718 <_dtoa_r+0x5d0>)
 8005552:	2200      	movs	r2, #0
 8005554:	f7fa fe98 	bl	8000288 <__aeabi_dsub>
 8005558:	4602      	mov	r2, r0
 800555a:	460b      	mov	r3, r1
 800555c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005560:	462a      	mov	r2, r5
 8005562:	4633      	mov	r3, r6
 8005564:	f7fb fad8 	bl	8000b18 <__aeabi_dcmpgt>
 8005568:	2800      	cmp	r0, #0
 800556a:	f040 828b 	bne.w	8005a84 <_dtoa_r+0x93c>
 800556e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005572:	462a      	mov	r2, r5
 8005574:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005578:	f7fb fab0 	bl	8000adc <__aeabi_dcmplt>
 800557c:	2800      	cmp	r0, #0
 800557e:	f040 8128 	bne.w	80057d2 <_dtoa_r+0x68a>
 8005582:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005586:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800558a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800558c:	2b00      	cmp	r3, #0
 800558e:	f2c0 815a 	blt.w	8005846 <_dtoa_r+0x6fe>
 8005592:	2f0e      	cmp	r7, #14
 8005594:	f300 8157 	bgt.w	8005846 <_dtoa_r+0x6fe>
 8005598:	4b5a      	ldr	r3, [pc, #360]	@ (8005704 <_dtoa_r+0x5bc>)
 800559a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800559e:	ed93 7b00 	vldr	d7, [r3]
 80055a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	ed8d 7b00 	vstr	d7, [sp]
 80055aa:	da03      	bge.n	80055b4 <_dtoa_r+0x46c>
 80055ac:	9b07      	ldr	r3, [sp, #28]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f340 8101 	ble.w	80057b6 <_dtoa_r+0x66e>
 80055b4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80055b8:	4656      	mov	r6, sl
 80055ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80055be:	4620      	mov	r0, r4
 80055c0:	4629      	mov	r1, r5
 80055c2:	f7fb f943 	bl	800084c <__aeabi_ddiv>
 80055c6:	f7fb fac7 	bl	8000b58 <__aeabi_d2iz>
 80055ca:	4680      	mov	r8, r0
 80055cc:	f7fa ffaa 	bl	8000524 <__aeabi_i2d>
 80055d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80055d4:	f7fb f810 	bl	80005f8 <__aeabi_dmul>
 80055d8:	4602      	mov	r2, r0
 80055da:	460b      	mov	r3, r1
 80055dc:	4620      	mov	r0, r4
 80055de:	4629      	mov	r1, r5
 80055e0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80055e4:	f7fa fe50 	bl	8000288 <__aeabi_dsub>
 80055e8:	f806 4b01 	strb.w	r4, [r6], #1
 80055ec:	9d07      	ldr	r5, [sp, #28]
 80055ee:	eba6 040a 	sub.w	r4, r6, sl
 80055f2:	42a5      	cmp	r5, r4
 80055f4:	4602      	mov	r2, r0
 80055f6:	460b      	mov	r3, r1
 80055f8:	f040 8117 	bne.w	800582a <_dtoa_r+0x6e2>
 80055fc:	f7fa fe46 	bl	800028c <__adddf3>
 8005600:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005604:	4604      	mov	r4, r0
 8005606:	460d      	mov	r5, r1
 8005608:	f7fb fa86 	bl	8000b18 <__aeabi_dcmpgt>
 800560c:	2800      	cmp	r0, #0
 800560e:	f040 80f9 	bne.w	8005804 <_dtoa_r+0x6bc>
 8005612:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005616:	4620      	mov	r0, r4
 8005618:	4629      	mov	r1, r5
 800561a:	f7fb fa55 	bl	8000ac8 <__aeabi_dcmpeq>
 800561e:	b118      	cbz	r0, 8005628 <_dtoa_r+0x4e0>
 8005620:	f018 0f01 	tst.w	r8, #1
 8005624:	f040 80ee 	bne.w	8005804 <_dtoa_r+0x6bc>
 8005628:	4649      	mov	r1, r9
 800562a:	4658      	mov	r0, fp
 800562c:	f000 fc90 	bl	8005f50 <_Bfree>
 8005630:	2300      	movs	r3, #0
 8005632:	7033      	strb	r3, [r6, #0]
 8005634:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005636:	3701      	adds	r7, #1
 8005638:	601f      	str	r7, [r3, #0]
 800563a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 831d 	beq.w	8005c7c <_dtoa_r+0xb34>
 8005642:	601e      	str	r6, [r3, #0]
 8005644:	e31a      	b.n	8005c7c <_dtoa_r+0xb34>
 8005646:	07e2      	lsls	r2, r4, #31
 8005648:	d505      	bpl.n	8005656 <_dtoa_r+0x50e>
 800564a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800564e:	f7fa ffd3 	bl	80005f8 <__aeabi_dmul>
 8005652:	3601      	adds	r6, #1
 8005654:	2301      	movs	r3, #1
 8005656:	1064      	asrs	r4, r4, #1
 8005658:	3508      	adds	r5, #8
 800565a:	e73f      	b.n	80054dc <_dtoa_r+0x394>
 800565c:	2602      	movs	r6, #2
 800565e:	e742      	b.n	80054e6 <_dtoa_r+0x39e>
 8005660:	9c07      	ldr	r4, [sp, #28]
 8005662:	9704      	str	r7, [sp, #16]
 8005664:	e761      	b.n	800552a <_dtoa_r+0x3e2>
 8005666:	4b27      	ldr	r3, [pc, #156]	@ (8005704 <_dtoa_r+0x5bc>)
 8005668:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800566a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800566e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005672:	4454      	add	r4, sl
 8005674:	2900      	cmp	r1, #0
 8005676:	d053      	beq.n	8005720 <_dtoa_r+0x5d8>
 8005678:	4928      	ldr	r1, [pc, #160]	@ (800571c <_dtoa_r+0x5d4>)
 800567a:	2000      	movs	r0, #0
 800567c:	f7fb f8e6 	bl	800084c <__aeabi_ddiv>
 8005680:	4633      	mov	r3, r6
 8005682:	462a      	mov	r2, r5
 8005684:	f7fa fe00 	bl	8000288 <__aeabi_dsub>
 8005688:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800568c:	4656      	mov	r6, sl
 800568e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005692:	f7fb fa61 	bl	8000b58 <__aeabi_d2iz>
 8005696:	4605      	mov	r5, r0
 8005698:	f7fa ff44 	bl	8000524 <__aeabi_i2d>
 800569c:	4602      	mov	r2, r0
 800569e:	460b      	mov	r3, r1
 80056a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056a4:	f7fa fdf0 	bl	8000288 <__aeabi_dsub>
 80056a8:	3530      	adds	r5, #48	@ 0x30
 80056aa:	4602      	mov	r2, r0
 80056ac:	460b      	mov	r3, r1
 80056ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80056b2:	f806 5b01 	strb.w	r5, [r6], #1
 80056b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80056ba:	f7fb fa0f 	bl	8000adc <__aeabi_dcmplt>
 80056be:	2800      	cmp	r0, #0
 80056c0:	d171      	bne.n	80057a6 <_dtoa_r+0x65e>
 80056c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80056c6:	4911      	ldr	r1, [pc, #68]	@ (800570c <_dtoa_r+0x5c4>)
 80056c8:	2000      	movs	r0, #0
 80056ca:	f7fa fddd 	bl	8000288 <__aeabi_dsub>
 80056ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80056d2:	f7fb fa03 	bl	8000adc <__aeabi_dcmplt>
 80056d6:	2800      	cmp	r0, #0
 80056d8:	f040 8095 	bne.w	8005806 <_dtoa_r+0x6be>
 80056dc:	42a6      	cmp	r6, r4
 80056de:	f43f af50 	beq.w	8005582 <_dtoa_r+0x43a>
 80056e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80056e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005710 <_dtoa_r+0x5c8>)
 80056e8:	2200      	movs	r2, #0
 80056ea:	f7fa ff85 	bl	80005f8 <__aeabi_dmul>
 80056ee:	4b08      	ldr	r3, [pc, #32]	@ (8005710 <_dtoa_r+0x5c8>)
 80056f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80056f4:	2200      	movs	r2, #0
 80056f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056fa:	f7fa ff7d 	bl	80005f8 <__aeabi_dmul>
 80056fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005702:	e7c4      	b.n	800568e <_dtoa_r+0x546>
 8005704:	080087d0 	.word	0x080087d0
 8005708:	080087a8 	.word	0x080087a8
 800570c:	3ff00000 	.word	0x3ff00000
 8005710:	40240000 	.word	0x40240000
 8005714:	401c0000 	.word	0x401c0000
 8005718:	40140000 	.word	0x40140000
 800571c:	3fe00000 	.word	0x3fe00000
 8005720:	4631      	mov	r1, r6
 8005722:	4628      	mov	r0, r5
 8005724:	f7fa ff68 	bl	80005f8 <__aeabi_dmul>
 8005728:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800572c:	9415      	str	r4, [sp, #84]	@ 0x54
 800572e:	4656      	mov	r6, sl
 8005730:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005734:	f7fb fa10 	bl	8000b58 <__aeabi_d2iz>
 8005738:	4605      	mov	r5, r0
 800573a:	f7fa fef3 	bl	8000524 <__aeabi_i2d>
 800573e:	4602      	mov	r2, r0
 8005740:	460b      	mov	r3, r1
 8005742:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005746:	f7fa fd9f 	bl	8000288 <__aeabi_dsub>
 800574a:	3530      	adds	r5, #48	@ 0x30
 800574c:	f806 5b01 	strb.w	r5, [r6], #1
 8005750:	4602      	mov	r2, r0
 8005752:	460b      	mov	r3, r1
 8005754:	42a6      	cmp	r6, r4
 8005756:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800575a:	f04f 0200 	mov.w	r2, #0
 800575e:	d124      	bne.n	80057aa <_dtoa_r+0x662>
 8005760:	4bac      	ldr	r3, [pc, #688]	@ (8005a14 <_dtoa_r+0x8cc>)
 8005762:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005766:	f7fa fd91 	bl	800028c <__adddf3>
 800576a:	4602      	mov	r2, r0
 800576c:	460b      	mov	r3, r1
 800576e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005772:	f7fb f9d1 	bl	8000b18 <__aeabi_dcmpgt>
 8005776:	2800      	cmp	r0, #0
 8005778:	d145      	bne.n	8005806 <_dtoa_r+0x6be>
 800577a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800577e:	49a5      	ldr	r1, [pc, #660]	@ (8005a14 <_dtoa_r+0x8cc>)
 8005780:	2000      	movs	r0, #0
 8005782:	f7fa fd81 	bl	8000288 <__aeabi_dsub>
 8005786:	4602      	mov	r2, r0
 8005788:	460b      	mov	r3, r1
 800578a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800578e:	f7fb f9a5 	bl	8000adc <__aeabi_dcmplt>
 8005792:	2800      	cmp	r0, #0
 8005794:	f43f aef5 	beq.w	8005582 <_dtoa_r+0x43a>
 8005798:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800579a:	1e73      	subs	r3, r6, #1
 800579c:	9315      	str	r3, [sp, #84]	@ 0x54
 800579e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80057a2:	2b30      	cmp	r3, #48	@ 0x30
 80057a4:	d0f8      	beq.n	8005798 <_dtoa_r+0x650>
 80057a6:	9f04      	ldr	r7, [sp, #16]
 80057a8:	e73e      	b.n	8005628 <_dtoa_r+0x4e0>
 80057aa:	4b9b      	ldr	r3, [pc, #620]	@ (8005a18 <_dtoa_r+0x8d0>)
 80057ac:	f7fa ff24 	bl	80005f8 <__aeabi_dmul>
 80057b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057b4:	e7bc      	b.n	8005730 <_dtoa_r+0x5e8>
 80057b6:	d10c      	bne.n	80057d2 <_dtoa_r+0x68a>
 80057b8:	4b98      	ldr	r3, [pc, #608]	@ (8005a1c <_dtoa_r+0x8d4>)
 80057ba:	2200      	movs	r2, #0
 80057bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80057c0:	f7fa ff1a 	bl	80005f8 <__aeabi_dmul>
 80057c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057c8:	f7fb f99c 	bl	8000b04 <__aeabi_dcmpge>
 80057cc:	2800      	cmp	r0, #0
 80057ce:	f000 8157 	beq.w	8005a80 <_dtoa_r+0x938>
 80057d2:	2400      	movs	r4, #0
 80057d4:	4625      	mov	r5, r4
 80057d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80057d8:	43db      	mvns	r3, r3
 80057da:	9304      	str	r3, [sp, #16]
 80057dc:	4656      	mov	r6, sl
 80057de:	2700      	movs	r7, #0
 80057e0:	4621      	mov	r1, r4
 80057e2:	4658      	mov	r0, fp
 80057e4:	f000 fbb4 	bl	8005f50 <_Bfree>
 80057e8:	2d00      	cmp	r5, #0
 80057ea:	d0dc      	beq.n	80057a6 <_dtoa_r+0x65e>
 80057ec:	b12f      	cbz	r7, 80057fa <_dtoa_r+0x6b2>
 80057ee:	42af      	cmp	r7, r5
 80057f0:	d003      	beq.n	80057fa <_dtoa_r+0x6b2>
 80057f2:	4639      	mov	r1, r7
 80057f4:	4658      	mov	r0, fp
 80057f6:	f000 fbab 	bl	8005f50 <_Bfree>
 80057fa:	4629      	mov	r1, r5
 80057fc:	4658      	mov	r0, fp
 80057fe:	f000 fba7 	bl	8005f50 <_Bfree>
 8005802:	e7d0      	b.n	80057a6 <_dtoa_r+0x65e>
 8005804:	9704      	str	r7, [sp, #16]
 8005806:	4633      	mov	r3, r6
 8005808:	461e      	mov	r6, r3
 800580a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800580e:	2a39      	cmp	r2, #57	@ 0x39
 8005810:	d107      	bne.n	8005822 <_dtoa_r+0x6da>
 8005812:	459a      	cmp	sl, r3
 8005814:	d1f8      	bne.n	8005808 <_dtoa_r+0x6c0>
 8005816:	9a04      	ldr	r2, [sp, #16]
 8005818:	3201      	adds	r2, #1
 800581a:	9204      	str	r2, [sp, #16]
 800581c:	2230      	movs	r2, #48	@ 0x30
 800581e:	f88a 2000 	strb.w	r2, [sl]
 8005822:	781a      	ldrb	r2, [r3, #0]
 8005824:	3201      	adds	r2, #1
 8005826:	701a      	strb	r2, [r3, #0]
 8005828:	e7bd      	b.n	80057a6 <_dtoa_r+0x65e>
 800582a:	4b7b      	ldr	r3, [pc, #492]	@ (8005a18 <_dtoa_r+0x8d0>)
 800582c:	2200      	movs	r2, #0
 800582e:	f7fa fee3 	bl	80005f8 <__aeabi_dmul>
 8005832:	2200      	movs	r2, #0
 8005834:	2300      	movs	r3, #0
 8005836:	4604      	mov	r4, r0
 8005838:	460d      	mov	r5, r1
 800583a:	f7fb f945 	bl	8000ac8 <__aeabi_dcmpeq>
 800583e:	2800      	cmp	r0, #0
 8005840:	f43f aebb 	beq.w	80055ba <_dtoa_r+0x472>
 8005844:	e6f0      	b.n	8005628 <_dtoa_r+0x4e0>
 8005846:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005848:	2a00      	cmp	r2, #0
 800584a:	f000 80db 	beq.w	8005a04 <_dtoa_r+0x8bc>
 800584e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005850:	2a01      	cmp	r2, #1
 8005852:	f300 80bf 	bgt.w	80059d4 <_dtoa_r+0x88c>
 8005856:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005858:	2a00      	cmp	r2, #0
 800585a:	f000 80b7 	beq.w	80059cc <_dtoa_r+0x884>
 800585e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005862:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005864:	4646      	mov	r6, r8
 8005866:	9a08      	ldr	r2, [sp, #32]
 8005868:	2101      	movs	r1, #1
 800586a:	441a      	add	r2, r3
 800586c:	4658      	mov	r0, fp
 800586e:	4498      	add	r8, r3
 8005870:	9208      	str	r2, [sp, #32]
 8005872:	f000 fc6b 	bl	800614c <__i2b>
 8005876:	4605      	mov	r5, r0
 8005878:	b15e      	cbz	r6, 8005892 <_dtoa_r+0x74a>
 800587a:	9b08      	ldr	r3, [sp, #32]
 800587c:	2b00      	cmp	r3, #0
 800587e:	dd08      	ble.n	8005892 <_dtoa_r+0x74a>
 8005880:	42b3      	cmp	r3, r6
 8005882:	9a08      	ldr	r2, [sp, #32]
 8005884:	bfa8      	it	ge
 8005886:	4633      	movge	r3, r6
 8005888:	eba8 0803 	sub.w	r8, r8, r3
 800588c:	1af6      	subs	r6, r6, r3
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	9308      	str	r3, [sp, #32]
 8005892:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005894:	b1f3      	cbz	r3, 80058d4 <_dtoa_r+0x78c>
 8005896:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005898:	2b00      	cmp	r3, #0
 800589a:	f000 80b7 	beq.w	8005a0c <_dtoa_r+0x8c4>
 800589e:	b18c      	cbz	r4, 80058c4 <_dtoa_r+0x77c>
 80058a0:	4629      	mov	r1, r5
 80058a2:	4622      	mov	r2, r4
 80058a4:	4658      	mov	r0, fp
 80058a6:	f000 fd11 	bl	80062cc <__pow5mult>
 80058aa:	464a      	mov	r2, r9
 80058ac:	4601      	mov	r1, r0
 80058ae:	4605      	mov	r5, r0
 80058b0:	4658      	mov	r0, fp
 80058b2:	f000 fc61 	bl	8006178 <__multiply>
 80058b6:	4649      	mov	r1, r9
 80058b8:	9004      	str	r0, [sp, #16]
 80058ba:	4658      	mov	r0, fp
 80058bc:	f000 fb48 	bl	8005f50 <_Bfree>
 80058c0:	9b04      	ldr	r3, [sp, #16]
 80058c2:	4699      	mov	r9, r3
 80058c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80058c6:	1b1a      	subs	r2, r3, r4
 80058c8:	d004      	beq.n	80058d4 <_dtoa_r+0x78c>
 80058ca:	4649      	mov	r1, r9
 80058cc:	4658      	mov	r0, fp
 80058ce:	f000 fcfd 	bl	80062cc <__pow5mult>
 80058d2:	4681      	mov	r9, r0
 80058d4:	2101      	movs	r1, #1
 80058d6:	4658      	mov	r0, fp
 80058d8:	f000 fc38 	bl	800614c <__i2b>
 80058dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80058de:	4604      	mov	r4, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f000 81cf 	beq.w	8005c84 <_dtoa_r+0xb3c>
 80058e6:	461a      	mov	r2, r3
 80058e8:	4601      	mov	r1, r0
 80058ea:	4658      	mov	r0, fp
 80058ec:	f000 fcee 	bl	80062cc <__pow5mult>
 80058f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	4604      	mov	r4, r0
 80058f6:	f300 8095 	bgt.w	8005a24 <_dtoa_r+0x8dc>
 80058fa:	9b02      	ldr	r3, [sp, #8]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	f040 8087 	bne.w	8005a10 <_dtoa_r+0x8c8>
 8005902:	9b03      	ldr	r3, [sp, #12]
 8005904:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005908:	2b00      	cmp	r3, #0
 800590a:	f040 8089 	bne.w	8005a20 <_dtoa_r+0x8d8>
 800590e:	9b03      	ldr	r3, [sp, #12]
 8005910:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005914:	0d1b      	lsrs	r3, r3, #20
 8005916:	051b      	lsls	r3, r3, #20
 8005918:	b12b      	cbz	r3, 8005926 <_dtoa_r+0x7de>
 800591a:	9b08      	ldr	r3, [sp, #32]
 800591c:	3301      	adds	r3, #1
 800591e:	9308      	str	r3, [sp, #32]
 8005920:	f108 0801 	add.w	r8, r8, #1
 8005924:	2301      	movs	r3, #1
 8005926:	930a      	str	r3, [sp, #40]	@ 0x28
 8005928:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800592a:	2b00      	cmp	r3, #0
 800592c:	f000 81b0 	beq.w	8005c90 <_dtoa_r+0xb48>
 8005930:	6923      	ldr	r3, [r4, #16]
 8005932:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005936:	6918      	ldr	r0, [r3, #16]
 8005938:	f000 fbbc 	bl	80060b4 <__hi0bits>
 800593c:	f1c0 0020 	rsb	r0, r0, #32
 8005940:	9b08      	ldr	r3, [sp, #32]
 8005942:	4418      	add	r0, r3
 8005944:	f010 001f 	ands.w	r0, r0, #31
 8005948:	d077      	beq.n	8005a3a <_dtoa_r+0x8f2>
 800594a:	f1c0 0320 	rsb	r3, r0, #32
 800594e:	2b04      	cmp	r3, #4
 8005950:	dd6b      	ble.n	8005a2a <_dtoa_r+0x8e2>
 8005952:	9b08      	ldr	r3, [sp, #32]
 8005954:	f1c0 001c 	rsb	r0, r0, #28
 8005958:	4403      	add	r3, r0
 800595a:	4480      	add	r8, r0
 800595c:	4406      	add	r6, r0
 800595e:	9308      	str	r3, [sp, #32]
 8005960:	f1b8 0f00 	cmp.w	r8, #0
 8005964:	dd05      	ble.n	8005972 <_dtoa_r+0x82a>
 8005966:	4649      	mov	r1, r9
 8005968:	4642      	mov	r2, r8
 800596a:	4658      	mov	r0, fp
 800596c:	f000 fd08 	bl	8006380 <__lshift>
 8005970:	4681      	mov	r9, r0
 8005972:	9b08      	ldr	r3, [sp, #32]
 8005974:	2b00      	cmp	r3, #0
 8005976:	dd05      	ble.n	8005984 <_dtoa_r+0x83c>
 8005978:	4621      	mov	r1, r4
 800597a:	461a      	mov	r2, r3
 800597c:	4658      	mov	r0, fp
 800597e:	f000 fcff 	bl	8006380 <__lshift>
 8005982:	4604      	mov	r4, r0
 8005984:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005986:	2b00      	cmp	r3, #0
 8005988:	d059      	beq.n	8005a3e <_dtoa_r+0x8f6>
 800598a:	4621      	mov	r1, r4
 800598c:	4648      	mov	r0, r9
 800598e:	f000 fd63 	bl	8006458 <__mcmp>
 8005992:	2800      	cmp	r0, #0
 8005994:	da53      	bge.n	8005a3e <_dtoa_r+0x8f6>
 8005996:	1e7b      	subs	r3, r7, #1
 8005998:	9304      	str	r3, [sp, #16]
 800599a:	4649      	mov	r1, r9
 800599c:	2300      	movs	r3, #0
 800599e:	220a      	movs	r2, #10
 80059a0:	4658      	mov	r0, fp
 80059a2:	f000 faf7 	bl	8005f94 <__multadd>
 80059a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80059a8:	4681      	mov	r9, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	f000 8172 	beq.w	8005c94 <_dtoa_r+0xb4c>
 80059b0:	2300      	movs	r3, #0
 80059b2:	4629      	mov	r1, r5
 80059b4:	220a      	movs	r2, #10
 80059b6:	4658      	mov	r0, fp
 80059b8:	f000 faec 	bl	8005f94 <__multadd>
 80059bc:	9b00      	ldr	r3, [sp, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	4605      	mov	r5, r0
 80059c2:	dc67      	bgt.n	8005a94 <_dtoa_r+0x94c>
 80059c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	dc41      	bgt.n	8005a4e <_dtoa_r+0x906>
 80059ca:	e063      	b.n	8005a94 <_dtoa_r+0x94c>
 80059cc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80059ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80059d2:	e746      	b.n	8005862 <_dtoa_r+0x71a>
 80059d4:	9b07      	ldr	r3, [sp, #28]
 80059d6:	1e5c      	subs	r4, r3, #1
 80059d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80059da:	42a3      	cmp	r3, r4
 80059dc:	bfbf      	itttt	lt
 80059de:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80059e0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80059e2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80059e4:	1ae3      	sublt	r3, r4, r3
 80059e6:	bfb4      	ite	lt
 80059e8:	18d2      	addlt	r2, r2, r3
 80059ea:	1b1c      	subge	r4, r3, r4
 80059ec:	9b07      	ldr	r3, [sp, #28]
 80059ee:	bfbc      	itt	lt
 80059f0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80059f2:	2400      	movlt	r4, #0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	bfb5      	itete	lt
 80059f8:	eba8 0603 	sublt.w	r6, r8, r3
 80059fc:	9b07      	ldrge	r3, [sp, #28]
 80059fe:	2300      	movlt	r3, #0
 8005a00:	4646      	movge	r6, r8
 8005a02:	e730      	b.n	8005866 <_dtoa_r+0x71e>
 8005a04:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005a06:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005a08:	4646      	mov	r6, r8
 8005a0a:	e735      	b.n	8005878 <_dtoa_r+0x730>
 8005a0c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005a0e:	e75c      	b.n	80058ca <_dtoa_r+0x782>
 8005a10:	2300      	movs	r3, #0
 8005a12:	e788      	b.n	8005926 <_dtoa_r+0x7de>
 8005a14:	3fe00000 	.word	0x3fe00000
 8005a18:	40240000 	.word	0x40240000
 8005a1c:	40140000 	.word	0x40140000
 8005a20:	9b02      	ldr	r3, [sp, #8]
 8005a22:	e780      	b.n	8005926 <_dtoa_r+0x7de>
 8005a24:	2300      	movs	r3, #0
 8005a26:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a28:	e782      	b.n	8005930 <_dtoa_r+0x7e8>
 8005a2a:	d099      	beq.n	8005960 <_dtoa_r+0x818>
 8005a2c:	9a08      	ldr	r2, [sp, #32]
 8005a2e:	331c      	adds	r3, #28
 8005a30:	441a      	add	r2, r3
 8005a32:	4498      	add	r8, r3
 8005a34:	441e      	add	r6, r3
 8005a36:	9208      	str	r2, [sp, #32]
 8005a38:	e792      	b.n	8005960 <_dtoa_r+0x818>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	e7f6      	b.n	8005a2c <_dtoa_r+0x8e4>
 8005a3e:	9b07      	ldr	r3, [sp, #28]
 8005a40:	9704      	str	r7, [sp, #16]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	dc20      	bgt.n	8005a88 <_dtoa_r+0x940>
 8005a46:	9300      	str	r3, [sp, #0]
 8005a48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	dd1e      	ble.n	8005a8c <_dtoa_r+0x944>
 8005a4e:	9b00      	ldr	r3, [sp, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f47f aec0 	bne.w	80057d6 <_dtoa_r+0x68e>
 8005a56:	4621      	mov	r1, r4
 8005a58:	2205      	movs	r2, #5
 8005a5a:	4658      	mov	r0, fp
 8005a5c:	f000 fa9a 	bl	8005f94 <__multadd>
 8005a60:	4601      	mov	r1, r0
 8005a62:	4604      	mov	r4, r0
 8005a64:	4648      	mov	r0, r9
 8005a66:	f000 fcf7 	bl	8006458 <__mcmp>
 8005a6a:	2800      	cmp	r0, #0
 8005a6c:	f77f aeb3 	ble.w	80057d6 <_dtoa_r+0x68e>
 8005a70:	4656      	mov	r6, sl
 8005a72:	2331      	movs	r3, #49	@ 0x31
 8005a74:	f806 3b01 	strb.w	r3, [r6], #1
 8005a78:	9b04      	ldr	r3, [sp, #16]
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	9304      	str	r3, [sp, #16]
 8005a7e:	e6ae      	b.n	80057de <_dtoa_r+0x696>
 8005a80:	9c07      	ldr	r4, [sp, #28]
 8005a82:	9704      	str	r7, [sp, #16]
 8005a84:	4625      	mov	r5, r4
 8005a86:	e7f3      	b.n	8005a70 <_dtoa_r+0x928>
 8005a88:	9b07      	ldr	r3, [sp, #28]
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f000 8104 	beq.w	8005c9c <_dtoa_r+0xb54>
 8005a94:	2e00      	cmp	r6, #0
 8005a96:	dd05      	ble.n	8005aa4 <_dtoa_r+0x95c>
 8005a98:	4629      	mov	r1, r5
 8005a9a:	4632      	mov	r2, r6
 8005a9c:	4658      	mov	r0, fp
 8005a9e:	f000 fc6f 	bl	8006380 <__lshift>
 8005aa2:	4605      	mov	r5, r0
 8005aa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d05a      	beq.n	8005b60 <_dtoa_r+0xa18>
 8005aaa:	6869      	ldr	r1, [r5, #4]
 8005aac:	4658      	mov	r0, fp
 8005aae:	f000 fa0f 	bl	8005ed0 <_Balloc>
 8005ab2:	4606      	mov	r6, r0
 8005ab4:	b928      	cbnz	r0, 8005ac2 <_dtoa_r+0x97a>
 8005ab6:	4b84      	ldr	r3, [pc, #528]	@ (8005cc8 <_dtoa_r+0xb80>)
 8005ab8:	4602      	mov	r2, r0
 8005aba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005abe:	f7ff bb5a 	b.w	8005176 <_dtoa_r+0x2e>
 8005ac2:	692a      	ldr	r2, [r5, #16]
 8005ac4:	3202      	adds	r2, #2
 8005ac6:	0092      	lsls	r2, r2, #2
 8005ac8:	f105 010c 	add.w	r1, r5, #12
 8005acc:	300c      	adds	r0, #12
 8005ace:	f002 f93b 	bl	8007d48 <memcpy>
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	4631      	mov	r1, r6
 8005ad6:	4658      	mov	r0, fp
 8005ad8:	f000 fc52 	bl	8006380 <__lshift>
 8005adc:	f10a 0301 	add.w	r3, sl, #1
 8005ae0:	9307      	str	r3, [sp, #28]
 8005ae2:	9b00      	ldr	r3, [sp, #0]
 8005ae4:	4453      	add	r3, sl
 8005ae6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ae8:	9b02      	ldr	r3, [sp, #8]
 8005aea:	f003 0301 	and.w	r3, r3, #1
 8005aee:	462f      	mov	r7, r5
 8005af0:	930a      	str	r3, [sp, #40]	@ 0x28
 8005af2:	4605      	mov	r5, r0
 8005af4:	9b07      	ldr	r3, [sp, #28]
 8005af6:	4621      	mov	r1, r4
 8005af8:	3b01      	subs	r3, #1
 8005afa:	4648      	mov	r0, r9
 8005afc:	9300      	str	r3, [sp, #0]
 8005afe:	f7ff fa9b 	bl	8005038 <quorem>
 8005b02:	4639      	mov	r1, r7
 8005b04:	9002      	str	r0, [sp, #8]
 8005b06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005b0a:	4648      	mov	r0, r9
 8005b0c:	f000 fca4 	bl	8006458 <__mcmp>
 8005b10:	462a      	mov	r2, r5
 8005b12:	9008      	str	r0, [sp, #32]
 8005b14:	4621      	mov	r1, r4
 8005b16:	4658      	mov	r0, fp
 8005b18:	f000 fcba 	bl	8006490 <__mdiff>
 8005b1c:	68c2      	ldr	r2, [r0, #12]
 8005b1e:	4606      	mov	r6, r0
 8005b20:	bb02      	cbnz	r2, 8005b64 <_dtoa_r+0xa1c>
 8005b22:	4601      	mov	r1, r0
 8005b24:	4648      	mov	r0, r9
 8005b26:	f000 fc97 	bl	8006458 <__mcmp>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	4631      	mov	r1, r6
 8005b2e:	4658      	mov	r0, fp
 8005b30:	920e      	str	r2, [sp, #56]	@ 0x38
 8005b32:	f000 fa0d 	bl	8005f50 <_Bfree>
 8005b36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005b3a:	9e07      	ldr	r6, [sp, #28]
 8005b3c:	ea43 0102 	orr.w	r1, r3, r2
 8005b40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b42:	4319      	orrs	r1, r3
 8005b44:	d110      	bne.n	8005b68 <_dtoa_r+0xa20>
 8005b46:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005b4a:	d029      	beq.n	8005ba0 <_dtoa_r+0xa58>
 8005b4c:	9b08      	ldr	r3, [sp, #32]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	dd02      	ble.n	8005b58 <_dtoa_r+0xa10>
 8005b52:	9b02      	ldr	r3, [sp, #8]
 8005b54:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005b58:	9b00      	ldr	r3, [sp, #0]
 8005b5a:	f883 8000 	strb.w	r8, [r3]
 8005b5e:	e63f      	b.n	80057e0 <_dtoa_r+0x698>
 8005b60:	4628      	mov	r0, r5
 8005b62:	e7bb      	b.n	8005adc <_dtoa_r+0x994>
 8005b64:	2201      	movs	r2, #1
 8005b66:	e7e1      	b.n	8005b2c <_dtoa_r+0x9e4>
 8005b68:	9b08      	ldr	r3, [sp, #32]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	db04      	blt.n	8005b78 <_dtoa_r+0xa30>
 8005b6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005b70:	430b      	orrs	r3, r1
 8005b72:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005b74:	430b      	orrs	r3, r1
 8005b76:	d120      	bne.n	8005bba <_dtoa_r+0xa72>
 8005b78:	2a00      	cmp	r2, #0
 8005b7a:	dded      	ble.n	8005b58 <_dtoa_r+0xa10>
 8005b7c:	4649      	mov	r1, r9
 8005b7e:	2201      	movs	r2, #1
 8005b80:	4658      	mov	r0, fp
 8005b82:	f000 fbfd 	bl	8006380 <__lshift>
 8005b86:	4621      	mov	r1, r4
 8005b88:	4681      	mov	r9, r0
 8005b8a:	f000 fc65 	bl	8006458 <__mcmp>
 8005b8e:	2800      	cmp	r0, #0
 8005b90:	dc03      	bgt.n	8005b9a <_dtoa_r+0xa52>
 8005b92:	d1e1      	bne.n	8005b58 <_dtoa_r+0xa10>
 8005b94:	f018 0f01 	tst.w	r8, #1
 8005b98:	d0de      	beq.n	8005b58 <_dtoa_r+0xa10>
 8005b9a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005b9e:	d1d8      	bne.n	8005b52 <_dtoa_r+0xa0a>
 8005ba0:	9a00      	ldr	r2, [sp, #0]
 8005ba2:	2339      	movs	r3, #57	@ 0x39
 8005ba4:	7013      	strb	r3, [r2, #0]
 8005ba6:	4633      	mov	r3, r6
 8005ba8:	461e      	mov	r6, r3
 8005baa:	3b01      	subs	r3, #1
 8005bac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005bb0:	2a39      	cmp	r2, #57	@ 0x39
 8005bb2:	d052      	beq.n	8005c5a <_dtoa_r+0xb12>
 8005bb4:	3201      	adds	r2, #1
 8005bb6:	701a      	strb	r2, [r3, #0]
 8005bb8:	e612      	b.n	80057e0 <_dtoa_r+0x698>
 8005bba:	2a00      	cmp	r2, #0
 8005bbc:	dd07      	ble.n	8005bce <_dtoa_r+0xa86>
 8005bbe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005bc2:	d0ed      	beq.n	8005ba0 <_dtoa_r+0xa58>
 8005bc4:	9a00      	ldr	r2, [sp, #0]
 8005bc6:	f108 0301 	add.w	r3, r8, #1
 8005bca:	7013      	strb	r3, [r2, #0]
 8005bcc:	e608      	b.n	80057e0 <_dtoa_r+0x698>
 8005bce:	9b07      	ldr	r3, [sp, #28]
 8005bd0:	9a07      	ldr	r2, [sp, #28]
 8005bd2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005bd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d028      	beq.n	8005c2e <_dtoa_r+0xae6>
 8005bdc:	4649      	mov	r1, r9
 8005bde:	2300      	movs	r3, #0
 8005be0:	220a      	movs	r2, #10
 8005be2:	4658      	mov	r0, fp
 8005be4:	f000 f9d6 	bl	8005f94 <__multadd>
 8005be8:	42af      	cmp	r7, r5
 8005bea:	4681      	mov	r9, r0
 8005bec:	f04f 0300 	mov.w	r3, #0
 8005bf0:	f04f 020a 	mov.w	r2, #10
 8005bf4:	4639      	mov	r1, r7
 8005bf6:	4658      	mov	r0, fp
 8005bf8:	d107      	bne.n	8005c0a <_dtoa_r+0xac2>
 8005bfa:	f000 f9cb 	bl	8005f94 <__multadd>
 8005bfe:	4607      	mov	r7, r0
 8005c00:	4605      	mov	r5, r0
 8005c02:	9b07      	ldr	r3, [sp, #28]
 8005c04:	3301      	adds	r3, #1
 8005c06:	9307      	str	r3, [sp, #28]
 8005c08:	e774      	b.n	8005af4 <_dtoa_r+0x9ac>
 8005c0a:	f000 f9c3 	bl	8005f94 <__multadd>
 8005c0e:	4629      	mov	r1, r5
 8005c10:	4607      	mov	r7, r0
 8005c12:	2300      	movs	r3, #0
 8005c14:	220a      	movs	r2, #10
 8005c16:	4658      	mov	r0, fp
 8005c18:	f000 f9bc 	bl	8005f94 <__multadd>
 8005c1c:	4605      	mov	r5, r0
 8005c1e:	e7f0      	b.n	8005c02 <_dtoa_r+0xaba>
 8005c20:	9b00      	ldr	r3, [sp, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	bfcc      	ite	gt
 8005c26:	461e      	movgt	r6, r3
 8005c28:	2601      	movle	r6, #1
 8005c2a:	4456      	add	r6, sl
 8005c2c:	2700      	movs	r7, #0
 8005c2e:	4649      	mov	r1, r9
 8005c30:	2201      	movs	r2, #1
 8005c32:	4658      	mov	r0, fp
 8005c34:	f000 fba4 	bl	8006380 <__lshift>
 8005c38:	4621      	mov	r1, r4
 8005c3a:	4681      	mov	r9, r0
 8005c3c:	f000 fc0c 	bl	8006458 <__mcmp>
 8005c40:	2800      	cmp	r0, #0
 8005c42:	dcb0      	bgt.n	8005ba6 <_dtoa_r+0xa5e>
 8005c44:	d102      	bne.n	8005c4c <_dtoa_r+0xb04>
 8005c46:	f018 0f01 	tst.w	r8, #1
 8005c4a:	d1ac      	bne.n	8005ba6 <_dtoa_r+0xa5e>
 8005c4c:	4633      	mov	r3, r6
 8005c4e:	461e      	mov	r6, r3
 8005c50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005c54:	2a30      	cmp	r2, #48	@ 0x30
 8005c56:	d0fa      	beq.n	8005c4e <_dtoa_r+0xb06>
 8005c58:	e5c2      	b.n	80057e0 <_dtoa_r+0x698>
 8005c5a:	459a      	cmp	sl, r3
 8005c5c:	d1a4      	bne.n	8005ba8 <_dtoa_r+0xa60>
 8005c5e:	9b04      	ldr	r3, [sp, #16]
 8005c60:	3301      	adds	r3, #1
 8005c62:	9304      	str	r3, [sp, #16]
 8005c64:	2331      	movs	r3, #49	@ 0x31
 8005c66:	f88a 3000 	strb.w	r3, [sl]
 8005c6a:	e5b9      	b.n	80057e0 <_dtoa_r+0x698>
 8005c6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005c6e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005ccc <_dtoa_r+0xb84>
 8005c72:	b11b      	cbz	r3, 8005c7c <_dtoa_r+0xb34>
 8005c74:	f10a 0308 	add.w	r3, sl, #8
 8005c78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005c7a:	6013      	str	r3, [r2, #0]
 8005c7c:	4650      	mov	r0, sl
 8005c7e:	b019      	add	sp, #100	@ 0x64
 8005c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	f77f ae37 	ble.w	80058fa <_dtoa_r+0x7b2>
 8005c8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005c8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c90:	2001      	movs	r0, #1
 8005c92:	e655      	b.n	8005940 <_dtoa_r+0x7f8>
 8005c94:	9b00      	ldr	r3, [sp, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	f77f aed6 	ble.w	8005a48 <_dtoa_r+0x900>
 8005c9c:	4656      	mov	r6, sl
 8005c9e:	4621      	mov	r1, r4
 8005ca0:	4648      	mov	r0, r9
 8005ca2:	f7ff f9c9 	bl	8005038 <quorem>
 8005ca6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005caa:	f806 8b01 	strb.w	r8, [r6], #1
 8005cae:	9b00      	ldr	r3, [sp, #0]
 8005cb0:	eba6 020a 	sub.w	r2, r6, sl
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	ddb3      	ble.n	8005c20 <_dtoa_r+0xad8>
 8005cb8:	4649      	mov	r1, r9
 8005cba:	2300      	movs	r3, #0
 8005cbc:	220a      	movs	r2, #10
 8005cbe:	4658      	mov	r0, fp
 8005cc0:	f000 f968 	bl	8005f94 <__multadd>
 8005cc4:	4681      	mov	r9, r0
 8005cc6:	e7ea      	b.n	8005c9e <_dtoa_r+0xb56>
 8005cc8:	0800872d 	.word	0x0800872d
 8005ccc:	080086b1 	.word	0x080086b1

08005cd0 <_free_r>:
 8005cd0:	b538      	push	{r3, r4, r5, lr}
 8005cd2:	4605      	mov	r5, r0
 8005cd4:	2900      	cmp	r1, #0
 8005cd6:	d041      	beq.n	8005d5c <_free_r+0x8c>
 8005cd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cdc:	1f0c      	subs	r4, r1, #4
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	bfb8      	it	lt
 8005ce2:	18e4      	addlt	r4, r4, r3
 8005ce4:	f000 f8e8 	bl	8005eb8 <__malloc_lock>
 8005ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8005d60 <_free_r+0x90>)
 8005cea:	6813      	ldr	r3, [r2, #0]
 8005cec:	b933      	cbnz	r3, 8005cfc <_free_r+0x2c>
 8005cee:	6063      	str	r3, [r4, #4]
 8005cf0:	6014      	str	r4, [r2, #0]
 8005cf2:	4628      	mov	r0, r5
 8005cf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cf8:	f000 b8e4 	b.w	8005ec4 <__malloc_unlock>
 8005cfc:	42a3      	cmp	r3, r4
 8005cfe:	d908      	bls.n	8005d12 <_free_r+0x42>
 8005d00:	6820      	ldr	r0, [r4, #0]
 8005d02:	1821      	adds	r1, r4, r0
 8005d04:	428b      	cmp	r3, r1
 8005d06:	bf01      	itttt	eq
 8005d08:	6819      	ldreq	r1, [r3, #0]
 8005d0a:	685b      	ldreq	r3, [r3, #4]
 8005d0c:	1809      	addeq	r1, r1, r0
 8005d0e:	6021      	streq	r1, [r4, #0]
 8005d10:	e7ed      	b.n	8005cee <_free_r+0x1e>
 8005d12:	461a      	mov	r2, r3
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	b10b      	cbz	r3, 8005d1c <_free_r+0x4c>
 8005d18:	42a3      	cmp	r3, r4
 8005d1a:	d9fa      	bls.n	8005d12 <_free_r+0x42>
 8005d1c:	6811      	ldr	r1, [r2, #0]
 8005d1e:	1850      	adds	r0, r2, r1
 8005d20:	42a0      	cmp	r0, r4
 8005d22:	d10b      	bne.n	8005d3c <_free_r+0x6c>
 8005d24:	6820      	ldr	r0, [r4, #0]
 8005d26:	4401      	add	r1, r0
 8005d28:	1850      	adds	r0, r2, r1
 8005d2a:	4283      	cmp	r3, r0
 8005d2c:	6011      	str	r1, [r2, #0]
 8005d2e:	d1e0      	bne.n	8005cf2 <_free_r+0x22>
 8005d30:	6818      	ldr	r0, [r3, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	6053      	str	r3, [r2, #4]
 8005d36:	4408      	add	r0, r1
 8005d38:	6010      	str	r0, [r2, #0]
 8005d3a:	e7da      	b.n	8005cf2 <_free_r+0x22>
 8005d3c:	d902      	bls.n	8005d44 <_free_r+0x74>
 8005d3e:	230c      	movs	r3, #12
 8005d40:	602b      	str	r3, [r5, #0]
 8005d42:	e7d6      	b.n	8005cf2 <_free_r+0x22>
 8005d44:	6820      	ldr	r0, [r4, #0]
 8005d46:	1821      	adds	r1, r4, r0
 8005d48:	428b      	cmp	r3, r1
 8005d4a:	bf04      	itt	eq
 8005d4c:	6819      	ldreq	r1, [r3, #0]
 8005d4e:	685b      	ldreq	r3, [r3, #4]
 8005d50:	6063      	str	r3, [r4, #4]
 8005d52:	bf04      	itt	eq
 8005d54:	1809      	addeq	r1, r1, r0
 8005d56:	6021      	streq	r1, [r4, #0]
 8005d58:	6054      	str	r4, [r2, #4]
 8005d5a:	e7ca      	b.n	8005cf2 <_free_r+0x22>
 8005d5c:	bd38      	pop	{r3, r4, r5, pc}
 8005d5e:	bf00      	nop
 8005d60:	200003e0 	.word	0x200003e0

08005d64 <malloc>:
 8005d64:	4b02      	ldr	r3, [pc, #8]	@ (8005d70 <malloc+0xc>)
 8005d66:	4601      	mov	r1, r0
 8005d68:	6818      	ldr	r0, [r3, #0]
 8005d6a:	f000 b825 	b.w	8005db8 <_malloc_r>
 8005d6e:	bf00      	nop
 8005d70:	20000030 	.word	0x20000030

08005d74 <sbrk_aligned>:
 8005d74:	b570      	push	{r4, r5, r6, lr}
 8005d76:	4e0f      	ldr	r6, [pc, #60]	@ (8005db4 <sbrk_aligned+0x40>)
 8005d78:	460c      	mov	r4, r1
 8005d7a:	6831      	ldr	r1, [r6, #0]
 8005d7c:	4605      	mov	r5, r0
 8005d7e:	b911      	cbnz	r1, 8005d86 <sbrk_aligned+0x12>
 8005d80:	f001 ffd2 	bl	8007d28 <_sbrk_r>
 8005d84:	6030      	str	r0, [r6, #0]
 8005d86:	4621      	mov	r1, r4
 8005d88:	4628      	mov	r0, r5
 8005d8a:	f001 ffcd 	bl	8007d28 <_sbrk_r>
 8005d8e:	1c43      	adds	r3, r0, #1
 8005d90:	d103      	bne.n	8005d9a <sbrk_aligned+0x26>
 8005d92:	f04f 34ff 	mov.w	r4, #4294967295
 8005d96:	4620      	mov	r0, r4
 8005d98:	bd70      	pop	{r4, r5, r6, pc}
 8005d9a:	1cc4      	adds	r4, r0, #3
 8005d9c:	f024 0403 	bic.w	r4, r4, #3
 8005da0:	42a0      	cmp	r0, r4
 8005da2:	d0f8      	beq.n	8005d96 <sbrk_aligned+0x22>
 8005da4:	1a21      	subs	r1, r4, r0
 8005da6:	4628      	mov	r0, r5
 8005da8:	f001 ffbe 	bl	8007d28 <_sbrk_r>
 8005dac:	3001      	adds	r0, #1
 8005dae:	d1f2      	bne.n	8005d96 <sbrk_aligned+0x22>
 8005db0:	e7ef      	b.n	8005d92 <sbrk_aligned+0x1e>
 8005db2:	bf00      	nop
 8005db4:	200003dc 	.word	0x200003dc

08005db8 <_malloc_r>:
 8005db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dbc:	1ccd      	adds	r5, r1, #3
 8005dbe:	f025 0503 	bic.w	r5, r5, #3
 8005dc2:	3508      	adds	r5, #8
 8005dc4:	2d0c      	cmp	r5, #12
 8005dc6:	bf38      	it	cc
 8005dc8:	250c      	movcc	r5, #12
 8005dca:	2d00      	cmp	r5, #0
 8005dcc:	4606      	mov	r6, r0
 8005dce:	db01      	blt.n	8005dd4 <_malloc_r+0x1c>
 8005dd0:	42a9      	cmp	r1, r5
 8005dd2:	d904      	bls.n	8005dde <_malloc_r+0x26>
 8005dd4:	230c      	movs	r3, #12
 8005dd6:	6033      	str	r3, [r6, #0]
 8005dd8:	2000      	movs	r0, #0
 8005dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005eb4 <_malloc_r+0xfc>
 8005de2:	f000 f869 	bl	8005eb8 <__malloc_lock>
 8005de6:	f8d8 3000 	ldr.w	r3, [r8]
 8005dea:	461c      	mov	r4, r3
 8005dec:	bb44      	cbnz	r4, 8005e40 <_malloc_r+0x88>
 8005dee:	4629      	mov	r1, r5
 8005df0:	4630      	mov	r0, r6
 8005df2:	f7ff ffbf 	bl	8005d74 <sbrk_aligned>
 8005df6:	1c43      	adds	r3, r0, #1
 8005df8:	4604      	mov	r4, r0
 8005dfa:	d158      	bne.n	8005eae <_malloc_r+0xf6>
 8005dfc:	f8d8 4000 	ldr.w	r4, [r8]
 8005e00:	4627      	mov	r7, r4
 8005e02:	2f00      	cmp	r7, #0
 8005e04:	d143      	bne.n	8005e8e <_malloc_r+0xd6>
 8005e06:	2c00      	cmp	r4, #0
 8005e08:	d04b      	beq.n	8005ea2 <_malloc_r+0xea>
 8005e0a:	6823      	ldr	r3, [r4, #0]
 8005e0c:	4639      	mov	r1, r7
 8005e0e:	4630      	mov	r0, r6
 8005e10:	eb04 0903 	add.w	r9, r4, r3
 8005e14:	f001 ff88 	bl	8007d28 <_sbrk_r>
 8005e18:	4581      	cmp	r9, r0
 8005e1a:	d142      	bne.n	8005ea2 <_malloc_r+0xea>
 8005e1c:	6821      	ldr	r1, [r4, #0]
 8005e1e:	1a6d      	subs	r5, r5, r1
 8005e20:	4629      	mov	r1, r5
 8005e22:	4630      	mov	r0, r6
 8005e24:	f7ff ffa6 	bl	8005d74 <sbrk_aligned>
 8005e28:	3001      	adds	r0, #1
 8005e2a:	d03a      	beq.n	8005ea2 <_malloc_r+0xea>
 8005e2c:	6823      	ldr	r3, [r4, #0]
 8005e2e:	442b      	add	r3, r5
 8005e30:	6023      	str	r3, [r4, #0]
 8005e32:	f8d8 3000 	ldr.w	r3, [r8]
 8005e36:	685a      	ldr	r2, [r3, #4]
 8005e38:	bb62      	cbnz	r2, 8005e94 <_malloc_r+0xdc>
 8005e3a:	f8c8 7000 	str.w	r7, [r8]
 8005e3e:	e00f      	b.n	8005e60 <_malloc_r+0xa8>
 8005e40:	6822      	ldr	r2, [r4, #0]
 8005e42:	1b52      	subs	r2, r2, r5
 8005e44:	d420      	bmi.n	8005e88 <_malloc_r+0xd0>
 8005e46:	2a0b      	cmp	r2, #11
 8005e48:	d917      	bls.n	8005e7a <_malloc_r+0xc2>
 8005e4a:	1961      	adds	r1, r4, r5
 8005e4c:	42a3      	cmp	r3, r4
 8005e4e:	6025      	str	r5, [r4, #0]
 8005e50:	bf18      	it	ne
 8005e52:	6059      	strne	r1, [r3, #4]
 8005e54:	6863      	ldr	r3, [r4, #4]
 8005e56:	bf08      	it	eq
 8005e58:	f8c8 1000 	streq.w	r1, [r8]
 8005e5c:	5162      	str	r2, [r4, r5]
 8005e5e:	604b      	str	r3, [r1, #4]
 8005e60:	4630      	mov	r0, r6
 8005e62:	f000 f82f 	bl	8005ec4 <__malloc_unlock>
 8005e66:	f104 000b 	add.w	r0, r4, #11
 8005e6a:	1d23      	adds	r3, r4, #4
 8005e6c:	f020 0007 	bic.w	r0, r0, #7
 8005e70:	1ac2      	subs	r2, r0, r3
 8005e72:	bf1c      	itt	ne
 8005e74:	1a1b      	subne	r3, r3, r0
 8005e76:	50a3      	strne	r3, [r4, r2]
 8005e78:	e7af      	b.n	8005dda <_malloc_r+0x22>
 8005e7a:	6862      	ldr	r2, [r4, #4]
 8005e7c:	42a3      	cmp	r3, r4
 8005e7e:	bf0c      	ite	eq
 8005e80:	f8c8 2000 	streq.w	r2, [r8]
 8005e84:	605a      	strne	r2, [r3, #4]
 8005e86:	e7eb      	b.n	8005e60 <_malloc_r+0xa8>
 8005e88:	4623      	mov	r3, r4
 8005e8a:	6864      	ldr	r4, [r4, #4]
 8005e8c:	e7ae      	b.n	8005dec <_malloc_r+0x34>
 8005e8e:	463c      	mov	r4, r7
 8005e90:	687f      	ldr	r7, [r7, #4]
 8005e92:	e7b6      	b.n	8005e02 <_malloc_r+0x4a>
 8005e94:	461a      	mov	r2, r3
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	42a3      	cmp	r3, r4
 8005e9a:	d1fb      	bne.n	8005e94 <_malloc_r+0xdc>
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	6053      	str	r3, [r2, #4]
 8005ea0:	e7de      	b.n	8005e60 <_malloc_r+0xa8>
 8005ea2:	230c      	movs	r3, #12
 8005ea4:	6033      	str	r3, [r6, #0]
 8005ea6:	4630      	mov	r0, r6
 8005ea8:	f000 f80c 	bl	8005ec4 <__malloc_unlock>
 8005eac:	e794      	b.n	8005dd8 <_malloc_r+0x20>
 8005eae:	6005      	str	r5, [r0, #0]
 8005eb0:	e7d6      	b.n	8005e60 <_malloc_r+0xa8>
 8005eb2:	bf00      	nop
 8005eb4:	200003e0 	.word	0x200003e0

08005eb8 <__malloc_lock>:
 8005eb8:	4801      	ldr	r0, [pc, #4]	@ (8005ec0 <__malloc_lock+0x8>)
 8005eba:	f7ff b8b4 	b.w	8005026 <__retarget_lock_acquire_recursive>
 8005ebe:	bf00      	nop
 8005ec0:	200003d8 	.word	0x200003d8

08005ec4 <__malloc_unlock>:
 8005ec4:	4801      	ldr	r0, [pc, #4]	@ (8005ecc <__malloc_unlock+0x8>)
 8005ec6:	f7ff b8af 	b.w	8005028 <__retarget_lock_release_recursive>
 8005eca:	bf00      	nop
 8005ecc:	200003d8 	.word	0x200003d8

08005ed0 <_Balloc>:
 8005ed0:	b570      	push	{r4, r5, r6, lr}
 8005ed2:	69c6      	ldr	r6, [r0, #28]
 8005ed4:	4604      	mov	r4, r0
 8005ed6:	460d      	mov	r5, r1
 8005ed8:	b976      	cbnz	r6, 8005ef8 <_Balloc+0x28>
 8005eda:	2010      	movs	r0, #16
 8005edc:	f7ff ff42 	bl	8005d64 <malloc>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	61e0      	str	r0, [r4, #28]
 8005ee4:	b920      	cbnz	r0, 8005ef0 <_Balloc+0x20>
 8005ee6:	4b18      	ldr	r3, [pc, #96]	@ (8005f48 <_Balloc+0x78>)
 8005ee8:	4818      	ldr	r0, [pc, #96]	@ (8005f4c <_Balloc+0x7c>)
 8005eea:	216b      	movs	r1, #107	@ 0x6b
 8005eec:	f001 ff44 	bl	8007d78 <__assert_func>
 8005ef0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ef4:	6006      	str	r6, [r0, #0]
 8005ef6:	60c6      	str	r6, [r0, #12]
 8005ef8:	69e6      	ldr	r6, [r4, #28]
 8005efa:	68f3      	ldr	r3, [r6, #12]
 8005efc:	b183      	cbz	r3, 8005f20 <_Balloc+0x50>
 8005efe:	69e3      	ldr	r3, [r4, #28]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005f06:	b9b8      	cbnz	r0, 8005f38 <_Balloc+0x68>
 8005f08:	2101      	movs	r1, #1
 8005f0a:	fa01 f605 	lsl.w	r6, r1, r5
 8005f0e:	1d72      	adds	r2, r6, #5
 8005f10:	0092      	lsls	r2, r2, #2
 8005f12:	4620      	mov	r0, r4
 8005f14:	f001 ff4e 	bl	8007db4 <_calloc_r>
 8005f18:	b160      	cbz	r0, 8005f34 <_Balloc+0x64>
 8005f1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005f1e:	e00e      	b.n	8005f3e <_Balloc+0x6e>
 8005f20:	2221      	movs	r2, #33	@ 0x21
 8005f22:	2104      	movs	r1, #4
 8005f24:	4620      	mov	r0, r4
 8005f26:	f001 ff45 	bl	8007db4 <_calloc_r>
 8005f2a:	69e3      	ldr	r3, [r4, #28]
 8005f2c:	60f0      	str	r0, [r6, #12]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1e4      	bne.n	8005efe <_Balloc+0x2e>
 8005f34:	2000      	movs	r0, #0
 8005f36:	bd70      	pop	{r4, r5, r6, pc}
 8005f38:	6802      	ldr	r2, [r0, #0]
 8005f3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005f3e:	2300      	movs	r3, #0
 8005f40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005f44:	e7f7      	b.n	8005f36 <_Balloc+0x66>
 8005f46:	bf00      	nop
 8005f48:	080086be 	.word	0x080086be
 8005f4c:	0800873e 	.word	0x0800873e

08005f50 <_Bfree>:
 8005f50:	b570      	push	{r4, r5, r6, lr}
 8005f52:	69c6      	ldr	r6, [r0, #28]
 8005f54:	4605      	mov	r5, r0
 8005f56:	460c      	mov	r4, r1
 8005f58:	b976      	cbnz	r6, 8005f78 <_Bfree+0x28>
 8005f5a:	2010      	movs	r0, #16
 8005f5c:	f7ff ff02 	bl	8005d64 <malloc>
 8005f60:	4602      	mov	r2, r0
 8005f62:	61e8      	str	r0, [r5, #28]
 8005f64:	b920      	cbnz	r0, 8005f70 <_Bfree+0x20>
 8005f66:	4b09      	ldr	r3, [pc, #36]	@ (8005f8c <_Bfree+0x3c>)
 8005f68:	4809      	ldr	r0, [pc, #36]	@ (8005f90 <_Bfree+0x40>)
 8005f6a:	218f      	movs	r1, #143	@ 0x8f
 8005f6c:	f001 ff04 	bl	8007d78 <__assert_func>
 8005f70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f74:	6006      	str	r6, [r0, #0]
 8005f76:	60c6      	str	r6, [r0, #12]
 8005f78:	b13c      	cbz	r4, 8005f8a <_Bfree+0x3a>
 8005f7a:	69eb      	ldr	r3, [r5, #28]
 8005f7c:	6862      	ldr	r2, [r4, #4]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f84:	6021      	str	r1, [r4, #0]
 8005f86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005f8a:	bd70      	pop	{r4, r5, r6, pc}
 8005f8c:	080086be 	.word	0x080086be
 8005f90:	0800873e 	.word	0x0800873e

08005f94 <__multadd>:
 8005f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f98:	690d      	ldr	r5, [r1, #16]
 8005f9a:	4607      	mov	r7, r0
 8005f9c:	460c      	mov	r4, r1
 8005f9e:	461e      	mov	r6, r3
 8005fa0:	f101 0c14 	add.w	ip, r1, #20
 8005fa4:	2000      	movs	r0, #0
 8005fa6:	f8dc 3000 	ldr.w	r3, [ip]
 8005faa:	b299      	uxth	r1, r3
 8005fac:	fb02 6101 	mla	r1, r2, r1, r6
 8005fb0:	0c1e      	lsrs	r6, r3, #16
 8005fb2:	0c0b      	lsrs	r3, r1, #16
 8005fb4:	fb02 3306 	mla	r3, r2, r6, r3
 8005fb8:	b289      	uxth	r1, r1
 8005fba:	3001      	adds	r0, #1
 8005fbc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005fc0:	4285      	cmp	r5, r0
 8005fc2:	f84c 1b04 	str.w	r1, [ip], #4
 8005fc6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005fca:	dcec      	bgt.n	8005fa6 <__multadd+0x12>
 8005fcc:	b30e      	cbz	r6, 8006012 <__multadd+0x7e>
 8005fce:	68a3      	ldr	r3, [r4, #8]
 8005fd0:	42ab      	cmp	r3, r5
 8005fd2:	dc19      	bgt.n	8006008 <__multadd+0x74>
 8005fd4:	6861      	ldr	r1, [r4, #4]
 8005fd6:	4638      	mov	r0, r7
 8005fd8:	3101      	adds	r1, #1
 8005fda:	f7ff ff79 	bl	8005ed0 <_Balloc>
 8005fde:	4680      	mov	r8, r0
 8005fe0:	b928      	cbnz	r0, 8005fee <__multadd+0x5a>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8006018 <__multadd+0x84>)
 8005fe6:	480d      	ldr	r0, [pc, #52]	@ (800601c <__multadd+0x88>)
 8005fe8:	21ba      	movs	r1, #186	@ 0xba
 8005fea:	f001 fec5 	bl	8007d78 <__assert_func>
 8005fee:	6922      	ldr	r2, [r4, #16]
 8005ff0:	3202      	adds	r2, #2
 8005ff2:	f104 010c 	add.w	r1, r4, #12
 8005ff6:	0092      	lsls	r2, r2, #2
 8005ff8:	300c      	adds	r0, #12
 8005ffa:	f001 fea5 	bl	8007d48 <memcpy>
 8005ffe:	4621      	mov	r1, r4
 8006000:	4638      	mov	r0, r7
 8006002:	f7ff ffa5 	bl	8005f50 <_Bfree>
 8006006:	4644      	mov	r4, r8
 8006008:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800600c:	3501      	adds	r5, #1
 800600e:	615e      	str	r6, [r3, #20]
 8006010:	6125      	str	r5, [r4, #16]
 8006012:	4620      	mov	r0, r4
 8006014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006018:	0800872d 	.word	0x0800872d
 800601c:	0800873e 	.word	0x0800873e

08006020 <__s2b>:
 8006020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006024:	460c      	mov	r4, r1
 8006026:	4615      	mov	r5, r2
 8006028:	461f      	mov	r7, r3
 800602a:	2209      	movs	r2, #9
 800602c:	3308      	adds	r3, #8
 800602e:	4606      	mov	r6, r0
 8006030:	fb93 f3f2 	sdiv	r3, r3, r2
 8006034:	2100      	movs	r1, #0
 8006036:	2201      	movs	r2, #1
 8006038:	429a      	cmp	r2, r3
 800603a:	db09      	blt.n	8006050 <__s2b+0x30>
 800603c:	4630      	mov	r0, r6
 800603e:	f7ff ff47 	bl	8005ed0 <_Balloc>
 8006042:	b940      	cbnz	r0, 8006056 <__s2b+0x36>
 8006044:	4602      	mov	r2, r0
 8006046:	4b19      	ldr	r3, [pc, #100]	@ (80060ac <__s2b+0x8c>)
 8006048:	4819      	ldr	r0, [pc, #100]	@ (80060b0 <__s2b+0x90>)
 800604a:	21d3      	movs	r1, #211	@ 0xd3
 800604c:	f001 fe94 	bl	8007d78 <__assert_func>
 8006050:	0052      	lsls	r2, r2, #1
 8006052:	3101      	adds	r1, #1
 8006054:	e7f0      	b.n	8006038 <__s2b+0x18>
 8006056:	9b08      	ldr	r3, [sp, #32]
 8006058:	6143      	str	r3, [r0, #20]
 800605a:	2d09      	cmp	r5, #9
 800605c:	f04f 0301 	mov.w	r3, #1
 8006060:	6103      	str	r3, [r0, #16]
 8006062:	dd16      	ble.n	8006092 <__s2b+0x72>
 8006064:	f104 0909 	add.w	r9, r4, #9
 8006068:	46c8      	mov	r8, r9
 800606a:	442c      	add	r4, r5
 800606c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006070:	4601      	mov	r1, r0
 8006072:	3b30      	subs	r3, #48	@ 0x30
 8006074:	220a      	movs	r2, #10
 8006076:	4630      	mov	r0, r6
 8006078:	f7ff ff8c 	bl	8005f94 <__multadd>
 800607c:	45a0      	cmp	r8, r4
 800607e:	d1f5      	bne.n	800606c <__s2b+0x4c>
 8006080:	f1a5 0408 	sub.w	r4, r5, #8
 8006084:	444c      	add	r4, r9
 8006086:	1b2d      	subs	r5, r5, r4
 8006088:	1963      	adds	r3, r4, r5
 800608a:	42bb      	cmp	r3, r7
 800608c:	db04      	blt.n	8006098 <__s2b+0x78>
 800608e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006092:	340a      	adds	r4, #10
 8006094:	2509      	movs	r5, #9
 8006096:	e7f6      	b.n	8006086 <__s2b+0x66>
 8006098:	f814 3b01 	ldrb.w	r3, [r4], #1
 800609c:	4601      	mov	r1, r0
 800609e:	3b30      	subs	r3, #48	@ 0x30
 80060a0:	220a      	movs	r2, #10
 80060a2:	4630      	mov	r0, r6
 80060a4:	f7ff ff76 	bl	8005f94 <__multadd>
 80060a8:	e7ee      	b.n	8006088 <__s2b+0x68>
 80060aa:	bf00      	nop
 80060ac:	0800872d 	.word	0x0800872d
 80060b0:	0800873e 	.word	0x0800873e

080060b4 <__hi0bits>:
 80060b4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80060b8:	4603      	mov	r3, r0
 80060ba:	bf36      	itet	cc
 80060bc:	0403      	lslcc	r3, r0, #16
 80060be:	2000      	movcs	r0, #0
 80060c0:	2010      	movcc	r0, #16
 80060c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80060c6:	bf3c      	itt	cc
 80060c8:	021b      	lslcc	r3, r3, #8
 80060ca:	3008      	addcc	r0, #8
 80060cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060d0:	bf3c      	itt	cc
 80060d2:	011b      	lslcc	r3, r3, #4
 80060d4:	3004      	addcc	r0, #4
 80060d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060da:	bf3c      	itt	cc
 80060dc:	009b      	lslcc	r3, r3, #2
 80060de:	3002      	addcc	r0, #2
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	db05      	blt.n	80060f0 <__hi0bits+0x3c>
 80060e4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80060e8:	f100 0001 	add.w	r0, r0, #1
 80060ec:	bf08      	it	eq
 80060ee:	2020      	moveq	r0, #32
 80060f0:	4770      	bx	lr

080060f2 <__lo0bits>:
 80060f2:	6803      	ldr	r3, [r0, #0]
 80060f4:	4602      	mov	r2, r0
 80060f6:	f013 0007 	ands.w	r0, r3, #7
 80060fa:	d00b      	beq.n	8006114 <__lo0bits+0x22>
 80060fc:	07d9      	lsls	r1, r3, #31
 80060fe:	d421      	bmi.n	8006144 <__lo0bits+0x52>
 8006100:	0798      	lsls	r0, r3, #30
 8006102:	bf49      	itett	mi
 8006104:	085b      	lsrmi	r3, r3, #1
 8006106:	089b      	lsrpl	r3, r3, #2
 8006108:	2001      	movmi	r0, #1
 800610a:	6013      	strmi	r3, [r2, #0]
 800610c:	bf5c      	itt	pl
 800610e:	6013      	strpl	r3, [r2, #0]
 8006110:	2002      	movpl	r0, #2
 8006112:	4770      	bx	lr
 8006114:	b299      	uxth	r1, r3
 8006116:	b909      	cbnz	r1, 800611c <__lo0bits+0x2a>
 8006118:	0c1b      	lsrs	r3, r3, #16
 800611a:	2010      	movs	r0, #16
 800611c:	b2d9      	uxtb	r1, r3
 800611e:	b909      	cbnz	r1, 8006124 <__lo0bits+0x32>
 8006120:	3008      	adds	r0, #8
 8006122:	0a1b      	lsrs	r3, r3, #8
 8006124:	0719      	lsls	r1, r3, #28
 8006126:	bf04      	itt	eq
 8006128:	091b      	lsreq	r3, r3, #4
 800612a:	3004      	addeq	r0, #4
 800612c:	0799      	lsls	r1, r3, #30
 800612e:	bf04      	itt	eq
 8006130:	089b      	lsreq	r3, r3, #2
 8006132:	3002      	addeq	r0, #2
 8006134:	07d9      	lsls	r1, r3, #31
 8006136:	d403      	bmi.n	8006140 <__lo0bits+0x4e>
 8006138:	085b      	lsrs	r3, r3, #1
 800613a:	f100 0001 	add.w	r0, r0, #1
 800613e:	d003      	beq.n	8006148 <__lo0bits+0x56>
 8006140:	6013      	str	r3, [r2, #0]
 8006142:	4770      	bx	lr
 8006144:	2000      	movs	r0, #0
 8006146:	4770      	bx	lr
 8006148:	2020      	movs	r0, #32
 800614a:	4770      	bx	lr

0800614c <__i2b>:
 800614c:	b510      	push	{r4, lr}
 800614e:	460c      	mov	r4, r1
 8006150:	2101      	movs	r1, #1
 8006152:	f7ff febd 	bl	8005ed0 <_Balloc>
 8006156:	4602      	mov	r2, r0
 8006158:	b928      	cbnz	r0, 8006166 <__i2b+0x1a>
 800615a:	4b05      	ldr	r3, [pc, #20]	@ (8006170 <__i2b+0x24>)
 800615c:	4805      	ldr	r0, [pc, #20]	@ (8006174 <__i2b+0x28>)
 800615e:	f240 1145 	movw	r1, #325	@ 0x145
 8006162:	f001 fe09 	bl	8007d78 <__assert_func>
 8006166:	2301      	movs	r3, #1
 8006168:	6144      	str	r4, [r0, #20]
 800616a:	6103      	str	r3, [r0, #16]
 800616c:	bd10      	pop	{r4, pc}
 800616e:	bf00      	nop
 8006170:	0800872d 	.word	0x0800872d
 8006174:	0800873e 	.word	0x0800873e

08006178 <__multiply>:
 8006178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800617c:	4614      	mov	r4, r2
 800617e:	690a      	ldr	r2, [r1, #16]
 8006180:	6923      	ldr	r3, [r4, #16]
 8006182:	429a      	cmp	r2, r3
 8006184:	bfa8      	it	ge
 8006186:	4623      	movge	r3, r4
 8006188:	460f      	mov	r7, r1
 800618a:	bfa4      	itt	ge
 800618c:	460c      	movge	r4, r1
 800618e:	461f      	movge	r7, r3
 8006190:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006194:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006198:	68a3      	ldr	r3, [r4, #8]
 800619a:	6861      	ldr	r1, [r4, #4]
 800619c:	eb0a 0609 	add.w	r6, sl, r9
 80061a0:	42b3      	cmp	r3, r6
 80061a2:	b085      	sub	sp, #20
 80061a4:	bfb8      	it	lt
 80061a6:	3101      	addlt	r1, #1
 80061a8:	f7ff fe92 	bl	8005ed0 <_Balloc>
 80061ac:	b930      	cbnz	r0, 80061bc <__multiply+0x44>
 80061ae:	4602      	mov	r2, r0
 80061b0:	4b44      	ldr	r3, [pc, #272]	@ (80062c4 <__multiply+0x14c>)
 80061b2:	4845      	ldr	r0, [pc, #276]	@ (80062c8 <__multiply+0x150>)
 80061b4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80061b8:	f001 fdde 	bl	8007d78 <__assert_func>
 80061bc:	f100 0514 	add.w	r5, r0, #20
 80061c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80061c4:	462b      	mov	r3, r5
 80061c6:	2200      	movs	r2, #0
 80061c8:	4543      	cmp	r3, r8
 80061ca:	d321      	bcc.n	8006210 <__multiply+0x98>
 80061cc:	f107 0114 	add.w	r1, r7, #20
 80061d0:	f104 0214 	add.w	r2, r4, #20
 80061d4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80061d8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80061dc:	9302      	str	r3, [sp, #8]
 80061de:	1b13      	subs	r3, r2, r4
 80061e0:	3b15      	subs	r3, #21
 80061e2:	f023 0303 	bic.w	r3, r3, #3
 80061e6:	3304      	adds	r3, #4
 80061e8:	f104 0715 	add.w	r7, r4, #21
 80061ec:	42ba      	cmp	r2, r7
 80061ee:	bf38      	it	cc
 80061f0:	2304      	movcc	r3, #4
 80061f2:	9301      	str	r3, [sp, #4]
 80061f4:	9b02      	ldr	r3, [sp, #8]
 80061f6:	9103      	str	r1, [sp, #12]
 80061f8:	428b      	cmp	r3, r1
 80061fa:	d80c      	bhi.n	8006216 <__multiply+0x9e>
 80061fc:	2e00      	cmp	r6, #0
 80061fe:	dd03      	ble.n	8006208 <__multiply+0x90>
 8006200:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006204:	2b00      	cmp	r3, #0
 8006206:	d05b      	beq.n	80062c0 <__multiply+0x148>
 8006208:	6106      	str	r6, [r0, #16]
 800620a:	b005      	add	sp, #20
 800620c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006210:	f843 2b04 	str.w	r2, [r3], #4
 8006214:	e7d8      	b.n	80061c8 <__multiply+0x50>
 8006216:	f8b1 a000 	ldrh.w	sl, [r1]
 800621a:	f1ba 0f00 	cmp.w	sl, #0
 800621e:	d024      	beq.n	800626a <__multiply+0xf2>
 8006220:	f104 0e14 	add.w	lr, r4, #20
 8006224:	46a9      	mov	r9, r5
 8006226:	f04f 0c00 	mov.w	ip, #0
 800622a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800622e:	f8d9 3000 	ldr.w	r3, [r9]
 8006232:	fa1f fb87 	uxth.w	fp, r7
 8006236:	b29b      	uxth	r3, r3
 8006238:	fb0a 330b 	mla	r3, sl, fp, r3
 800623c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006240:	f8d9 7000 	ldr.w	r7, [r9]
 8006244:	4463      	add	r3, ip
 8006246:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800624a:	fb0a c70b 	mla	r7, sl, fp, ip
 800624e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006252:	b29b      	uxth	r3, r3
 8006254:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006258:	4572      	cmp	r2, lr
 800625a:	f849 3b04 	str.w	r3, [r9], #4
 800625e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006262:	d8e2      	bhi.n	800622a <__multiply+0xb2>
 8006264:	9b01      	ldr	r3, [sp, #4]
 8006266:	f845 c003 	str.w	ip, [r5, r3]
 800626a:	9b03      	ldr	r3, [sp, #12]
 800626c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006270:	3104      	adds	r1, #4
 8006272:	f1b9 0f00 	cmp.w	r9, #0
 8006276:	d021      	beq.n	80062bc <__multiply+0x144>
 8006278:	682b      	ldr	r3, [r5, #0]
 800627a:	f104 0c14 	add.w	ip, r4, #20
 800627e:	46ae      	mov	lr, r5
 8006280:	f04f 0a00 	mov.w	sl, #0
 8006284:	f8bc b000 	ldrh.w	fp, [ip]
 8006288:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800628c:	fb09 770b 	mla	r7, r9, fp, r7
 8006290:	4457      	add	r7, sl
 8006292:	b29b      	uxth	r3, r3
 8006294:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006298:	f84e 3b04 	str.w	r3, [lr], #4
 800629c:	f85c 3b04 	ldr.w	r3, [ip], #4
 80062a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80062a4:	f8be 3000 	ldrh.w	r3, [lr]
 80062a8:	fb09 330a 	mla	r3, r9, sl, r3
 80062ac:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80062b0:	4562      	cmp	r2, ip
 80062b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80062b6:	d8e5      	bhi.n	8006284 <__multiply+0x10c>
 80062b8:	9f01      	ldr	r7, [sp, #4]
 80062ba:	51eb      	str	r3, [r5, r7]
 80062bc:	3504      	adds	r5, #4
 80062be:	e799      	b.n	80061f4 <__multiply+0x7c>
 80062c0:	3e01      	subs	r6, #1
 80062c2:	e79b      	b.n	80061fc <__multiply+0x84>
 80062c4:	0800872d 	.word	0x0800872d
 80062c8:	0800873e 	.word	0x0800873e

080062cc <__pow5mult>:
 80062cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062d0:	4615      	mov	r5, r2
 80062d2:	f012 0203 	ands.w	r2, r2, #3
 80062d6:	4607      	mov	r7, r0
 80062d8:	460e      	mov	r6, r1
 80062da:	d007      	beq.n	80062ec <__pow5mult+0x20>
 80062dc:	4c25      	ldr	r4, [pc, #148]	@ (8006374 <__pow5mult+0xa8>)
 80062de:	3a01      	subs	r2, #1
 80062e0:	2300      	movs	r3, #0
 80062e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80062e6:	f7ff fe55 	bl	8005f94 <__multadd>
 80062ea:	4606      	mov	r6, r0
 80062ec:	10ad      	asrs	r5, r5, #2
 80062ee:	d03d      	beq.n	800636c <__pow5mult+0xa0>
 80062f0:	69fc      	ldr	r4, [r7, #28]
 80062f2:	b97c      	cbnz	r4, 8006314 <__pow5mult+0x48>
 80062f4:	2010      	movs	r0, #16
 80062f6:	f7ff fd35 	bl	8005d64 <malloc>
 80062fa:	4602      	mov	r2, r0
 80062fc:	61f8      	str	r0, [r7, #28]
 80062fe:	b928      	cbnz	r0, 800630c <__pow5mult+0x40>
 8006300:	4b1d      	ldr	r3, [pc, #116]	@ (8006378 <__pow5mult+0xac>)
 8006302:	481e      	ldr	r0, [pc, #120]	@ (800637c <__pow5mult+0xb0>)
 8006304:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006308:	f001 fd36 	bl	8007d78 <__assert_func>
 800630c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006310:	6004      	str	r4, [r0, #0]
 8006312:	60c4      	str	r4, [r0, #12]
 8006314:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006318:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800631c:	b94c      	cbnz	r4, 8006332 <__pow5mult+0x66>
 800631e:	f240 2171 	movw	r1, #625	@ 0x271
 8006322:	4638      	mov	r0, r7
 8006324:	f7ff ff12 	bl	800614c <__i2b>
 8006328:	2300      	movs	r3, #0
 800632a:	f8c8 0008 	str.w	r0, [r8, #8]
 800632e:	4604      	mov	r4, r0
 8006330:	6003      	str	r3, [r0, #0]
 8006332:	f04f 0900 	mov.w	r9, #0
 8006336:	07eb      	lsls	r3, r5, #31
 8006338:	d50a      	bpl.n	8006350 <__pow5mult+0x84>
 800633a:	4631      	mov	r1, r6
 800633c:	4622      	mov	r2, r4
 800633e:	4638      	mov	r0, r7
 8006340:	f7ff ff1a 	bl	8006178 <__multiply>
 8006344:	4631      	mov	r1, r6
 8006346:	4680      	mov	r8, r0
 8006348:	4638      	mov	r0, r7
 800634a:	f7ff fe01 	bl	8005f50 <_Bfree>
 800634e:	4646      	mov	r6, r8
 8006350:	106d      	asrs	r5, r5, #1
 8006352:	d00b      	beq.n	800636c <__pow5mult+0xa0>
 8006354:	6820      	ldr	r0, [r4, #0]
 8006356:	b938      	cbnz	r0, 8006368 <__pow5mult+0x9c>
 8006358:	4622      	mov	r2, r4
 800635a:	4621      	mov	r1, r4
 800635c:	4638      	mov	r0, r7
 800635e:	f7ff ff0b 	bl	8006178 <__multiply>
 8006362:	6020      	str	r0, [r4, #0]
 8006364:	f8c0 9000 	str.w	r9, [r0]
 8006368:	4604      	mov	r4, r0
 800636a:	e7e4      	b.n	8006336 <__pow5mult+0x6a>
 800636c:	4630      	mov	r0, r6
 800636e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006372:	bf00      	nop
 8006374:	08008798 	.word	0x08008798
 8006378:	080086be 	.word	0x080086be
 800637c:	0800873e 	.word	0x0800873e

08006380 <__lshift>:
 8006380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006384:	460c      	mov	r4, r1
 8006386:	6849      	ldr	r1, [r1, #4]
 8006388:	6923      	ldr	r3, [r4, #16]
 800638a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800638e:	68a3      	ldr	r3, [r4, #8]
 8006390:	4607      	mov	r7, r0
 8006392:	4691      	mov	r9, r2
 8006394:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006398:	f108 0601 	add.w	r6, r8, #1
 800639c:	42b3      	cmp	r3, r6
 800639e:	db0b      	blt.n	80063b8 <__lshift+0x38>
 80063a0:	4638      	mov	r0, r7
 80063a2:	f7ff fd95 	bl	8005ed0 <_Balloc>
 80063a6:	4605      	mov	r5, r0
 80063a8:	b948      	cbnz	r0, 80063be <__lshift+0x3e>
 80063aa:	4602      	mov	r2, r0
 80063ac:	4b28      	ldr	r3, [pc, #160]	@ (8006450 <__lshift+0xd0>)
 80063ae:	4829      	ldr	r0, [pc, #164]	@ (8006454 <__lshift+0xd4>)
 80063b0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80063b4:	f001 fce0 	bl	8007d78 <__assert_func>
 80063b8:	3101      	adds	r1, #1
 80063ba:	005b      	lsls	r3, r3, #1
 80063bc:	e7ee      	b.n	800639c <__lshift+0x1c>
 80063be:	2300      	movs	r3, #0
 80063c0:	f100 0114 	add.w	r1, r0, #20
 80063c4:	f100 0210 	add.w	r2, r0, #16
 80063c8:	4618      	mov	r0, r3
 80063ca:	4553      	cmp	r3, sl
 80063cc:	db33      	blt.n	8006436 <__lshift+0xb6>
 80063ce:	6920      	ldr	r0, [r4, #16]
 80063d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80063d4:	f104 0314 	add.w	r3, r4, #20
 80063d8:	f019 091f 	ands.w	r9, r9, #31
 80063dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80063e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80063e4:	d02b      	beq.n	800643e <__lshift+0xbe>
 80063e6:	f1c9 0e20 	rsb	lr, r9, #32
 80063ea:	468a      	mov	sl, r1
 80063ec:	2200      	movs	r2, #0
 80063ee:	6818      	ldr	r0, [r3, #0]
 80063f0:	fa00 f009 	lsl.w	r0, r0, r9
 80063f4:	4310      	orrs	r0, r2
 80063f6:	f84a 0b04 	str.w	r0, [sl], #4
 80063fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80063fe:	459c      	cmp	ip, r3
 8006400:	fa22 f20e 	lsr.w	r2, r2, lr
 8006404:	d8f3      	bhi.n	80063ee <__lshift+0x6e>
 8006406:	ebac 0304 	sub.w	r3, ip, r4
 800640a:	3b15      	subs	r3, #21
 800640c:	f023 0303 	bic.w	r3, r3, #3
 8006410:	3304      	adds	r3, #4
 8006412:	f104 0015 	add.w	r0, r4, #21
 8006416:	4584      	cmp	ip, r0
 8006418:	bf38      	it	cc
 800641a:	2304      	movcc	r3, #4
 800641c:	50ca      	str	r2, [r1, r3]
 800641e:	b10a      	cbz	r2, 8006424 <__lshift+0xa4>
 8006420:	f108 0602 	add.w	r6, r8, #2
 8006424:	3e01      	subs	r6, #1
 8006426:	4638      	mov	r0, r7
 8006428:	612e      	str	r6, [r5, #16]
 800642a:	4621      	mov	r1, r4
 800642c:	f7ff fd90 	bl	8005f50 <_Bfree>
 8006430:	4628      	mov	r0, r5
 8006432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006436:	f842 0f04 	str.w	r0, [r2, #4]!
 800643a:	3301      	adds	r3, #1
 800643c:	e7c5      	b.n	80063ca <__lshift+0x4a>
 800643e:	3904      	subs	r1, #4
 8006440:	f853 2b04 	ldr.w	r2, [r3], #4
 8006444:	f841 2f04 	str.w	r2, [r1, #4]!
 8006448:	459c      	cmp	ip, r3
 800644a:	d8f9      	bhi.n	8006440 <__lshift+0xc0>
 800644c:	e7ea      	b.n	8006424 <__lshift+0xa4>
 800644e:	bf00      	nop
 8006450:	0800872d 	.word	0x0800872d
 8006454:	0800873e 	.word	0x0800873e

08006458 <__mcmp>:
 8006458:	690a      	ldr	r2, [r1, #16]
 800645a:	4603      	mov	r3, r0
 800645c:	6900      	ldr	r0, [r0, #16]
 800645e:	1a80      	subs	r0, r0, r2
 8006460:	b530      	push	{r4, r5, lr}
 8006462:	d10e      	bne.n	8006482 <__mcmp+0x2a>
 8006464:	3314      	adds	r3, #20
 8006466:	3114      	adds	r1, #20
 8006468:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800646c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006470:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006474:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006478:	4295      	cmp	r5, r2
 800647a:	d003      	beq.n	8006484 <__mcmp+0x2c>
 800647c:	d205      	bcs.n	800648a <__mcmp+0x32>
 800647e:	f04f 30ff 	mov.w	r0, #4294967295
 8006482:	bd30      	pop	{r4, r5, pc}
 8006484:	42a3      	cmp	r3, r4
 8006486:	d3f3      	bcc.n	8006470 <__mcmp+0x18>
 8006488:	e7fb      	b.n	8006482 <__mcmp+0x2a>
 800648a:	2001      	movs	r0, #1
 800648c:	e7f9      	b.n	8006482 <__mcmp+0x2a>
	...

08006490 <__mdiff>:
 8006490:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006494:	4689      	mov	r9, r1
 8006496:	4606      	mov	r6, r0
 8006498:	4611      	mov	r1, r2
 800649a:	4648      	mov	r0, r9
 800649c:	4614      	mov	r4, r2
 800649e:	f7ff ffdb 	bl	8006458 <__mcmp>
 80064a2:	1e05      	subs	r5, r0, #0
 80064a4:	d112      	bne.n	80064cc <__mdiff+0x3c>
 80064a6:	4629      	mov	r1, r5
 80064a8:	4630      	mov	r0, r6
 80064aa:	f7ff fd11 	bl	8005ed0 <_Balloc>
 80064ae:	4602      	mov	r2, r0
 80064b0:	b928      	cbnz	r0, 80064be <__mdiff+0x2e>
 80064b2:	4b3f      	ldr	r3, [pc, #252]	@ (80065b0 <__mdiff+0x120>)
 80064b4:	f240 2137 	movw	r1, #567	@ 0x237
 80064b8:	483e      	ldr	r0, [pc, #248]	@ (80065b4 <__mdiff+0x124>)
 80064ba:	f001 fc5d 	bl	8007d78 <__assert_func>
 80064be:	2301      	movs	r3, #1
 80064c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80064c4:	4610      	mov	r0, r2
 80064c6:	b003      	add	sp, #12
 80064c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064cc:	bfbc      	itt	lt
 80064ce:	464b      	movlt	r3, r9
 80064d0:	46a1      	movlt	r9, r4
 80064d2:	4630      	mov	r0, r6
 80064d4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80064d8:	bfba      	itte	lt
 80064da:	461c      	movlt	r4, r3
 80064dc:	2501      	movlt	r5, #1
 80064de:	2500      	movge	r5, #0
 80064e0:	f7ff fcf6 	bl	8005ed0 <_Balloc>
 80064e4:	4602      	mov	r2, r0
 80064e6:	b918      	cbnz	r0, 80064f0 <__mdiff+0x60>
 80064e8:	4b31      	ldr	r3, [pc, #196]	@ (80065b0 <__mdiff+0x120>)
 80064ea:	f240 2145 	movw	r1, #581	@ 0x245
 80064ee:	e7e3      	b.n	80064b8 <__mdiff+0x28>
 80064f0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80064f4:	6926      	ldr	r6, [r4, #16]
 80064f6:	60c5      	str	r5, [r0, #12]
 80064f8:	f109 0310 	add.w	r3, r9, #16
 80064fc:	f109 0514 	add.w	r5, r9, #20
 8006500:	f104 0e14 	add.w	lr, r4, #20
 8006504:	f100 0b14 	add.w	fp, r0, #20
 8006508:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800650c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006510:	9301      	str	r3, [sp, #4]
 8006512:	46d9      	mov	r9, fp
 8006514:	f04f 0c00 	mov.w	ip, #0
 8006518:	9b01      	ldr	r3, [sp, #4]
 800651a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800651e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006522:	9301      	str	r3, [sp, #4]
 8006524:	fa1f f38a 	uxth.w	r3, sl
 8006528:	4619      	mov	r1, r3
 800652a:	b283      	uxth	r3, r0
 800652c:	1acb      	subs	r3, r1, r3
 800652e:	0c00      	lsrs	r0, r0, #16
 8006530:	4463      	add	r3, ip
 8006532:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006536:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800653a:	b29b      	uxth	r3, r3
 800653c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006540:	4576      	cmp	r6, lr
 8006542:	f849 3b04 	str.w	r3, [r9], #4
 8006546:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800654a:	d8e5      	bhi.n	8006518 <__mdiff+0x88>
 800654c:	1b33      	subs	r3, r6, r4
 800654e:	3b15      	subs	r3, #21
 8006550:	f023 0303 	bic.w	r3, r3, #3
 8006554:	3415      	adds	r4, #21
 8006556:	3304      	adds	r3, #4
 8006558:	42a6      	cmp	r6, r4
 800655a:	bf38      	it	cc
 800655c:	2304      	movcc	r3, #4
 800655e:	441d      	add	r5, r3
 8006560:	445b      	add	r3, fp
 8006562:	461e      	mov	r6, r3
 8006564:	462c      	mov	r4, r5
 8006566:	4544      	cmp	r4, r8
 8006568:	d30e      	bcc.n	8006588 <__mdiff+0xf8>
 800656a:	f108 0103 	add.w	r1, r8, #3
 800656e:	1b49      	subs	r1, r1, r5
 8006570:	f021 0103 	bic.w	r1, r1, #3
 8006574:	3d03      	subs	r5, #3
 8006576:	45a8      	cmp	r8, r5
 8006578:	bf38      	it	cc
 800657a:	2100      	movcc	r1, #0
 800657c:	440b      	add	r3, r1
 800657e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006582:	b191      	cbz	r1, 80065aa <__mdiff+0x11a>
 8006584:	6117      	str	r7, [r2, #16]
 8006586:	e79d      	b.n	80064c4 <__mdiff+0x34>
 8006588:	f854 1b04 	ldr.w	r1, [r4], #4
 800658c:	46e6      	mov	lr, ip
 800658e:	0c08      	lsrs	r0, r1, #16
 8006590:	fa1c fc81 	uxtah	ip, ip, r1
 8006594:	4471      	add	r1, lr
 8006596:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800659a:	b289      	uxth	r1, r1
 800659c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80065a0:	f846 1b04 	str.w	r1, [r6], #4
 80065a4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80065a8:	e7dd      	b.n	8006566 <__mdiff+0xd6>
 80065aa:	3f01      	subs	r7, #1
 80065ac:	e7e7      	b.n	800657e <__mdiff+0xee>
 80065ae:	bf00      	nop
 80065b0:	0800872d 	.word	0x0800872d
 80065b4:	0800873e 	.word	0x0800873e

080065b8 <__ulp>:
 80065b8:	b082      	sub	sp, #8
 80065ba:	ed8d 0b00 	vstr	d0, [sp]
 80065be:	9a01      	ldr	r2, [sp, #4]
 80065c0:	4b0f      	ldr	r3, [pc, #60]	@ (8006600 <__ulp+0x48>)
 80065c2:	4013      	ands	r3, r2
 80065c4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	dc08      	bgt.n	80065de <__ulp+0x26>
 80065cc:	425b      	negs	r3, r3
 80065ce:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80065d2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80065d6:	da04      	bge.n	80065e2 <__ulp+0x2a>
 80065d8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80065dc:	4113      	asrs	r3, r2
 80065de:	2200      	movs	r2, #0
 80065e0:	e008      	b.n	80065f4 <__ulp+0x3c>
 80065e2:	f1a2 0314 	sub.w	r3, r2, #20
 80065e6:	2b1e      	cmp	r3, #30
 80065e8:	bfda      	itte	le
 80065ea:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80065ee:	40da      	lsrle	r2, r3
 80065f0:	2201      	movgt	r2, #1
 80065f2:	2300      	movs	r3, #0
 80065f4:	4619      	mov	r1, r3
 80065f6:	4610      	mov	r0, r2
 80065f8:	ec41 0b10 	vmov	d0, r0, r1
 80065fc:	b002      	add	sp, #8
 80065fe:	4770      	bx	lr
 8006600:	7ff00000 	.word	0x7ff00000

08006604 <__b2d>:
 8006604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006608:	6906      	ldr	r6, [r0, #16]
 800660a:	f100 0814 	add.w	r8, r0, #20
 800660e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8006612:	1f37      	subs	r7, r6, #4
 8006614:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006618:	4610      	mov	r0, r2
 800661a:	f7ff fd4b 	bl	80060b4 <__hi0bits>
 800661e:	f1c0 0320 	rsb	r3, r0, #32
 8006622:	280a      	cmp	r0, #10
 8006624:	600b      	str	r3, [r1, #0]
 8006626:	491b      	ldr	r1, [pc, #108]	@ (8006694 <__b2d+0x90>)
 8006628:	dc15      	bgt.n	8006656 <__b2d+0x52>
 800662a:	f1c0 0c0b 	rsb	ip, r0, #11
 800662e:	fa22 f30c 	lsr.w	r3, r2, ip
 8006632:	45b8      	cmp	r8, r7
 8006634:	ea43 0501 	orr.w	r5, r3, r1
 8006638:	bf34      	ite	cc
 800663a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800663e:	2300      	movcs	r3, #0
 8006640:	3015      	adds	r0, #21
 8006642:	fa02 f000 	lsl.w	r0, r2, r0
 8006646:	fa23 f30c 	lsr.w	r3, r3, ip
 800664a:	4303      	orrs	r3, r0
 800664c:	461c      	mov	r4, r3
 800664e:	ec45 4b10 	vmov	d0, r4, r5
 8006652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006656:	45b8      	cmp	r8, r7
 8006658:	bf3a      	itte	cc
 800665a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800665e:	f1a6 0708 	subcc.w	r7, r6, #8
 8006662:	2300      	movcs	r3, #0
 8006664:	380b      	subs	r0, #11
 8006666:	d012      	beq.n	800668e <__b2d+0x8a>
 8006668:	f1c0 0120 	rsb	r1, r0, #32
 800666c:	fa23 f401 	lsr.w	r4, r3, r1
 8006670:	4082      	lsls	r2, r0
 8006672:	4322      	orrs	r2, r4
 8006674:	4547      	cmp	r7, r8
 8006676:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800667a:	bf8c      	ite	hi
 800667c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006680:	2200      	movls	r2, #0
 8006682:	4083      	lsls	r3, r0
 8006684:	40ca      	lsrs	r2, r1
 8006686:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800668a:	4313      	orrs	r3, r2
 800668c:	e7de      	b.n	800664c <__b2d+0x48>
 800668e:	ea42 0501 	orr.w	r5, r2, r1
 8006692:	e7db      	b.n	800664c <__b2d+0x48>
 8006694:	3ff00000 	.word	0x3ff00000

08006698 <__d2b>:
 8006698:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800669c:	460f      	mov	r7, r1
 800669e:	2101      	movs	r1, #1
 80066a0:	ec59 8b10 	vmov	r8, r9, d0
 80066a4:	4616      	mov	r6, r2
 80066a6:	f7ff fc13 	bl	8005ed0 <_Balloc>
 80066aa:	4604      	mov	r4, r0
 80066ac:	b930      	cbnz	r0, 80066bc <__d2b+0x24>
 80066ae:	4602      	mov	r2, r0
 80066b0:	4b23      	ldr	r3, [pc, #140]	@ (8006740 <__d2b+0xa8>)
 80066b2:	4824      	ldr	r0, [pc, #144]	@ (8006744 <__d2b+0xac>)
 80066b4:	f240 310f 	movw	r1, #783	@ 0x30f
 80066b8:	f001 fb5e 	bl	8007d78 <__assert_func>
 80066bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80066c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80066c4:	b10d      	cbz	r5, 80066ca <__d2b+0x32>
 80066c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066ca:	9301      	str	r3, [sp, #4]
 80066cc:	f1b8 0300 	subs.w	r3, r8, #0
 80066d0:	d023      	beq.n	800671a <__d2b+0x82>
 80066d2:	4668      	mov	r0, sp
 80066d4:	9300      	str	r3, [sp, #0]
 80066d6:	f7ff fd0c 	bl	80060f2 <__lo0bits>
 80066da:	e9dd 1200 	ldrd	r1, r2, [sp]
 80066de:	b1d0      	cbz	r0, 8006716 <__d2b+0x7e>
 80066e0:	f1c0 0320 	rsb	r3, r0, #32
 80066e4:	fa02 f303 	lsl.w	r3, r2, r3
 80066e8:	430b      	orrs	r3, r1
 80066ea:	40c2      	lsrs	r2, r0
 80066ec:	6163      	str	r3, [r4, #20]
 80066ee:	9201      	str	r2, [sp, #4]
 80066f0:	9b01      	ldr	r3, [sp, #4]
 80066f2:	61a3      	str	r3, [r4, #24]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	bf0c      	ite	eq
 80066f8:	2201      	moveq	r2, #1
 80066fa:	2202      	movne	r2, #2
 80066fc:	6122      	str	r2, [r4, #16]
 80066fe:	b1a5      	cbz	r5, 800672a <__d2b+0x92>
 8006700:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006704:	4405      	add	r5, r0
 8006706:	603d      	str	r5, [r7, #0]
 8006708:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800670c:	6030      	str	r0, [r6, #0]
 800670e:	4620      	mov	r0, r4
 8006710:	b003      	add	sp, #12
 8006712:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006716:	6161      	str	r1, [r4, #20]
 8006718:	e7ea      	b.n	80066f0 <__d2b+0x58>
 800671a:	a801      	add	r0, sp, #4
 800671c:	f7ff fce9 	bl	80060f2 <__lo0bits>
 8006720:	9b01      	ldr	r3, [sp, #4]
 8006722:	6163      	str	r3, [r4, #20]
 8006724:	3020      	adds	r0, #32
 8006726:	2201      	movs	r2, #1
 8006728:	e7e8      	b.n	80066fc <__d2b+0x64>
 800672a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800672e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006732:	6038      	str	r0, [r7, #0]
 8006734:	6918      	ldr	r0, [r3, #16]
 8006736:	f7ff fcbd 	bl	80060b4 <__hi0bits>
 800673a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800673e:	e7e5      	b.n	800670c <__d2b+0x74>
 8006740:	0800872d 	.word	0x0800872d
 8006744:	0800873e 	.word	0x0800873e

08006748 <__ratio>:
 8006748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800674c:	b085      	sub	sp, #20
 800674e:	e9cd 1000 	strd	r1, r0, [sp]
 8006752:	a902      	add	r1, sp, #8
 8006754:	f7ff ff56 	bl	8006604 <__b2d>
 8006758:	9800      	ldr	r0, [sp, #0]
 800675a:	a903      	add	r1, sp, #12
 800675c:	ec55 4b10 	vmov	r4, r5, d0
 8006760:	f7ff ff50 	bl	8006604 <__b2d>
 8006764:	9b01      	ldr	r3, [sp, #4]
 8006766:	6919      	ldr	r1, [r3, #16]
 8006768:	9b00      	ldr	r3, [sp, #0]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	1ac9      	subs	r1, r1, r3
 800676e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006772:	1a9b      	subs	r3, r3, r2
 8006774:	ec5b ab10 	vmov	sl, fp, d0
 8006778:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800677c:	2b00      	cmp	r3, #0
 800677e:	bfce      	itee	gt
 8006780:	462a      	movgt	r2, r5
 8006782:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006786:	465a      	movle	r2, fp
 8006788:	462f      	mov	r7, r5
 800678a:	46d9      	mov	r9, fp
 800678c:	bfcc      	ite	gt
 800678e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006792:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006796:	464b      	mov	r3, r9
 8006798:	4652      	mov	r2, sl
 800679a:	4620      	mov	r0, r4
 800679c:	4639      	mov	r1, r7
 800679e:	f7fa f855 	bl	800084c <__aeabi_ddiv>
 80067a2:	ec41 0b10 	vmov	d0, r0, r1
 80067a6:	b005      	add	sp, #20
 80067a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080067ac <__copybits>:
 80067ac:	3901      	subs	r1, #1
 80067ae:	b570      	push	{r4, r5, r6, lr}
 80067b0:	1149      	asrs	r1, r1, #5
 80067b2:	6914      	ldr	r4, [r2, #16]
 80067b4:	3101      	adds	r1, #1
 80067b6:	f102 0314 	add.w	r3, r2, #20
 80067ba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80067be:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80067c2:	1f05      	subs	r5, r0, #4
 80067c4:	42a3      	cmp	r3, r4
 80067c6:	d30c      	bcc.n	80067e2 <__copybits+0x36>
 80067c8:	1aa3      	subs	r3, r4, r2
 80067ca:	3b11      	subs	r3, #17
 80067cc:	f023 0303 	bic.w	r3, r3, #3
 80067d0:	3211      	adds	r2, #17
 80067d2:	42a2      	cmp	r2, r4
 80067d4:	bf88      	it	hi
 80067d6:	2300      	movhi	r3, #0
 80067d8:	4418      	add	r0, r3
 80067da:	2300      	movs	r3, #0
 80067dc:	4288      	cmp	r0, r1
 80067de:	d305      	bcc.n	80067ec <__copybits+0x40>
 80067e0:	bd70      	pop	{r4, r5, r6, pc}
 80067e2:	f853 6b04 	ldr.w	r6, [r3], #4
 80067e6:	f845 6f04 	str.w	r6, [r5, #4]!
 80067ea:	e7eb      	b.n	80067c4 <__copybits+0x18>
 80067ec:	f840 3b04 	str.w	r3, [r0], #4
 80067f0:	e7f4      	b.n	80067dc <__copybits+0x30>

080067f2 <__any_on>:
 80067f2:	f100 0214 	add.w	r2, r0, #20
 80067f6:	6900      	ldr	r0, [r0, #16]
 80067f8:	114b      	asrs	r3, r1, #5
 80067fa:	4298      	cmp	r0, r3
 80067fc:	b510      	push	{r4, lr}
 80067fe:	db11      	blt.n	8006824 <__any_on+0x32>
 8006800:	dd0a      	ble.n	8006818 <__any_on+0x26>
 8006802:	f011 011f 	ands.w	r1, r1, #31
 8006806:	d007      	beq.n	8006818 <__any_on+0x26>
 8006808:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800680c:	fa24 f001 	lsr.w	r0, r4, r1
 8006810:	fa00 f101 	lsl.w	r1, r0, r1
 8006814:	428c      	cmp	r4, r1
 8006816:	d10b      	bne.n	8006830 <__any_on+0x3e>
 8006818:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800681c:	4293      	cmp	r3, r2
 800681e:	d803      	bhi.n	8006828 <__any_on+0x36>
 8006820:	2000      	movs	r0, #0
 8006822:	bd10      	pop	{r4, pc}
 8006824:	4603      	mov	r3, r0
 8006826:	e7f7      	b.n	8006818 <__any_on+0x26>
 8006828:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800682c:	2900      	cmp	r1, #0
 800682e:	d0f5      	beq.n	800681c <__any_on+0x2a>
 8006830:	2001      	movs	r0, #1
 8006832:	e7f6      	b.n	8006822 <__any_on+0x30>

08006834 <sulp>:
 8006834:	b570      	push	{r4, r5, r6, lr}
 8006836:	4604      	mov	r4, r0
 8006838:	460d      	mov	r5, r1
 800683a:	ec45 4b10 	vmov	d0, r4, r5
 800683e:	4616      	mov	r6, r2
 8006840:	f7ff feba 	bl	80065b8 <__ulp>
 8006844:	ec51 0b10 	vmov	r0, r1, d0
 8006848:	b17e      	cbz	r6, 800686a <sulp+0x36>
 800684a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800684e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006852:	2b00      	cmp	r3, #0
 8006854:	dd09      	ble.n	800686a <sulp+0x36>
 8006856:	051b      	lsls	r3, r3, #20
 8006858:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800685c:	2400      	movs	r4, #0
 800685e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006862:	4622      	mov	r2, r4
 8006864:	462b      	mov	r3, r5
 8006866:	f7f9 fec7 	bl	80005f8 <__aeabi_dmul>
 800686a:	ec41 0b10 	vmov	d0, r0, r1
 800686e:	bd70      	pop	{r4, r5, r6, pc}

08006870 <_strtod_l>:
 8006870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006874:	b09f      	sub	sp, #124	@ 0x7c
 8006876:	460c      	mov	r4, r1
 8006878:	9217      	str	r2, [sp, #92]	@ 0x5c
 800687a:	2200      	movs	r2, #0
 800687c:	921a      	str	r2, [sp, #104]	@ 0x68
 800687e:	9005      	str	r0, [sp, #20]
 8006880:	f04f 0a00 	mov.w	sl, #0
 8006884:	f04f 0b00 	mov.w	fp, #0
 8006888:	460a      	mov	r2, r1
 800688a:	9219      	str	r2, [sp, #100]	@ 0x64
 800688c:	7811      	ldrb	r1, [r2, #0]
 800688e:	292b      	cmp	r1, #43	@ 0x2b
 8006890:	d04a      	beq.n	8006928 <_strtod_l+0xb8>
 8006892:	d838      	bhi.n	8006906 <_strtod_l+0x96>
 8006894:	290d      	cmp	r1, #13
 8006896:	d832      	bhi.n	80068fe <_strtod_l+0x8e>
 8006898:	2908      	cmp	r1, #8
 800689a:	d832      	bhi.n	8006902 <_strtod_l+0x92>
 800689c:	2900      	cmp	r1, #0
 800689e:	d03b      	beq.n	8006918 <_strtod_l+0xa8>
 80068a0:	2200      	movs	r2, #0
 80068a2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80068a4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80068a6:	782a      	ldrb	r2, [r5, #0]
 80068a8:	2a30      	cmp	r2, #48	@ 0x30
 80068aa:	f040 80b3 	bne.w	8006a14 <_strtod_l+0x1a4>
 80068ae:	786a      	ldrb	r2, [r5, #1]
 80068b0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80068b4:	2a58      	cmp	r2, #88	@ 0x58
 80068b6:	d16e      	bne.n	8006996 <_strtod_l+0x126>
 80068b8:	9302      	str	r3, [sp, #8]
 80068ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068bc:	9301      	str	r3, [sp, #4]
 80068be:	ab1a      	add	r3, sp, #104	@ 0x68
 80068c0:	9300      	str	r3, [sp, #0]
 80068c2:	4a8e      	ldr	r2, [pc, #568]	@ (8006afc <_strtod_l+0x28c>)
 80068c4:	9805      	ldr	r0, [sp, #20]
 80068c6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80068c8:	a919      	add	r1, sp, #100	@ 0x64
 80068ca:	f001 faef 	bl	8007eac <__gethex>
 80068ce:	f010 060f 	ands.w	r6, r0, #15
 80068d2:	4604      	mov	r4, r0
 80068d4:	d005      	beq.n	80068e2 <_strtod_l+0x72>
 80068d6:	2e06      	cmp	r6, #6
 80068d8:	d128      	bne.n	800692c <_strtod_l+0xbc>
 80068da:	3501      	adds	r5, #1
 80068dc:	2300      	movs	r3, #0
 80068de:	9519      	str	r5, [sp, #100]	@ 0x64
 80068e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80068e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f040 858e 	bne.w	8007406 <_strtod_l+0xb96>
 80068ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068ec:	b1cb      	cbz	r3, 8006922 <_strtod_l+0xb2>
 80068ee:	4652      	mov	r2, sl
 80068f0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80068f4:	ec43 2b10 	vmov	d0, r2, r3
 80068f8:	b01f      	add	sp, #124	@ 0x7c
 80068fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068fe:	2920      	cmp	r1, #32
 8006900:	d1ce      	bne.n	80068a0 <_strtod_l+0x30>
 8006902:	3201      	adds	r2, #1
 8006904:	e7c1      	b.n	800688a <_strtod_l+0x1a>
 8006906:	292d      	cmp	r1, #45	@ 0x2d
 8006908:	d1ca      	bne.n	80068a0 <_strtod_l+0x30>
 800690a:	2101      	movs	r1, #1
 800690c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800690e:	1c51      	adds	r1, r2, #1
 8006910:	9119      	str	r1, [sp, #100]	@ 0x64
 8006912:	7852      	ldrb	r2, [r2, #1]
 8006914:	2a00      	cmp	r2, #0
 8006916:	d1c5      	bne.n	80068a4 <_strtod_l+0x34>
 8006918:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800691a:	9419      	str	r4, [sp, #100]	@ 0x64
 800691c:	2b00      	cmp	r3, #0
 800691e:	f040 8570 	bne.w	8007402 <_strtod_l+0xb92>
 8006922:	4652      	mov	r2, sl
 8006924:	465b      	mov	r3, fp
 8006926:	e7e5      	b.n	80068f4 <_strtod_l+0x84>
 8006928:	2100      	movs	r1, #0
 800692a:	e7ef      	b.n	800690c <_strtod_l+0x9c>
 800692c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800692e:	b13a      	cbz	r2, 8006940 <_strtod_l+0xd0>
 8006930:	2135      	movs	r1, #53	@ 0x35
 8006932:	a81c      	add	r0, sp, #112	@ 0x70
 8006934:	f7ff ff3a 	bl	80067ac <__copybits>
 8006938:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800693a:	9805      	ldr	r0, [sp, #20]
 800693c:	f7ff fb08 	bl	8005f50 <_Bfree>
 8006940:	3e01      	subs	r6, #1
 8006942:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006944:	2e04      	cmp	r6, #4
 8006946:	d806      	bhi.n	8006956 <_strtod_l+0xe6>
 8006948:	e8df f006 	tbb	[pc, r6]
 800694c:	201d0314 	.word	0x201d0314
 8006950:	14          	.byte	0x14
 8006951:	00          	.byte	0x00
 8006952:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006956:	05e1      	lsls	r1, r4, #23
 8006958:	bf48      	it	mi
 800695a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800695e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006962:	0d1b      	lsrs	r3, r3, #20
 8006964:	051b      	lsls	r3, r3, #20
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1bb      	bne.n	80068e2 <_strtod_l+0x72>
 800696a:	f7fe fb31 	bl	8004fd0 <__errno>
 800696e:	2322      	movs	r3, #34	@ 0x22
 8006970:	6003      	str	r3, [r0, #0]
 8006972:	e7b6      	b.n	80068e2 <_strtod_l+0x72>
 8006974:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006978:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800697c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006980:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006984:	e7e7      	b.n	8006956 <_strtod_l+0xe6>
 8006986:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006b04 <_strtod_l+0x294>
 800698a:	e7e4      	b.n	8006956 <_strtod_l+0xe6>
 800698c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006990:	f04f 3aff 	mov.w	sl, #4294967295
 8006994:	e7df      	b.n	8006956 <_strtod_l+0xe6>
 8006996:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006998:	1c5a      	adds	r2, r3, #1
 800699a:	9219      	str	r2, [sp, #100]	@ 0x64
 800699c:	785b      	ldrb	r3, [r3, #1]
 800699e:	2b30      	cmp	r3, #48	@ 0x30
 80069a0:	d0f9      	beq.n	8006996 <_strtod_l+0x126>
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d09d      	beq.n	80068e2 <_strtod_l+0x72>
 80069a6:	2301      	movs	r3, #1
 80069a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80069aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80069ac:	930c      	str	r3, [sp, #48]	@ 0x30
 80069ae:	2300      	movs	r3, #0
 80069b0:	9308      	str	r3, [sp, #32]
 80069b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80069b4:	461f      	mov	r7, r3
 80069b6:	220a      	movs	r2, #10
 80069b8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80069ba:	7805      	ldrb	r5, [r0, #0]
 80069bc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80069c0:	b2d9      	uxtb	r1, r3
 80069c2:	2909      	cmp	r1, #9
 80069c4:	d928      	bls.n	8006a18 <_strtod_l+0x1a8>
 80069c6:	494e      	ldr	r1, [pc, #312]	@ (8006b00 <_strtod_l+0x290>)
 80069c8:	2201      	movs	r2, #1
 80069ca:	f001 f979 	bl	8007cc0 <strncmp>
 80069ce:	2800      	cmp	r0, #0
 80069d0:	d032      	beq.n	8006a38 <_strtod_l+0x1c8>
 80069d2:	2000      	movs	r0, #0
 80069d4:	462a      	mov	r2, r5
 80069d6:	4681      	mov	r9, r0
 80069d8:	463d      	mov	r5, r7
 80069da:	4603      	mov	r3, r0
 80069dc:	2a65      	cmp	r2, #101	@ 0x65
 80069de:	d001      	beq.n	80069e4 <_strtod_l+0x174>
 80069e0:	2a45      	cmp	r2, #69	@ 0x45
 80069e2:	d114      	bne.n	8006a0e <_strtod_l+0x19e>
 80069e4:	b91d      	cbnz	r5, 80069ee <_strtod_l+0x17e>
 80069e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80069e8:	4302      	orrs	r2, r0
 80069ea:	d095      	beq.n	8006918 <_strtod_l+0xa8>
 80069ec:	2500      	movs	r5, #0
 80069ee:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80069f0:	1c62      	adds	r2, r4, #1
 80069f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80069f4:	7862      	ldrb	r2, [r4, #1]
 80069f6:	2a2b      	cmp	r2, #43	@ 0x2b
 80069f8:	d077      	beq.n	8006aea <_strtod_l+0x27a>
 80069fa:	2a2d      	cmp	r2, #45	@ 0x2d
 80069fc:	d07b      	beq.n	8006af6 <_strtod_l+0x286>
 80069fe:	f04f 0c00 	mov.w	ip, #0
 8006a02:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006a06:	2909      	cmp	r1, #9
 8006a08:	f240 8082 	bls.w	8006b10 <_strtod_l+0x2a0>
 8006a0c:	9419      	str	r4, [sp, #100]	@ 0x64
 8006a0e:	f04f 0800 	mov.w	r8, #0
 8006a12:	e0a2      	b.n	8006b5a <_strtod_l+0x2ea>
 8006a14:	2300      	movs	r3, #0
 8006a16:	e7c7      	b.n	80069a8 <_strtod_l+0x138>
 8006a18:	2f08      	cmp	r7, #8
 8006a1a:	bfd5      	itete	le
 8006a1c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006a1e:	9908      	ldrgt	r1, [sp, #32]
 8006a20:	fb02 3301 	mlale	r3, r2, r1, r3
 8006a24:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006a28:	f100 0001 	add.w	r0, r0, #1
 8006a2c:	bfd4      	ite	le
 8006a2e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006a30:	9308      	strgt	r3, [sp, #32]
 8006a32:	3701      	adds	r7, #1
 8006a34:	9019      	str	r0, [sp, #100]	@ 0x64
 8006a36:	e7bf      	b.n	80069b8 <_strtod_l+0x148>
 8006a38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a3a:	1c5a      	adds	r2, r3, #1
 8006a3c:	9219      	str	r2, [sp, #100]	@ 0x64
 8006a3e:	785a      	ldrb	r2, [r3, #1]
 8006a40:	b37f      	cbz	r7, 8006aa2 <_strtod_l+0x232>
 8006a42:	4681      	mov	r9, r0
 8006a44:	463d      	mov	r5, r7
 8006a46:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006a4a:	2b09      	cmp	r3, #9
 8006a4c:	d912      	bls.n	8006a74 <_strtod_l+0x204>
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e7c4      	b.n	80069dc <_strtod_l+0x16c>
 8006a52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a54:	1c5a      	adds	r2, r3, #1
 8006a56:	9219      	str	r2, [sp, #100]	@ 0x64
 8006a58:	785a      	ldrb	r2, [r3, #1]
 8006a5a:	3001      	adds	r0, #1
 8006a5c:	2a30      	cmp	r2, #48	@ 0x30
 8006a5e:	d0f8      	beq.n	8006a52 <_strtod_l+0x1e2>
 8006a60:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006a64:	2b08      	cmp	r3, #8
 8006a66:	f200 84d3 	bhi.w	8007410 <_strtod_l+0xba0>
 8006a6a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a6c:	930c      	str	r3, [sp, #48]	@ 0x30
 8006a6e:	4681      	mov	r9, r0
 8006a70:	2000      	movs	r0, #0
 8006a72:	4605      	mov	r5, r0
 8006a74:	3a30      	subs	r2, #48	@ 0x30
 8006a76:	f100 0301 	add.w	r3, r0, #1
 8006a7a:	d02a      	beq.n	8006ad2 <_strtod_l+0x262>
 8006a7c:	4499      	add	r9, r3
 8006a7e:	eb00 0c05 	add.w	ip, r0, r5
 8006a82:	462b      	mov	r3, r5
 8006a84:	210a      	movs	r1, #10
 8006a86:	4563      	cmp	r3, ip
 8006a88:	d10d      	bne.n	8006aa6 <_strtod_l+0x236>
 8006a8a:	1c69      	adds	r1, r5, #1
 8006a8c:	4401      	add	r1, r0
 8006a8e:	4428      	add	r0, r5
 8006a90:	2808      	cmp	r0, #8
 8006a92:	dc16      	bgt.n	8006ac2 <_strtod_l+0x252>
 8006a94:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006a96:	230a      	movs	r3, #10
 8006a98:	fb03 2300 	mla	r3, r3, r0, r2
 8006a9c:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	e018      	b.n	8006ad4 <_strtod_l+0x264>
 8006aa2:	4638      	mov	r0, r7
 8006aa4:	e7da      	b.n	8006a5c <_strtod_l+0x1ec>
 8006aa6:	2b08      	cmp	r3, #8
 8006aa8:	f103 0301 	add.w	r3, r3, #1
 8006aac:	dc03      	bgt.n	8006ab6 <_strtod_l+0x246>
 8006aae:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006ab0:	434e      	muls	r6, r1
 8006ab2:	960a      	str	r6, [sp, #40]	@ 0x28
 8006ab4:	e7e7      	b.n	8006a86 <_strtod_l+0x216>
 8006ab6:	2b10      	cmp	r3, #16
 8006ab8:	bfde      	ittt	le
 8006aba:	9e08      	ldrle	r6, [sp, #32]
 8006abc:	434e      	mulle	r6, r1
 8006abe:	9608      	strle	r6, [sp, #32]
 8006ac0:	e7e1      	b.n	8006a86 <_strtod_l+0x216>
 8006ac2:	280f      	cmp	r0, #15
 8006ac4:	dceb      	bgt.n	8006a9e <_strtod_l+0x22e>
 8006ac6:	9808      	ldr	r0, [sp, #32]
 8006ac8:	230a      	movs	r3, #10
 8006aca:	fb03 2300 	mla	r3, r3, r0, r2
 8006ace:	9308      	str	r3, [sp, #32]
 8006ad0:	e7e5      	b.n	8006a9e <_strtod_l+0x22e>
 8006ad2:	4629      	mov	r1, r5
 8006ad4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006ad6:	1c50      	adds	r0, r2, #1
 8006ad8:	9019      	str	r0, [sp, #100]	@ 0x64
 8006ada:	7852      	ldrb	r2, [r2, #1]
 8006adc:	4618      	mov	r0, r3
 8006ade:	460d      	mov	r5, r1
 8006ae0:	e7b1      	b.n	8006a46 <_strtod_l+0x1d6>
 8006ae2:	f04f 0900 	mov.w	r9, #0
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e77d      	b.n	80069e6 <_strtod_l+0x176>
 8006aea:	f04f 0c00 	mov.w	ip, #0
 8006aee:	1ca2      	adds	r2, r4, #2
 8006af0:	9219      	str	r2, [sp, #100]	@ 0x64
 8006af2:	78a2      	ldrb	r2, [r4, #2]
 8006af4:	e785      	b.n	8006a02 <_strtod_l+0x192>
 8006af6:	f04f 0c01 	mov.w	ip, #1
 8006afa:	e7f8      	b.n	8006aee <_strtod_l+0x27e>
 8006afc:	080088b0 	.word	0x080088b0
 8006b00:	08008898 	.word	0x08008898
 8006b04:	7ff00000 	.word	0x7ff00000
 8006b08:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006b0a:	1c51      	adds	r1, r2, #1
 8006b0c:	9119      	str	r1, [sp, #100]	@ 0x64
 8006b0e:	7852      	ldrb	r2, [r2, #1]
 8006b10:	2a30      	cmp	r2, #48	@ 0x30
 8006b12:	d0f9      	beq.n	8006b08 <_strtod_l+0x298>
 8006b14:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006b18:	2908      	cmp	r1, #8
 8006b1a:	f63f af78 	bhi.w	8006a0e <_strtod_l+0x19e>
 8006b1e:	3a30      	subs	r2, #48	@ 0x30
 8006b20:	920e      	str	r2, [sp, #56]	@ 0x38
 8006b22:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006b24:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006b26:	f04f 080a 	mov.w	r8, #10
 8006b2a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006b2c:	1c56      	adds	r6, r2, #1
 8006b2e:	9619      	str	r6, [sp, #100]	@ 0x64
 8006b30:	7852      	ldrb	r2, [r2, #1]
 8006b32:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006b36:	f1be 0f09 	cmp.w	lr, #9
 8006b3a:	d939      	bls.n	8006bb0 <_strtod_l+0x340>
 8006b3c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006b3e:	1a76      	subs	r6, r6, r1
 8006b40:	2e08      	cmp	r6, #8
 8006b42:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006b46:	dc03      	bgt.n	8006b50 <_strtod_l+0x2e0>
 8006b48:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006b4a:	4588      	cmp	r8, r1
 8006b4c:	bfa8      	it	ge
 8006b4e:	4688      	movge	r8, r1
 8006b50:	f1bc 0f00 	cmp.w	ip, #0
 8006b54:	d001      	beq.n	8006b5a <_strtod_l+0x2ea>
 8006b56:	f1c8 0800 	rsb	r8, r8, #0
 8006b5a:	2d00      	cmp	r5, #0
 8006b5c:	d14e      	bne.n	8006bfc <_strtod_l+0x38c>
 8006b5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006b60:	4308      	orrs	r0, r1
 8006b62:	f47f aebe 	bne.w	80068e2 <_strtod_l+0x72>
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	f47f aed6 	bne.w	8006918 <_strtod_l+0xa8>
 8006b6c:	2a69      	cmp	r2, #105	@ 0x69
 8006b6e:	d028      	beq.n	8006bc2 <_strtod_l+0x352>
 8006b70:	dc25      	bgt.n	8006bbe <_strtod_l+0x34e>
 8006b72:	2a49      	cmp	r2, #73	@ 0x49
 8006b74:	d025      	beq.n	8006bc2 <_strtod_l+0x352>
 8006b76:	2a4e      	cmp	r2, #78	@ 0x4e
 8006b78:	f47f aece 	bne.w	8006918 <_strtod_l+0xa8>
 8006b7c:	499b      	ldr	r1, [pc, #620]	@ (8006dec <_strtod_l+0x57c>)
 8006b7e:	a819      	add	r0, sp, #100	@ 0x64
 8006b80:	f001 fbb6 	bl	80082f0 <__match>
 8006b84:	2800      	cmp	r0, #0
 8006b86:	f43f aec7 	beq.w	8006918 <_strtod_l+0xa8>
 8006b8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	2b28      	cmp	r3, #40	@ 0x28
 8006b90:	d12e      	bne.n	8006bf0 <_strtod_l+0x380>
 8006b92:	4997      	ldr	r1, [pc, #604]	@ (8006df0 <_strtod_l+0x580>)
 8006b94:	aa1c      	add	r2, sp, #112	@ 0x70
 8006b96:	a819      	add	r0, sp, #100	@ 0x64
 8006b98:	f001 fbbe 	bl	8008318 <__hexnan>
 8006b9c:	2805      	cmp	r0, #5
 8006b9e:	d127      	bne.n	8006bf0 <_strtod_l+0x380>
 8006ba0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006ba2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006ba6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006baa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006bae:	e698      	b.n	80068e2 <_strtod_l+0x72>
 8006bb0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006bb2:	fb08 2101 	mla	r1, r8, r1, r2
 8006bb6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006bba:	920e      	str	r2, [sp, #56]	@ 0x38
 8006bbc:	e7b5      	b.n	8006b2a <_strtod_l+0x2ba>
 8006bbe:	2a6e      	cmp	r2, #110	@ 0x6e
 8006bc0:	e7da      	b.n	8006b78 <_strtod_l+0x308>
 8006bc2:	498c      	ldr	r1, [pc, #560]	@ (8006df4 <_strtod_l+0x584>)
 8006bc4:	a819      	add	r0, sp, #100	@ 0x64
 8006bc6:	f001 fb93 	bl	80082f0 <__match>
 8006bca:	2800      	cmp	r0, #0
 8006bcc:	f43f aea4 	beq.w	8006918 <_strtod_l+0xa8>
 8006bd0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006bd2:	4989      	ldr	r1, [pc, #548]	@ (8006df8 <_strtod_l+0x588>)
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	a819      	add	r0, sp, #100	@ 0x64
 8006bd8:	9319      	str	r3, [sp, #100]	@ 0x64
 8006bda:	f001 fb89 	bl	80082f0 <__match>
 8006bde:	b910      	cbnz	r0, 8006be6 <_strtod_l+0x376>
 8006be0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006be2:	3301      	adds	r3, #1
 8006be4:	9319      	str	r3, [sp, #100]	@ 0x64
 8006be6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8006e08 <_strtod_l+0x598>
 8006bea:	f04f 0a00 	mov.w	sl, #0
 8006bee:	e678      	b.n	80068e2 <_strtod_l+0x72>
 8006bf0:	4882      	ldr	r0, [pc, #520]	@ (8006dfc <_strtod_l+0x58c>)
 8006bf2:	f001 f8b9 	bl	8007d68 <nan>
 8006bf6:	ec5b ab10 	vmov	sl, fp, d0
 8006bfa:	e672      	b.n	80068e2 <_strtod_l+0x72>
 8006bfc:	eba8 0309 	sub.w	r3, r8, r9
 8006c00:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006c02:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c04:	2f00      	cmp	r7, #0
 8006c06:	bf08      	it	eq
 8006c08:	462f      	moveq	r7, r5
 8006c0a:	2d10      	cmp	r5, #16
 8006c0c:	462c      	mov	r4, r5
 8006c0e:	bfa8      	it	ge
 8006c10:	2410      	movge	r4, #16
 8006c12:	f7f9 fc77 	bl	8000504 <__aeabi_ui2d>
 8006c16:	2d09      	cmp	r5, #9
 8006c18:	4682      	mov	sl, r0
 8006c1a:	468b      	mov	fp, r1
 8006c1c:	dc13      	bgt.n	8006c46 <_strtod_l+0x3d6>
 8006c1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	f43f ae5e 	beq.w	80068e2 <_strtod_l+0x72>
 8006c26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c28:	dd78      	ble.n	8006d1c <_strtod_l+0x4ac>
 8006c2a:	2b16      	cmp	r3, #22
 8006c2c:	dc5f      	bgt.n	8006cee <_strtod_l+0x47e>
 8006c2e:	4974      	ldr	r1, [pc, #464]	@ (8006e00 <_strtod_l+0x590>)
 8006c30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006c34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c38:	4652      	mov	r2, sl
 8006c3a:	465b      	mov	r3, fp
 8006c3c:	f7f9 fcdc 	bl	80005f8 <__aeabi_dmul>
 8006c40:	4682      	mov	sl, r0
 8006c42:	468b      	mov	fp, r1
 8006c44:	e64d      	b.n	80068e2 <_strtod_l+0x72>
 8006c46:	4b6e      	ldr	r3, [pc, #440]	@ (8006e00 <_strtod_l+0x590>)
 8006c48:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006c4c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006c50:	f7f9 fcd2 	bl	80005f8 <__aeabi_dmul>
 8006c54:	4682      	mov	sl, r0
 8006c56:	9808      	ldr	r0, [sp, #32]
 8006c58:	468b      	mov	fp, r1
 8006c5a:	f7f9 fc53 	bl	8000504 <__aeabi_ui2d>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	460b      	mov	r3, r1
 8006c62:	4650      	mov	r0, sl
 8006c64:	4659      	mov	r1, fp
 8006c66:	f7f9 fb11 	bl	800028c <__adddf3>
 8006c6a:	2d0f      	cmp	r5, #15
 8006c6c:	4682      	mov	sl, r0
 8006c6e:	468b      	mov	fp, r1
 8006c70:	ddd5      	ble.n	8006c1e <_strtod_l+0x3ae>
 8006c72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c74:	1b2c      	subs	r4, r5, r4
 8006c76:	441c      	add	r4, r3
 8006c78:	2c00      	cmp	r4, #0
 8006c7a:	f340 8096 	ble.w	8006daa <_strtod_l+0x53a>
 8006c7e:	f014 030f 	ands.w	r3, r4, #15
 8006c82:	d00a      	beq.n	8006c9a <_strtod_l+0x42a>
 8006c84:	495e      	ldr	r1, [pc, #376]	@ (8006e00 <_strtod_l+0x590>)
 8006c86:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006c8a:	4652      	mov	r2, sl
 8006c8c:	465b      	mov	r3, fp
 8006c8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c92:	f7f9 fcb1 	bl	80005f8 <__aeabi_dmul>
 8006c96:	4682      	mov	sl, r0
 8006c98:	468b      	mov	fp, r1
 8006c9a:	f034 040f 	bics.w	r4, r4, #15
 8006c9e:	d073      	beq.n	8006d88 <_strtod_l+0x518>
 8006ca0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006ca4:	dd48      	ble.n	8006d38 <_strtod_l+0x4c8>
 8006ca6:	2400      	movs	r4, #0
 8006ca8:	46a0      	mov	r8, r4
 8006caa:	940a      	str	r4, [sp, #40]	@ 0x28
 8006cac:	46a1      	mov	r9, r4
 8006cae:	9a05      	ldr	r2, [sp, #20]
 8006cb0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8006e08 <_strtod_l+0x598>
 8006cb4:	2322      	movs	r3, #34	@ 0x22
 8006cb6:	6013      	str	r3, [r2, #0]
 8006cb8:	f04f 0a00 	mov.w	sl, #0
 8006cbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	f43f ae0f 	beq.w	80068e2 <_strtod_l+0x72>
 8006cc4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006cc6:	9805      	ldr	r0, [sp, #20]
 8006cc8:	f7ff f942 	bl	8005f50 <_Bfree>
 8006ccc:	9805      	ldr	r0, [sp, #20]
 8006cce:	4649      	mov	r1, r9
 8006cd0:	f7ff f93e 	bl	8005f50 <_Bfree>
 8006cd4:	9805      	ldr	r0, [sp, #20]
 8006cd6:	4641      	mov	r1, r8
 8006cd8:	f7ff f93a 	bl	8005f50 <_Bfree>
 8006cdc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006cde:	9805      	ldr	r0, [sp, #20]
 8006ce0:	f7ff f936 	bl	8005f50 <_Bfree>
 8006ce4:	9805      	ldr	r0, [sp, #20]
 8006ce6:	4621      	mov	r1, r4
 8006ce8:	f7ff f932 	bl	8005f50 <_Bfree>
 8006cec:	e5f9      	b.n	80068e2 <_strtod_l+0x72>
 8006cee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006cf0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	dbbc      	blt.n	8006c72 <_strtod_l+0x402>
 8006cf8:	4c41      	ldr	r4, [pc, #260]	@ (8006e00 <_strtod_l+0x590>)
 8006cfa:	f1c5 050f 	rsb	r5, r5, #15
 8006cfe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006d02:	4652      	mov	r2, sl
 8006d04:	465b      	mov	r3, fp
 8006d06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d0a:	f7f9 fc75 	bl	80005f8 <__aeabi_dmul>
 8006d0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d10:	1b5d      	subs	r5, r3, r5
 8006d12:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006d16:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006d1a:	e78f      	b.n	8006c3c <_strtod_l+0x3cc>
 8006d1c:	3316      	adds	r3, #22
 8006d1e:	dba8      	blt.n	8006c72 <_strtod_l+0x402>
 8006d20:	4b37      	ldr	r3, [pc, #220]	@ (8006e00 <_strtod_l+0x590>)
 8006d22:	eba9 0808 	sub.w	r8, r9, r8
 8006d26:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006d2a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006d2e:	4650      	mov	r0, sl
 8006d30:	4659      	mov	r1, fp
 8006d32:	f7f9 fd8b 	bl	800084c <__aeabi_ddiv>
 8006d36:	e783      	b.n	8006c40 <_strtod_l+0x3d0>
 8006d38:	4b32      	ldr	r3, [pc, #200]	@ (8006e04 <_strtod_l+0x594>)
 8006d3a:	9308      	str	r3, [sp, #32]
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	1124      	asrs	r4, r4, #4
 8006d40:	4650      	mov	r0, sl
 8006d42:	4659      	mov	r1, fp
 8006d44:	461e      	mov	r6, r3
 8006d46:	2c01      	cmp	r4, #1
 8006d48:	dc21      	bgt.n	8006d8e <_strtod_l+0x51e>
 8006d4a:	b10b      	cbz	r3, 8006d50 <_strtod_l+0x4e0>
 8006d4c:	4682      	mov	sl, r0
 8006d4e:	468b      	mov	fp, r1
 8006d50:	492c      	ldr	r1, [pc, #176]	@ (8006e04 <_strtod_l+0x594>)
 8006d52:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006d56:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006d5a:	4652      	mov	r2, sl
 8006d5c:	465b      	mov	r3, fp
 8006d5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d62:	f7f9 fc49 	bl	80005f8 <__aeabi_dmul>
 8006d66:	4b28      	ldr	r3, [pc, #160]	@ (8006e08 <_strtod_l+0x598>)
 8006d68:	460a      	mov	r2, r1
 8006d6a:	400b      	ands	r3, r1
 8006d6c:	4927      	ldr	r1, [pc, #156]	@ (8006e0c <_strtod_l+0x59c>)
 8006d6e:	428b      	cmp	r3, r1
 8006d70:	4682      	mov	sl, r0
 8006d72:	d898      	bhi.n	8006ca6 <_strtod_l+0x436>
 8006d74:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006d78:	428b      	cmp	r3, r1
 8006d7a:	bf86      	itte	hi
 8006d7c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8006e10 <_strtod_l+0x5a0>
 8006d80:	f04f 3aff 	movhi.w	sl, #4294967295
 8006d84:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006d88:	2300      	movs	r3, #0
 8006d8a:	9308      	str	r3, [sp, #32]
 8006d8c:	e07a      	b.n	8006e84 <_strtod_l+0x614>
 8006d8e:	07e2      	lsls	r2, r4, #31
 8006d90:	d505      	bpl.n	8006d9e <_strtod_l+0x52e>
 8006d92:	9b08      	ldr	r3, [sp, #32]
 8006d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d98:	f7f9 fc2e 	bl	80005f8 <__aeabi_dmul>
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	9a08      	ldr	r2, [sp, #32]
 8006da0:	3208      	adds	r2, #8
 8006da2:	3601      	adds	r6, #1
 8006da4:	1064      	asrs	r4, r4, #1
 8006da6:	9208      	str	r2, [sp, #32]
 8006da8:	e7cd      	b.n	8006d46 <_strtod_l+0x4d6>
 8006daa:	d0ed      	beq.n	8006d88 <_strtod_l+0x518>
 8006dac:	4264      	negs	r4, r4
 8006dae:	f014 020f 	ands.w	r2, r4, #15
 8006db2:	d00a      	beq.n	8006dca <_strtod_l+0x55a>
 8006db4:	4b12      	ldr	r3, [pc, #72]	@ (8006e00 <_strtod_l+0x590>)
 8006db6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006dba:	4650      	mov	r0, sl
 8006dbc:	4659      	mov	r1, fp
 8006dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc2:	f7f9 fd43 	bl	800084c <__aeabi_ddiv>
 8006dc6:	4682      	mov	sl, r0
 8006dc8:	468b      	mov	fp, r1
 8006dca:	1124      	asrs	r4, r4, #4
 8006dcc:	d0dc      	beq.n	8006d88 <_strtod_l+0x518>
 8006dce:	2c1f      	cmp	r4, #31
 8006dd0:	dd20      	ble.n	8006e14 <_strtod_l+0x5a4>
 8006dd2:	2400      	movs	r4, #0
 8006dd4:	46a0      	mov	r8, r4
 8006dd6:	940a      	str	r4, [sp, #40]	@ 0x28
 8006dd8:	46a1      	mov	r9, r4
 8006dda:	9a05      	ldr	r2, [sp, #20]
 8006ddc:	2322      	movs	r3, #34	@ 0x22
 8006dde:	f04f 0a00 	mov.w	sl, #0
 8006de2:	f04f 0b00 	mov.w	fp, #0
 8006de6:	6013      	str	r3, [r2, #0]
 8006de8:	e768      	b.n	8006cbc <_strtod_l+0x44c>
 8006dea:	bf00      	nop
 8006dec:	08008685 	.word	0x08008685
 8006df0:	0800889c 	.word	0x0800889c
 8006df4:	0800867d 	.word	0x0800867d
 8006df8:	080086b4 	.word	0x080086b4
 8006dfc:	08008a45 	.word	0x08008a45
 8006e00:	080087d0 	.word	0x080087d0
 8006e04:	080087a8 	.word	0x080087a8
 8006e08:	7ff00000 	.word	0x7ff00000
 8006e0c:	7ca00000 	.word	0x7ca00000
 8006e10:	7fefffff 	.word	0x7fefffff
 8006e14:	f014 0310 	ands.w	r3, r4, #16
 8006e18:	bf18      	it	ne
 8006e1a:	236a      	movne	r3, #106	@ 0x6a
 8006e1c:	4ea9      	ldr	r6, [pc, #676]	@ (80070c4 <_strtod_l+0x854>)
 8006e1e:	9308      	str	r3, [sp, #32]
 8006e20:	4650      	mov	r0, sl
 8006e22:	4659      	mov	r1, fp
 8006e24:	2300      	movs	r3, #0
 8006e26:	07e2      	lsls	r2, r4, #31
 8006e28:	d504      	bpl.n	8006e34 <_strtod_l+0x5c4>
 8006e2a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006e2e:	f7f9 fbe3 	bl	80005f8 <__aeabi_dmul>
 8006e32:	2301      	movs	r3, #1
 8006e34:	1064      	asrs	r4, r4, #1
 8006e36:	f106 0608 	add.w	r6, r6, #8
 8006e3a:	d1f4      	bne.n	8006e26 <_strtod_l+0x5b6>
 8006e3c:	b10b      	cbz	r3, 8006e42 <_strtod_l+0x5d2>
 8006e3e:	4682      	mov	sl, r0
 8006e40:	468b      	mov	fp, r1
 8006e42:	9b08      	ldr	r3, [sp, #32]
 8006e44:	b1b3      	cbz	r3, 8006e74 <_strtod_l+0x604>
 8006e46:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006e4a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	4659      	mov	r1, fp
 8006e52:	dd0f      	ble.n	8006e74 <_strtod_l+0x604>
 8006e54:	2b1f      	cmp	r3, #31
 8006e56:	dd55      	ble.n	8006f04 <_strtod_l+0x694>
 8006e58:	2b34      	cmp	r3, #52	@ 0x34
 8006e5a:	bfde      	ittt	le
 8006e5c:	f04f 33ff 	movle.w	r3, #4294967295
 8006e60:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006e64:	4093      	lslle	r3, r2
 8006e66:	f04f 0a00 	mov.w	sl, #0
 8006e6a:	bfcc      	ite	gt
 8006e6c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006e70:	ea03 0b01 	andle.w	fp, r3, r1
 8006e74:	2200      	movs	r2, #0
 8006e76:	2300      	movs	r3, #0
 8006e78:	4650      	mov	r0, sl
 8006e7a:	4659      	mov	r1, fp
 8006e7c:	f7f9 fe24 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e80:	2800      	cmp	r0, #0
 8006e82:	d1a6      	bne.n	8006dd2 <_strtod_l+0x562>
 8006e84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e86:	9300      	str	r3, [sp, #0]
 8006e88:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006e8a:	9805      	ldr	r0, [sp, #20]
 8006e8c:	462b      	mov	r3, r5
 8006e8e:	463a      	mov	r2, r7
 8006e90:	f7ff f8c6 	bl	8006020 <__s2b>
 8006e94:	900a      	str	r0, [sp, #40]	@ 0x28
 8006e96:	2800      	cmp	r0, #0
 8006e98:	f43f af05 	beq.w	8006ca6 <_strtod_l+0x436>
 8006e9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e9e:	2a00      	cmp	r2, #0
 8006ea0:	eba9 0308 	sub.w	r3, r9, r8
 8006ea4:	bfa8      	it	ge
 8006ea6:	2300      	movge	r3, #0
 8006ea8:	9312      	str	r3, [sp, #72]	@ 0x48
 8006eaa:	2400      	movs	r4, #0
 8006eac:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006eb0:	9316      	str	r3, [sp, #88]	@ 0x58
 8006eb2:	46a0      	mov	r8, r4
 8006eb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006eb6:	9805      	ldr	r0, [sp, #20]
 8006eb8:	6859      	ldr	r1, [r3, #4]
 8006eba:	f7ff f809 	bl	8005ed0 <_Balloc>
 8006ebe:	4681      	mov	r9, r0
 8006ec0:	2800      	cmp	r0, #0
 8006ec2:	f43f aef4 	beq.w	8006cae <_strtod_l+0x43e>
 8006ec6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ec8:	691a      	ldr	r2, [r3, #16]
 8006eca:	3202      	adds	r2, #2
 8006ecc:	f103 010c 	add.w	r1, r3, #12
 8006ed0:	0092      	lsls	r2, r2, #2
 8006ed2:	300c      	adds	r0, #12
 8006ed4:	f000 ff38 	bl	8007d48 <memcpy>
 8006ed8:	ec4b ab10 	vmov	d0, sl, fp
 8006edc:	9805      	ldr	r0, [sp, #20]
 8006ede:	aa1c      	add	r2, sp, #112	@ 0x70
 8006ee0:	a91b      	add	r1, sp, #108	@ 0x6c
 8006ee2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006ee6:	f7ff fbd7 	bl	8006698 <__d2b>
 8006eea:	901a      	str	r0, [sp, #104]	@ 0x68
 8006eec:	2800      	cmp	r0, #0
 8006eee:	f43f aede 	beq.w	8006cae <_strtod_l+0x43e>
 8006ef2:	9805      	ldr	r0, [sp, #20]
 8006ef4:	2101      	movs	r1, #1
 8006ef6:	f7ff f929 	bl	800614c <__i2b>
 8006efa:	4680      	mov	r8, r0
 8006efc:	b948      	cbnz	r0, 8006f12 <_strtod_l+0x6a2>
 8006efe:	f04f 0800 	mov.w	r8, #0
 8006f02:	e6d4      	b.n	8006cae <_strtod_l+0x43e>
 8006f04:	f04f 32ff 	mov.w	r2, #4294967295
 8006f08:	fa02 f303 	lsl.w	r3, r2, r3
 8006f0c:	ea03 0a0a 	and.w	sl, r3, sl
 8006f10:	e7b0      	b.n	8006e74 <_strtod_l+0x604>
 8006f12:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006f14:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006f16:	2d00      	cmp	r5, #0
 8006f18:	bfab      	itete	ge
 8006f1a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006f1c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006f1e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006f20:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006f22:	bfac      	ite	ge
 8006f24:	18ef      	addge	r7, r5, r3
 8006f26:	1b5e      	sublt	r6, r3, r5
 8006f28:	9b08      	ldr	r3, [sp, #32]
 8006f2a:	1aed      	subs	r5, r5, r3
 8006f2c:	4415      	add	r5, r2
 8006f2e:	4b66      	ldr	r3, [pc, #408]	@ (80070c8 <_strtod_l+0x858>)
 8006f30:	3d01      	subs	r5, #1
 8006f32:	429d      	cmp	r5, r3
 8006f34:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006f38:	da50      	bge.n	8006fdc <_strtod_l+0x76c>
 8006f3a:	1b5b      	subs	r3, r3, r5
 8006f3c:	2b1f      	cmp	r3, #31
 8006f3e:	eba2 0203 	sub.w	r2, r2, r3
 8006f42:	f04f 0101 	mov.w	r1, #1
 8006f46:	dc3d      	bgt.n	8006fc4 <_strtod_l+0x754>
 8006f48:	fa01 f303 	lsl.w	r3, r1, r3
 8006f4c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006f4e:	2300      	movs	r3, #0
 8006f50:	9310      	str	r3, [sp, #64]	@ 0x40
 8006f52:	18bd      	adds	r5, r7, r2
 8006f54:	9b08      	ldr	r3, [sp, #32]
 8006f56:	42af      	cmp	r7, r5
 8006f58:	4416      	add	r6, r2
 8006f5a:	441e      	add	r6, r3
 8006f5c:	463b      	mov	r3, r7
 8006f5e:	bfa8      	it	ge
 8006f60:	462b      	movge	r3, r5
 8006f62:	42b3      	cmp	r3, r6
 8006f64:	bfa8      	it	ge
 8006f66:	4633      	movge	r3, r6
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	bfc2      	ittt	gt
 8006f6c:	1aed      	subgt	r5, r5, r3
 8006f6e:	1af6      	subgt	r6, r6, r3
 8006f70:	1aff      	subgt	r7, r7, r3
 8006f72:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	dd16      	ble.n	8006fa6 <_strtod_l+0x736>
 8006f78:	4641      	mov	r1, r8
 8006f7a:	9805      	ldr	r0, [sp, #20]
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	f7ff f9a5 	bl	80062cc <__pow5mult>
 8006f82:	4680      	mov	r8, r0
 8006f84:	2800      	cmp	r0, #0
 8006f86:	d0ba      	beq.n	8006efe <_strtod_l+0x68e>
 8006f88:	4601      	mov	r1, r0
 8006f8a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006f8c:	9805      	ldr	r0, [sp, #20]
 8006f8e:	f7ff f8f3 	bl	8006178 <__multiply>
 8006f92:	900e      	str	r0, [sp, #56]	@ 0x38
 8006f94:	2800      	cmp	r0, #0
 8006f96:	f43f ae8a 	beq.w	8006cae <_strtod_l+0x43e>
 8006f9a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006f9c:	9805      	ldr	r0, [sp, #20]
 8006f9e:	f7fe ffd7 	bl	8005f50 <_Bfree>
 8006fa2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006fa4:	931a      	str	r3, [sp, #104]	@ 0x68
 8006fa6:	2d00      	cmp	r5, #0
 8006fa8:	dc1d      	bgt.n	8006fe6 <_strtod_l+0x776>
 8006faa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	dd23      	ble.n	8006ff8 <_strtod_l+0x788>
 8006fb0:	4649      	mov	r1, r9
 8006fb2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006fb4:	9805      	ldr	r0, [sp, #20]
 8006fb6:	f7ff f989 	bl	80062cc <__pow5mult>
 8006fba:	4681      	mov	r9, r0
 8006fbc:	b9e0      	cbnz	r0, 8006ff8 <_strtod_l+0x788>
 8006fbe:	f04f 0900 	mov.w	r9, #0
 8006fc2:	e674      	b.n	8006cae <_strtod_l+0x43e>
 8006fc4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006fc8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006fcc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006fd0:	35e2      	adds	r5, #226	@ 0xe2
 8006fd2:	fa01 f305 	lsl.w	r3, r1, r5
 8006fd6:	9310      	str	r3, [sp, #64]	@ 0x40
 8006fd8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006fda:	e7ba      	b.n	8006f52 <_strtod_l+0x6e2>
 8006fdc:	2300      	movs	r3, #0
 8006fde:	9310      	str	r3, [sp, #64]	@ 0x40
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006fe4:	e7b5      	b.n	8006f52 <_strtod_l+0x6e2>
 8006fe6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006fe8:	9805      	ldr	r0, [sp, #20]
 8006fea:	462a      	mov	r2, r5
 8006fec:	f7ff f9c8 	bl	8006380 <__lshift>
 8006ff0:	901a      	str	r0, [sp, #104]	@ 0x68
 8006ff2:	2800      	cmp	r0, #0
 8006ff4:	d1d9      	bne.n	8006faa <_strtod_l+0x73a>
 8006ff6:	e65a      	b.n	8006cae <_strtod_l+0x43e>
 8006ff8:	2e00      	cmp	r6, #0
 8006ffa:	dd07      	ble.n	800700c <_strtod_l+0x79c>
 8006ffc:	4649      	mov	r1, r9
 8006ffe:	9805      	ldr	r0, [sp, #20]
 8007000:	4632      	mov	r2, r6
 8007002:	f7ff f9bd 	bl	8006380 <__lshift>
 8007006:	4681      	mov	r9, r0
 8007008:	2800      	cmp	r0, #0
 800700a:	d0d8      	beq.n	8006fbe <_strtod_l+0x74e>
 800700c:	2f00      	cmp	r7, #0
 800700e:	dd08      	ble.n	8007022 <_strtod_l+0x7b2>
 8007010:	4641      	mov	r1, r8
 8007012:	9805      	ldr	r0, [sp, #20]
 8007014:	463a      	mov	r2, r7
 8007016:	f7ff f9b3 	bl	8006380 <__lshift>
 800701a:	4680      	mov	r8, r0
 800701c:	2800      	cmp	r0, #0
 800701e:	f43f ae46 	beq.w	8006cae <_strtod_l+0x43e>
 8007022:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007024:	9805      	ldr	r0, [sp, #20]
 8007026:	464a      	mov	r2, r9
 8007028:	f7ff fa32 	bl	8006490 <__mdiff>
 800702c:	4604      	mov	r4, r0
 800702e:	2800      	cmp	r0, #0
 8007030:	f43f ae3d 	beq.w	8006cae <_strtod_l+0x43e>
 8007034:	68c3      	ldr	r3, [r0, #12]
 8007036:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007038:	2300      	movs	r3, #0
 800703a:	60c3      	str	r3, [r0, #12]
 800703c:	4641      	mov	r1, r8
 800703e:	f7ff fa0b 	bl	8006458 <__mcmp>
 8007042:	2800      	cmp	r0, #0
 8007044:	da46      	bge.n	80070d4 <_strtod_l+0x864>
 8007046:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007048:	ea53 030a 	orrs.w	r3, r3, sl
 800704c:	d16c      	bne.n	8007128 <_strtod_l+0x8b8>
 800704e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007052:	2b00      	cmp	r3, #0
 8007054:	d168      	bne.n	8007128 <_strtod_l+0x8b8>
 8007056:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800705a:	0d1b      	lsrs	r3, r3, #20
 800705c:	051b      	lsls	r3, r3, #20
 800705e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007062:	d961      	bls.n	8007128 <_strtod_l+0x8b8>
 8007064:	6963      	ldr	r3, [r4, #20]
 8007066:	b913      	cbnz	r3, 800706e <_strtod_l+0x7fe>
 8007068:	6923      	ldr	r3, [r4, #16]
 800706a:	2b01      	cmp	r3, #1
 800706c:	dd5c      	ble.n	8007128 <_strtod_l+0x8b8>
 800706e:	4621      	mov	r1, r4
 8007070:	2201      	movs	r2, #1
 8007072:	9805      	ldr	r0, [sp, #20]
 8007074:	f7ff f984 	bl	8006380 <__lshift>
 8007078:	4641      	mov	r1, r8
 800707a:	4604      	mov	r4, r0
 800707c:	f7ff f9ec 	bl	8006458 <__mcmp>
 8007080:	2800      	cmp	r0, #0
 8007082:	dd51      	ble.n	8007128 <_strtod_l+0x8b8>
 8007084:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007088:	9a08      	ldr	r2, [sp, #32]
 800708a:	0d1b      	lsrs	r3, r3, #20
 800708c:	051b      	lsls	r3, r3, #20
 800708e:	2a00      	cmp	r2, #0
 8007090:	d06b      	beq.n	800716a <_strtod_l+0x8fa>
 8007092:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007096:	d868      	bhi.n	800716a <_strtod_l+0x8fa>
 8007098:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800709c:	f67f ae9d 	bls.w	8006dda <_strtod_l+0x56a>
 80070a0:	4b0a      	ldr	r3, [pc, #40]	@ (80070cc <_strtod_l+0x85c>)
 80070a2:	4650      	mov	r0, sl
 80070a4:	4659      	mov	r1, fp
 80070a6:	2200      	movs	r2, #0
 80070a8:	f7f9 faa6 	bl	80005f8 <__aeabi_dmul>
 80070ac:	4b08      	ldr	r3, [pc, #32]	@ (80070d0 <_strtod_l+0x860>)
 80070ae:	400b      	ands	r3, r1
 80070b0:	4682      	mov	sl, r0
 80070b2:	468b      	mov	fp, r1
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f47f ae05 	bne.w	8006cc4 <_strtod_l+0x454>
 80070ba:	9a05      	ldr	r2, [sp, #20]
 80070bc:	2322      	movs	r3, #34	@ 0x22
 80070be:	6013      	str	r3, [r2, #0]
 80070c0:	e600      	b.n	8006cc4 <_strtod_l+0x454>
 80070c2:	bf00      	nop
 80070c4:	080088c8 	.word	0x080088c8
 80070c8:	fffffc02 	.word	0xfffffc02
 80070cc:	39500000 	.word	0x39500000
 80070d0:	7ff00000 	.word	0x7ff00000
 80070d4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80070d8:	d165      	bne.n	80071a6 <_strtod_l+0x936>
 80070da:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80070dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80070e0:	b35a      	cbz	r2, 800713a <_strtod_l+0x8ca>
 80070e2:	4a9f      	ldr	r2, [pc, #636]	@ (8007360 <_strtod_l+0xaf0>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d12b      	bne.n	8007140 <_strtod_l+0x8d0>
 80070e8:	9b08      	ldr	r3, [sp, #32]
 80070ea:	4651      	mov	r1, sl
 80070ec:	b303      	cbz	r3, 8007130 <_strtod_l+0x8c0>
 80070ee:	4b9d      	ldr	r3, [pc, #628]	@ (8007364 <_strtod_l+0xaf4>)
 80070f0:	465a      	mov	r2, fp
 80070f2:	4013      	ands	r3, r2
 80070f4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80070f8:	f04f 32ff 	mov.w	r2, #4294967295
 80070fc:	d81b      	bhi.n	8007136 <_strtod_l+0x8c6>
 80070fe:	0d1b      	lsrs	r3, r3, #20
 8007100:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007104:	fa02 f303 	lsl.w	r3, r2, r3
 8007108:	4299      	cmp	r1, r3
 800710a:	d119      	bne.n	8007140 <_strtod_l+0x8d0>
 800710c:	4b96      	ldr	r3, [pc, #600]	@ (8007368 <_strtod_l+0xaf8>)
 800710e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007110:	429a      	cmp	r2, r3
 8007112:	d102      	bne.n	800711a <_strtod_l+0x8aa>
 8007114:	3101      	adds	r1, #1
 8007116:	f43f adca 	beq.w	8006cae <_strtod_l+0x43e>
 800711a:	4b92      	ldr	r3, [pc, #584]	@ (8007364 <_strtod_l+0xaf4>)
 800711c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800711e:	401a      	ands	r2, r3
 8007120:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007124:	f04f 0a00 	mov.w	sl, #0
 8007128:	9b08      	ldr	r3, [sp, #32]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d1b8      	bne.n	80070a0 <_strtod_l+0x830>
 800712e:	e5c9      	b.n	8006cc4 <_strtod_l+0x454>
 8007130:	f04f 33ff 	mov.w	r3, #4294967295
 8007134:	e7e8      	b.n	8007108 <_strtod_l+0x898>
 8007136:	4613      	mov	r3, r2
 8007138:	e7e6      	b.n	8007108 <_strtod_l+0x898>
 800713a:	ea53 030a 	orrs.w	r3, r3, sl
 800713e:	d0a1      	beq.n	8007084 <_strtod_l+0x814>
 8007140:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007142:	b1db      	cbz	r3, 800717c <_strtod_l+0x90c>
 8007144:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007146:	4213      	tst	r3, r2
 8007148:	d0ee      	beq.n	8007128 <_strtod_l+0x8b8>
 800714a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800714c:	9a08      	ldr	r2, [sp, #32]
 800714e:	4650      	mov	r0, sl
 8007150:	4659      	mov	r1, fp
 8007152:	b1bb      	cbz	r3, 8007184 <_strtod_l+0x914>
 8007154:	f7ff fb6e 	bl	8006834 <sulp>
 8007158:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800715c:	ec53 2b10 	vmov	r2, r3, d0
 8007160:	f7f9 f894 	bl	800028c <__adddf3>
 8007164:	4682      	mov	sl, r0
 8007166:	468b      	mov	fp, r1
 8007168:	e7de      	b.n	8007128 <_strtod_l+0x8b8>
 800716a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800716e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007172:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007176:	f04f 3aff 	mov.w	sl, #4294967295
 800717a:	e7d5      	b.n	8007128 <_strtod_l+0x8b8>
 800717c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800717e:	ea13 0f0a 	tst.w	r3, sl
 8007182:	e7e1      	b.n	8007148 <_strtod_l+0x8d8>
 8007184:	f7ff fb56 	bl	8006834 <sulp>
 8007188:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800718c:	ec53 2b10 	vmov	r2, r3, d0
 8007190:	f7f9 f87a 	bl	8000288 <__aeabi_dsub>
 8007194:	2200      	movs	r2, #0
 8007196:	2300      	movs	r3, #0
 8007198:	4682      	mov	sl, r0
 800719a:	468b      	mov	fp, r1
 800719c:	f7f9 fc94 	bl	8000ac8 <__aeabi_dcmpeq>
 80071a0:	2800      	cmp	r0, #0
 80071a2:	d0c1      	beq.n	8007128 <_strtod_l+0x8b8>
 80071a4:	e619      	b.n	8006dda <_strtod_l+0x56a>
 80071a6:	4641      	mov	r1, r8
 80071a8:	4620      	mov	r0, r4
 80071aa:	f7ff facd 	bl	8006748 <__ratio>
 80071ae:	ec57 6b10 	vmov	r6, r7, d0
 80071b2:	2200      	movs	r2, #0
 80071b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80071b8:	4630      	mov	r0, r6
 80071ba:	4639      	mov	r1, r7
 80071bc:	f7f9 fc98 	bl	8000af0 <__aeabi_dcmple>
 80071c0:	2800      	cmp	r0, #0
 80071c2:	d06f      	beq.n	80072a4 <_strtod_l+0xa34>
 80071c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d17a      	bne.n	80072c0 <_strtod_l+0xa50>
 80071ca:	f1ba 0f00 	cmp.w	sl, #0
 80071ce:	d158      	bne.n	8007282 <_strtod_l+0xa12>
 80071d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80071d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d15a      	bne.n	8007290 <_strtod_l+0xa20>
 80071da:	4b64      	ldr	r3, [pc, #400]	@ (800736c <_strtod_l+0xafc>)
 80071dc:	2200      	movs	r2, #0
 80071de:	4630      	mov	r0, r6
 80071e0:	4639      	mov	r1, r7
 80071e2:	f7f9 fc7b 	bl	8000adc <__aeabi_dcmplt>
 80071e6:	2800      	cmp	r0, #0
 80071e8:	d159      	bne.n	800729e <_strtod_l+0xa2e>
 80071ea:	4630      	mov	r0, r6
 80071ec:	4639      	mov	r1, r7
 80071ee:	4b60      	ldr	r3, [pc, #384]	@ (8007370 <_strtod_l+0xb00>)
 80071f0:	2200      	movs	r2, #0
 80071f2:	f7f9 fa01 	bl	80005f8 <__aeabi_dmul>
 80071f6:	4606      	mov	r6, r0
 80071f8:	460f      	mov	r7, r1
 80071fa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80071fe:	9606      	str	r6, [sp, #24]
 8007200:	9307      	str	r3, [sp, #28]
 8007202:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007206:	4d57      	ldr	r5, [pc, #348]	@ (8007364 <_strtod_l+0xaf4>)
 8007208:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800720c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800720e:	401d      	ands	r5, r3
 8007210:	4b58      	ldr	r3, [pc, #352]	@ (8007374 <_strtod_l+0xb04>)
 8007212:	429d      	cmp	r5, r3
 8007214:	f040 80b2 	bne.w	800737c <_strtod_l+0xb0c>
 8007218:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800721a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800721e:	ec4b ab10 	vmov	d0, sl, fp
 8007222:	f7ff f9c9 	bl	80065b8 <__ulp>
 8007226:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800722a:	ec51 0b10 	vmov	r0, r1, d0
 800722e:	f7f9 f9e3 	bl	80005f8 <__aeabi_dmul>
 8007232:	4652      	mov	r2, sl
 8007234:	465b      	mov	r3, fp
 8007236:	f7f9 f829 	bl	800028c <__adddf3>
 800723a:	460b      	mov	r3, r1
 800723c:	4949      	ldr	r1, [pc, #292]	@ (8007364 <_strtod_l+0xaf4>)
 800723e:	4a4e      	ldr	r2, [pc, #312]	@ (8007378 <_strtod_l+0xb08>)
 8007240:	4019      	ands	r1, r3
 8007242:	4291      	cmp	r1, r2
 8007244:	4682      	mov	sl, r0
 8007246:	d942      	bls.n	80072ce <_strtod_l+0xa5e>
 8007248:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800724a:	4b47      	ldr	r3, [pc, #284]	@ (8007368 <_strtod_l+0xaf8>)
 800724c:	429a      	cmp	r2, r3
 800724e:	d103      	bne.n	8007258 <_strtod_l+0x9e8>
 8007250:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007252:	3301      	adds	r3, #1
 8007254:	f43f ad2b 	beq.w	8006cae <_strtod_l+0x43e>
 8007258:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007368 <_strtod_l+0xaf8>
 800725c:	f04f 3aff 	mov.w	sl, #4294967295
 8007260:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007262:	9805      	ldr	r0, [sp, #20]
 8007264:	f7fe fe74 	bl	8005f50 <_Bfree>
 8007268:	9805      	ldr	r0, [sp, #20]
 800726a:	4649      	mov	r1, r9
 800726c:	f7fe fe70 	bl	8005f50 <_Bfree>
 8007270:	9805      	ldr	r0, [sp, #20]
 8007272:	4641      	mov	r1, r8
 8007274:	f7fe fe6c 	bl	8005f50 <_Bfree>
 8007278:	9805      	ldr	r0, [sp, #20]
 800727a:	4621      	mov	r1, r4
 800727c:	f7fe fe68 	bl	8005f50 <_Bfree>
 8007280:	e618      	b.n	8006eb4 <_strtod_l+0x644>
 8007282:	f1ba 0f01 	cmp.w	sl, #1
 8007286:	d103      	bne.n	8007290 <_strtod_l+0xa20>
 8007288:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800728a:	2b00      	cmp	r3, #0
 800728c:	f43f ada5 	beq.w	8006dda <_strtod_l+0x56a>
 8007290:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007340 <_strtod_l+0xad0>
 8007294:	4f35      	ldr	r7, [pc, #212]	@ (800736c <_strtod_l+0xafc>)
 8007296:	ed8d 7b06 	vstr	d7, [sp, #24]
 800729a:	2600      	movs	r6, #0
 800729c:	e7b1      	b.n	8007202 <_strtod_l+0x992>
 800729e:	4f34      	ldr	r7, [pc, #208]	@ (8007370 <_strtod_l+0xb00>)
 80072a0:	2600      	movs	r6, #0
 80072a2:	e7aa      	b.n	80071fa <_strtod_l+0x98a>
 80072a4:	4b32      	ldr	r3, [pc, #200]	@ (8007370 <_strtod_l+0xb00>)
 80072a6:	4630      	mov	r0, r6
 80072a8:	4639      	mov	r1, r7
 80072aa:	2200      	movs	r2, #0
 80072ac:	f7f9 f9a4 	bl	80005f8 <__aeabi_dmul>
 80072b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072b2:	4606      	mov	r6, r0
 80072b4:	460f      	mov	r7, r1
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d09f      	beq.n	80071fa <_strtod_l+0x98a>
 80072ba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80072be:	e7a0      	b.n	8007202 <_strtod_l+0x992>
 80072c0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007348 <_strtod_l+0xad8>
 80072c4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80072c8:	ec57 6b17 	vmov	r6, r7, d7
 80072cc:	e799      	b.n	8007202 <_strtod_l+0x992>
 80072ce:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80072d2:	9b08      	ldr	r3, [sp, #32]
 80072d4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d1c1      	bne.n	8007260 <_strtod_l+0x9f0>
 80072dc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80072e0:	0d1b      	lsrs	r3, r3, #20
 80072e2:	051b      	lsls	r3, r3, #20
 80072e4:	429d      	cmp	r5, r3
 80072e6:	d1bb      	bne.n	8007260 <_strtod_l+0x9f0>
 80072e8:	4630      	mov	r0, r6
 80072ea:	4639      	mov	r1, r7
 80072ec:	f7f9 fce4 	bl	8000cb8 <__aeabi_d2lz>
 80072f0:	f7f9 f954 	bl	800059c <__aeabi_l2d>
 80072f4:	4602      	mov	r2, r0
 80072f6:	460b      	mov	r3, r1
 80072f8:	4630      	mov	r0, r6
 80072fa:	4639      	mov	r1, r7
 80072fc:	f7f8 ffc4 	bl	8000288 <__aeabi_dsub>
 8007300:	460b      	mov	r3, r1
 8007302:	4602      	mov	r2, r0
 8007304:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007308:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800730c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800730e:	ea46 060a 	orr.w	r6, r6, sl
 8007312:	431e      	orrs	r6, r3
 8007314:	d06f      	beq.n	80073f6 <_strtod_l+0xb86>
 8007316:	a30e      	add	r3, pc, #56	@ (adr r3, 8007350 <_strtod_l+0xae0>)
 8007318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731c:	f7f9 fbde 	bl	8000adc <__aeabi_dcmplt>
 8007320:	2800      	cmp	r0, #0
 8007322:	f47f accf 	bne.w	8006cc4 <_strtod_l+0x454>
 8007326:	a30c      	add	r3, pc, #48	@ (adr r3, 8007358 <_strtod_l+0xae8>)
 8007328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800732c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007330:	f7f9 fbf2 	bl	8000b18 <__aeabi_dcmpgt>
 8007334:	2800      	cmp	r0, #0
 8007336:	d093      	beq.n	8007260 <_strtod_l+0x9f0>
 8007338:	e4c4      	b.n	8006cc4 <_strtod_l+0x454>
 800733a:	bf00      	nop
 800733c:	f3af 8000 	nop.w
 8007340:	00000000 	.word	0x00000000
 8007344:	bff00000 	.word	0xbff00000
 8007348:	00000000 	.word	0x00000000
 800734c:	3ff00000 	.word	0x3ff00000
 8007350:	94a03595 	.word	0x94a03595
 8007354:	3fdfffff 	.word	0x3fdfffff
 8007358:	35afe535 	.word	0x35afe535
 800735c:	3fe00000 	.word	0x3fe00000
 8007360:	000fffff 	.word	0x000fffff
 8007364:	7ff00000 	.word	0x7ff00000
 8007368:	7fefffff 	.word	0x7fefffff
 800736c:	3ff00000 	.word	0x3ff00000
 8007370:	3fe00000 	.word	0x3fe00000
 8007374:	7fe00000 	.word	0x7fe00000
 8007378:	7c9fffff 	.word	0x7c9fffff
 800737c:	9b08      	ldr	r3, [sp, #32]
 800737e:	b323      	cbz	r3, 80073ca <_strtod_l+0xb5a>
 8007380:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007384:	d821      	bhi.n	80073ca <_strtod_l+0xb5a>
 8007386:	a328      	add	r3, pc, #160	@ (adr r3, 8007428 <_strtod_l+0xbb8>)
 8007388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738c:	4630      	mov	r0, r6
 800738e:	4639      	mov	r1, r7
 8007390:	f7f9 fbae 	bl	8000af0 <__aeabi_dcmple>
 8007394:	b1a0      	cbz	r0, 80073c0 <_strtod_l+0xb50>
 8007396:	4639      	mov	r1, r7
 8007398:	4630      	mov	r0, r6
 800739a:	f7f9 fc05 	bl	8000ba8 <__aeabi_d2uiz>
 800739e:	2801      	cmp	r0, #1
 80073a0:	bf38      	it	cc
 80073a2:	2001      	movcc	r0, #1
 80073a4:	f7f9 f8ae 	bl	8000504 <__aeabi_ui2d>
 80073a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073aa:	4606      	mov	r6, r0
 80073ac:	460f      	mov	r7, r1
 80073ae:	b9fb      	cbnz	r3, 80073f0 <_strtod_l+0xb80>
 80073b0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80073b4:	9014      	str	r0, [sp, #80]	@ 0x50
 80073b6:	9315      	str	r3, [sp, #84]	@ 0x54
 80073b8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80073bc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80073c0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80073c2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80073c6:	1b5b      	subs	r3, r3, r5
 80073c8:	9311      	str	r3, [sp, #68]	@ 0x44
 80073ca:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80073ce:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80073d2:	f7ff f8f1 	bl	80065b8 <__ulp>
 80073d6:	4650      	mov	r0, sl
 80073d8:	ec53 2b10 	vmov	r2, r3, d0
 80073dc:	4659      	mov	r1, fp
 80073de:	f7f9 f90b 	bl	80005f8 <__aeabi_dmul>
 80073e2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80073e6:	f7f8 ff51 	bl	800028c <__adddf3>
 80073ea:	4682      	mov	sl, r0
 80073ec:	468b      	mov	fp, r1
 80073ee:	e770      	b.n	80072d2 <_strtod_l+0xa62>
 80073f0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80073f4:	e7e0      	b.n	80073b8 <_strtod_l+0xb48>
 80073f6:	a30e      	add	r3, pc, #56	@ (adr r3, 8007430 <_strtod_l+0xbc0>)
 80073f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fc:	f7f9 fb6e 	bl	8000adc <__aeabi_dcmplt>
 8007400:	e798      	b.n	8007334 <_strtod_l+0xac4>
 8007402:	2300      	movs	r3, #0
 8007404:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007406:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007408:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800740a:	6013      	str	r3, [r2, #0]
 800740c:	f7ff ba6d 	b.w	80068ea <_strtod_l+0x7a>
 8007410:	2a65      	cmp	r2, #101	@ 0x65
 8007412:	f43f ab66 	beq.w	8006ae2 <_strtod_l+0x272>
 8007416:	2a45      	cmp	r2, #69	@ 0x45
 8007418:	f43f ab63 	beq.w	8006ae2 <_strtod_l+0x272>
 800741c:	2301      	movs	r3, #1
 800741e:	f7ff bb9e 	b.w	8006b5e <_strtod_l+0x2ee>
 8007422:	bf00      	nop
 8007424:	f3af 8000 	nop.w
 8007428:	ffc00000 	.word	0xffc00000
 800742c:	41dfffff 	.word	0x41dfffff
 8007430:	94a03595 	.word	0x94a03595
 8007434:	3fcfffff 	.word	0x3fcfffff

08007438 <_strtod_r>:
 8007438:	4b01      	ldr	r3, [pc, #4]	@ (8007440 <_strtod_r+0x8>)
 800743a:	f7ff ba19 	b.w	8006870 <_strtod_l>
 800743e:	bf00      	nop
 8007440:	20000080 	.word	0x20000080

08007444 <_strtol_l.constprop.0>:
 8007444:	2b24      	cmp	r3, #36	@ 0x24
 8007446:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800744a:	4686      	mov	lr, r0
 800744c:	4690      	mov	r8, r2
 800744e:	d801      	bhi.n	8007454 <_strtol_l.constprop.0+0x10>
 8007450:	2b01      	cmp	r3, #1
 8007452:	d106      	bne.n	8007462 <_strtol_l.constprop.0+0x1e>
 8007454:	f7fd fdbc 	bl	8004fd0 <__errno>
 8007458:	2316      	movs	r3, #22
 800745a:	6003      	str	r3, [r0, #0]
 800745c:	2000      	movs	r0, #0
 800745e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007462:	4834      	ldr	r0, [pc, #208]	@ (8007534 <_strtol_l.constprop.0+0xf0>)
 8007464:	460d      	mov	r5, r1
 8007466:	462a      	mov	r2, r5
 8007468:	f815 4b01 	ldrb.w	r4, [r5], #1
 800746c:	5d06      	ldrb	r6, [r0, r4]
 800746e:	f016 0608 	ands.w	r6, r6, #8
 8007472:	d1f8      	bne.n	8007466 <_strtol_l.constprop.0+0x22>
 8007474:	2c2d      	cmp	r4, #45	@ 0x2d
 8007476:	d12d      	bne.n	80074d4 <_strtol_l.constprop.0+0x90>
 8007478:	782c      	ldrb	r4, [r5, #0]
 800747a:	2601      	movs	r6, #1
 800747c:	1c95      	adds	r5, r2, #2
 800747e:	f033 0210 	bics.w	r2, r3, #16
 8007482:	d109      	bne.n	8007498 <_strtol_l.constprop.0+0x54>
 8007484:	2c30      	cmp	r4, #48	@ 0x30
 8007486:	d12a      	bne.n	80074de <_strtol_l.constprop.0+0x9a>
 8007488:	782a      	ldrb	r2, [r5, #0]
 800748a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800748e:	2a58      	cmp	r2, #88	@ 0x58
 8007490:	d125      	bne.n	80074de <_strtol_l.constprop.0+0x9a>
 8007492:	786c      	ldrb	r4, [r5, #1]
 8007494:	2310      	movs	r3, #16
 8007496:	3502      	adds	r5, #2
 8007498:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800749c:	f10c 3cff 	add.w	ip, ip, #4294967295
 80074a0:	2200      	movs	r2, #0
 80074a2:	fbbc f9f3 	udiv	r9, ip, r3
 80074a6:	4610      	mov	r0, r2
 80074a8:	fb03 ca19 	mls	sl, r3, r9, ip
 80074ac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80074b0:	2f09      	cmp	r7, #9
 80074b2:	d81b      	bhi.n	80074ec <_strtol_l.constprop.0+0xa8>
 80074b4:	463c      	mov	r4, r7
 80074b6:	42a3      	cmp	r3, r4
 80074b8:	dd27      	ble.n	800750a <_strtol_l.constprop.0+0xc6>
 80074ba:	1c57      	adds	r7, r2, #1
 80074bc:	d007      	beq.n	80074ce <_strtol_l.constprop.0+0x8a>
 80074be:	4581      	cmp	r9, r0
 80074c0:	d320      	bcc.n	8007504 <_strtol_l.constprop.0+0xc0>
 80074c2:	d101      	bne.n	80074c8 <_strtol_l.constprop.0+0x84>
 80074c4:	45a2      	cmp	sl, r4
 80074c6:	db1d      	blt.n	8007504 <_strtol_l.constprop.0+0xc0>
 80074c8:	fb00 4003 	mla	r0, r0, r3, r4
 80074cc:	2201      	movs	r2, #1
 80074ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80074d2:	e7eb      	b.n	80074ac <_strtol_l.constprop.0+0x68>
 80074d4:	2c2b      	cmp	r4, #43	@ 0x2b
 80074d6:	bf04      	itt	eq
 80074d8:	782c      	ldrbeq	r4, [r5, #0]
 80074da:	1c95      	addeq	r5, r2, #2
 80074dc:	e7cf      	b.n	800747e <_strtol_l.constprop.0+0x3a>
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d1da      	bne.n	8007498 <_strtol_l.constprop.0+0x54>
 80074e2:	2c30      	cmp	r4, #48	@ 0x30
 80074e4:	bf0c      	ite	eq
 80074e6:	2308      	moveq	r3, #8
 80074e8:	230a      	movne	r3, #10
 80074ea:	e7d5      	b.n	8007498 <_strtol_l.constprop.0+0x54>
 80074ec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80074f0:	2f19      	cmp	r7, #25
 80074f2:	d801      	bhi.n	80074f8 <_strtol_l.constprop.0+0xb4>
 80074f4:	3c37      	subs	r4, #55	@ 0x37
 80074f6:	e7de      	b.n	80074b6 <_strtol_l.constprop.0+0x72>
 80074f8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80074fc:	2f19      	cmp	r7, #25
 80074fe:	d804      	bhi.n	800750a <_strtol_l.constprop.0+0xc6>
 8007500:	3c57      	subs	r4, #87	@ 0x57
 8007502:	e7d8      	b.n	80074b6 <_strtol_l.constprop.0+0x72>
 8007504:	f04f 32ff 	mov.w	r2, #4294967295
 8007508:	e7e1      	b.n	80074ce <_strtol_l.constprop.0+0x8a>
 800750a:	1c53      	adds	r3, r2, #1
 800750c:	d108      	bne.n	8007520 <_strtol_l.constprop.0+0xdc>
 800750e:	2322      	movs	r3, #34	@ 0x22
 8007510:	f8ce 3000 	str.w	r3, [lr]
 8007514:	4660      	mov	r0, ip
 8007516:	f1b8 0f00 	cmp.w	r8, #0
 800751a:	d0a0      	beq.n	800745e <_strtol_l.constprop.0+0x1a>
 800751c:	1e69      	subs	r1, r5, #1
 800751e:	e006      	b.n	800752e <_strtol_l.constprop.0+0xea>
 8007520:	b106      	cbz	r6, 8007524 <_strtol_l.constprop.0+0xe0>
 8007522:	4240      	negs	r0, r0
 8007524:	f1b8 0f00 	cmp.w	r8, #0
 8007528:	d099      	beq.n	800745e <_strtol_l.constprop.0+0x1a>
 800752a:	2a00      	cmp	r2, #0
 800752c:	d1f6      	bne.n	800751c <_strtol_l.constprop.0+0xd8>
 800752e:	f8c8 1000 	str.w	r1, [r8]
 8007532:	e794      	b.n	800745e <_strtol_l.constprop.0+0x1a>
 8007534:	080088f1 	.word	0x080088f1

08007538 <_strtol_r>:
 8007538:	f7ff bf84 	b.w	8007444 <_strtol_l.constprop.0>

0800753c <__ssputs_r>:
 800753c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007540:	688e      	ldr	r6, [r1, #8]
 8007542:	461f      	mov	r7, r3
 8007544:	42be      	cmp	r6, r7
 8007546:	680b      	ldr	r3, [r1, #0]
 8007548:	4682      	mov	sl, r0
 800754a:	460c      	mov	r4, r1
 800754c:	4690      	mov	r8, r2
 800754e:	d82d      	bhi.n	80075ac <__ssputs_r+0x70>
 8007550:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007554:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007558:	d026      	beq.n	80075a8 <__ssputs_r+0x6c>
 800755a:	6965      	ldr	r5, [r4, #20]
 800755c:	6909      	ldr	r1, [r1, #16]
 800755e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007562:	eba3 0901 	sub.w	r9, r3, r1
 8007566:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800756a:	1c7b      	adds	r3, r7, #1
 800756c:	444b      	add	r3, r9
 800756e:	106d      	asrs	r5, r5, #1
 8007570:	429d      	cmp	r5, r3
 8007572:	bf38      	it	cc
 8007574:	461d      	movcc	r5, r3
 8007576:	0553      	lsls	r3, r2, #21
 8007578:	d527      	bpl.n	80075ca <__ssputs_r+0x8e>
 800757a:	4629      	mov	r1, r5
 800757c:	f7fe fc1c 	bl	8005db8 <_malloc_r>
 8007580:	4606      	mov	r6, r0
 8007582:	b360      	cbz	r0, 80075de <__ssputs_r+0xa2>
 8007584:	6921      	ldr	r1, [r4, #16]
 8007586:	464a      	mov	r2, r9
 8007588:	f000 fbde 	bl	8007d48 <memcpy>
 800758c:	89a3      	ldrh	r3, [r4, #12]
 800758e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007592:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007596:	81a3      	strh	r3, [r4, #12]
 8007598:	6126      	str	r6, [r4, #16]
 800759a:	6165      	str	r5, [r4, #20]
 800759c:	444e      	add	r6, r9
 800759e:	eba5 0509 	sub.w	r5, r5, r9
 80075a2:	6026      	str	r6, [r4, #0]
 80075a4:	60a5      	str	r5, [r4, #8]
 80075a6:	463e      	mov	r6, r7
 80075a8:	42be      	cmp	r6, r7
 80075aa:	d900      	bls.n	80075ae <__ssputs_r+0x72>
 80075ac:	463e      	mov	r6, r7
 80075ae:	6820      	ldr	r0, [r4, #0]
 80075b0:	4632      	mov	r2, r6
 80075b2:	4641      	mov	r1, r8
 80075b4:	f000 fb6a 	bl	8007c8c <memmove>
 80075b8:	68a3      	ldr	r3, [r4, #8]
 80075ba:	1b9b      	subs	r3, r3, r6
 80075bc:	60a3      	str	r3, [r4, #8]
 80075be:	6823      	ldr	r3, [r4, #0]
 80075c0:	4433      	add	r3, r6
 80075c2:	6023      	str	r3, [r4, #0]
 80075c4:	2000      	movs	r0, #0
 80075c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075ca:	462a      	mov	r2, r5
 80075cc:	f000 ff51 	bl	8008472 <_realloc_r>
 80075d0:	4606      	mov	r6, r0
 80075d2:	2800      	cmp	r0, #0
 80075d4:	d1e0      	bne.n	8007598 <__ssputs_r+0x5c>
 80075d6:	6921      	ldr	r1, [r4, #16]
 80075d8:	4650      	mov	r0, sl
 80075da:	f7fe fb79 	bl	8005cd0 <_free_r>
 80075de:	230c      	movs	r3, #12
 80075e0:	f8ca 3000 	str.w	r3, [sl]
 80075e4:	89a3      	ldrh	r3, [r4, #12]
 80075e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075ea:	81a3      	strh	r3, [r4, #12]
 80075ec:	f04f 30ff 	mov.w	r0, #4294967295
 80075f0:	e7e9      	b.n	80075c6 <__ssputs_r+0x8a>
	...

080075f4 <_svfiprintf_r>:
 80075f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075f8:	4698      	mov	r8, r3
 80075fa:	898b      	ldrh	r3, [r1, #12]
 80075fc:	061b      	lsls	r3, r3, #24
 80075fe:	b09d      	sub	sp, #116	@ 0x74
 8007600:	4607      	mov	r7, r0
 8007602:	460d      	mov	r5, r1
 8007604:	4614      	mov	r4, r2
 8007606:	d510      	bpl.n	800762a <_svfiprintf_r+0x36>
 8007608:	690b      	ldr	r3, [r1, #16]
 800760a:	b973      	cbnz	r3, 800762a <_svfiprintf_r+0x36>
 800760c:	2140      	movs	r1, #64	@ 0x40
 800760e:	f7fe fbd3 	bl	8005db8 <_malloc_r>
 8007612:	6028      	str	r0, [r5, #0]
 8007614:	6128      	str	r0, [r5, #16]
 8007616:	b930      	cbnz	r0, 8007626 <_svfiprintf_r+0x32>
 8007618:	230c      	movs	r3, #12
 800761a:	603b      	str	r3, [r7, #0]
 800761c:	f04f 30ff 	mov.w	r0, #4294967295
 8007620:	b01d      	add	sp, #116	@ 0x74
 8007622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007626:	2340      	movs	r3, #64	@ 0x40
 8007628:	616b      	str	r3, [r5, #20]
 800762a:	2300      	movs	r3, #0
 800762c:	9309      	str	r3, [sp, #36]	@ 0x24
 800762e:	2320      	movs	r3, #32
 8007630:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007634:	f8cd 800c 	str.w	r8, [sp, #12]
 8007638:	2330      	movs	r3, #48	@ 0x30
 800763a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80077d8 <_svfiprintf_r+0x1e4>
 800763e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007642:	f04f 0901 	mov.w	r9, #1
 8007646:	4623      	mov	r3, r4
 8007648:	469a      	mov	sl, r3
 800764a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800764e:	b10a      	cbz	r2, 8007654 <_svfiprintf_r+0x60>
 8007650:	2a25      	cmp	r2, #37	@ 0x25
 8007652:	d1f9      	bne.n	8007648 <_svfiprintf_r+0x54>
 8007654:	ebba 0b04 	subs.w	fp, sl, r4
 8007658:	d00b      	beq.n	8007672 <_svfiprintf_r+0x7e>
 800765a:	465b      	mov	r3, fp
 800765c:	4622      	mov	r2, r4
 800765e:	4629      	mov	r1, r5
 8007660:	4638      	mov	r0, r7
 8007662:	f7ff ff6b 	bl	800753c <__ssputs_r>
 8007666:	3001      	adds	r0, #1
 8007668:	f000 80a7 	beq.w	80077ba <_svfiprintf_r+0x1c6>
 800766c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800766e:	445a      	add	r2, fp
 8007670:	9209      	str	r2, [sp, #36]	@ 0x24
 8007672:	f89a 3000 	ldrb.w	r3, [sl]
 8007676:	2b00      	cmp	r3, #0
 8007678:	f000 809f 	beq.w	80077ba <_svfiprintf_r+0x1c6>
 800767c:	2300      	movs	r3, #0
 800767e:	f04f 32ff 	mov.w	r2, #4294967295
 8007682:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007686:	f10a 0a01 	add.w	sl, sl, #1
 800768a:	9304      	str	r3, [sp, #16]
 800768c:	9307      	str	r3, [sp, #28]
 800768e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007692:	931a      	str	r3, [sp, #104]	@ 0x68
 8007694:	4654      	mov	r4, sl
 8007696:	2205      	movs	r2, #5
 8007698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800769c:	484e      	ldr	r0, [pc, #312]	@ (80077d8 <_svfiprintf_r+0x1e4>)
 800769e:	f7f8 fd97 	bl	80001d0 <memchr>
 80076a2:	9a04      	ldr	r2, [sp, #16]
 80076a4:	b9d8      	cbnz	r0, 80076de <_svfiprintf_r+0xea>
 80076a6:	06d0      	lsls	r0, r2, #27
 80076a8:	bf44      	itt	mi
 80076aa:	2320      	movmi	r3, #32
 80076ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076b0:	0711      	lsls	r1, r2, #28
 80076b2:	bf44      	itt	mi
 80076b4:	232b      	movmi	r3, #43	@ 0x2b
 80076b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076ba:	f89a 3000 	ldrb.w	r3, [sl]
 80076be:	2b2a      	cmp	r3, #42	@ 0x2a
 80076c0:	d015      	beq.n	80076ee <_svfiprintf_r+0xfa>
 80076c2:	9a07      	ldr	r2, [sp, #28]
 80076c4:	4654      	mov	r4, sl
 80076c6:	2000      	movs	r0, #0
 80076c8:	f04f 0c0a 	mov.w	ip, #10
 80076cc:	4621      	mov	r1, r4
 80076ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076d2:	3b30      	subs	r3, #48	@ 0x30
 80076d4:	2b09      	cmp	r3, #9
 80076d6:	d94b      	bls.n	8007770 <_svfiprintf_r+0x17c>
 80076d8:	b1b0      	cbz	r0, 8007708 <_svfiprintf_r+0x114>
 80076da:	9207      	str	r2, [sp, #28]
 80076dc:	e014      	b.n	8007708 <_svfiprintf_r+0x114>
 80076de:	eba0 0308 	sub.w	r3, r0, r8
 80076e2:	fa09 f303 	lsl.w	r3, r9, r3
 80076e6:	4313      	orrs	r3, r2
 80076e8:	9304      	str	r3, [sp, #16]
 80076ea:	46a2      	mov	sl, r4
 80076ec:	e7d2      	b.n	8007694 <_svfiprintf_r+0xa0>
 80076ee:	9b03      	ldr	r3, [sp, #12]
 80076f0:	1d19      	adds	r1, r3, #4
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	9103      	str	r1, [sp, #12]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	bfbb      	ittet	lt
 80076fa:	425b      	neglt	r3, r3
 80076fc:	f042 0202 	orrlt.w	r2, r2, #2
 8007700:	9307      	strge	r3, [sp, #28]
 8007702:	9307      	strlt	r3, [sp, #28]
 8007704:	bfb8      	it	lt
 8007706:	9204      	strlt	r2, [sp, #16]
 8007708:	7823      	ldrb	r3, [r4, #0]
 800770a:	2b2e      	cmp	r3, #46	@ 0x2e
 800770c:	d10a      	bne.n	8007724 <_svfiprintf_r+0x130>
 800770e:	7863      	ldrb	r3, [r4, #1]
 8007710:	2b2a      	cmp	r3, #42	@ 0x2a
 8007712:	d132      	bne.n	800777a <_svfiprintf_r+0x186>
 8007714:	9b03      	ldr	r3, [sp, #12]
 8007716:	1d1a      	adds	r2, r3, #4
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	9203      	str	r2, [sp, #12]
 800771c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007720:	3402      	adds	r4, #2
 8007722:	9305      	str	r3, [sp, #20]
 8007724:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80077e8 <_svfiprintf_r+0x1f4>
 8007728:	7821      	ldrb	r1, [r4, #0]
 800772a:	2203      	movs	r2, #3
 800772c:	4650      	mov	r0, sl
 800772e:	f7f8 fd4f 	bl	80001d0 <memchr>
 8007732:	b138      	cbz	r0, 8007744 <_svfiprintf_r+0x150>
 8007734:	9b04      	ldr	r3, [sp, #16]
 8007736:	eba0 000a 	sub.w	r0, r0, sl
 800773a:	2240      	movs	r2, #64	@ 0x40
 800773c:	4082      	lsls	r2, r0
 800773e:	4313      	orrs	r3, r2
 8007740:	3401      	adds	r4, #1
 8007742:	9304      	str	r3, [sp, #16]
 8007744:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007748:	4824      	ldr	r0, [pc, #144]	@ (80077dc <_svfiprintf_r+0x1e8>)
 800774a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800774e:	2206      	movs	r2, #6
 8007750:	f7f8 fd3e 	bl	80001d0 <memchr>
 8007754:	2800      	cmp	r0, #0
 8007756:	d036      	beq.n	80077c6 <_svfiprintf_r+0x1d2>
 8007758:	4b21      	ldr	r3, [pc, #132]	@ (80077e0 <_svfiprintf_r+0x1ec>)
 800775a:	bb1b      	cbnz	r3, 80077a4 <_svfiprintf_r+0x1b0>
 800775c:	9b03      	ldr	r3, [sp, #12]
 800775e:	3307      	adds	r3, #7
 8007760:	f023 0307 	bic.w	r3, r3, #7
 8007764:	3308      	adds	r3, #8
 8007766:	9303      	str	r3, [sp, #12]
 8007768:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800776a:	4433      	add	r3, r6
 800776c:	9309      	str	r3, [sp, #36]	@ 0x24
 800776e:	e76a      	b.n	8007646 <_svfiprintf_r+0x52>
 8007770:	fb0c 3202 	mla	r2, ip, r2, r3
 8007774:	460c      	mov	r4, r1
 8007776:	2001      	movs	r0, #1
 8007778:	e7a8      	b.n	80076cc <_svfiprintf_r+0xd8>
 800777a:	2300      	movs	r3, #0
 800777c:	3401      	adds	r4, #1
 800777e:	9305      	str	r3, [sp, #20]
 8007780:	4619      	mov	r1, r3
 8007782:	f04f 0c0a 	mov.w	ip, #10
 8007786:	4620      	mov	r0, r4
 8007788:	f810 2b01 	ldrb.w	r2, [r0], #1
 800778c:	3a30      	subs	r2, #48	@ 0x30
 800778e:	2a09      	cmp	r2, #9
 8007790:	d903      	bls.n	800779a <_svfiprintf_r+0x1a6>
 8007792:	2b00      	cmp	r3, #0
 8007794:	d0c6      	beq.n	8007724 <_svfiprintf_r+0x130>
 8007796:	9105      	str	r1, [sp, #20]
 8007798:	e7c4      	b.n	8007724 <_svfiprintf_r+0x130>
 800779a:	fb0c 2101 	mla	r1, ip, r1, r2
 800779e:	4604      	mov	r4, r0
 80077a0:	2301      	movs	r3, #1
 80077a2:	e7f0      	b.n	8007786 <_svfiprintf_r+0x192>
 80077a4:	ab03      	add	r3, sp, #12
 80077a6:	9300      	str	r3, [sp, #0]
 80077a8:	462a      	mov	r2, r5
 80077aa:	4b0e      	ldr	r3, [pc, #56]	@ (80077e4 <_svfiprintf_r+0x1f0>)
 80077ac:	a904      	add	r1, sp, #16
 80077ae:	4638      	mov	r0, r7
 80077b0:	f7fc fbc6 	bl	8003f40 <_printf_float>
 80077b4:	1c42      	adds	r2, r0, #1
 80077b6:	4606      	mov	r6, r0
 80077b8:	d1d6      	bne.n	8007768 <_svfiprintf_r+0x174>
 80077ba:	89ab      	ldrh	r3, [r5, #12]
 80077bc:	065b      	lsls	r3, r3, #25
 80077be:	f53f af2d 	bmi.w	800761c <_svfiprintf_r+0x28>
 80077c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80077c4:	e72c      	b.n	8007620 <_svfiprintf_r+0x2c>
 80077c6:	ab03      	add	r3, sp, #12
 80077c8:	9300      	str	r3, [sp, #0]
 80077ca:	462a      	mov	r2, r5
 80077cc:	4b05      	ldr	r3, [pc, #20]	@ (80077e4 <_svfiprintf_r+0x1f0>)
 80077ce:	a904      	add	r1, sp, #16
 80077d0:	4638      	mov	r0, r7
 80077d2:	f7fc fe4d 	bl	8004470 <_printf_i>
 80077d6:	e7ed      	b.n	80077b4 <_svfiprintf_r+0x1c0>
 80077d8:	080089f1 	.word	0x080089f1
 80077dc:	080089fb 	.word	0x080089fb
 80077e0:	08003f41 	.word	0x08003f41
 80077e4:	0800753d 	.word	0x0800753d
 80077e8:	080089f7 	.word	0x080089f7

080077ec <__sfputc_r>:
 80077ec:	6893      	ldr	r3, [r2, #8]
 80077ee:	3b01      	subs	r3, #1
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	b410      	push	{r4}
 80077f4:	6093      	str	r3, [r2, #8]
 80077f6:	da08      	bge.n	800780a <__sfputc_r+0x1e>
 80077f8:	6994      	ldr	r4, [r2, #24]
 80077fa:	42a3      	cmp	r3, r4
 80077fc:	db01      	blt.n	8007802 <__sfputc_r+0x16>
 80077fe:	290a      	cmp	r1, #10
 8007800:	d103      	bne.n	800780a <__sfputc_r+0x1e>
 8007802:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007806:	f7fd bafc 	b.w	8004e02 <__swbuf_r>
 800780a:	6813      	ldr	r3, [r2, #0]
 800780c:	1c58      	adds	r0, r3, #1
 800780e:	6010      	str	r0, [r2, #0]
 8007810:	7019      	strb	r1, [r3, #0]
 8007812:	4608      	mov	r0, r1
 8007814:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007818:	4770      	bx	lr

0800781a <__sfputs_r>:
 800781a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800781c:	4606      	mov	r6, r0
 800781e:	460f      	mov	r7, r1
 8007820:	4614      	mov	r4, r2
 8007822:	18d5      	adds	r5, r2, r3
 8007824:	42ac      	cmp	r4, r5
 8007826:	d101      	bne.n	800782c <__sfputs_r+0x12>
 8007828:	2000      	movs	r0, #0
 800782a:	e007      	b.n	800783c <__sfputs_r+0x22>
 800782c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007830:	463a      	mov	r2, r7
 8007832:	4630      	mov	r0, r6
 8007834:	f7ff ffda 	bl	80077ec <__sfputc_r>
 8007838:	1c43      	adds	r3, r0, #1
 800783a:	d1f3      	bne.n	8007824 <__sfputs_r+0xa>
 800783c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007840 <_vfiprintf_r>:
 8007840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007844:	460d      	mov	r5, r1
 8007846:	b09d      	sub	sp, #116	@ 0x74
 8007848:	4614      	mov	r4, r2
 800784a:	4698      	mov	r8, r3
 800784c:	4606      	mov	r6, r0
 800784e:	b118      	cbz	r0, 8007858 <_vfiprintf_r+0x18>
 8007850:	6a03      	ldr	r3, [r0, #32]
 8007852:	b90b      	cbnz	r3, 8007858 <_vfiprintf_r+0x18>
 8007854:	f7fd f9cc 	bl	8004bf0 <__sinit>
 8007858:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800785a:	07d9      	lsls	r1, r3, #31
 800785c:	d405      	bmi.n	800786a <_vfiprintf_r+0x2a>
 800785e:	89ab      	ldrh	r3, [r5, #12]
 8007860:	059a      	lsls	r2, r3, #22
 8007862:	d402      	bmi.n	800786a <_vfiprintf_r+0x2a>
 8007864:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007866:	f7fd fbde 	bl	8005026 <__retarget_lock_acquire_recursive>
 800786a:	89ab      	ldrh	r3, [r5, #12]
 800786c:	071b      	lsls	r3, r3, #28
 800786e:	d501      	bpl.n	8007874 <_vfiprintf_r+0x34>
 8007870:	692b      	ldr	r3, [r5, #16]
 8007872:	b99b      	cbnz	r3, 800789c <_vfiprintf_r+0x5c>
 8007874:	4629      	mov	r1, r5
 8007876:	4630      	mov	r0, r6
 8007878:	f7fd fb02 	bl	8004e80 <__swsetup_r>
 800787c:	b170      	cbz	r0, 800789c <_vfiprintf_r+0x5c>
 800787e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007880:	07dc      	lsls	r4, r3, #31
 8007882:	d504      	bpl.n	800788e <_vfiprintf_r+0x4e>
 8007884:	f04f 30ff 	mov.w	r0, #4294967295
 8007888:	b01d      	add	sp, #116	@ 0x74
 800788a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800788e:	89ab      	ldrh	r3, [r5, #12]
 8007890:	0598      	lsls	r0, r3, #22
 8007892:	d4f7      	bmi.n	8007884 <_vfiprintf_r+0x44>
 8007894:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007896:	f7fd fbc7 	bl	8005028 <__retarget_lock_release_recursive>
 800789a:	e7f3      	b.n	8007884 <_vfiprintf_r+0x44>
 800789c:	2300      	movs	r3, #0
 800789e:	9309      	str	r3, [sp, #36]	@ 0x24
 80078a0:	2320      	movs	r3, #32
 80078a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80078a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80078aa:	2330      	movs	r3, #48	@ 0x30
 80078ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007a5c <_vfiprintf_r+0x21c>
 80078b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80078b4:	f04f 0901 	mov.w	r9, #1
 80078b8:	4623      	mov	r3, r4
 80078ba:	469a      	mov	sl, r3
 80078bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078c0:	b10a      	cbz	r2, 80078c6 <_vfiprintf_r+0x86>
 80078c2:	2a25      	cmp	r2, #37	@ 0x25
 80078c4:	d1f9      	bne.n	80078ba <_vfiprintf_r+0x7a>
 80078c6:	ebba 0b04 	subs.w	fp, sl, r4
 80078ca:	d00b      	beq.n	80078e4 <_vfiprintf_r+0xa4>
 80078cc:	465b      	mov	r3, fp
 80078ce:	4622      	mov	r2, r4
 80078d0:	4629      	mov	r1, r5
 80078d2:	4630      	mov	r0, r6
 80078d4:	f7ff ffa1 	bl	800781a <__sfputs_r>
 80078d8:	3001      	adds	r0, #1
 80078da:	f000 80a7 	beq.w	8007a2c <_vfiprintf_r+0x1ec>
 80078de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078e0:	445a      	add	r2, fp
 80078e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80078e4:	f89a 3000 	ldrb.w	r3, [sl]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	f000 809f 	beq.w	8007a2c <_vfiprintf_r+0x1ec>
 80078ee:	2300      	movs	r3, #0
 80078f0:	f04f 32ff 	mov.w	r2, #4294967295
 80078f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078f8:	f10a 0a01 	add.w	sl, sl, #1
 80078fc:	9304      	str	r3, [sp, #16]
 80078fe:	9307      	str	r3, [sp, #28]
 8007900:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007904:	931a      	str	r3, [sp, #104]	@ 0x68
 8007906:	4654      	mov	r4, sl
 8007908:	2205      	movs	r2, #5
 800790a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800790e:	4853      	ldr	r0, [pc, #332]	@ (8007a5c <_vfiprintf_r+0x21c>)
 8007910:	f7f8 fc5e 	bl	80001d0 <memchr>
 8007914:	9a04      	ldr	r2, [sp, #16]
 8007916:	b9d8      	cbnz	r0, 8007950 <_vfiprintf_r+0x110>
 8007918:	06d1      	lsls	r1, r2, #27
 800791a:	bf44      	itt	mi
 800791c:	2320      	movmi	r3, #32
 800791e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007922:	0713      	lsls	r3, r2, #28
 8007924:	bf44      	itt	mi
 8007926:	232b      	movmi	r3, #43	@ 0x2b
 8007928:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800792c:	f89a 3000 	ldrb.w	r3, [sl]
 8007930:	2b2a      	cmp	r3, #42	@ 0x2a
 8007932:	d015      	beq.n	8007960 <_vfiprintf_r+0x120>
 8007934:	9a07      	ldr	r2, [sp, #28]
 8007936:	4654      	mov	r4, sl
 8007938:	2000      	movs	r0, #0
 800793a:	f04f 0c0a 	mov.w	ip, #10
 800793e:	4621      	mov	r1, r4
 8007940:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007944:	3b30      	subs	r3, #48	@ 0x30
 8007946:	2b09      	cmp	r3, #9
 8007948:	d94b      	bls.n	80079e2 <_vfiprintf_r+0x1a2>
 800794a:	b1b0      	cbz	r0, 800797a <_vfiprintf_r+0x13a>
 800794c:	9207      	str	r2, [sp, #28]
 800794e:	e014      	b.n	800797a <_vfiprintf_r+0x13a>
 8007950:	eba0 0308 	sub.w	r3, r0, r8
 8007954:	fa09 f303 	lsl.w	r3, r9, r3
 8007958:	4313      	orrs	r3, r2
 800795a:	9304      	str	r3, [sp, #16]
 800795c:	46a2      	mov	sl, r4
 800795e:	e7d2      	b.n	8007906 <_vfiprintf_r+0xc6>
 8007960:	9b03      	ldr	r3, [sp, #12]
 8007962:	1d19      	adds	r1, r3, #4
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	9103      	str	r1, [sp, #12]
 8007968:	2b00      	cmp	r3, #0
 800796a:	bfbb      	ittet	lt
 800796c:	425b      	neglt	r3, r3
 800796e:	f042 0202 	orrlt.w	r2, r2, #2
 8007972:	9307      	strge	r3, [sp, #28]
 8007974:	9307      	strlt	r3, [sp, #28]
 8007976:	bfb8      	it	lt
 8007978:	9204      	strlt	r2, [sp, #16]
 800797a:	7823      	ldrb	r3, [r4, #0]
 800797c:	2b2e      	cmp	r3, #46	@ 0x2e
 800797e:	d10a      	bne.n	8007996 <_vfiprintf_r+0x156>
 8007980:	7863      	ldrb	r3, [r4, #1]
 8007982:	2b2a      	cmp	r3, #42	@ 0x2a
 8007984:	d132      	bne.n	80079ec <_vfiprintf_r+0x1ac>
 8007986:	9b03      	ldr	r3, [sp, #12]
 8007988:	1d1a      	adds	r2, r3, #4
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	9203      	str	r2, [sp, #12]
 800798e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007992:	3402      	adds	r4, #2
 8007994:	9305      	str	r3, [sp, #20]
 8007996:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007a6c <_vfiprintf_r+0x22c>
 800799a:	7821      	ldrb	r1, [r4, #0]
 800799c:	2203      	movs	r2, #3
 800799e:	4650      	mov	r0, sl
 80079a0:	f7f8 fc16 	bl	80001d0 <memchr>
 80079a4:	b138      	cbz	r0, 80079b6 <_vfiprintf_r+0x176>
 80079a6:	9b04      	ldr	r3, [sp, #16]
 80079a8:	eba0 000a 	sub.w	r0, r0, sl
 80079ac:	2240      	movs	r2, #64	@ 0x40
 80079ae:	4082      	lsls	r2, r0
 80079b0:	4313      	orrs	r3, r2
 80079b2:	3401      	adds	r4, #1
 80079b4:	9304      	str	r3, [sp, #16]
 80079b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079ba:	4829      	ldr	r0, [pc, #164]	@ (8007a60 <_vfiprintf_r+0x220>)
 80079bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80079c0:	2206      	movs	r2, #6
 80079c2:	f7f8 fc05 	bl	80001d0 <memchr>
 80079c6:	2800      	cmp	r0, #0
 80079c8:	d03f      	beq.n	8007a4a <_vfiprintf_r+0x20a>
 80079ca:	4b26      	ldr	r3, [pc, #152]	@ (8007a64 <_vfiprintf_r+0x224>)
 80079cc:	bb1b      	cbnz	r3, 8007a16 <_vfiprintf_r+0x1d6>
 80079ce:	9b03      	ldr	r3, [sp, #12]
 80079d0:	3307      	adds	r3, #7
 80079d2:	f023 0307 	bic.w	r3, r3, #7
 80079d6:	3308      	adds	r3, #8
 80079d8:	9303      	str	r3, [sp, #12]
 80079da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079dc:	443b      	add	r3, r7
 80079de:	9309      	str	r3, [sp, #36]	@ 0x24
 80079e0:	e76a      	b.n	80078b8 <_vfiprintf_r+0x78>
 80079e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80079e6:	460c      	mov	r4, r1
 80079e8:	2001      	movs	r0, #1
 80079ea:	e7a8      	b.n	800793e <_vfiprintf_r+0xfe>
 80079ec:	2300      	movs	r3, #0
 80079ee:	3401      	adds	r4, #1
 80079f0:	9305      	str	r3, [sp, #20]
 80079f2:	4619      	mov	r1, r3
 80079f4:	f04f 0c0a 	mov.w	ip, #10
 80079f8:	4620      	mov	r0, r4
 80079fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079fe:	3a30      	subs	r2, #48	@ 0x30
 8007a00:	2a09      	cmp	r2, #9
 8007a02:	d903      	bls.n	8007a0c <_vfiprintf_r+0x1cc>
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d0c6      	beq.n	8007996 <_vfiprintf_r+0x156>
 8007a08:	9105      	str	r1, [sp, #20]
 8007a0a:	e7c4      	b.n	8007996 <_vfiprintf_r+0x156>
 8007a0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a10:	4604      	mov	r4, r0
 8007a12:	2301      	movs	r3, #1
 8007a14:	e7f0      	b.n	80079f8 <_vfiprintf_r+0x1b8>
 8007a16:	ab03      	add	r3, sp, #12
 8007a18:	9300      	str	r3, [sp, #0]
 8007a1a:	462a      	mov	r2, r5
 8007a1c:	4b12      	ldr	r3, [pc, #72]	@ (8007a68 <_vfiprintf_r+0x228>)
 8007a1e:	a904      	add	r1, sp, #16
 8007a20:	4630      	mov	r0, r6
 8007a22:	f7fc fa8d 	bl	8003f40 <_printf_float>
 8007a26:	4607      	mov	r7, r0
 8007a28:	1c78      	adds	r0, r7, #1
 8007a2a:	d1d6      	bne.n	80079da <_vfiprintf_r+0x19a>
 8007a2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a2e:	07d9      	lsls	r1, r3, #31
 8007a30:	d405      	bmi.n	8007a3e <_vfiprintf_r+0x1fe>
 8007a32:	89ab      	ldrh	r3, [r5, #12]
 8007a34:	059a      	lsls	r2, r3, #22
 8007a36:	d402      	bmi.n	8007a3e <_vfiprintf_r+0x1fe>
 8007a38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a3a:	f7fd faf5 	bl	8005028 <__retarget_lock_release_recursive>
 8007a3e:	89ab      	ldrh	r3, [r5, #12]
 8007a40:	065b      	lsls	r3, r3, #25
 8007a42:	f53f af1f 	bmi.w	8007884 <_vfiprintf_r+0x44>
 8007a46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a48:	e71e      	b.n	8007888 <_vfiprintf_r+0x48>
 8007a4a:	ab03      	add	r3, sp, #12
 8007a4c:	9300      	str	r3, [sp, #0]
 8007a4e:	462a      	mov	r2, r5
 8007a50:	4b05      	ldr	r3, [pc, #20]	@ (8007a68 <_vfiprintf_r+0x228>)
 8007a52:	a904      	add	r1, sp, #16
 8007a54:	4630      	mov	r0, r6
 8007a56:	f7fc fd0b 	bl	8004470 <_printf_i>
 8007a5a:	e7e4      	b.n	8007a26 <_vfiprintf_r+0x1e6>
 8007a5c:	080089f1 	.word	0x080089f1
 8007a60:	080089fb 	.word	0x080089fb
 8007a64:	08003f41 	.word	0x08003f41
 8007a68:	0800781b 	.word	0x0800781b
 8007a6c:	080089f7 	.word	0x080089f7

08007a70 <__sflush_r>:
 8007a70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a78:	0716      	lsls	r6, r2, #28
 8007a7a:	4605      	mov	r5, r0
 8007a7c:	460c      	mov	r4, r1
 8007a7e:	d454      	bmi.n	8007b2a <__sflush_r+0xba>
 8007a80:	684b      	ldr	r3, [r1, #4]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	dc02      	bgt.n	8007a8c <__sflush_r+0x1c>
 8007a86:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	dd48      	ble.n	8007b1e <__sflush_r+0xae>
 8007a8c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007a8e:	2e00      	cmp	r6, #0
 8007a90:	d045      	beq.n	8007b1e <__sflush_r+0xae>
 8007a92:	2300      	movs	r3, #0
 8007a94:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007a98:	682f      	ldr	r7, [r5, #0]
 8007a9a:	6a21      	ldr	r1, [r4, #32]
 8007a9c:	602b      	str	r3, [r5, #0]
 8007a9e:	d030      	beq.n	8007b02 <__sflush_r+0x92>
 8007aa0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007aa2:	89a3      	ldrh	r3, [r4, #12]
 8007aa4:	0759      	lsls	r1, r3, #29
 8007aa6:	d505      	bpl.n	8007ab4 <__sflush_r+0x44>
 8007aa8:	6863      	ldr	r3, [r4, #4]
 8007aaa:	1ad2      	subs	r2, r2, r3
 8007aac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007aae:	b10b      	cbz	r3, 8007ab4 <__sflush_r+0x44>
 8007ab0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007ab2:	1ad2      	subs	r2, r2, r3
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ab8:	6a21      	ldr	r1, [r4, #32]
 8007aba:	4628      	mov	r0, r5
 8007abc:	47b0      	blx	r6
 8007abe:	1c43      	adds	r3, r0, #1
 8007ac0:	89a3      	ldrh	r3, [r4, #12]
 8007ac2:	d106      	bne.n	8007ad2 <__sflush_r+0x62>
 8007ac4:	6829      	ldr	r1, [r5, #0]
 8007ac6:	291d      	cmp	r1, #29
 8007ac8:	d82b      	bhi.n	8007b22 <__sflush_r+0xb2>
 8007aca:	4a2a      	ldr	r2, [pc, #168]	@ (8007b74 <__sflush_r+0x104>)
 8007acc:	410a      	asrs	r2, r1
 8007ace:	07d6      	lsls	r6, r2, #31
 8007ad0:	d427      	bmi.n	8007b22 <__sflush_r+0xb2>
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	6062      	str	r2, [r4, #4]
 8007ad6:	04d9      	lsls	r1, r3, #19
 8007ad8:	6922      	ldr	r2, [r4, #16]
 8007ada:	6022      	str	r2, [r4, #0]
 8007adc:	d504      	bpl.n	8007ae8 <__sflush_r+0x78>
 8007ade:	1c42      	adds	r2, r0, #1
 8007ae0:	d101      	bne.n	8007ae6 <__sflush_r+0x76>
 8007ae2:	682b      	ldr	r3, [r5, #0]
 8007ae4:	b903      	cbnz	r3, 8007ae8 <__sflush_r+0x78>
 8007ae6:	6560      	str	r0, [r4, #84]	@ 0x54
 8007ae8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007aea:	602f      	str	r7, [r5, #0]
 8007aec:	b1b9      	cbz	r1, 8007b1e <__sflush_r+0xae>
 8007aee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007af2:	4299      	cmp	r1, r3
 8007af4:	d002      	beq.n	8007afc <__sflush_r+0x8c>
 8007af6:	4628      	mov	r0, r5
 8007af8:	f7fe f8ea 	bl	8005cd0 <_free_r>
 8007afc:	2300      	movs	r3, #0
 8007afe:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b00:	e00d      	b.n	8007b1e <__sflush_r+0xae>
 8007b02:	2301      	movs	r3, #1
 8007b04:	4628      	mov	r0, r5
 8007b06:	47b0      	blx	r6
 8007b08:	4602      	mov	r2, r0
 8007b0a:	1c50      	adds	r0, r2, #1
 8007b0c:	d1c9      	bne.n	8007aa2 <__sflush_r+0x32>
 8007b0e:	682b      	ldr	r3, [r5, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d0c6      	beq.n	8007aa2 <__sflush_r+0x32>
 8007b14:	2b1d      	cmp	r3, #29
 8007b16:	d001      	beq.n	8007b1c <__sflush_r+0xac>
 8007b18:	2b16      	cmp	r3, #22
 8007b1a:	d11e      	bne.n	8007b5a <__sflush_r+0xea>
 8007b1c:	602f      	str	r7, [r5, #0]
 8007b1e:	2000      	movs	r0, #0
 8007b20:	e022      	b.n	8007b68 <__sflush_r+0xf8>
 8007b22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b26:	b21b      	sxth	r3, r3
 8007b28:	e01b      	b.n	8007b62 <__sflush_r+0xf2>
 8007b2a:	690f      	ldr	r7, [r1, #16]
 8007b2c:	2f00      	cmp	r7, #0
 8007b2e:	d0f6      	beq.n	8007b1e <__sflush_r+0xae>
 8007b30:	0793      	lsls	r3, r2, #30
 8007b32:	680e      	ldr	r6, [r1, #0]
 8007b34:	bf08      	it	eq
 8007b36:	694b      	ldreq	r3, [r1, #20]
 8007b38:	600f      	str	r7, [r1, #0]
 8007b3a:	bf18      	it	ne
 8007b3c:	2300      	movne	r3, #0
 8007b3e:	eba6 0807 	sub.w	r8, r6, r7
 8007b42:	608b      	str	r3, [r1, #8]
 8007b44:	f1b8 0f00 	cmp.w	r8, #0
 8007b48:	dde9      	ble.n	8007b1e <__sflush_r+0xae>
 8007b4a:	6a21      	ldr	r1, [r4, #32]
 8007b4c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007b4e:	4643      	mov	r3, r8
 8007b50:	463a      	mov	r2, r7
 8007b52:	4628      	mov	r0, r5
 8007b54:	47b0      	blx	r6
 8007b56:	2800      	cmp	r0, #0
 8007b58:	dc08      	bgt.n	8007b6c <__sflush_r+0xfc>
 8007b5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b62:	81a3      	strh	r3, [r4, #12]
 8007b64:	f04f 30ff 	mov.w	r0, #4294967295
 8007b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b6c:	4407      	add	r7, r0
 8007b6e:	eba8 0800 	sub.w	r8, r8, r0
 8007b72:	e7e7      	b.n	8007b44 <__sflush_r+0xd4>
 8007b74:	dfbffffe 	.word	0xdfbffffe

08007b78 <_fflush_r>:
 8007b78:	b538      	push	{r3, r4, r5, lr}
 8007b7a:	690b      	ldr	r3, [r1, #16]
 8007b7c:	4605      	mov	r5, r0
 8007b7e:	460c      	mov	r4, r1
 8007b80:	b913      	cbnz	r3, 8007b88 <_fflush_r+0x10>
 8007b82:	2500      	movs	r5, #0
 8007b84:	4628      	mov	r0, r5
 8007b86:	bd38      	pop	{r3, r4, r5, pc}
 8007b88:	b118      	cbz	r0, 8007b92 <_fflush_r+0x1a>
 8007b8a:	6a03      	ldr	r3, [r0, #32]
 8007b8c:	b90b      	cbnz	r3, 8007b92 <_fflush_r+0x1a>
 8007b8e:	f7fd f82f 	bl	8004bf0 <__sinit>
 8007b92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d0f3      	beq.n	8007b82 <_fflush_r+0xa>
 8007b9a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007b9c:	07d0      	lsls	r0, r2, #31
 8007b9e:	d404      	bmi.n	8007baa <_fflush_r+0x32>
 8007ba0:	0599      	lsls	r1, r3, #22
 8007ba2:	d402      	bmi.n	8007baa <_fflush_r+0x32>
 8007ba4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ba6:	f7fd fa3e 	bl	8005026 <__retarget_lock_acquire_recursive>
 8007baa:	4628      	mov	r0, r5
 8007bac:	4621      	mov	r1, r4
 8007bae:	f7ff ff5f 	bl	8007a70 <__sflush_r>
 8007bb2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007bb4:	07da      	lsls	r2, r3, #31
 8007bb6:	4605      	mov	r5, r0
 8007bb8:	d4e4      	bmi.n	8007b84 <_fflush_r+0xc>
 8007bba:	89a3      	ldrh	r3, [r4, #12]
 8007bbc:	059b      	lsls	r3, r3, #22
 8007bbe:	d4e1      	bmi.n	8007b84 <_fflush_r+0xc>
 8007bc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007bc2:	f7fd fa31 	bl	8005028 <__retarget_lock_release_recursive>
 8007bc6:	e7dd      	b.n	8007b84 <_fflush_r+0xc>

08007bc8 <__swhatbuf_r>:
 8007bc8:	b570      	push	{r4, r5, r6, lr}
 8007bca:	460c      	mov	r4, r1
 8007bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bd0:	2900      	cmp	r1, #0
 8007bd2:	b096      	sub	sp, #88	@ 0x58
 8007bd4:	4615      	mov	r5, r2
 8007bd6:	461e      	mov	r6, r3
 8007bd8:	da0d      	bge.n	8007bf6 <__swhatbuf_r+0x2e>
 8007bda:	89a3      	ldrh	r3, [r4, #12]
 8007bdc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007be0:	f04f 0100 	mov.w	r1, #0
 8007be4:	bf14      	ite	ne
 8007be6:	2340      	movne	r3, #64	@ 0x40
 8007be8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007bec:	2000      	movs	r0, #0
 8007bee:	6031      	str	r1, [r6, #0]
 8007bf0:	602b      	str	r3, [r5, #0]
 8007bf2:	b016      	add	sp, #88	@ 0x58
 8007bf4:	bd70      	pop	{r4, r5, r6, pc}
 8007bf6:	466a      	mov	r2, sp
 8007bf8:	f000 f874 	bl	8007ce4 <_fstat_r>
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	dbec      	blt.n	8007bda <__swhatbuf_r+0x12>
 8007c00:	9901      	ldr	r1, [sp, #4]
 8007c02:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007c06:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007c0a:	4259      	negs	r1, r3
 8007c0c:	4159      	adcs	r1, r3
 8007c0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c12:	e7eb      	b.n	8007bec <__swhatbuf_r+0x24>

08007c14 <__smakebuf_r>:
 8007c14:	898b      	ldrh	r3, [r1, #12]
 8007c16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c18:	079d      	lsls	r5, r3, #30
 8007c1a:	4606      	mov	r6, r0
 8007c1c:	460c      	mov	r4, r1
 8007c1e:	d507      	bpl.n	8007c30 <__smakebuf_r+0x1c>
 8007c20:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007c24:	6023      	str	r3, [r4, #0]
 8007c26:	6123      	str	r3, [r4, #16]
 8007c28:	2301      	movs	r3, #1
 8007c2a:	6163      	str	r3, [r4, #20]
 8007c2c:	b003      	add	sp, #12
 8007c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c30:	ab01      	add	r3, sp, #4
 8007c32:	466a      	mov	r2, sp
 8007c34:	f7ff ffc8 	bl	8007bc8 <__swhatbuf_r>
 8007c38:	9f00      	ldr	r7, [sp, #0]
 8007c3a:	4605      	mov	r5, r0
 8007c3c:	4639      	mov	r1, r7
 8007c3e:	4630      	mov	r0, r6
 8007c40:	f7fe f8ba 	bl	8005db8 <_malloc_r>
 8007c44:	b948      	cbnz	r0, 8007c5a <__smakebuf_r+0x46>
 8007c46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c4a:	059a      	lsls	r2, r3, #22
 8007c4c:	d4ee      	bmi.n	8007c2c <__smakebuf_r+0x18>
 8007c4e:	f023 0303 	bic.w	r3, r3, #3
 8007c52:	f043 0302 	orr.w	r3, r3, #2
 8007c56:	81a3      	strh	r3, [r4, #12]
 8007c58:	e7e2      	b.n	8007c20 <__smakebuf_r+0xc>
 8007c5a:	89a3      	ldrh	r3, [r4, #12]
 8007c5c:	6020      	str	r0, [r4, #0]
 8007c5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c62:	81a3      	strh	r3, [r4, #12]
 8007c64:	9b01      	ldr	r3, [sp, #4]
 8007c66:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007c6a:	b15b      	cbz	r3, 8007c84 <__smakebuf_r+0x70>
 8007c6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c70:	4630      	mov	r0, r6
 8007c72:	f000 f849 	bl	8007d08 <_isatty_r>
 8007c76:	b128      	cbz	r0, 8007c84 <__smakebuf_r+0x70>
 8007c78:	89a3      	ldrh	r3, [r4, #12]
 8007c7a:	f023 0303 	bic.w	r3, r3, #3
 8007c7e:	f043 0301 	orr.w	r3, r3, #1
 8007c82:	81a3      	strh	r3, [r4, #12]
 8007c84:	89a3      	ldrh	r3, [r4, #12]
 8007c86:	431d      	orrs	r5, r3
 8007c88:	81a5      	strh	r5, [r4, #12]
 8007c8a:	e7cf      	b.n	8007c2c <__smakebuf_r+0x18>

08007c8c <memmove>:
 8007c8c:	4288      	cmp	r0, r1
 8007c8e:	b510      	push	{r4, lr}
 8007c90:	eb01 0402 	add.w	r4, r1, r2
 8007c94:	d902      	bls.n	8007c9c <memmove+0x10>
 8007c96:	4284      	cmp	r4, r0
 8007c98:	4623      	mov	r3, r4
 8007c9a:	d807      	bhi.n	8007cac <memmove+0x20>
 8007c9c:	1e43      	subs	r3, r0, #1
 8007c9e:	42a1      	cmp	r1, r4
 8007ca0:	d008      	beq.n	8007cb4 <memmove+0x28>
 8007ca2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ca6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007caa:	e7f8      	b.n	8007c9e <memmove+0x12>
 8007cac:	4402      	add	r2, r0
 8007cae:	4601      	mov	r1, r0
 8007cb0:	428a      	cmp	r2, r1
 8007cb2:	d100      	bne.n	8007cb6 <memmove+0x2a>
 8007cb4:	bd10      	pop	{r4, pc}
 8007cb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007cba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007cbe:	e7f7      	b.n	8007cb0 <memmove+0x24>

08007cc0 <strncmp>:
 8007cc0:	b510      	push	{r4, lr}
 8007cc2:	b16a      	cbz	r2, 8007ce0 <strncmp+0x20>
 8007cc4:	3901      	subs	r1, #1
 8007cc6:	1884      	adds	r4, r0, r2
 8007cc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ccc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d103      	bne.n	8007cdc <strncmp+0x1c>
 8007cd4:	42a0      	cmp	r0, r4
 8007cd6:	d001      	beq.n	8007cdc <strncmp+0x1c>
 8007cd8:	2a00      	cmp	r2, #0
 8007cda:	d1f5      	bne.n	8007cc8 <strncmp+0x8>
 8007cdc:	1ad0      	subs	r0, r2, r3
 8007cde:	bd10      	pop	{r4, pc}
 8007ce0:	4610      	mov	r0, r2
 8007ce2:	e7fc      	b.n	8007cde <strncmp+0x1e>

08007ce4 <_fstat_r>:
 8007ce4:	b538      	push	{r3, r4, r5, lr}
 8007ce6:	4d07      	ldr	r5, [pc, #28]	@ (8007d04 <_fstat_r+0x20>)
 8007ce8:	2300      	movs	r3, #0
 8007cea:	4604      	mov	r4, r0
 8007cec:	4608      	mov	r0, r1
 8007cee:	4611      	mov	r1, r2
 8007cf0:	602b      	str	r3, [r5, #0]
 8007cf2:	f7f9 fbd8 	bl	80014a6 <_fstat>
 8007cf6:	1c43      	adds	r3, r0, #1
 8007cf8:	d102      	bne.n	8007d00 <_fstat_r+0x1c>
 8007cfa:	682b      	ldr	r3, [r5, #0]
 8007cfc:	b103      	cbz	r3, 8007d00 <_fstat_r+0x1c>
 8007cfe:	6023      	str	r3, [r4, #0]
 8007d00:	bd38      	pop	{r3, r4, r5, pc}
 8007d02:	bf00      	nop
 8007d04:	200003d4 	.word	0x200003d4

08007d08 <_isatty_r>:
 8007d08:	b538      	push	{r3, r4, r5, lr}
 8007d0a:	4d06      	ldr	r5, [pc, #24]	@ (8007d24 <_isatty_r+0x1c>)
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	4604      	mov	r4, r0
 8007d10:	4608      	mov	r0, r1
 8007d12:	602b      	str	r3, [r5, #0]
 8007d14:	f7f9 fbd7 	bl	80014c6 <_isatty>
 8007d18:	1c43      	adds	r3, r0, #1
 8007d1a:	d102      	bne.n	8007d22 <_isatty_r+0x1a>
 8007d1c:	682b      	ldr	r3, [r5, #0]
 8007d1e:	b103      	cbz	r3, 8007d22 <_isatty_r+0x1a>
 8007d20:	6023      	str	r3, [r4, #0]
 8007d22:	bd38      	pop	{r3, r4, r5, pc}
 8007d24:	200003d4 	.word	0x200003d4

08007d28 <_sbrk_r>:
 8007d28:	b538      	push	{r3, r4, r5, lr}
 8007d2a:	4d06      	ldr	r5, [pc, #24]	@ (8007d44 <_sbrk_r+0x1c>)
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	4604      	mov	r4, r0
 8007d30:	4608      	mov	r0, r1
 8007d32:	602b      	str	r3, [r5, #0]
 8007d34:	f7f9 fbe0 	bl	80014f8 <_sbrk>
 8007d38:	1c43      	adds	r3, r0, #1
 8007d3a:	d102      	bne.n	8007d42 <_sbrk_r+0x1a>
 8007d3c:	682b      	ldr	r3, [r5, #0]
 8007d3e:	b103      	cbz	r3, 8007d42 <_sbrk_r+0x1a>
 8007d40:	6023      	str	r3, [r4, #0]
 8007d42:	bd38      	pop	{r3, r4, r5, pc}
 8007d44:	200003d4 	.word	0x200003d4

08007d48 <memcpy>:
 8007d48:	440a      	add	r2, r1
 8007d4a:	4291      	cmp	r1, r2
 8007d4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d50:	d100      	bne.n	8007d54 <memcpy+0xc>
 8007d52:	4770      	bx	lr
 8007d54:	b510      	push	{r4, lr}
 8007d56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d5e:	4291      	cmp	r1, r2
 8007d60:	d1f9      	bne.n	8007d56 <memcpy+0xe>
 8007d62:	bd10      	pop	{r4, pc}
 8007d64:	0000      	movs	r0, r0
	...

08007d68 <nan>:
 8007d68:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007d70 <nan+0x8>
 8007d6c:	4770      	bx	lr
 8007d6e:	bf00      	nop
 8007d70:	00000000 	.word	0x00000000
 8007d74:	7ff80000 	.word	0x7ff80000

08007d78 <__assert_func>:
 8007d78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d7a:	4614      	mov	r4, r2
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	4b09      	ldr	r3, [pc, #36]	@ (8007da4 <__assert_func+0x2c>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4605      	mov	r5, r0
 8007d84:	68d8      	ldr	r0, [r3, #12]
 8007d86:	b954      	cbnz	r4, 8007d9e <__assert_func+0x26>
 8007d88:	4b07      	ldr	r3, [pc, #28]	@ (8007da8 <__assert_func+0x30>)
 8007d8a:	461c      	mov	r4, r3
 8007d8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d90:	9100      	str	r1, [sp, #0]
 8007d92:	462b      	mov	r3, r5
 8007d94:	4905      	ldr	r1, [pc, #20]	@ (8007dac <__assert_func+0x34>)
 8007d96:	f000 fba7 	bl	80084e8 <fiprintf>
 8007d9a:	f000 fbb7 	bl	800850c <abort>
 8007d9e:	4b04      	ldr	r3, [pc, #16]	@ (8007db0 <__assert_func+0x38>)
 8007da0:	e7f4      	b.n	8007d8c <__assert_func+0x14>
 8007da2:	bf00      	nop
 8007da4:	20000030 	.word	0x20000030
 8007da8:	08008a45 	.word	0x08008a45
 8007dac:	08008a17 	.word	0x08008a17
 8007db0:	08008a0a 	.word	0x08008a0a

08007db4 <_calloc_r>:
 8007db4:	b570      	push	{r4, r5, r6, lr}
 8007db6:	fba1 5402 	umull	r5, r4, r1, r2
 8007dba:	b93c      	cbnz	r4, 8007dcc <_calloc_r+0x18>
 8007dbc:	4629      	mov	r1, r5
 8007dbe:	f7fd fffb 	bl	8005db8 <_malloc_r>
 8007dc2:	4606      	mov	r6, r0
 8007dc4:	b928      	cbnz	r0, 8007dd2 <_calloc_r+0x1e>
 8007dc6:	2600      	movs	r6, #0
 8007dc8:	4630      	mov	r0, r6
 8007dca:	bd70      	pop	{r4, r5, r6, pc}
 8007dcc:	220c      	movs	r2, #12
 8007dce:	6002      	str	r2, [r0, #0]
 8007dd0:	e7f9      	b.n	8007dc6 <_calloc_r+0x12>
 8007dd2:	462a      	mov	r2, r5
 8007dd4:	4621      	mov	r1, r4
 8007dd6:	f7fd f8a9 	bl	8004f2c <memset>
 8007dda:	e7f5      	b.n	8007dc8 <_calloc_r+0x14>

08007ddc <rshift>:
 8007ddc:	6903      	ldr	r3, [r0, #16]
 8007dde:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007de2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007de6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007dea:	f100 0414 	add.w	r4, r0, #20
 8007dee:	dd45      	ble.n	8007e7c <rshift+0xa0>
 8007df0:	f011 011f 	ands.w	r1, r1, #31
 8007df4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007df8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007dfc:	d10c      	bne.n	8007e18 <rshift+0x3c>
 8007dfe:	f100 0710 	add.w	r7, r0, #16
 8007e02:	4629      	mov	r1, r5
 8007e04:	42b1      	cmp	r1, r6
 8007e06:	d334      	bcc.n	8007e72 <rshift+0x96>
 8007e08:	1a9b      	subs	r3, r3, r2
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	1eea      	subs	r2, r5, #3
 8007e0e:	4296      	cmp	r6, r2
 8007e10:	bf38      	it	cc
 8007e12:	2300      	movcc	r3, #0
 8007e14:	4423      	add	r3, r4
 8007e16:	e015      	b.n	8007e44 <rshift+0x68>
 8007e18:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007e1c:	f1c1 0820 	rsb	r8, r1, #32
 8007e20:	40cf      	lsrs	r7, r1
 8007e22:	f105 0e04 	add.w	lr, r5, #4
 8007e26:	46a1      	mov	r9, r4
 8007e28:	4576      	cmp	r6, lr
 8007e2a:	46f4      	mov	ip, lr
 8007e2c:	d815      	bhi.n	8007e5a <rshift+0x7e>
 8007e2e:	1a9a      	subs	r2, r3, r2
 8007e30:	0092      	lsls	r2, r2, #2
 8007e32:	3a04      	subs	r2, #4
 8007e34:	3501      	adds	r5, #1
 8007e36:	42ae      	cmp	r6, r5
 8007e38:	bf38      	it	cc
 8007e3a:	2200      	movcc	r2, #0
 8007e3c:	18a3      	adds	r3, r4, r2
 8007e3e:	50a7      	str	r7, [r4, r2]
 8007e40:	b107      	cbz	r7, 8007e44 <rshift+0x68>
 8007e42:	3304      	adds	r3, #4
 8007e44:	1b1a      	subs	r2, r3, r4
 8007e46:	42a3      	cmp	r3, r4
 8007e48:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007e4c:	bf08      	it	eq
 8007e4e:	2300      	moveq	r3, #0
 8007e50:	6102      	str	r2, [r0, #16]
 8007e52:	bf08      	it	eq
 8007e54:	6143      	streq	r3, [r0, #20]
 8007e56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e5a:	f8dc c000 	ldr.w	ip, [ip]
 8007e5e:	fa0c fc08 	lsl.w	ip, ip, r8
 8007e62:	ea4c 0707 	orr.w	r7, ip, r7
 8007e66:	f849 7b04 	str.w	r7, [r9], #4
 8007e6a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007e6e:	40cf      	lsrs	r7, r1
 8007e70:	e7da      	b.n	8007e28 <rshift+0x4c>
 8007e72:	f851 cb04 	ldr.w	ip, [r1], #4
 8007e76:	f847 cf04 	str.w	ip, [r7, #4]!
 8007e7a:	e7c3      	b.n	8007e04 <rshift+0x28>
 8007e7c:	4623      	mov	r3, r4
 8007e7e:	e7e1      	b.n	8007e44 <rshift+0x68>

08007e80 <__hexdig_fun>:
 8007e80:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007e84:	2b09      	cmp	r3, #9
 8007e86:	d802      	bhi.n	8007e8e <__hexdig_fun+0xe>
 8007e88:	3820      	subs	r0, #32
 8007e8a:	b2c0      	uxtb	r0, r0
 8007e8c:	4770      	bx	lr
 8007e8e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007e92:	2b05      	cmp	r3, #5
 8007e94:	d801      	bhi.n	8007e9a <__hexdig_fun+0x1a>
 8007e96:	3847      	subs	r0, #71	@ 0x47
 8007e98:	e7f7      	b.n	8007e8a <__hexdig_fun+0xa>
 8007e9a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007e9e:	2b05      	cmp	r3, #5
 8007ea0:	d801      	bhi.n	8007ea6 <__hexdig_fun+0x26>
 8007ea2:	3827      	subs	r0, #39	@ 0x27
 8007ea4:	e7f1      	b.n	8007e8a <__hexdig_fun+0xa>
 8007ea6:	2000      	movs	r0, #0
 8007ea8:	4770      	bx	lr
	...

08007eac <__gethex>:
 8007eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eb0:	b085      	sub	sp, #20
 8007eb2:	468a      	mov	sl, r1
 8007eb4:	9302      	str	r3, [sp, #8]
 8007eb6:	680b      	ldr	r3, [r1, #0]
 8007eb8:	9001      	str	r0, [sp, #4]
 8007eba:	4690      	mov	r8, r2
 8007ebc:	1c9c      	adds	r4, r3, #2
 8007ebe:	46a1      	mov	r9, r4
 8007ec0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007ec4:	2830      	cmp	r0, #48	@ 0x30
 8007ec6:	d0fa      	beq.n	8007ebe <__gethex+0x12>
 8007ec8:	eba9 0303 	sub.w	r3, r9, r3
 8007ecc:	f1a3 0b02 	sub.w	fp, r3, #2
 8007ed0:	f7ff ffd6 	bl	8007e80 <__hexdig_fun>
 8007ed4:	4605      	mov	r5, r0
 8007ed6:	2800      	cmp	r0, #0
 8007ed8:	d168      	bne.n	8007fac <__gethex+0x100>
 8007eda:	49a0      	ldr	r1, [pc, #640]	@ (800815c <__gethex+0x2b0>)
 8007edc:	2201      	movs	r2, #1
 8007ede:	4648      	mov	r0, r9
 8007ee0:	f7ff feee 	bl	8007cc0 <strncmp>
 8007ee4:	4607      	mov	r7, r0
 8007ee6:	2800      	cmp	r0, #0
 8007ee8:	d167      	bne.n	8007fba <__gethex+0x10e>
 8007eea:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007eee:	4626      	mov	r6, r4
 8007ef0:	f7ff ffc6 	bl	8007e80 <__hexdig_fun>
 8007ef4:	2800      	cmp	r0, #0
 8007ef6:	d062      	beq.n	8007fbe <__gethex+0x112>
 8007ef8:	4623      	mov	r3, r4
 8007efa:	7818      	ldrb	r0, [r3, #0]
 8007efc:	2830      	cmp	r0, #48	@ 0x30
 8007efe:	4699      	mov	r9, r3
 8007f00:	f103 0301 	add.w	r3, r3, #1
 8007f04:	d0f9      	beq.n	8007efa <__gethex+0x4e>
 8007f06:	f7ff ffbb 	bl	8007e80 <__hexdig_fun>
 8007f0a:	fab0 f580 	clz	r5, r0
 8007f0e:	096d      	lsrs	r5, r5, #5
 8007f10:	f04f 0b01 	mov.w	fp, #1
 8007f14:	464a      	mov	r2, r9
 8007f16:	4616      	mov	r6, r2
 8007f18:	3201      	adds	r2, #1
 8007f1a:	7830      	ldrb	r0, [r6, #0]
 8007f1c:	f7ff ffb0 	bl	8007e80 <__hexdig_fun>
 8007f20:	2800      	cmp	r0, #0
 8007f22:	d1f8      	bne.n	8007f16 <__gethex+0x6a>
 8007f24:	498d      	ldr	r1, [pc, #564]	@ (800815c <__gethex+0x2b0>)
 8007f26:	2201      	movs	r2, #1
 8007f28:	4630      	mov	r0, r6
 8007f2a:	f7ff fec9 	bl	8007cc0 <strncmp>
 8007f2e:	2800      	cmp	r0, #0
 8007f30:	d13f      	bne.n	8007fb2 <__gethex+0x106>
 8007f32:	b944      	cbnz	r4, 8007f46 <__gethex+0x9a>
 8007f34:	1c74      	adds	r4, r6, #1
 8007f36:	4622      	mov	r2, r4
 8007f38:	4616      	mov	r6, r2
 8007f3a:	3201      	adds	r2, #1
 8007f3c:	7830      	ldrb	r0, [r6, #0]
 8007f3e:	f7ff ff9f 	bl	8007e80 <__hexdig_fun>
 8007f42:	2800      	cmp	r0, #0
 8007f44:	d1f8      	bne.n	8007f38 <__gethex+0x8c>
 8007f46:	1ba4      	subs	r4, r4, r6
 8007f48:	00a7      	lsls	r7, r4, #2
 8007f4a:	7833      	ldrb	r3, [r6, #0]
 8007f4c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007f50:	2b50      	cmp	r3, #80	@ 0x50
 8007f52:	d13e      	bne.n	8007fd2 <__gethex+0x126>
 8007f54:	7873      	ldrb	r3, [r6, #1]
 8007f56:	2b2b      	cmp	r3, #43	@ 0x2b
 8007f58:	d033      	beq.n	8007fc2 <__gethex+0x116>
 8007f5a:	2b2d      	cmp	r3, #45	@ 0x2d
 8007f5c:	d034      	beq.n	8007fc8 <__gethex+0x11c>
 8007f5e:	1c71      	adds	r1, r6, #1
 8007f60:	2400      	movs	r4, #0
 8007f62:	7808      	ldrb	r0, [r1, #0]
 8007f64:	f7ff ff8c 	bl	8007e80 <__hexdig_fun>
 8007f68:	1e43      	subs	r3, r0, #1
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	2b18      	cmp	r3, #24
 8007f6e:	d830      	bhi.n	8007fd2 <__gethex+0x126>
 8007f70:	f1a0 0210 	sub.w	r2, r0, #16
 8007f74:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007f78:	f7ff ff82 	bl	8007e80 <__hexdig_fun>
 8007f7c:	f100 3cff 	add.w	ip, r0, #4294967295
 8007f80:	fa5f fc8c 	uxtb.w	ip, ip
 8007f84:	f1bc 0f18 	cmp.w	ip, #24
 8007f88:	f04f 030a 	mov.w	r3, #10
 8007f8c:	d91e      	bls.n	8007fcc <__gethex+0x120>
 8007f8e:	b104      	cbz	r4, 8007f92 <__gethex+0xe6>
 8007f90:	4252      	negs	r2, r2
 8007f92:	4417      	add	r7, r2
 8007f94:	f8ca 1000 	str.w	r1, [sl]
 8007f98:	b1ed      	cbz	r5, 8007fd6 <__gethex+0x12a>
 8007f9a:	f1bb 0f00 	cmp.w	fp, #0
 8007f9e:	bf0c      	ite	eq
 8007fa0:	2506      	moveq	r5, #6
 8007fa2:	2500      	movne	r5, #0
 8007fa4:	4628      	mov	r0, r5
 8007fa6:	b005      	add	sp, #20
 8007fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fac:	2500      	movs	r5, #0
 8007fae:	462c      	mov	r4, r5
 8007fb0:	e7b0      	b.n	8007f14 <__gethex+0x68>
 8007fb2:	2c00      	cmp	r4, #0
 8007fb4:	d1c7      	bne.n	8007f46 <__gethex+0x9a>
 8007fb6:	4627      	mov	r7, r4
 8007fb8:	e7c7      	b.n	8007f4a <__gethex+0x9e>
 8007fba:	464e      	mov	r6, r9
 8007fbc:	462f      	mov	r7, r5
 8007fbe:	2501      	movs	r5, #1
 8007fc0:	e7c3      	b.n	8007f4a <__gethex+0x9e>
 8007fc2:	2400      	movs	r4, #0
 8007fc4:	1cb1      	adds	r1, r6, #2
 8007fc6:	e7cc      	b.n	8007f62 <__gethex+0xb6>
 8007fc8:	2401      	movs	r4, #1
 8007fca:	e7fb      	b.n	8007fc4 <__gethex+0x118>
 8007fcc:	fb03 0002 	mla	r0, r3, r2, r0
 8007fd0:	e7ce      	b.n	8007f70 <__gethex+0xc4>
 8007fd2:	4631      	mov	r1, r6
 8007fd4:	e7de      	b.n	8007f94 <__gethex+0xe8>
 8007fd6:	eba6 0309 	sub.w	r3, r6, r9
 8007fda:	3b01      	subs	r3, #1
 8007fdc:	4629      	mov	r1, r5
 8007fde:	2b07      	cmp	r3, #7
 8007fe0:	dc0a      	bgt.n	8007ff8 <__gethex+0x14c>
 8007fe2:	9801      	ldr	r0, [sp, #4]
 8007fe4:	f7fd ff74 	bl	8005ed0 <_Balloc>
 8007fe8:	4604      	mov	r4, r0
 8007fea:	b940      	cbnz	r0, 8007ffe <__gethex+0x152>
 8007fec:	4b5c      	ldr	r3, [pc, #368]	@ (8008160 <__gethex+0x2b4>)
 8007fee:	4602      	mov	r2, r0
 8007ff0:	21e4      	movs	r1, #228	@ 0xe4
 8007ff2:	485c      	ldr	r0, [pc, #368]	@ (8008164 <__gethex+0x2b8>)
 8007ff4:	f7ff fec0 	bl	8007d78 <__assert_func>
 8007ff8:	3101      	adds	r1, #1
 8007ffa:	105b      	asrs	r3, r3, #1
 8007ffc:	e7ef      	b.n	8007fde <__gethex+0x132>
 8007ffe:	f100 0a14 	add.w	sl, r0, #20
 8008002:	2300      	movs	r3, #0
 8008004:	4655      	mov	r5, sl
 8008006:	469b      	mov	fp, r3
 8008008:	45b1      	cmp	r9, r6
 800800a:	d337      	bcc.n	800807c <__gethex+0x1d0>
 800800c:	f845 bb04 	str.w	fp, [r5], #4
 8008010:	eba5 050a 	sub.w	r5, r5, sl
 8008014:	10ad      	asrs	r5, r5, #2
 8008016:	6125      	str	r5, [r4, #16]
 8008018:	4658      	mov	r0, fp
 800801a:	f7fe f84b 	bl	80060b4 <__hi0bits>
 800801e:	016d      	lsls	r5, r5, #5
 8008020:	f8d8 6000 	ldr.w	r6, [r8]
 8008024:	1a2d      	subs	r5, r5, r0
 8008026:	42b5      	cmp	r5, r6
 8008028:	dd54      	ble.n	80080d4 <__gethex+0x228>
 800802a:	1bad      	subs	r5, r5, r6
 800802c:	4629      	mov	r1, r5
 800802e:	4620      	mov	r0, r4
 8008030:	f7fe fbdf 	bl	80067f2 <__any_on>
 8008034:	4681      	mov	r9, r0
 8008036:	b178      	cbz	r0, 8008058 <__gethex+0x1ac>
 8008038:	1e6b      	subs	r3, r5, #1
 800803a:	1159      	asrs	r1, r3, #5
 800803c:	f003 021f 	and.w	r2, r3, #31
 8008040:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008044:	f04f 0901 	mov.w	r9, #1
 8008048:	fa09 f202 	lsl.w	r2, r9, r2
 800804c:	420a      	tst	r2, r1
 800804e:	d003      	beq.n	8008058 <__gethex+0x1ac>
 8008050:	454b      	cmp	r3, r9
 8008052:	dc36      	bgt.n	80080c2 <__gethex+0x216>
 8008054:	f04f 0902 	mov.w	r9, #2
 8008058:	4629      	mov	r1, r5
 800805a:	4620      	mov	r0, r4
 800805c:	f7ff febe 	bl	8007ddc <rshift>
 8008060:	442f      	add	r7, r5
 8008062:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008066:	42bb      	cmp	r3, r7
 8008068:	da42      	bge.n	80080f0 <__gethex+0x244>
 800806a:	9801      	ldr	r0, [sp, #4]
 800806c:	4621      	mov	r1, r4
 800806e:	f7fd ff6f 	bl	8005f50 <_Bfree>
 8008072:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008074:	2300      	movs	r3, #0
 8008076:	6013      	str	r3, [r2, #0]
 8008078:	25a3      	movs	r5, #163	@ 0xa3
 800807a:	e793      	b.n	8007fa4 <__gethex+0xf8>
 800807c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008080:	2a2e      	cmp	r2, #46	@ 0x2e
 8008082:	d012      	beq.n	80080aa <__gethex+0x1fe>
 8008084:	2b20      	cmp	r3, #32
 8008086:	d104      	bne.n	8008092 <__gethex+0x1e6>
 8008088:	f845 bb04 	str.w	fp, [r5], #4
 800808c:	f04f 0b00 	mov.w	fp, #0
 8008090:	465b      	mov	r3, fp
 8008092:	7830      	ldrb	r0, [r6, #0]
 8008094:	9303      	str	r3, [sp, #12]
 8008096:	f7ff fef3 	bl	8007e80 <__hexdig_fun>
 800809a:	9b03      	ldr	r3, [sp, #12]
 800809c:	f000 000f 	and.w	r0, r0, #15
 80080a0:	4098      	lsls	r0, r3
 80080a2:	ea4b 0b00 	orr.w	fp, fp, r0
 80080a6:	3304      	adds	r3, #4
 80080a8:	e7ae      	b.n	8008008 <__gethex+0x15c>
 80080aa:	45b1      	cmp	r9, r6
 80080ac:	d8ea      	bhi.n	8008084 <__gethex+0x1d8>
 80080ae:	492b      	ldr	r1, [pc, #172]	@ (800815c <__gethex+0x2b0>)
 80080b0:	9303      	str	r3, [sp, #12]
 80080b2:	2201      	movs	r2, #1
 80080b4:	4630      	mov	r0, r6
 80080b6:	f7ff fe03 	bl	8007cc0 <strncmp>
 80080ba:	9b03      	ldr	r3, [sp, #12]
 80080bc:	2800      	cmp	r0, #0
 80080be:	d1e1      	bne.n	8008084 <__gethex+0x1d8>
 80080c0:	e7a2      	b.n	8008008 <__gethex+0x15c>
 80080c2:	1ea9      	subs	r1, r5, #2
 80080c4:	4620      	mov	r0, r4
 80080c6:	f7fe fb94 	bl	80067f2 <__any_on>
 80080ca:	2800      	cmp	r0, #0
 80080cc:	d0c2      	beq.n	8008054 <__gethex+0x1a8>
 80080ce:	f04f 0903 	mov.w	r9, #3
 80080d2:	e7c1      	b.n	8008058 <__gethex+0x1ac>
 80080d4:	da09      	bge.n	80080ea <__gethex+0x23e>
 80080d6:	1b75      	subs	r5, r6, r5
 80080d8:	4621      	mov	r1, r4
 80080da:	9801      	ldr	r0, [sp, #4]
 80080dc:	462a      	mov	r2, r5
 80080de:	f7fe f94f 	bl	8006380 <__lshift>
 80080e2:	1b7f      	subs	r7, r7, r5
 80080e4:	4604      	mov	r4, r0
 80080e6:	f100 0a14 	add.w	sl, r0, #20
 80080ea:	f04f 0900 	mov.w	r9, #0
 80080ee:	e7b8      	b.n	8008062 <__gethex+0x1b6>
 80080f0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80080f4:	42bd      	cmp	r5, r7
 80080f6:	dd6f      	ble.n	80081d8 <__gethex+0x32c>
 80080f8:	1bed      	subs	r5, r5, r7
 80080fa:	42ae      	cmp	r6, r5
 80080fc:	dc34      	bgt.n	8008168 <__gethex+0x2bc>
 80080fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008102:	2b02      	cmp	r3, #2
 8008104:	d022      	beq.n	800814c <__gethex+0x2a0>
 8008106:	2b03      	cmp	r3, #3
 8008108:	d024      	beq.n	8008154 <__gethex+0x2a8>
 800810a:	2b01      	cmp	r3, #1
 800810c:	d115      	bne.n	800813a <__gethex+0x28e>
 800810e:	42ae      	cmp	r6, r5
 8008110:	d113      	bne.n	800813a <__gethex+0x28e>
 8008112:	2e01      	cmp	r6, #1
 8008114:	d10b      	bne.n	800812e <__gethex+0x282>
 8008116:	9a02      	ldr	r2, [sp, #8]
 8008118:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800811c:	6013      	str	r3, [r2, #0]
 800811e:	2301      	movs	r3, #1
 8008120:	6123      	str	r3, [r4, #16]
 8008122:	f8ca 3000 	str.w	r3, [sl]
 8008126:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008128:	2562      	movs	r5, #98	@ 0x62
 800812a:	601c      	str	r4, [r3, #0]
 800812c:	e73a      	b.n	8007fa4 <__gethex+0xf8>
 800812e:	1e71      	subs	r1, r6, #1
 8008130:	4620      	mov	r0, r4
 8008132:	f7fe fb5e 	bl	80067f2 <__any_on>
 8008136:	2800      	cmp	r0, #0
 8008138:	d1ed      	bne.n	8008116 <__gethex+0x26a>
 800813a:	9801      	ldr	r0, [sp, #4]
 800813c:	4621      	mov	r1, r4
 800813e:	f7fd ff07 	bl	8005f50 <_Bfree>
 8008142:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008144:	2300      	movs	r3, #0
 8008146:	6013      	str	r3, [r2, #0]
 8008148:	2550      	movs	r5, #80	@ 0x50
 800814a:	e72b      	b.n	8007fa4 <__gethex+0xf8>
 800814c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800814e:	2b00      	cmp	r3, #0
 8008150:	d1f3      	bne.n	800813a <__gethex+0x28e>
 8008152:	e7e0      	b.n	8008116 <__gethex+0x26a>
 8008154:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008156:	2b00      	cmp	r3, #0
 8008158:	d1dd      	bne.n	8008116 <__gethex+0x26a>
 800815a:	e7ee      	b.n	800813a <__gethex+0x28e>
 800815c:	08008898 	.word	0x08008898
 8008160:	0800872d 	.word	0x0800872d
 8008164:	08008a46 	.word	0x08008a46
 8008168:	1e6f      	subs	r7, r5, #1
 800816a:	f1b9 0f00 	cmp.w	r9, #0
 800816e:	d130      	bne.n	80081d2 <__gethex+0x326>
 8008170:	b127      	cbz	r7, 800817c <__gethex+0x2d0>
 8008172:	4639      	mov	r1, r7
 8008174:	4620      	mov	r0, r4
 8008176:	f7fe fb3c 	bl	80067f2 <__any_on>
 800817a:	4681      	mov	r9, r0
 800817c:	117a      	asrs	r2, r7, #5
 800817e:	2301      	movs	r3, #1
 8008180:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008184:	f007 071f 	and.w	r7, r7, #31
 8008188:	40bb      	lsls	r3, r7
 800818a:	4213      	tst	r3, r2
 800818c:	4629      	mov	r1, r5
 800818e:	4620      	mov	r0, r4
 8008190:	bf18      	it	ne
 8008192:	f049 0902 	orrne.w	r9, r9, #2
 8008196:	f7ff fe21 	bl	8007ddc <rshift>
 800819a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800819e:	1b76      	subs	r6, r6, r5
 80081a0:	2502      	movs	r5, #2
 80081a2:	f1b9 0f00 	cmp.w	r9, #0
 80081a6:	d047      	beq.n	8008238 <__gethex+0x38c>
 80081a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80081ac:	2b02      	cmp	r3, #2
 80081ae:	d015      	beq.n	80081dc <__gethex+0x330>
 80081b0:	2b03      	cmp	r3, #3
 80081b2:	d017      	beq.n	80081e4 <__gethex+0x338>
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d109      	bne.n	80081cc <__gethex+0x320>
 80081b8:	f019 0f02 	tst.w	r9, #2
 80081bc:	d006      	beq.n	80081cc <__gethex+0x320>
 80081be:	f8da 3000 	ldr.w	r3, [sl]
 80081c2:	ea49 0903 	orr.w	r9, r9, r3
 80081c6:	f019 0f01 	tst.w	r9, #1
 80081ca:	d10e      	bne.n	80081ea <__gethex+0x33e>
 80081cc:	f045 0510 	orr.w	r5, r5, #16
 80081d0:	e032      	b.n	8008238 <__gethex+0x38c>
 80081d2:	f04f 0901 	mov.w	r9, #1
 80081d6:	e7d1      	b.n	800817c <__gethex+0x2d0>
 80081d8:	2501      	movs	r5, #1
 80081da:	e7e2      	b.n	80081a2 <__gethex+0x2f6>
 80081dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081de:	f1c3 0301 	rsb	r3, r3, #1
 80081e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80081e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d0f0      	beq.n	80081cc <__gethex+0x320>
 80081ea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80081ee:	f104 0314 	add.w	r3, r4, #20
 80081f2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80081f6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80081fa:	f04f 0c00 	mov.w	ip, #0
 80081fe:	4618      	mov	r0, r3
 8008200:	f853 2b04 	ldr.w	r2, [r3], #4
 8008204:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008208:	d01b      	beq.n	8008242 <__gethex+0x396>
 800820a:	3201      	adds	r2, #1
 800820c:	6002      	str	r2, [r0, #0]
 800820e:	2d02      	cmp	r5, #2
 8008210:	f104 0314 	add.w	r3, r4, #20
 8008214:	d13c      	bne.n	8008290 <__gethex+0x3e4>
 8008216:	f8d8 2000 	ldr.w	r2, [r8]
 800821a:	3a01      	subs	r2, #1
 800821c:	42b2      	cmp	r2, r6
 800821e:	d109      	bne.n	8008234 <__gethex+0x388>
 8008220:	1171      	asrs	r1, r6, #5
 8008222:	2201      	movs	r2, #1
 8008224:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008228:	f006 061f 	and.w	r6, r6, #31
 800822c:	fa02 f606 	lsl.w	r6, r2, r6
 8008230:	421e      	tst	r6, r3
 8008232:	d13a      	bne.n	80082aa <__gethex+0x3fe>
 8008234:	f045 0520 	orr.w	r5, r5, #32
 8008238:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800823a:	601c      	str	r4, [r3, #0]
 800823c:	9b02      	ldr	r3, [sp, #8]
 800823e:	601f      	str	r7, [r3, #0]
 8008240:	e6b0      	b.n	8007fa4 <__gethex+0xf8>
 8008242:	4299      	cmp	r1, r3
 8008244:	f843 cc04 	str.w	ip, [r3, #-4]
 8008248:	d8d9      	bhi.n	80081fe <__gethex+0x352>
 800824a:	68a3      	ldr	r3, [r4, #8]
 800824c:	459b      	cmp	fp, r3
 800824e:	db17      	blt.n	8008280 <__gethex+0x3d4>
 8008250:	6861      	ldr	r1, [r4, #4]
 8008252:	9801      	ldr	r0, [sp, #4]
 8008254:	3101      	adds	r1, #1
 8008256:	f7fd fe3b 	bl	8005ed0 <_Balloc>
 800825a:	4681      	mov	r9, r0
 800825c:	b918      	cbnz	r0, 8008266 <__gethex+0x3ba>
 800825e:	4b1a      	ldr	r3, [pc, #104]	@ (80082c8 <__gethex+0x41c>)
 8008260:	4602      	mov	r2, r0
 8008262:	2184      	movs	r1, #132	@ 0x84
 8008264:	e6c5      	b.n	8007ff2 <__gethex+0x146>
 8008266:	6922      	ldr	r2, [r4, #16]
 8008268:	3202      	adds	r2, #2
 800826a:	f104 010c 	add.w	r1, r4, #12
 800826e:	0092      	lsls	r2, r2, #2
 8008270:	300c      	adds	r0, #12
 8008272:	f7ff fd69 	bl	8007d48 <memcpy>
 8008276:	4621      	mov	r1, r4
 8008278:	9801      	ldr	r0, [sp, #4]
 800827a:	f7fd fe69 	bl	8005f50 <_Bfree>
 800827e:	464c      	mov	r4, r9
 8008280:	6923      	ldr	r3, [r4, #16]
 8008282:	1c5a      	adds	r2, r3, #1
 8008284:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008288:	6122      	str	r2, [r4, #16]
 800828a:	2201      	movs	r2, #1
 800828c:	615a      	str	r2, [r3, #20]
 800828e:	e7be      	b.n	800820e <__gethex+0x362>
 8008290:	6922      	ldr	r2, [r4, #16]
 8008292:	455a      	cmp	r2, fp
 8008294:	dd0b      	ble.n	80082ae <__gethex+0x402>
 8008296:	2101      	movs	r1, #1
 8008298:	4620      	mov	r0, r4
 800829a:	f7ff fd9f 	bl	8007ddc <rshift>
 800829e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80082a2:	3701      	adds	r7, #1
 80082a4:	42bb      	cmp	r3, r7
 80082a6:	f6ff aee0 	blt.w	800806a <__gethex+0x1be>
 80082aa:	2501      	movs	r5, #1
 80082ac:	e7c2      	b.n	8008234 <__gethex+0x388>
 80082ae:	f016 061f 	ands.w	r6, r6, #31
 80082b2:	d0fa      	beq.n	80082aa <__gethex+0x3fe>
 80082b4:	4453      	add	r3, sl
 80082b6:	f1c6 0620 	rsb	r6, r6, #32
 80082ba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80082be:	f7fd fef9 	bl	80060b4 <__hi0bits>
 80082c2:	42b0      	cmp	r0, r6
 80082c4:	dbe7      	blt.n	8008296 <__gethex+0x3ea>
 80082c6:	e7f0      	b.n	80082aa <__gethex+0x3fe>
 80082c8:	0800872d 	.word	0x0800872d

080082cc <L_shift>:
 80082cc:	f1c2 0208 	rsb	r2, r2, #8
 80082d0:	0092      	lsls	r2, r2, #2
 80082d2:	b570      	push	{r4, r5, r6, lr}
 80082d4:	f1c2 0620 	rsb	r6, r2, #32
 80082d8:	6843      	ldr	r3, [r0, #4]
 80082da:	6804      	ldr	r4, [r0, #0]
 80082dc:	fa03 f506 	lsl.w	r5, r3, r6
 80082e0:	432c      	orrs	r4, r5
 80082e2:	40d3      	lsrs	r3, r2
 80082e4:	6004      	str	r4, [r0, #0]
 80082e6:	f840 3f04 	str.w	r3, [r0, #4]!
 80082ea:	4288      	cmp	r0, r1
 80082ec:	d3f4      	bcc.n	80082d8 <L_shift+0xc>
 80082ee:	bd70      	pop	{r4, r5, r6, pc}

080082f0 <__match>:
 80082f0:	b530      	push	{r4, r5, lr}
 80082f2:	6803      	ldr	r3, [r0, #0]
 80082f4:	3301      	adds	r3, #1
 80082f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082fa:	b914      	cbnz	r4, 8008302 <__match+0x12>
 80082fc:	6003      	str	r3, [r0, #0]
 80082fe:	2001      	movs	r0, #1
 8008300:	bd30      	pop	{r4, r5, pc}
 8008302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008306:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800830a:	2d19      	cmp	r5, #25
 800830c:	bf98      	it	ls
 800830e:	3220      	addls	r2, #32
 8008310:	42a2      	cmp	r2, r4
 8008312:	d0f0      	beq.n	80082f6 <__match+0x6>
 8008314:	2000      	movs	r0, #0
 8008316:	e7f3      	b.n	8008300 <__match+0x10>

08008318 <__hexnan>:
 8008318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800831c:	680b      	ldr	r3, [r1, #0]
 800831e:	6801      	ldr	r1, [r0, #0]
 8008320:	115e      	asrs	r6, r3, #5
 8008322:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008326:	f013 031f 	ands.w	r3, r3, #31
 800832a:	b087      	sub	sp, #28
 800832c:	bf18      	it	ne
 800832e:	3604      	addne	r6, #4
 8008330:	2500      	movs	r5, #0
 8008332:	1f37      	subs	r7, r6, #4
 8008334:	4682      	mov	sl, r0
 8008336:	4690      	mov	r8, r2
 8008338:	9301      	str	r3, [sp, #4]
 800833a:	f846 5c04 	str.w	r5, [r6, #-4]
 800833e:	46b9      	mov	r9, r7
 8008340:	463c      	mov	r4, r7
 8008342:	9502      	str	r5, [sp, #8]
 8008344:	46ab      	mov	fp, r5
 8008346:	784a      	ldrb	r2, [r1, #1]
 8008348:	1c4b      	adds	r3, r1, #1
 800834a:	9303      	str	r3, [sp, #12]
 800834c:	b342      	cbz	r2, 80083a0 <__hexnan+0x88>
 800834e:	4610      	mov	r0, r2
 8008350:	9105      	str	r1, [sp, #20]
 8008352:	9204      	str	r2, [sp, #16]
 8008354:	f7ff fd94 	bl	8007e80 <__hexdig_fun>
 8008358:	2800      	cmp	r0, #0
 800835a:	d151      	bne.n	8008400 <__hexnan+0xe8>
 800835c:	9a04      	ldr	r2, [sp, #16]
 800835e:	9905      	ldr	r1, [sp, #20]
 8008360:	2a20      	cmp	r2, #32
 8008362:	d818      	bhi.n	8008396 <__hexnan+0x7e>
 8008364:	9b02      	ldr	r3, [sp, #8]
 8008366:	459b      	cmp	fp, r3
 8008368:	dd13      	ble.n	8008392 <__hexnan+0x7a>
 800836a:	454c      	cmp	r4, r9
 800836c:	d206      	bcs.n	800837c <__hexnan+0x64>
 800836e:	2d07      	cmp	r5, #7
 8008370:	dc04      	bgt.n	800837c <__hexnan+0x64>
 8008372:	462a      	mov	r2, r5
 8008374:	4649      	mov	r1, r9
 8008376:	4620      	mov	r0, r4
 8008378:	f7ff ffa8 	bl	80082cc <L_shift>
 800837c:	4544      	cmp	r4, r8
 800837e:	d952      	bls.n	8008426 <__hexnan+0x10e>
 8008380:	2300      	movs	r3, #0
 8008382:	f1a4 0904 	sub.w	r9, r4, #4
 8008386:	f844 3c04 	str.w	r3, [r4, #-4]
 800838a:	f8cd b008 	str.w	fp, [sp, #8]
 800838e:	464c      	mov	r4, r9
 8008390:	461d      	mov	r5, r3
 8008392:	9903      	ldr	r1, [sp, #12]
 8008394:	e7d7      	b.n	8008346 <__hexnan+0x2e>
 8008396:	2a29      	cmp	r2, #41	@ 0x29
 8008398:	d157      	bne.n	800844a <__hexnan+0x132>
 800839a:	3102      	adds	r1, #2
 800839c:	f8ca 1000 	str.w	r1, [sl]
 80083a0:	f1bb 0f00 	cmp.w	fp, #0
 80083a4:	d051      	beq.n	800844a <__hexnan+0x132>
 80083a6:	454c      	cmp	r4, r9
 80083a8:	d206      	bcs.n	80083b8 <__hexnan+0xa0>
 80083aa:	2d07      	cmp	r5, #7
 80083ac:	dc04      	bgt.n	80083b8 <__hexnan+0xa0>
 80083ae:	462a      	mov	r2, r5
 80083b0:	4649      	mov	r1, r9
 80083b2:	4620      	mov	r0, r4
 80083b4:	f7ff ff8a 	bl	80082cc <L_shift>
 80083b8:	4544      	cmp	r4, r8
 80083ba:	d936      	bls.n	800842a <__hexnan+0x112>
 80083bc:	f1a8 0204 	sub.w	r2, r8, #4
 80083c0:	4623      	mov	r3, r4
 80083c2:	f853 1b04 	ldr.w	r1, [r3], #4
 80083c6:	f842 1f04 	str.w	r1, [r2, #4]!
 80083ca:	429f      	cmp	r7, r3
 80083cc:	d2f9      	bcs.n	80083c2 <__hexnan+0xaa>
 80083ce:	1b3b      	subs	r3, r7, r4
 80083d0:	f023 0303 	bic.w	r3, r3, #3
 80083d4:	3304      	adds	r3, #4
 80083d6:	3401      	adds	r4, #1
 80083d8:	3e03      	subs	r6, #3
 80083da:	42b4      	cmp	r4, r6
 80083dc:	bf88      	it	hi
 80083de:	2304      	movhi	r3, #4
 80083e0:	4443      	add	r3, r8
 80083e2:	2200      	movs	r2, #0
 80083e4:	f843 2b04 	str.w	r2, [r3], #4
 80083e8:	429f      	cmp	r7, r3
 80083ea:	d2fb      	bcs.n	80083e4 <__hexnan+0xcc>
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	b91b      	cbnz	r3, 80083f8 <__hexnan+0xe0>
 80083f0:	4547      	cmp	r7, r8
 80083f2:	d128      	bne.n	8008446 <__hexnan+0x12e>
 80083f4:	2301      	movs	r3, #1
 80083f6:	603b      	str	r3, [r7, #0]
 80083f8:	2005      	movs	r0, #5
 80083fa:	b007      	add	sp, #28
 80083fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008400:	3501      	adds	r5, #1
 8008402:	2d08      	cmp	r5, #8
 8008404:	f10b 0b01 	add.w	fp, fp, #1
 8008408:	dd06      	ble.n	8008418 <__hexnan+0x100>
 800840a:	4544      	cmp	r4, r8
 800840c:	d9c1      	bls.n	8008392 <__hexnan+0x7a>
 800840e:	2300      	movs	r3, #0
 8008410:	f844 3c04 	str.w	r3, [r4, #-4]
 8008414:	2501      	movs	r5, #1
 8008416:	3c04      	subs	r4, #4
 8008418:	6822      	ldr	r2, [r4, #0]
 800841a:	f000 000f 	and.w	r0, r0, #15
 800841e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008422:	6020      	str	r0, [r4, #0]
 8008424:	e7b5      	b.n	8008392 <__hexnan+0x7a>
 8008426:	2508      	movs	r5, #8
 8008428:	e7b3      	b.n	8008392 <__hexnan+0x7a>
 800842a:	9b01      	ldr	r3, [sp, #4]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d0dd      	beq.n	80083ec <__hexnan+0xd4>
 8008430:	f1c3 0320 	rsb	r3, r3, #32
 8008434:	f04f 32ff 	mov.w	r2, #4294967295
 8008438:	40da      	lsrs	r2, r3
 800843a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800843e:	4013      	ands	r3, r2
 8008440:	f846 3c04 	str.w	r3, [r6, #-4]
 8008444:	e7d2      	b.n	80083ec <__hexnan+0xd4>
 8008446:	3f04      	subs	r7, #4
 8008448:	e7d0      	b.n	80083ec <__hexnan+0xd4>
 800844a:	2004      	movs	r0, #4
 800844c:	e7d5      	b.n	80083fa <__hexnan+0xe2>

0800844e <__ascii_mbtowc>:
 800844e:	b082      	sub	sp, #8
 8008450:	b901      	cbnz	r1, 8008454 <__ascii_mbtowc+0x6>
 8008452:	a901      	add	r1, sp, #4
 8008454:	b142      	cbz	r2, 8008468 <__ascii_mbtowc+0x1a>
 8008456:	b14b      	cbz	r3, 800846c <__ascii_mbtowc+0x1e>
 8008458:	7813      	ldrb	r3, [r2, #0]
 800845a:	600b      	str	r3, [r1, #0]
 800845c:	7812      	ldrb	r2, [r2, #0]
 800845e:	1e10      	subs	r0, r2, #0
 8008460:	bf18      	it	ne
 8008462:	2001      	movne	r0, #1
 8008464:	b002      	add	sp, #8
 8008466:	4770      	bx	lr
 8008468:	4610      	mov	r0, r2
 800846a:	e7fb      	b.n	8008464 <__ascii_mbtowc+0x16>
 800846c:	f06f 0001 	mvn.w	r0, #1
 8008470:	e7f8      	b.n	8008464 <__ascii_mbtowc+0x16>

08008472 <_realloc_r>:
 8008472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008476:	4680      	mov	r8, r0
 8008478:	4615      	mov	r5, r2
 800847a:	460c      	mov	r4, r1
 800847c:	b921      	cbnz	r1, 8008488 <_realloc_r+0x16>
 800847e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008482:	4611      	mov	r1, r2
 8008484:	f7fd bc98 	b.w	8005db8 <_malloc_r>
 8008488:	b92a      	cbnz	r2, 8008496 <_realloc_r+0x24>
 800848a:	f7fd fc21 	bl	8005cd0 <_free_r>
 800848e:	2400      	movs	r4, #0
 8008490:	4620      	mov	r0, r4
 8008492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008496:	f000 f840 	bl	800851a <_malloc_usable_size_r>
 800849a:	4285      	cmp	r5, r0
 800849c:	4606      	mov	r6, r0
 800849e:	d802      	bhi.n	80084a6 <_realloc_r+0x34>
 80084a0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80084a4:	d8f4      	bhi.n	8008490 <_realloc_r+0x1e>
 80084a6:	4629      	mov	r1, r5
 80084a8:	4640      	mov	r0, r8
 80084aa:	f7fd fc85 	bl	8005db8 <_malloc_r>
 80084ae:	4607      	mov	r7, r0
 80084b0:	2800      	cmp	r0, #0
 80084b2:	d0ec      	beq.n	800848e <_realloc_r+0x1c>
 80084b4:	42b5      	cmp	r5, r6
 80084b6:	462a      	mov	r2, r5
 80084b8:	4621      	mov	r1, r4
 80084ba:	bf28      	it	cs
 80084bc:	4632      	movcs	r2, r6
 80084be:	f7ff fc43 	bl	8007d48 <memcpy>
 80084c2:	4621      	mov	r1, r4
 80084c4:	4640      	mov	r0, r8
 80084c6:	f7fd fc03 	bl	8005cd0 <_free_r>
 80084ca:	463c      	mov	r4, r7
 80084cc:	e7e0      	b.n	8008490 <_realloc_r+0x1e>

080084ce <__ascii_wctomb>:
 80084ce:	4603      	mov	r3, r0
 80084d0:	4608      	mov	r0, r1
 80084d2:	b141      	cbz	r1, 80084e6 <__ascii_wctomb+0x18>
 80084d4:	2aff      	cmp	r2, #255	@ 0xff
 80084d6:	d904      	bls.n	80084e2 <__ascii_wctomb+0x14>
 80084d8:	228a      	movs	r2, #138	@ 0x8a
 80084da:	601a      	str	r2, [r3, #0]
 80084dc:	f04f 30ff 	mov.w	r0, #4294967295
 80084e0:	4770      	bx	lr
 80084e2:	700a      	strb	r2, [r1, #0]
 80084e4:	2001      	movs	r0, #1
 80084e6:	4770      	bx	lr

080084e8 <fiprintf>:
 80084e8:	b40e      	push	{r1, r2, r3}
 80084ea:	b503      	push	{r0, r1, lr}
 80084ec:	4601      	mov	r1, r0
 80084ee:	ab03      	add	r3, sp, #12
 80084f0:	4805      	ldr	r0, [pc, #20]	@ (8008508 <fiprintf+0x20>)
 80084f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80084f6:	6800      	ldr	r0, [r0, #0]
 80084f8:	9301      	str	r3, [sp, #4]
 80084fa:	f7ff f9a1 	bl	8007840 <_vfiprintf_r>
 80084fe:	b002      	add	sp, #8
 8008500:	f85d eb04 	ldr.w	lr, [sp], #4
 8008504:	b003      	add	sp, #12
 8008506:	4770      	bx	lr
 8008508:	20000030 	.word	0x20000030

0800850c <abort>:
 800850c:	b508      	push	{r3, lr}
 800850e:	2006      	movs	r0, #6
 8008510:	f000 f834 	bl	800857c <raise>
 8008514:	2001      	movs	r0, #1
 8008516:	f7f8 ff76 	bl	8001406 <_exit>

0800851a <_malloc_usable_size_r>:
 800851a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800851e:	1f18      	subs	r0, r3, #4
 8008520:	2b00      	cmp	r3, #0
 8008522:	bfbc      	itt	lt
 8008524:	580b      	ldrlt	r3, [r1, r0]
 8008526:	18c0      	addlt	r0, r0, r3
 8008528:	4770      	bx	lr

0800852a <_raise_r>:
 800852a:	291f      	cmp	r1, #31
 800852c:	b538      	push	{r3, r4, r5, lr}
 800852e:	4605      	mov	r5, r0
 8008530:	460c      	mov	r4, r1
 8008532:	d904      	bls.n	800853e <_raise_r+0x14>
 8008534:	2316      	movs	r3, #22
 8008536:	6003      	str	r3, [r0, #0]
 8008538:	f04f 30ff 	mov.w	r0, #4294967295
 800853c:	bd38      	pop	{r3, r4, r5, pc}
 800853e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008540:	b112      	cbz	r2, 8008548 <_raise_r+0x1e>
 8008542:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008546:	b94b      	cbnz	r3, 800855c <_raise_r+0x32>
 8008548:	4628      	mov	r0, r5
 800854a:	f000 f831 	bl	80085b0 <_getpid_r>
 800854e:	4622      	mov	r2, r4
 8008550:	4601      	mov	r1, r0
 8008552:	4628      	mov	r0, r5
 8008554:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008558:	f000 b818 	b.w	800858c <_kill_r>
 800855c:	2b01      	cmp	r3, #1
 800855e:	d00a      	beq.n	8008576 <_raise_r+0x4c>
 8008560:	1c59      	adds	r1, r3, #1
 8008562:	d103      	bne.n	800856c <_raise_r+0x42>
 8008564:	2316      	movs	r3, #22
 8008566:	6003      	str	r3, [r0, #0]
 8008568:	2001      	movs	r0, #1
 800856a:	e7e7      	b.n	800853c <_raise_r+0x12>
 800856c:	2100      	movs	r1, #0
 800856e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008572:	4620      	mov	r0, r4
 8008574:	4798      	blx	r3
 8008576:	2000      	movs	r0, #0
 8008578:	e7e0      	b.n	800853c <_raise_r+0x12>
	...

0800857c <raise>:
 800857c:	4b02      	ldr	r3, [pc, #8]	@ (8008588 <raise+0xc>)
 800857e:	4601      	mov	r1, r0
 8008580:	6818      	ldr	r0, [r3, #0]
 8008582:	f7ff bfd2 	b.w	800852a <_raise_r>
 8008586:	bf00      	nop
 8008588:	20000030 	.word	0x20000030

0800858c <_kill_r>:
 800858c:	b538      	push	{r3, r4, r5, lr}
 800858e:	4d07      	ldr	r5, [pc, #28]	@ (80085ac <_kill_r+0x20>)
 8008590:	2300      	movs	r3, #0
 8008592:	4604      	mov	r4, r0
 8008594:	4608      	mov	r0, r1
 8008596:	4611      	mov	r1, r2
 8008598:	602b      	str	r3, [r5, #0]
 800859a:	f7f8 ff24 	bl	80013e6 <_kill>
 800859e:	1c43      	adds	r3, r0, #1
 80085a0:	d102      	bne.n	80085a8 <_kill_r+0x1c>
 80085a2:	682b      	ldr	r3, [r5, #0]
 80085a4:	b103      	cbz	r3, 80085a8 <_kill_r+0x1c>
 80085a6:	6023      	str	r3, [r4, #0]
 80085a8:	bd38      	pop	{r3, r4, r5, pc}
 80085aa:	bf00      	nop
 80085ac:	200003d4 	.word	0x200003d4

080085b0 <_getpid_r>:
 80085b0:	f7f8 bf11 	b.w	80013d6 <_getpid>

080085b4 <_init>:
 80085b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085b6:	bf00      	nop
 80085b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ba:	bc08      	pop	{r3}
 80085bc:	469e      	mov	lr, r3
 80085be:	4770      	bx	lr

080085c0 <_fini>:
 80085c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085c2:	bf00      	nop
 80085c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085c6:	bc08      	pop	{r3}
 80085c8:	469e      	mov	lr, r3
 80085ca:	4770      	bx	lr
